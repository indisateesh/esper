  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser implements EsperEPL2GrammarParser_Const {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "DATAFLOW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_DEF", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_COAL", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "CREATE_CTX_NESTED", "CREATE_CTX_PATTERN", "CREATE_DATAFLOW", "GOP", "GOPPARAM", "GOPPARAMITM", "GOPOUT", "GOPOUTITM", "GOPOUTTYP", "GOPCFG", "GOPCFGITM", "GOPCFGEPL", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "JSON_OBJECT", "JSON_ARRAY", "JSON_FIELD", "LBRACK", "RBRACK", "IDENT", "LPAREN", "RPAREN", "COLON", "LCURLY", "RCURLY", "GOES", "ATCHAR", "COMMA", "DOT", "EQUALS", "STAR", "FOLLOWED_BY", "LT", "GT", "QUESTION", "BOR", "PLUS", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int FLOAT_SUFFIX=385;
    public static final int NUMERIC_PARAM_LIST=131;
    public static final int GOPCFGITM=297;
    public static final int OUTERJOIN_EXPR=175;
    public static final int CREATE_COL_TYPE_LIST=256;
    public static final int MERGE_INS=275;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int CREATE_CTX_FIXED=281;
    public static final int RPAREN=327;
    public static final int LNOT=363;
    public static final int INC=367;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=343;
    public static final int STREAM_EXPR=174;
    public static final int MATCHES=116;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=140;
    public static final int REGEXP=9;
    public static final int GOES=331;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=134;
    public static final int MATCH_UNTIL_RANGE_CLOSED=254;
    public static final int RBRACK=324;
    public static final int GE=350;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=139;
    public static final int EVENT_FILTER_NOT_IN=150;
    public static final int NUM_DOUBLE=307;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=221;
    public static final int MEDIAN=23;
    public static final int GROUP=44;
    public static final int SUBSELECT_GROUP_EXPR=227;
    public static final int YEAR_PART=207;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=358;
    public static final int EXPRCOL=198;
    public static final int SL_COMMENT=378;
    public static final int NULL_TYPE=306;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=252;
    public static final int GT=339;
    public static final int LAND=375;
    public static final int EVENT_PROP_EXPR=183;
    public static final int LBRACK=323;
    public static final int VIEW_EXPR=156;
    public static final int MERGE_UPD=274;
    public static final int CREATE_SCHEMA_DEF=270;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=141;
    public static final int ON_MERGE_EXPR=244;
    public static final int TIMEPERIOD_SEC=100;
    public static final int ON_SELECT_EXPR=242;
    public static final int TICKED_STRING_LITERAL=359;
    public static final int SUM=18;
    public static final int JSON_ARRAY=321;
    public static final int HexDigit=383;
    public static final int AT=86;
    public static final int AS=17;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int LEFT=38;
    public static final int AVG=19;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int PARTITIONITEM=299;
    public static final int DATABASE_JOIN_EXPR=158;
    public static final int IDENT=325;
    public static final int PLUS=342;
    public static final int EVENT_PROP_INDEXED=186;
    public static final int CREATE_SCHEMA_EXPR=268;
    public static final int CREATE_INDEX_EXPR=236;
    public static final int ACCESS_AGG=265;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int RIGHT_OUTERJOIN_EXPR=178;
    public static final int BY=43;
    public static final int MATCHREC_DEFINE=316;
    public static final int MERGE=121;
    public static final int MERGE_UNM=272;
    public static final int FOLLOWMAX_END=357;
    public static final int LEFT_OUTERJOIN_EXPR=177;
    public static final int GROUP_BY_EXPR=180;
    public static final int EPL_EXPR=308;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int GOPOUTITM=294;
    public static final int MINUS=352;
    public static final int INDEXCOL=199;
    public static final int SEMI=376;
    public static final int STAR_ASSIGN=370;
    public static final int FIRST_AGGREG=262;
    public static final int COLON=328;
    public static final int PREVIOUSTAIL=70;
    public static final int VALUE_NULL=108;
    public static final int NOT_IN_SET=215;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=187;
    public static final int NOT_IN_SUBSELECT_EXPR=230;
    public static final int GUARD_EXPR=154;
    public static final int RCURLY=330;
    public static final int EXISTS_SUBSELECT_EXPR=228;
    public static final int WEEK_PART=209;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=171;
    public static final int LW=76;
    public static final int LT=338;
    public static final int CREATE_CTX=280;
    public static final int ORDER_BY_EXPR=181;
    public static final int NEW_ITEM=277;
    public static final int MOD_ASSIGN=371;
    public static final int IN_SUBSELECT_QUERY_EXPR=231;
    public static final int JSON_FIELD=322;
    public static final int COUNT=26;
    public static final int EQUALS=335;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int MATCHREC_AFTER_SKIP=314;
    public static final int ESCAPE=10;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=169;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=167;
    public static final int EVENT_FILTER_BETWEEN=151;
    public static final int COALESCE=22;
    public static final int FLOAT_TYPE=302;
    public static final int ANNOTATION_VALUE=261;
    public static final int CLASS_IDENT=153;
    public static final int MATCHREC_PATTERN_ALTER=312;
    public static final int CREATE_WINDOW_EXPR=237;
    public static final int PROPERTY_SELECTION_STREAM=143;
    public static final int ON_DELETE_EXPR=241;
    public static final int ON=41;
    public static final int DELETE=81;
    public static final int INT_TYPE=300;
    public static final int EVAL_BITWISE_EXPR=161;
    public static final int EVERY_EXPR=14;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int STRING_TYPE=304;
    public static final int MATCHREC_DEFINE_ITEM=317;
    public static final int STDDEV=24;
    public static final int OUTPUT=50;
    public static final int WEEKDAY_OPERATOR=233;
    public static final int WHERE=16;
    public static final int DEC=369;
    public static final int GOPOUT=293;
    public static final int BXOR_ASSIGN=372;
    public static final int SNAPSHOT=82;
    public static final int AFTER_LIMIT_EXPR=192;
    public static final int MAX=20;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int CONTEXT=126;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CREATE_CTX_CAT=284;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=188;
    public static final int BOR_ASSIGN=373;
    public static final int COMMA=333;
    public static final int PARTITION=115;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=195;
    public static final int SOME=49;
    public static final int MATCHREC_MEASURE_ITEM=319;
    public static final int EQUAL=362;
    public static final int EVENT_FILTER_NOT_BETWEEN=152;
    public static final int IN_RANGE=224;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int PROPERTY_WILDCARD_SELECT=144;
    public static final int INSERTINTO_EXPR=197;
    public static final int UNIDIRECTIONAL=63;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=255;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int NOT_BETWEEN=216;
    public static final int EVAL_OR_EXPR=163;
    public static final int MATCHREC_PATTERN_ATOM=310;
    public static final int BAND=345;
    public static final int QUOTED_STRING_LITERAL=344;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=340;
    public static final int EVENT_FILTER_IDENT=145;
    public static final int UnicodeEscape=381;
    public static final int DBSELECT_EXPR=219;
    public static final int FOLLOWMAX_BEGIN=356;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=267;
    public static final int DBFROM_CLAUSE=220;
    public static final int LE=349;
    public static final int EVAL_IDENT=170;
    public static final int CRONTAB_LIMIT_EXPR=193;
    public static final int STAR=336;
    public static final int DOT_EXPR=203;
    public static final int ISTREAM=60;
    public static final int MOD=354;
    public static final int LIB_FUNC_CHAIN=202;
    public static final int MONTH_PART=208;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=201;
    public static final int FULL_OUTERJOIN_EXPR=179;
    public static final int CREATE_CTX_NESTED=287;
    public static final int MATCHREC_PATTERN_CONCAT=311;
    public static final int USING=120;
    public static final int CAST_EXPR=235;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=348;
    public static final int LAST_AGGREG=263;
    public static final int NEWKW=124;
    public static final int HOUR_PART=211;
    public static final int FOLLOWED_BY=337;
    public static final int MATCHREC_PATTERN_NESTED=313;
    public static final int GOPPARAMITM=292;
    public static final int METHOD_JOIN_EXPR=250;
    public static final int CREATE_CTX_PART=282;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=138;
    public static final int CREATE_CTX_COAL=283;
    public static final int ELSE=30;
    public static final int MINUS_ASSIGN=368;
    public static final int INSERTINTO_STREAM_NAME=223;
    public static final int UNARY_MINUS=204;
    public static final int LCURLY=329;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int EVENT_FILTER_NOT_RANGE=148;
    public static final int WS=377;
    public static final int FOLLOWED_BY_ITEM=135;
    public static final int ON_SELECT_INSERT_EXPR=245;
    public static final int GOPPARAM=291;
    public static final int BNOT=364;
    public static final int EVAL_IS_EXPR=166;
    public static final int WHERE_EXPR=159;
    public static final int END=33;
    public static final int INNERJOIN_EXPR=176;
    public static final int TERM_LIMIT_EXPR=196;
    public static final int NOT_REGEXP=218;
    public static final int MATCH_UNTIL_EXPR=251;
    public static final int ANNOTATION=259;
    public static final int LONG_TYPE=301;
    public static final int MATCHREC_PATTERN=309;
    public static final int ATCHAR=332;
    public static final int MINUTE_PART=212;
    public static final int PATTERN_NOT_EXPR=137;
    public static final int SQL_NE=347;
    public static final int UPDATE_EXPR=266;
    public static final int LPAREN=326;
    public static final int IN_SUBSELECT_EXPR=229;
    public static final int BOOLEAN_TRUE=106;
    public static final int OR_EXPR=11;
    public static final int JSON_OBJECT=320;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=225;
    public static final int MATCHREC_INTERVAL=315;
    public static final int OFFSET=110;
    public static final int SECOND_PART=213;
    public static final int MATCH_RECOGNIZE=112;
    public static final int CASE2=29;
    public static final int BXOR=346;
    public static final int TIMEPERIOD_DAY=94;
    public static final int MERGE_MAT=273;
    public static final int EXISTS=74;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=165;
    public static final int CREATE_CTX_CATITEM=286;
    public static final int CREATE_VARIABLE_EXPR=249;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=253;
    public static final int PATTERN_FILTER_EXPR=136;
    public static final int LAST_OPERATOR=232;
    public static final int NUMBERSETSTAR=258;
    public static final int EVAL_AND_EXPR=162;
    public static final int SET=83;
    public static final int INSTANCEOF=77;
    public static final int EVENT_PROP_SIMPLE=184;
    public static final int MIN=21;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=271;
    public static final int EVAL_EQUALS_GROUP_EXPR=168;
    public static final int SCHEMA=62;
    public static final int BAND_ASSIGN=374;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=194;
    public static final int WHEN=31;
    public static final int PLUS_ASSIGN=366;
    public static final int DAY_PART=210;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=149;
    public static final int DIV=353;
    public static final int OBJECT_PARAM_ORDERED_EXPR=133;
    public static final int EXPRESSIONDECL=123;
    public static final int OctalEscape=382;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=214;
    public static final int FIRST=52;
    public static final int PRIOR=73;
    public static final int CAST=79;
    public static final int LOR=351;
    public static final int WILDCARD_SELECT=222;
    public static final int EXPONENT=384;
    public static final int PATTERN_INCL_EXPR=157;
    public static final int WHILE=119;
    public static final int BOOL_TYPE=305;
    public static final int GOPCFG=296;
    public static final int ANNOTATION_ARRAY=260;
    public static final int CASE=28;
    public static final int CREATE_EXPR=279;
    public static final int GOP=290;
    public static final int WINDOW_AGGREG=264;
    public static final int DIV_ASSIGN=365;
    public static final int CREATE_CTX_INIT=285;
    public static final int SQL=67;
    public static final int FULL=40;
    public static final int WEEKDAY=75;
    public static final int INSERT=54;
    public static final int ON_UPDATE_EXPR=243;
    public static final int ARRAY_EXPR=206;
    public static final int CREATE_COL_TYPE=257;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int SUBSELECT_EXPR=226;
    public static final int NUMERIC_PARAM_RANGE=130;
    public static final int CONCAT=200;
    public static final int ON_EXPR=239;
    public static final int NUM_LONG=360;
    public static final int TIME_PERIOD=205;
    public static final int DOUBLE_TYPE=303;
    public static final int ORDER_ELEMENT_EXPR=182;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=234;
    public static final int UNTIL=85;
    public static final int ON_SET_EXPR=248;
    public static final int NUM_INT=355;
    public static final int ON_EXPR_FROM=247;
    public static final int NUM_FLOAT=361;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=380;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=142;
    public static final int INNER=36;
    public static final int NUMERIC_PARAM_FREQUENCY=132;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=146;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=189;
    public static final int IRSTREAM=61;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=240;
    public static final int EVENT_FILTER_RANGE=147;
    public static final int INDEX=87;
    public static final int ML_COMMENT=379;
    public static final int TIMEPERIOD_LIMIT_EXPR=191;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int ALL=47;
    public static final int BOR=341;
    public static final int DOT=334;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int MATCHREC_MEASURES=318;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int HAVING_EXPR=160;
    public static final int MERGE_DEL=276;
    public static final int EVAL_EQUALS_EXPR=164;
    public static final int NOT_LIKE=217;
    public static final int EVENT_LIMIT_EXPR=190;
    public static final int ON_SELECT_INSERT_OUTPUT=246;
    public static final int CREATE_DATAFLOW=289;
    public static final int AFTER=117;
    public static final int MEASURES=113;
    public static final int AGG_FILTER_EXPR=278;
    public static final int CREATE_CTX_PATTERN=288;
    public static final int JOIN=37;
    public static final int GOPOUTTYP=295;
    public static final int ANY=48;
    public static final int OBSERVER_EXPR=155;
    public static final int CREATE_SCHEMA_EXPR_QUAL=269;
    public static final int EVENT_PROP_MAPPED=185;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int GOPCFGEPL=298;
    public static final int SELECTION_ELEMENT_EXPR=172;
    public static final int CREATE_WINDOW_SELECT_EXPR=238;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=173;
    public static final int DATAFLOW=129;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      private static java.util.Set<Integer> afterScriptTokens = new java.util.HashSet<Integer>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public synchronized static Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public synchronized static Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserTokenParaphases.put(USING, "'using'");
    	parserTokenParaphases.put(EXPRESSIONDECL, "'expression'");
    	parserTokenParaphases.put(NEWKW, "'new'");
    	parserTokenParaphases.put(DATAFLOW, "'dataflow'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      public synchronized static java.util.Set<Integer> getAfterScriptTokens() {
        if (afterScriptTokens.size() == 0) {
    	afterScriptTokens.add(CREATE);
    	afterScriptTokens.add(EXPRESSIONDECL);
    	afterScriptTokens.add(SELECT);
    	afterScriptTokens.add(INSERT);
    	afterScriptTokens.add(ON);
    	afterScriptTokens.add(DELETE);
    	afterScriptTokens.add(UPDATE);
    	afterScriptTokens.add(ATCHAR);
        }
        return afterScriptTokens;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1978);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1982);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1988);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1992); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule2007);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule2011);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule2017);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule2021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule2050);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule2054); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startJsonValueRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startJsonValueRule_return startJsonValueRule() throws RecognitionException {
        EsperEPL2GrammarParser.startJsonValueRule_return retval = new EsperEPL2GrammarParser.startJsonValueRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF12=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue11 = null;
        CommonTree EOF12_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_startJsonValueRule2067);
            jsonvalue11=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue11.getTree());
            EOF12=(Token)match(input,EOF,FOLLOW_EOF_in_startJsonValueRule2071); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token array=null;
        Token name=null;
        Token EXPRESSIONDECL13=null;
        Token RBRACK15=null;
        Token LPAREN17=null;
        Token RPAREN19=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier14 = null;
        EsperEPL2GrammarParser.expressionDialect_return expressionDialect16 = null;
        EsperEPL2GrammarParser.columnList_return columnList18 = null;
        EsperEPL2GrammarParser.expressionDef_return expressionDef20 = null;
        CommonTree array_tree=null;
        CommonTree name_tree=null;
        CommonTree EXPRESSIONDECL13_tree=null;
        CommonTree RBRACK15_tree=null;
        CommonTree LPAREN17_tree=null;
        CommonTree RPAREN19_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionDef=new RewriteRuleSubtreeStream(adaptor,"rule expressionDef");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_expressionDialect=new RewriteRuleSubtreeStream(adaptor,"rule expressionDialect");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            EXPRESSIONDECL13=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl2090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL13);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==LBRACK) ) {
                    int LA3_8 = input.LA(3);
                    if ( (LA3_8==RBRACK) ) {
                        alt3=1;
                    }
                }
                else if ( (LA3_1==IDENT||LA3_1==DOT) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==EVENTS||LA3_0==TICKED_STRING_LITERAL) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_expressionDecl2092);
                    classIdentifier14=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier14.getTree());
                    }
                    break;
            }
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LBRACK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    {
                    array=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDecl2098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(array);
                    RBRACK15=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDecl2100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK15);
                    }
                    break;
            }
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==COLON) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionDialect_in_expressionDecl2104);
                    expressionDialect16=expressionDialect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionDialect.add(expressionDialect16.getTree());
                    }
                    break;
            }
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl2109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt7=2;
            int LA7_0 = input.LA(1);
            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    {
                    LPAREN17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionDecl2112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN17);
                    int alt6=2;
                    int LA6_0 = input.LA(1);
                    if ( (LA6_0==IDENT) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_columnList_in_expressionDecl2114);
                            columnList18=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList18.getTree());
                            }
                            break;
                    }
                    RPAREN19=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionDecl2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN19);
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionDef_in_expressionDecl2121);
            expressionDef20=expressionDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDef.add(expressionDef20.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_array=new RewriteRuleTokenStream(adaptor,"token array",array);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_expressionDef.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_expressionDialect.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDialect.nextTree());
                }
                stream_expressionDialect.reset();
                if ( stream_array.hasNext() ) {
                    adaptor.addChild(root_1, stream_array.nextNode());
                }
                stream_array.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDialect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDialect_return expressionDialect() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDialect_return retval = new EsperEPL2GrammarParser.expressionDialect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token COLON21=null;
        CommonTree d_tree=null;
        CommonTree COLON21_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            d=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDialect2164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(d);
            COLON21=(Token)match(input,COLON,FOLLOW_COLON_in_expressionDialect2166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON21);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_COLON.nextNode(), root_1);
                adaptor.addChild(root_1, stream_d.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDef_return expressionDef() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDef_return retval = new EsperEPL2GrammarParser.expressionDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY22=null;
        Token RCURLY25=null;
        Token LBRACK26=null;
        Token RBRACK28=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl23 = null;
        EsperEPL2GrammarParser.expression_return expression24 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant27 = null;
        CommonTree LCURLY22_tree=null;
        CommonTree RCURLY25_tree=null;
        CommonTree LBRACK26_tree=null;
        CommonTree RBRACK28_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        try {
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==LCURLY) ) {
                alt9=1;
            }
            else if ( (LA9_0==LBRACK) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    LCURLY22=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDef2188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY22);
                    int alt8=2;
                    int LA8_0 = input.LA(1);
                    if ( (LA8_0==IDENT) ) {
                        int LA8_1 = input.LA(2);
                        if ( (LA8_1==GOES) ) {
                            alt8=1;
                        }
                    }
                    else if ( (LA8_0==LPAREN) ) {
                        int LA8_2 = input.LA(2);
                        if ( (LA8_2==IDENT) ) {
                            int LA8_123 = input.LA(3);
                            if ( (LA8_123==RPAREN) ) {
                                int LA8_209 = input.LA(4);
                                if ( (LA8_209==GOES) ) {
                                    alt8=1;
                                }
                            }
                            else if ( (LA8_123==COMMA) ) {
                                alt8=1;
                            }
                        }
                    }
                    switch (alt8) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDef2190);
                            expressionLambdaDecl23=expressionLambdaDecl();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl23.getTree());
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_expressionDef2193);
                    expression24=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression24.getTree());
                    RCURLY25=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDef2195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY25);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOES, "GOES"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( stream_expressionLambdaDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                        }
                        stream_expressionLambdaDecl.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    LBRACK26=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_expressionDef2211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK26);
                    pushFollow(FOLLOW_stringconstant_in_expressionDef2213);
                    stringconstant27=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant27.getTree());
                    RBRACK28=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_expressionDef2215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK28);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRESSIONDECL, "EXPRESSIONDECL"), root_1);
                        adaptor.addChild(root_1, stream_stringconstant.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN29=null;
        Token RPAREN31=null;
        Token GOES32=null;
        EsperEPL2GrammarParser.columnList_return columnList30 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN29_tree=null;
        CommonTree RPAREN31_tree=null;
        CommonTree GOES32_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==IDENT) ) {
                alt10=1;
            }
            else if ( (LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl2238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN29=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl2243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN29);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl2245);
                    columnList30=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList30.getTree());
                    RPAREN31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl2247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN31);
                    }
                    }
                    break;
            }
            GOES32=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES32);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR33=null;
        Token char_literal35=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum36 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum37 = null;
        CommonTree ATCHAR33_tree=null;
        CommonTree char_literal35_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR33=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR33);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2288);
            classIdentifier34=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier34.getTree());
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( (LA12_0==LPAREN) ) {
                int LA12_1 = input.LA(2);
                if ( (LA12_1==IDENT) ) {
                    int LA12_15 = input.LA(3);
                    if ( (LA12_15==EQUALS) ) {
                        int LA12_34 = input.LA(4);
                        if ( ((LA12_34>=BOOLEAN_TRUE && LA12_34<=VALUE_NULL)||LA12_34==NUM_DOUBLE||LA12_34==LCURLY||LA12_34==ATCHAR||(LA12_34>=PLUS && LA12_34<=QUOTED_STRING_LITERAL)||LA12_34==MINUS||LA12_34==NUM_INT||(LA12_34>=NUM_LONG && LA12_34<=NUM_FLOAT)) ) {
                            alt12=1;
                        }
                    }
                }
                else if ( ((LA12_1>=BOOLEAN_TRUE && LA12_1<=VALUE_NULL)||LA12_1==NUM_DOUBLE||LA12_1==RPAREN||LA12_1==LCURLY||LA12_1==ATCHAR||(LA12_1>=PLUS && LA12_1<=QUOTED_STRING_LITERAL)||LA12_1==MINUS||LA12_1==NUM_INT||(LA12_1>=NUM_LONG && LA12_1<=NUM_FLOAT)) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    {
                    char_literal35=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal35);
                    int alt11=3;
                    int LA11_0 = input.LA(1);
                    if ( (LA11_0==IDENT) ) {
                        alt11=1;
                    }
                    else if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||LA11_0==LCURLY||LA11_0==ATCHAR||(LA11_0>=PLUS && LA11_0<=QUOTED_STRING_LITERAL)||LA11_0==MINUS||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)) ) {
                        alt11=2;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2296);
                            elementValuePairsNoEnum36=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum36.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2300);
                            elementValueNoEnum37=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum37.getTree());
                            }
                            break;
                    }
                    char_literal38=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal38);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ATCHAR39=null;
        Token char_literal41=null;
        Token char_literal44=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier40 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum42 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum43 = null;
        CommonTree ATCHAR39_tree=null;
        CommonTree char_literal41_tree=null;
        CommonTree char_literal44_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            ATCHAR39=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR39);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2348);
            classIdentifier40=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier40.getTree());
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( (LA14_0==LPAREN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    char_literal41=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal41);
                    int alt13=3;
                    int LA13_0 = input.LA(1);
                    if ( (LA13_0==IDENT) ) {
                        int LA13_1 = input.LA(2);
                        if ( (LA13_1==EQUALS) ) {
                            alt13=1;
                        }
                        else if ( (LA13_1==RPAREN||LA13_1==DOT) ) {
                            alt13=2;
                        }
                    }
                    else if ( (LA13_0==EVENTS||(LA13_0>=BOOLEAN_TRUE && LA13_0<=VALUE_NULL)||LA13_0==NUM_DOUBLE||LA13_0==LCURLY||LA13_0==ATCHAR||(LA13_0>=PLUS && LA13_0<=QUOTED_STRING_LITERAL)||LA13_0==MINUS||LA13_0==NUM_INT||(LA13_0>=TICKED_STRING_LITERAL && LA13_0<=NUM_FLOAT)) ) {
                        alt13=2;
                    }
                    switch (alt13) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2356);
                            elementValuePairsEnum42=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum42.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2360);
                            elementValueEnum43=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum43.getTree());
                            }
                            break;
                    }
                    char_literal44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal44);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA46=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum45 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum47 = null;
        CommonTree COMMA46_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2406);
            elementValuePairNoEnum45=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum45.getTree());
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);
                if ( (LA15_0==COMMA) ) {
                    alt15=1;
                }
                switch (alt15) {
            	case 1 :
            	    {
            	    COMMA46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2409); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2412);
            	    elementValuePairNoEnum47=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum47.getTree());
            	    }
            	    break;
            	default :
            	    break loop15;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA49=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum48 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum50 = null;
        CommonTree COMMA49_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2433);
            elementValuePairEnum48=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum48.getTree());
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);
                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }
                switch (alt16) {
            	case 1 :
            	    {
            	    COMMA49=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2436); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2439);
            	    elementValuePairEnum50=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum50.getTree());
            	    }
            	    break;
            	default :
            	    break loop16;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal51=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree i_tree=null;
        CommonTree char_literal51_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal51=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal51);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2466);
            elementValueNoEnum52=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal53=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum54 = null;
        CommonTree i_tree=null;
        CommonTree char_literal53_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal53=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal53);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2507);
            elementValueEnum54=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum54.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum55 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum56 = null;
        EsperEPL2GrammarParser.constant_return constant57 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt17=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt17=1;
                }
                break;
            case LCURLY:
                {
                alt17=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2538);
                    annotationEnum55=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum55.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2549);
                    elementValueArrayNoEnum56=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum56.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2562);
                    constant57=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant57.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum58 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum59 = null;
        EsperEPL2GrammarParser.constant_return constant60 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier61 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt18=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt18=1;
                }
                break;
            case LCURLY:
                {
                alt18=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt18=3;
                }
                break;
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt18=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);
                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2585);
                    annotationEnum58=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum58.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2596);
                    elementValueArrayEnum59=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum59.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2609);
                    constant60=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant60.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2617);
                    classIdentifier61=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier61.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal62=null;
        Token char_literal64=null;
        Token char_literal66=null;
        Token char_literal67=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum63 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum65 = null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal64_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal67_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal62=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal62);
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( ((LA20_0>=BOOLEAN_TRUE && LA20_0<=VALUE_NULL)||LA20_0==NUM_DOUBLE||LA20_0==LCURLY||LA20_0==ATCHAR||(LA20_0>=PLUS && LA20_0<=QUOTED_STRING_LITERAL)||LA20_0==MINUS||LA20_0==NUM_INT||(LA20_0>=NUM_LONG && LA20_0<=NUM_FLOAT)) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2640);
                    elementValueNoEnum63=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum63.getTree());
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( (LA19_0==COMMA) ) {
                            int LA19_1 = input.LA(2);
                            if ( ((LA19_1>=BOOLEAN_TRUE && LA19_1<=VALUE_NULL)||LA19_1==NUM_DOUBLE||LA19_1==LCURLY||LA19_1==ATCHAR||(LA19_1>=PLUS && LA19_1<=QUOTED_STRING_LITERAL)||LA19_1==MINUS||LA19_1==NUM_INT||(LA19_1>=NUM_LONG && LA19_1<=NUM_FLOAT)) ) {
                                alt19=1;
                            }
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    char_literal64=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2643); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal64);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2645);
                    	    elementValueNoEnum65=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum65.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==COMMA) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    char_literal66=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal66);
                    }
                    break;
            }
            char_literal67=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal67);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal68=null;
        Token char_literal70=null;
        Token char_literal72=null;
        Token char_literal73=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum69 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum71 = null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal70_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal73_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal68=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal68);
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==EVENTS||(LA23_0>=BOOLEAN_TRUE && LA23_0<=VALUE_NULL)||LA23_0==NUM_DOUBLE||LA23_0==IDENT||LA23_0==LCURLY||LA23_0==ATCHAR||(LA23_0>=PLUS && LA23_0<=QUOTED_STRING_LITERAL)||LA23_0==MINUS||LA23_0==NUM_INT||(LA23_0>=TICKED_STRING_LITERAL && LA23_0<=NUM_FLOAT)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2688);
                    elementValueEnum69=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum69.getTree());
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( (LA22_0==COMMA) ) {
                            int LA22_1 = input.LA(2);
                            if ( (LA22_1==EVENTS||(LA22_1>=BOOLEAN_TRUE && LA22_1<=VALUE_NULL)||LA22_1==NUM_DOUBLE||LA22_1==IDENT||LA22_1==LCURLY||LA22_1==ATCHAR||(LA22_1>=PLUS && LA22_1<=QUOTED_STRING_LITERAL)||LA22_1==MINUS||LA22_1==NUM_INT||(LA22_1>=TICKED_STRING_LITERAL && LA22_1<=NUM_FLOAT)) ) {
                                alt22=1;
                            }
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    char_literal70=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2691); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal70);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2693);
                    	    elementValueEnum71=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum71.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==COMMA) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    char_literal72=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal72);
                    }
                    break;
            }
            char_literal73=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal73);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr74 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr75 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr76 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr77 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr78 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr79 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr80 = null;
        EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr81 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr82 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr83 = null;
        EsperEPL2GrammarParser.createDataflow_return createDataflow84 = null;
        EsperEPL2GrammarParser.fafDelete_return fafDelete85 = null;
        EsperEPL2GrammarParser.fafUpdate_return fafUpdate86 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr87 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==CONTEXT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2736);
                    contextExpr74=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr74.getTree());
                    }
                    break;
            }
            int alt26=12;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt26=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt26=2;
                    }
                    break;
                case CONTEXT:
                    {
                    alt26=6;
                    }
                    break;
                case DATAFLOW:
                    {
                    alt26=10;
                    }
                    break;
                case IDENT:
                    {
                    switch ( input.LA(3) ) {
                    case VARIABLE:
                        {
                        alt26=4;
                        }
                        break;
                    case INDEX:
                        {
                        alt26=3;
                        }
                        break;
                    case SCHEMA:
                        {
                        alt26=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case VARIABLE:
                    {
                    alt26=4;
                    }
                    break;
                case SCHEMA:
                    {
                    alt26=5;
                    }
                    break;
                case INDEX:
                    {
                    alt26=3;
                    }
                    break;
                case EXPRESSIONDECL:
                    {
                    alt26=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt26=8;
                }
                break;
            case UPDATE:
                {
                int LA26_5 = input.LA(2);
                if ( (LA26_5==ISTREAM) ) {
                    alt26=9;
                }
                else if ( (LA26_5==EVENTS||LA26_5==IDENT||LA26_5==TICKED_STRING_LITERAL) ) {
                    alt26=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 5, input);
                    throw nvae;
                }
                }
                break;
            case DELETE:
                {
                alt26=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);
                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2743);
                    selectExpr75=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr75.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2748);
                    createWindowExpr76=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr76.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2753);
                    createIndexExpr77=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr77.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2758);
                    createVariableExpr78=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr78.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2763);
                    createSchemaExpr79=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr79.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2768);
                    createContextExpr80=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr80.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_createExpressionExpr_in_eplExpression2773);
                    createExpressionExpr81=createExpressionExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createExpressionExpr81.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2778);
                    onExpr82=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr82.getTree());
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2783);
                    updateExpr83=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr83.getTree());
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_createDataflow_in_eplExpression2788);
                    createDataflow84=createDataflow();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDataflow84.getTree());
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_fafDelete_in_eplExpression2793);
                    fafDelete85=fafDelete();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafDelete85.getTree());
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_fafUpdate_in_eplExpression2798);
                    fafUpdate86=fafUpdate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fafUpdate86.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==FOR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2801);
                    forExpr87=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr87.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT88=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT88_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT88=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT88);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT89=null;
        Token SELECT91=null;
        Token FROM93=null;
        Token WHERE96=null;
        Token GROUP98=null;
        Token BY99=null;
        Token HAVING101=null;
        Token OUTPUT103=null;
        Token ORDER105=null;
        Token BY106=null;
        Token ROW_LIMIT_EXPR108=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr90 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause92 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause94 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog95 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause97 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr100 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause102 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit104 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr107 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit109 = null;
        CommonTree INSERT89_tree=null;
        CommonTree SELECT91_tree=null;
        CommonTree FROM93_tree=null;
        CommonTree WHERE96_tree=null;
        CommonTree GROUP98_tree=null;
        CommonTree BY99_tree=null;
        CommonTree HAVING101_tree=null;
        CommonTree OUTPUT103_tree=null;
        CommonTree ORDER105_tree=null;
        CommonTree BY106_tree=null;
        CommonTree ROW_LIMIT_EXPR108_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==INSERT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    INSERT89=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2842); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2845);
                    insertIntoExpr90=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr90.getTree());
                    }
                    break;
            }
            SELECT91=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2851); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2854);
            selectClause92=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause92.getTree());
            FROM93=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2858); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2861);
            fromClause94=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause94.getTree());
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==MATCH_RECOGNIZE) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2865);
                    matchRecog95=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog95.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    WHERE96=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2871); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2874);
                    whereClause97=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause97.getTree());
                    }
                    break;
            }
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    GROUP98=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2881); if (state.failed) return retval;
                    BY99=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2884); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2887);
                    groupByListExpr100=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr100.getTree());
                    }
                    break;
            }
            int alt32=2;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    HAVING101=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2894); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2897);
                    havingClause102=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause102.getTree());
                    }
                    break;
            }
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==OUTPUT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    OUTPUT103=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2904); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2907);
                    outputLimit104=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit104.getTree());
                    }
                    break;
            }
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    ORDER105=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2914); if (state.failed) return retval;
                    BY106=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2917); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2920);
                    orderByListExpr107=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr107.getTree());
                    }
                    break;
            }
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==ROW_LIMIT_EXPR) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR108=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2927); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2930);
                    rowLimit109=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit109.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON110=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr111 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr112 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr113 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr114 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert115 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr116 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr117 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr118 = null;
        CommonTree ON110_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON110=(Token)match(input,ON,FOLLOW_ON_in_onExpr2945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON110);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2947);
            onStreamExpr111=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr111.getTree());
            int alt39=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt39=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt39=2;
                }
                break;
            case SET:
                {
                alt39=3;
                }
                break;
            case UPDATE:
                {
                alt39=4;
                }
                break;
            case MERGE:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);
                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2952);
                    onDeleteExpr112=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr112.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2956);
                    onSelectExpr113=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr113.getTree());
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==INSERT) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            int cnt36=0;
                            loop36:
                            do {
                                int alt36=2;
                                int LA36_0 = input.LA(1);
                                if ( (LA36_0==INSERT) ) {
                                    alt36=1;
                                }
                                switch (alt36) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2959);
                            	    onSelectInsertExpr114=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr114.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt36 >= 1 ) break loop36;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(36, input);
                                        throw eee;
                                }
                                cnt36++;
                            } while (true);
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==OUTPUT) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2962);
                                    outputClauseInsert115=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert115.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2969);
                    onSetExpr116=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr116.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2973);
                    onUpdateExpr117=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr117.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2977);
                    onMergeExpr118=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr118.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS121=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression119 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression120 = null;
        CommonTree i_tree=null;
        CommonTree AS121_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==EVENTS||LA40_0==IDENT||LA40_0==TICKED_STRING_LITERAL) ) {
                alt40=1;
            }
            else if ( (LA40_0==PATTERN) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr3022);
                    eventFilterExpression119=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression119.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr3026);
                    patternInclusionExpression120=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression120.getTree());
                    }
                    break;
            }
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS121=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr3030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS121);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr3040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE122=null;
        Token ISTREAM123=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails124 = null;
        CommonTree UPDATE122_tree=null;
        CommonTree ISTREAM123_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE122=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr3071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE122);
            ISTREAM123=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr3073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM123);
            pushFollow(FOLLOW_updateDetails_in_updateExpr3075);
            updateDetails124=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails124.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateDetails_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateDetails_return updateDetails() throws RecognitionException {
        EsperEPL2GrammarParser.updateDetails_return retval = new EsperEPL2GrammarParser.updateDetails_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS126=null;
        Token SET127=null;
        Token COMMA129=null;
        Token WHERE131=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier125 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment128 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment130 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause132 = null;
        CommonTree i_tree=null;
        CommonTree AS126_tree=null;
        CommonTree SET127_tree=null;
        CommonTree COMMA129_tree=null;
        CommonTree WHERE131_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_updateDetails3097);
            classIdentifier125=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier125.getTree());
            int alt42=3;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==AS) ) {
                alt42=1;
            }
            else if ( (LA42_0==IDENT) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    {
                    AS126=(Token)match(input,AS,FOLLOW_AS_in_updateDetails3100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS126);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateDetails3110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET127=(Token)match(input,SET,FOLLOW_SET_in_updateDetails3116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET127);
            pushFollow(FOLLOW_onSetAssignment_in_updateDetails3118);
            onSetAssignment128=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment128.getTree());
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateDetails3121); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateDetails3123);
            	    onSetAssignment130=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment130.getTree());
            	    }
            	    break;
            	default :
            	    break loop43;
                }
            } while (true);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    WHERE131=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateDetails3131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE131);
                    pushFollow(FOLLOW_whereClause_in_updateDetails3133);
                    whereClause132=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause132.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE, "UPDATE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE133=null;
        Token INTO134=null;
        Token AS135=null;
        Token WHERE136=null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem138 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE133_tree=null;
        CommonTree INTO134_tree=null;
        CommonTree AS135_tree=null;
        CommonTree WHERE136_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE133=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr3168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE133);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==INTO) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    INTO134=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr3170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO134);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt46=3;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    {
                    AS135=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr3178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS135);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr3195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr3197);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==WHEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr3205);
            	    mergeItem138=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem138.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched139 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched140 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHEN) ) {
                int LA49_1 = input.LA(2);
                if ( (LA49_1==MATCHED) ) {
                    alt49=1;
                }
                else if ( (LA49_1==NOT_EXPR) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem3239);
                    mergeMatched139=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched139.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem3243);
                    mergeUnmatched140=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched140.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN141=null;
        Token MATCHED142=null;
        Token AND_EXPR143=null;
        EsperEPL2GrammarParser.expression_return expression144 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem145 = null;
        CommonTree WHEN141_tree=null;
        CommonTree MATCHED142_tree=null;
        CommonTree AND_EXPR143_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN141=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched3256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN141);
            MATCHED142=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched3258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED142);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR143=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched3261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR143);
                    pushFollow(FOLLOW_expression_in_mergeMatched3263);
                    expression144=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression144.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched3267);
            	    mergeMatchedItem145=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem145.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN146=null;
        Token SET147=null;
        Token COMMA149=null;
        Token WHERE151=null;
        Token WHERE153=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment148 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause154 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert155 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN146_tree=null;
        CommonTree SET147_tree=null;
        CommonTree COMMA149_tree=null;
        CommonTree WHERE151_tree=null;
        CommonTree WHERE153_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN146=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN146);
            int alt55=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt55=1;
                }
                break;
            case DELETE:
                {
                alt55=2;
                }
                break;
            case INSERT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);
                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET147=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET147);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3312);
                    onSetAssignment148=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment148.getTree());
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);
                        if ( (LA52_0==COMMA) ) {
                            alt52=1;
                        }
                        switch (alt52) {
                    	case 1 :
                    	    {
                    	    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3315); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3317);
                    	    onSetAssignment150=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment150.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop52;
                        }
                    } while (true);
                    }
                    int alt53=2;
                    int LA53_0 = input.LA(1);
                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            {
                            WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3323); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3325);
                            whereClause152=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt54=2;
                    int LA54_0 = input.LA(1);
                    if ( (LA54_0==WHERE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            WHERE153=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3340); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE153);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3342);
                            whereClause154=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause154.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3353);
                    mergeInsert155=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN156=null;
        Token NOT_EXPR157=null;
        Token MATCHED158=null;
        Token AND_EXPR159=null;
        EsperEPL2GrammarParser.expression_return expression160 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem161 = null;
        CommonTree WHEN156_tree=null;
        CommonTree NOT_EXPR157_tree=null;
        CommonTree MATCHED158_tree=null;
        CommonTree AND_EXPR159_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN156=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN156);
            NOT_EXPR157=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR157);
            MATCHED158=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED158);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==AND_EXPR) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    AND_EXPR159=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR159);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3419);
                    expression160=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression160.getTree());
                    }
                    break;
            }
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);
                if ( (LA57_0==THEN) ) {
                    alt57=1;
                }
                switch (alt57) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3423);
            	    mergeUnmatchedItem161=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem161.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN162=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert163 = null;
        CommonTree THEN162_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN162=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3450); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3453);
            mergeInsert163=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert163.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT164=null;
        Token INTO165=null;
        Token LPAREN167=null;
        Token RPAREN169=null;
        Token SELECT170=null;
        Token WHERE172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier166 = null;
        EsperEPL2GrammarParser.columnList_return columnList168 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause173 = null;
        CommonTree INSERT164_tree=null;
        CommonTree INTO165_tree=null;
        CommonTree LPAREN167_tree=null;
        CommonTree RPAREN169_tree=null;
        CommonTree SELECT170_tree=null;
        CommonTree WHERE172_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT164=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT164);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==INTO) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    INTO165=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO165);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3473);
                    classIdentifier166=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier166.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==LPAREN) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    LPAREN167=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN167);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3480);
                    columnList168=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList168.getTree());
                    RPAREN169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN169);
                    }
                    break;
            }
            SELECT170=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT170);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3488);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==WHERE) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    WHERE172=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE172);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3493);
                    whereClause173=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token INSERT174=null;
        Token SELECT176=null;
        Token AND_EXPR177=null;
        Token DISTINCT178=null;
        Token WHERE181=null;
        Token GROUP183=null;
        Token BY184=null;
        Token HAVING186=null;
        Token ORDER188=null;
        Token BY189=null;
        Token ROW_LIMIT_EXPR191=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr175 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList179 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom180 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause182 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr185 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause187 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr190 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit192 = null;
        CommonTree d_tree=null;
        CommonTree INSERT174_tree=null;
        CommonTree SELECT176_tree=null;
        CommonTree AND_EXPR177_tree=null;
        CommonTree DISTINCT178_tree=null;
        CommonTree WHERE181_tree=null;
        CommonTree GROUP183_tree=null;
        CommonTree BY184_tree=null;
        CommonTree HAVING186_tree=null;
        CommonTree ORDER188_tree=null;
        CommonTree BY189_tree=null;
        CommonTree ROW_LIMIT_EXPR191_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==INSERT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    INSERT174=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3539); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT174);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3541);
                    insertIntoExpr175=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr175.getTree());
                    }
                    break;
            }
            SELECT176=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT176);
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==AND_EXPR||LA63_0==DELETE) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    int alt62=2;
                    int LA62_0 = input.LA(1);
                    if ( (LA62_0==AND_EXPR) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            {
                            AND_EXPR177=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_onSelectExpr3552); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR177);
                            }
                            break;
                    }
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_onSelectExpr3557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==DISTINCT) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    DISTINCT178=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT178);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3564);
            selectionList179=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList179.getTree());
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==FROM) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3568);
                    onExprFrom180=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom180.getTree());
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==WHERE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    WHERE181=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE181);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3576);
                    whereClause182=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause182.getTree());
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==GROUP) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    GROUP183=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP183);
                    BY184=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY184);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3589);
                    groupByListExpr185=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr185.getTree());
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==HAVING) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    HAVING186=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING186);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3598);
                    havingClause187=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause187.getTree());
                    }
                    break;
            }
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==ORDER) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    ORDER188=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER188);
                    BY189=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY189);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3609);
                    orderByListExpr190=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr190.getTree());
                    }
                    break;
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==ROW_LIMIT_EXPR) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR191=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR191);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3618);
                    rowLimit192=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE193=null;
        Token AS194=null;
        Token SET195=null;
        Token COMMA197=null;
        Token WHERE199=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment196 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment198 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause200 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE193_tree=null;
        CommonTree AS194_tree=null;
        CommonTree SET195_tree=null;
        CommonTree COMMA197_tree=null;
        CommonTree WHERE199_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE193=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE193);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt71=3;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            else if ( (LA71_0==IDENT) ) {
                alt71=2;
            }
            switch (alt71) {
                case 1 :
                    {
                    AS194=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS194);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET195=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET195);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3710);
            onSetAssignment196=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment196.getTree());
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);
                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }
                switch (alt72) {
            	case 1 :
            	    {
            	    COMMA197=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3713); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA197);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3715);
            	    onSetAssignment198=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment198.getTree());
            	    }
            	    break;
            	default :
            	    break loop72;
                }
            } while (true);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==WHERE) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    WHERE199=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE199);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3724);
                    whereClause200=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause200.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT201=null;
        Token SELECT203=null;
        Token WHERE205=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr202 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList204 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause206 = null;
        CommonTree INSERT201_tree=null;
        CommonTree SELECT203_tree=null;
        CommonTree WHERE205_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT201=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT201);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3777);
            insertIntoExpr202=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr202.getTree());
            SELECT203=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT203);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3783);
            selectionList204=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList204.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==WHERE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    WHERE205=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE205);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3790);
                    whereClause206=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause206.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT207=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT207_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT207=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT207);
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==FIRST) ) {
                alt75=1;
            }
            else if ( (LA75_0==ALL) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE208=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom209 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause211 = null;
        CommonTree DELETE208_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE208=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE208);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3878);
            onExprFrom209=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom209.getTree());
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==WHERE) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3885);
                    whereClause211=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause211.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET212=null;
        Token COMMA214=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment213 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment215 = null;
        CommonTree SET212_tree=null;
        CommonTree COMMA214_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET212=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET212);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3927);
            onSetAssignment213=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment213.getTree());
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);
                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }
                switch (alt77) {
            	case 1 :
            	    {
            	    COMMA214=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3930); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA214);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3932);
            	    onSetAssignment215=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment215.getTree());
            	    }
            	    break;
            	default :
            	    break loop77;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expression_return expression216 = null;
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_onSetAssignment3957);
            expression216=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression216.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM217=null;
        Token AS218=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM217_tree=null;
        CommonTree AS218_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM217=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM217);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt78=3;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==AS) ) {
                alt78=1;
            }
            else if ( (LA78_0==IDENT) ) {
                alt78=2;
            }
            switch (alt78) {
                case 1 :
                    {
                    AS218=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS218);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE219=null;
        Token WINDOW220=null;
        Token DOT221=null;
        Token DOT223=null;
        Token AS225=null;
        Token LPAREN227=null;
        Token RPAREN229=null;
        Token WHERE230=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression222 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression224 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter226 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList228 = null;
        EsperEPL2GrammarParser.expression_return expression231 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE219_tree=null;
        CommonTree WINDOW220_tree=null;
        CommonTree DOT221_tree=null;
        CommonTree DOT223_tree=null;
        CommonTree AS225_tree=null;
        CommonTree LPAREN227_tree=null;
        CommonTree RPAREN229_tree=null;
        CommonTree WHERE230_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE219=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr4025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE219);
            WINDOW220=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr4027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW220);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr4031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==DOT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    DOT221=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT221);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4036);
                    viewExpression222=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression222.getTree());
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);
                        if ( (LA79_0==DOT) ) {
                            alt79=1;
                        }
                        switch (alt79) {
                    	case 1 :
                    	    {
                    	    DOT223=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr4039); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT223);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr4041);
                    	    viewExpression224=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression224.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop79;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt81=3;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==RETAINUNION) ) {
                alt81=1;
            }
            else if ( (LA81_0==RETAININTERSECTION) ) {
                alt81=2;
            }
            switch (alt81) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr4050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr4054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==AS) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    AS225=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr4058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS225);
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==SELECT||LA83_0==EVENTS||LA83_0==IDENT||LA83_0==TICKED_STRING_LITERAL) ) {
                alt83=1;
            }
            else if ( (LA83_0==LPAREN) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);
                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr4073);
                    createWindowExprModelAfter226=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter226.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN227=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr4088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN227);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr4090);
                    createColumnList228=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList228.getTree());
                    RPAREN229=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr4092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN229);
                    }
                    break;
            }
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==INSERT) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr4109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( (LA84_0==WHERE) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            WHERE230=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr4112); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE230);
                            pushFollow(FOLLOW_expression_in_createWindowExpr4114);
                            expression231=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT232=null;
        Token FROM234=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList233 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier235 = null;
        CommonTree SELECT232_tree=null;
        CommonTree FROM234_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==SELECT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    SELECT232=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter4201); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter4204);
                    createSelectionList233=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList233.getTree());
                    FROM234=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter4206); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter4211);
            classIdentifier235=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier235.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token n=null;
        Token w=null;
        Token CREATE236=null;
        Token INDEX237=null;
        Token ON238=null;
        Token LPAREN239=null;
        Token RPAREN241=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList240 = null;
        CommonTree u_tree=null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE236_tree=null;
        CommonTree INDEX237_tree=null;
        CommonTree ON238_tree=null;
        CommonTree LPAREN239_tree=null;
        CommonTree RPAREN241_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE236=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE236);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    u=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(u);
                    }
                    break;
            }
            INDEX237=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr4233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX237);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON238=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON238);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr4243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN239=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr4245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN239);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr4247);
            createIndexColumnList240=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList240.getTree());
            RPAREN241=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr4249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN241);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA243=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn242 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn244 = null;
        CommonTree COMMA243_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4282);
            createIndexColumn242=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn242.getTree());
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    COMMA243=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList4285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA243);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList4287);
            	    createIndexColumn244=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn244.getTree());
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT245=null;
        Token IDENT246=null;
        CommonTree IDENT245_tree=null;
        CommonTree IDENT246_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT245=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT245);
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( (LA89_0==IDENT) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    {
                    IDENT246=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT246);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token arr=null;
        Token n=null;
        Token CREATE247=null;
        Token VARIABLE248=null;
        Token RBRACK250=null;
        Token EQUALS251=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier249 = null;
        EsperEPL2GrammarParser.expression_return expression252 = null;
        CommonTree c_tree=null;
        CommonTree arr_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE247_tree=null;
        CommonTree VARIABLE248_tree=null;
        CommonTree RBRACK250_tree=null;
        CommonTree EQUALS251_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE247=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE247);
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    {
                    c=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(c);
                    }
                    break;
            }
            VARIABLE248=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE248);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4350);
            classIdentifier249=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier249.getTree());
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( (LA91_0==LBRACK) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    {
                    arr=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createVariableExpr4355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(arr);
                    RBRACK250=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createVariableExpr4357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK250);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==EQUALS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    EQUALS251=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS251);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4368);
                    expression252=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression252.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_arr=new RewriteRuleTokenStream(adaptor,"token arr",arr);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                if ( stream_arr.hasNext() ) {
                    adaptor.addChild(root_1, stream_arr.nextNode());
                }
                stream_arr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA254=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement253 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement255 = null;
        CommonTree COMMA254_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4418);
            createColumnListElement253=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement253.getTree());
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);
                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }
                switch (alt93) {
            	case 1 :
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4421); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4423);
            	    createColumnListElement255=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement255.getTree());
            	    }
            	    break;
            	default :
            	    break loop93;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK258=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy256 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier257 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK258_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4451);
            classIdentifierNonGreedy256=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy256.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4454);
            classIdentifier257=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier257.getTree());
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==LBRACK) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4459); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK258=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK258);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA260=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement259 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement261 = null;
        CommonTree COMMA260_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4504);
            createSelectionListElement259=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement259.getTree());
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA260=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4507); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA260);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4509);
            	    createSelectionListElement261=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement261.getTree());
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS263=null;
        Token AS265=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty262 = null;
        EsperEPL2GrammarParser.constant_return constant264 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS263_tree=null;
        CommonTree AS265_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt97=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt97=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt97=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);
                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4550);
                    eventProperty262=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty262.getTree());
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==AS) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            AS263=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS263);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4578);
                    constant264=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant264.getTree());
                    AS265=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS265);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token CREATE266=null;
        EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef267 = null;
        CommonTree keyword_tree=null;
        CommonTree CREATE266_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_createSchemaDef=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaDef");
        try {
            {
            CREATE266=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE266);
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==IDENT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            pushFollow(FOLLOW_createSchemaDef_in_createSchemaExpr4616);
            createSchemaDef267=createSchemaDef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSchemaDef.add(createSchemaDef267.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_createSchemaDef.nextTree());
                if ( stream_keyword.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyword.nextNode());
                }
                stream_keyword.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaDef_return createSchemaDef() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaDef_return retval = new EsperEPL2GrammarParser.createSchemaDef_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token SCHEMA268=null;
        Token AS269=null;
        Token LPAREN271=null;
        Token RPAREN273=null;
        EsperEPL2GrammarParser.variantList_return variantList270 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList272 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual274 = null;
        CommonTree name_tree=null;
        CommonTree SCHEMA268_tree=null;
        CommonTree AS269_tree=null;
        CommonTree LPAREN271_tree=null;
        CommonTree RPAREN273_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            SCHEMA268=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaDef4641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA268);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaDef4645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS269=(Token)match(input,AS,FOLLOW_AS_in_createSchemaDef4647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS269);
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( (LA101_0==EVENTS||LA101_0==IDENT||LA101_0==STAR||LA101_0==TICKED_STRING_LITERAL) ) {
                alt101=1;
            }
            else if ( (LA101_0==LPAREN) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaDef4660);
                    variantList270=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList270.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN271=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaDef4671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN271);
                    int alt100=2;
                    int LA100_0 = input.LA(1);
                    if ( (LA100_0==EVENTS||LA100_0==IDENT||LA100_0==TICKED_STRING_LITERAL) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaDef4673);
                            createColumnList272=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList272.getTree());
                            }
                            break;
                    }
                    RPAREN273=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaDef4676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN273);
                    }
                    break;
            }
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);
                if ( (LA102_0==IDENT) ) {
                    alt102=1;
                }
                switch (alt102) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaDef4685);
            	    createSchemaQual274=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual274.getTree());
            	    }
            	    break;
            	default :
            	    break loop102;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_DEF, "CREATE_SCHEMA_DEF"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafDelete_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafDelete_return fafDelete() throws RecognitionException {
        EsperEPL2GrammarParser.fafDelete_return retval = new EsperEPL2GrammarParser.fafDelete_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token i=null;
        Token DELETE275=null;
        Token FROM276=null;
        Token AS277=null;
        Token WHERE278=null;
        EsperEPL2GrammarParser.whereClause_return whereClause279 = null;
        CommonTree name_tree=null;
        CommonTree i_tree=null;
        CommonTree DELETE275_tree=null;
        CommonTree FROM276_tree=null;
        CommonTree AS277_tree=null;
        CommonTree WHERE278_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            DELETE275=(Token)match(input,DELETE,FOLLOW_DELETE_in_fafDelete4721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE275);
            FROM276=(Token)match(input,FROM,FOLLOW_FROM_in_fafDelete4723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM276);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt103=3;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==AS) ) {
                alt103=1;
            }
            else if ( (LA103_0==IDENT) ) {
                alt103=2;
            }
            switch (alt103) {
                case 1 :
                    {
                    AS277=(Token)match(input,AS,FOLLOW_AS_in_fafDelete4730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS277);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_fafDelete4740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==WHERE) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    WHERE278=(Token)match(input,WHERE,FOLLOW_WHERE_in_fafDelete4745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE278);
                    pushFollow(FOLLOW_whereClause_in_fafDelete4747);
                    whereClause279=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause279.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fafUpdate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fafUpdate_return fafUpdate() throws RecognitionException {
        EsperEPL2GrammarParser.fafUpdate_return retval = new EsperEPL2GrammarParser.fafUpdate_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token UPDATE280=null;
        EsperEPL2GrammarParser.updateDetails_return updateDetails281 = null;
        CommonTree UPDATE280_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleSubtreeStream stream_updateDetails=new RewriteRuleSubtreeStream(adaptor,"rule updateDetails");
        try {
            {
            UPDATE280=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_fafUpdate4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE280);
            pushFollow(FOLLOW_updateDetails_in_fafUpdate4780);
            updateDetails281=updateDetails();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateDetails.add(updateDetails281.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_UPDATE.nextNode(), root_1);
                adaptor.addChild(root_1, stream_updateDetails.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createDataflow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createDataflow_return createDataflow() throws RecognitionException {
        EsperEPL2GrammarParser.createDataflow_return retval = new EsperEPL2GrammarParser.createDataflow_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE282=null;
        Token DATAFLOW283=null;
        Token AS284=null;
        EsperEPL2GrammarParser.gopList_return gopList285 = null;
        CommonTree name_tree=null;
        CommonTree CREATE282_tree=null;
        CommonTree DATAFLOW283_tree=null;
        CommonTree AS284_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_DATAFLOW=new RewriteRuleTokenStream(adaptor,"token DATAFLOW");
        RewriteRuleSubtreeStream stream_gopList=new RewriteRuleSubtreeStream(adaptor,"rule gopList");
        try {
            {
            CREATE282=(Token)match(input,CREATE,FOLLOW_CREATE_in_createDataflow4801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE282);
            DATAFLOW283=(Token)match(input,DATAFLOW,FOLLOW_DATAFLOW_in_createDataflow4803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DATAFLOW.add(DATAFLOW283);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createDataflow4807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==AS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    AS284=(Token)match(input,AS,FOLLOW_AS_in_createDataflow4809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS284);
                    }
                    break;
            }
            pushFollow(FOLLOW_gopList_in_createDataflow4812);
            gopList285=gopList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopList.add(gopList285.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_DATAFLOW, "CREATE_DATAFLOW"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_gopList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopList_return gopList() throws RecognitionException {
        EsperEPL2GrammarParser.gopList_return retval = new EsperEPL2GrammarParser.gopList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.gop_return gop286 = null;
        EsperEPL2GrammarParser.gop_return gop287 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gop_in_gopList4837);
            gop286=gop();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gop286.getTree());
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);
                if ( (LA106_0==CREATE||LA106_0==SELECT||LA106_0==IDENT||LA106_0==ATCHAR) ) {
                    alt106=1;
                }
                switch (alt106) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_gop_in_gopList4839);
            	    gop287=gop();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gop287.getTree());
            	    }
            	    break;
            	default :
            	    break loop106;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gop_return gop() throws RecognitionException {
        EsperEPL2GrammarParser.gop_return retval = new EsperEPL2GrammarParser.gop_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token opName=null;
        Token s=null;
        Token LCURLY291=null;
        Token COMMA293=null;
        Token RCURLY294=null;
        Token COMMA296=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum288 = null;
        EsperEPL2GrammarParser.gopParams_return gopParams289 = null;
        EsperEPL2GrammarParser.gopOut_return gopOut290 = null;
        EsperEPL2GrammarParser.gopDetail_return gopDetail292 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr295 = null;
        CommonTree opName_tree=null;
        CommonTree s_tree=null;
        CommonTree LCURLY291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree RCURLY294_tree=null;
        CommonTree COMMA296_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_gopOut=new RewriteRuleSubtreeStream(adaptor,"rule gopOut");
        RewriteRuleSubtreeStream stream_gopDetail=new RewriteRuleSubtreeStream(adaptor,"rule gopDetail");
        RewriteRuleSubtreeStream stream_gopParams=new RewriteRuleSubtreeStream(adaptor,"rule gopParams");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        try {
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==SELECT||LA113_0==IDENT||LA113_0==ATCHAR) ) {
                alt113=1;
            }
            else if ( (LA113_0==CREATE) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);
                        if ( (LA107_0==ATCHAR) ) {
                            alt107=1;
                        }
                        switch (alt107) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_annotationEnum_in_gop4852);
                    	    annotationEnum288=annotationEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum288.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop107;
                        }
                    } while (true);
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==IDENT) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==SELECT) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);
                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            opName=(Token)match(input,IDENT,FOLLOW_IDENT_in_gop4858); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(opName);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,SELECT,FOLLOW_SELECT_in_gop4864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SELECT.add(s);
                            }
                            break;
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);
                    if ( (LA109_0==LPAREN) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopParams_in_gop4867);
                            gopParams289=gopParams();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopParams.add(gopParams289.getTree());
                            }
                            break;
                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( (LA110_0==FOLLOWED_BY) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopOut_in_gop4870);
                            gopOut290=gopOut();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopOut.add(gopOut290.getTree());
                            }
                            break;
                    }
                    LCURLY291=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_gop4873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY291);
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==SELECT||LA111_0==IDENT) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_gopDetail_in_gop4875);
                            gopDetail292=gopDetail();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_gopDetail.add(gopDetail292.getTree());
                            }
                            break;
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==COMMA) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);
                            }
                            break;
                    }
                    RCURLY294=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_gop4881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY294);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleTokenStream stream_opName=new RewriteRuleTokenStream(adaptor,"token opName",opName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOP, "GOP"), root_1);
                        if ( stream_opName.hasNext() ) {
                            adaptor.addChild(root_1, stream_opName.nextNode());
                        }
                        stream_opName.reset();
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());
                        }
                        stream_s.reset();
                        if ( stream_gopParams.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopParams.nextTree());
                        }
                        stream_gopParams.reset();
                        if ( stream_gopOut.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopOut.nextTree());
                        }
                        stream_gopOut.reset();
                        if ( stream_gopDetail.hasNext() ) {
                            adaptor.addChild(root_1, stream_gopDetail.nextTree());
                        }
                        stream_gopDetail.reset();
                        while ( stream_annotationEnum.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                        }
                        stream_annotationEnum.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createSchemaExpr_in_gop4914);
                    createSchemaExpr295=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr295.getTree());
                    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_gop4916); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParams_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParams_return gopParams() throws RecognitionException {
        EsperEPL2GrammarParser.gopParams_return retval = new EsperEPL2GrammarParser.gopParams_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN297=null;
        Token RPAREN299=null;
        EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList298 = null;
        CommonTree LPAREN297_tree=null;
        CommonTree RPAREN299_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_gopParamsItemList=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemList");
        try {
            {
            LPAREN297=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParams4930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN297);
            pushFollow(FOLLOW_gopParamsItemList_in_gopParams4932);
            gopParamsItemList298=gopParamsItemList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopParamsItemList.add(gopParamsItemList298.getTree());
            RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParams4934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN299);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAM, "GOPPARAM"), root_1);
                adaptor.addChild(root_1, stream_gopParamsItemList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemList_return gopParamsItemList() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemList_return retval = new EsperEPL2GrammarParser.gopParamsItemList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA301=null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem300 = null;
        EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem302 = null;
        CommonTree COMMA301_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4956);
            gopParamsItem300=gopParamsItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem300.getTree());
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    COMMA301=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemList4959); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopParamsItem_in_gopParamsItemList4962);
            	    gopParamsItem302=gopParamsItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopParamsItem302.getTree());
            	    }
            	    break;
            	default :
            	    break loop114;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItem_return gopParamsItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItem_return retval = new EsperEPL2GrammarParser.gopParamsItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany303 = null;
        EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs304 = null;
        RewriteRuleSubtreeStream stream_gopParamsItemMany=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemMany");
        RewriteRuleSubtreeStream stream_gopParamsItemAs=new RewriteRuleSubtreeStream(adaptor,"rule gopParamsItemAs");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==EVENTS||LA115_0==IDENT||LA115_0==TICKED_STRING_LITERAL) ) {
                alt115=1;
            }
            else if ( (LA115_0==LPAREN) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);
                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifier_in_gopParamsItem4981);
                    n=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_gopParamsItemMany_in_gopParamsItem4985);
                    gopParamsItemMany303=gopParamsItemMany();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemMany.add(gopParamsItemMany303.getTree());
                    }
                    break;
            }
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==AS) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopParamsItemAs_in_gopParamsItem4988);
                    gopParamsItemAs304=gopParamsItemAs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopParamsItemAs.add(gopParamsItemAs304.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPPARAMITM, "GOPPARAMITM"), root_1);
                if ( stream_n.hasNext() ) {
                    adaptor.addChild(root_1, stream_n.nextTree());
                }
                stream_n.reset();
                if ( stream_gopParamsItemMany.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemMany.nextTree());
                }
                stream_gopParamsItemMany.reset();
                if ( stream_gopParamsItemAs.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopParamsItemAs.nextTree());
                }
                stream_gopParamsItemAs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemMany_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemMany_return gopParamsItemMany() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemMany_return retval = new EsperEPL2GrammarParser.gopParamsItemMany_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN305=null;
        Token COMMA307=null;
        Token RPAREN309=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier306 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier308 = null;
        CommonTree LPAREN305_tree=null;
        CommonTree COMMA307_tree=null;
        CommonTree RPAREN309_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopParamsItemMany5018); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5021);
            classIdentifier306=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier306.getTree());
            {
            COMMA307=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopParamsItemMany5024); if (state.failed) return retval;
            pushFollow(FOLLOW_classIdentifier_in_gopParamsItemMany5027);
            classIdentifier308=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier308.getTree());
            }
            RPAREN309=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopParamsItemMany5030); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopParamsItemAs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopParamsItemAs_return gopParamsItemAs() throws RecognitionException {
        EsperEPL2GrammarParser.gopParamsItemAs_return retval = new EsperEPL2GrammarParser.gopParamsItemAs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token AS310=null;
        CommonTree a_tree=null;
        CommonTree AS310_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            AS310=(Token)match(input,AS,FOLLOW_AS_in_gopParamsItemAs5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS310);
            a=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopParamsItemAs5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(a);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);
                adaptor.addChild(root_1, stream_a.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOut_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOut_return gopOut() throws RecognitionException {
        EsperEPL2GrammarParser.gopOut_return retval = new EsperEPL2GrammarParser.gopOut_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FOLLOWED_BY311=null;
        Token COMMA313=null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem312 = null;
        EsperEPL2GrammarParser.gopOutItem_return gopOutItem314 = null;
        CommonTree FOLLOWED_BY311_tree=null;
        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_gopOutItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutItem");
        try {
            {
            FOLLOWED_BY311=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_gopOut5068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(FOLLOWED_BY311);
            pushFollow(FOLLOW_gopOutItem_in_gopOut5070);
            gopOutItem312=gopOutItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem312.getTree());
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);
                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }
                switch (alt117) {
            	case 1 :
            	    {
            	    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOut5073); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);
            	    pushFollow(FOLLOW_gopOutItem_in_gopOut5075);
            	    gopOutItem314=gopOutItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopOutItem.add(gopOutItem314.getTree());
            	    }
            	    break;
            	default :
            	    break loop117;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUT, "GOPOUT"), root_1);
                if ( !(stream_gopOutItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopOutItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutItem.nextTree());
                }
                stream_gopOutItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutItem_return gopOutItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutItem_return retval = new EsperEPL2GrammarParser.gopOutItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return n = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList315 = null;
        RewriteRuleSubtreeStream stream_gopOutTypeList=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifier_in_gopOutItem5101);
            n=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(n.getTree());
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==LT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutItem5103);
                    gopOutTypeList315=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeList.add(gopOutTypeList315.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTITM, "GOPOUTITM"), root_1);
                adaptor.addChild(root_1, stream_n.nextTree());
                if ( stream_gopOutTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeList.nextTree());
                }
                stream_gopOutTypeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeList_return retval = new EsperEPL2GrammarParser.gopOutTypeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LT316=null;
        Token COMMA318=null;
        Token GT320=null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam317 = null;
        EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam319 = null;
        CommonTree LT316_tree=null;
        CommonTree COMMA318_tree=null;
        CommonTree GT320_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LT316=(Token)match(input,LT,FOLLOW_LT_in_gopOutTypeList5130); if (state.failed) return retval;
            pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5133);
            gopOutTypeParam317=gopOutTypeParam();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam317.getTree());
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);
                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }
                switch (alt119) {
            	case 1 :
            	    {
            	    COMMA318=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopOutTypeList5136); if (state.failed) return retval;
            	    pushFollow(FOLLOW_gopOutTypeParam_in_gopOutTypeList5139);
            	    gopOutTypeParam319=gopOutTypeParam();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeParam319.getTree());
            	    }
            	    break;
            	default :
            	    break loop119;
                }
            } while (true);
            GT320=(Token)match(input,GT,FOLLOW_GT_in_gopOutTypeList5143); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeParam_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeParam_return gopOutTypeParam() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeParam_return retval = new EsperEPL2GrammarParser.gopOutTypeParam_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem321 = null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_gopOutTypeItem=new RewriteRuleSubtreeStream(adaptor,"rule gopOutTypeItem");
        try {
            {
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==EVENTS||LA120_0==IDENT||LA120_0==TICKED_STRING_LITERAL) ) {
                alt120=1;
            }
            else if ( (LA120_0==QUESTION) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);
                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeItem_in_gopOutTypeParam5157);
                    gopOutTypeItem321=gopOutTypeItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gopOutTypeItem.add(gopOutTypeItem321.getTree());
                    }
                    break;
                case 2 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_gopOutTypeParam5163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPOUTTYP, "GOPOUTTYP"), root_1);
                if ( stream_gopOutTypeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopOutTypeItem.nextTree());
                }
                stream_gopOutTypeItem.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopOutTypeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopOutTypeItem_return gopOutTypeItem() throws RecognitionException {
        EsperEPL2GrammarParser.gopOutTypeItem_return retval = new EsperEPL2GrammarParser.gopOutTypeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier322 = null;
        EsperEPL2GrammarParser.gopOutTypeList_return gopOutTypeList323 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_classIdentifier_in_gopOutTypeItem5190);
            classIdentifier322=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier322.getTree());
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==LT) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    pushFollow(FOLLOW_gopOutTypeList_in_gopOutTypeItem5192);
                    gopOutTypeList323=gopOutTypeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gopOutTypeList323.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopDetail_return gopDetail() throws RecognitionException {
        EsperEPL2GrammarParser.gopDetail_return retval = new EsperEPL2GrammarParser.gopDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA325=null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig324 = null;
        EsperEPL2GrammarParser.gopConfig_return gopConfig326 = null;
        CommonTree COMMA325_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_gopConfig=new RewriteRuleSubtreeStream(adaptor,"rule gopConfig");
        try {
            {
            pushFollow(FOLLOW_gopConfig_in_gopDetail5204);
            gopConfig324=gopConfig();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig324.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    int LA122_1 = input.LA(2);
                    if ( (LA122_1==SELECT||LA122_1==IDENT) ) {
                        alt122=1;
                    }
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_gopDetail5207); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA325);
            	    pushFollow(FOLLOW_gopConfig_in_gopDetail5209);
            	    gopConfig326=gopConfig();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_gopConfig.add(gopConfig326.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFG, "GOPCFG"), root_1);
                if ( !(stream_gopConfig.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_gopConfig.hasNext() ) {
                    adaptor.addChild(root_1, stream_gopConfig.nextTree());
                }
                stream_gopConfig.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class gopConfig_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.gopConfig_return gopConfig() throws RecognitionException {
        EsperEPL2GrammarParser.gopConfig_return retval = new EsperEPL2GrammarParser.gopConfig_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token SELECT327=null;
        Token COLON328=null;
        Token EQUALS329=null;
        Token LPAREN330=null;
        Token RPAREN332=null;
        Token COLON333=null;
        Token EQUALS334=null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr331 = null;
        EsperEPL2GrammarParser.expression_return expression335 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject336 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray337 = null;
        CommonTree n_tree=null;
        CommonTree SELECT327_tree=null;
        CommonTree COLON328_tree=null;
        CommonTree EQUALS329_tree=null;
        CommonTree LPAREN330_tree=null;
        CommonTree RPAREN332_tree=null;
        CommonTree COLON333_tree=null;
        CommonTree EQUALS334_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectExpr=new RewriteRuleSubtreeStream(adaptor,"rule selectExpr");
        RewriteRuleSubtreeStream stream_jsonarray=new RewriteRuleSubtreeStream(adaptor,"rule jsonarray");
        RewriteRuleSubtreeStream stream_jsonobject=new RewriteRuleSubtreeStream(adaptor,"rule jsonobject");
        try {
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==SELECT) ) {
                alt126=1;
            }
            else if ( (LA126_0==IDENT) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);
                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    {
                    SELECT327=(Token)match(input,SELECT,FOLLOW_SELECT_in_gopConfig5233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT327);
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( (LA123_0==COLON) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==EQUALS) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 0, input);
                        throw nvae;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            COLON328=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5236); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON328);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS329=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5238); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS329);
                            }
                            break;
                    }
                    LPAREN330=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gopConfig5241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN330);
                    pushFollow(FOLLOW_selectExpr_in_gopConfig5243);
                    selectExpr331=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectExpr.add(selectExpr331.getTree());
                    RPAREN332=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gopConfig5245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN332);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGEPL, "GOPCFGEPL"), root_1);
                        adaptor.addChild(root_1, stream_selectExpr.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    n=(Token)match(input,IDENT,FOLLOW_IDENT_in_gopConfig5262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(n);
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==COLON) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==EQUALS) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);
                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            COLON333=(Token)match(input,COLON,FOLLOW_COLON_in_gopConfig5265); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON333);
                            }
                            break;
                        case 2 :
                            {
                            EQUALS334=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_gopConfig5267); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS334);
                            }
                            break;
                    }
                    int alt125=3;
                    switch ( input.LA(1) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case ISTREAM:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case FOR:
                    case WHILE:
                    case USING:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case QUESTION:
                    case PLUS:
                    case STRING_LITERAL:
                    case QUOTED_STRING_LITERAL:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt125=1;
                        }
                        break;
                    case LCURLY:
                        {
                        switch ( input.LA(2) ) {
                        case BETWEEN:
                        case NOT_EXPR:
                        case WHERE:
                        case CASE:
                        case ISTREAM:
                        case PREVIOUSCOUNT:
                        case PREVIOUSWINDOW:
                        case EXISTS:
                        case CURRENT_TIMESTAMP:
                        case SET:
                        case BOOLEAN_TRUE:
                        case BOOLEAN_FALSE:
                        case VALUE_NULL:
                        case AFTER:
                        case NEWKW:
                        case NUM_DOUBLE:
                        case LPAREN:
                        case LCURLY:
                        case RCURLY:
                        case QUESTION:
                        case PLUS:
                        case MINUS:
                        case NUM_INT:
                        case NUM_LONG:
                        case NUM_FLOAT:
                            {
                            alt125=1;
                            }
                            break;
                        case STRING_LITERAL:
                            {
                            int LA125_85 = input.LA(3);
                            if ( (LA125_85==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_85>=IN_SET && LA125_85<=REGEXP)||(LA125_85>=OR_EXPR && LA125_85<=NOT_EXPR)||LA125_85==IS||LA125_85==RCURLY||LA125_85==COMMA||(LA125_85>=EQUALS && LA125_85<=STAR)||(LA125_85>=LT && LA125_85<=GT)||(LA125_85>=BOR && LA125_85<=PLUS)||(LA125_85>=BAND && LA125_85<=MOD)) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 85, input);
                                throw nvae;
                            }
                            }
                            break;
                        case QUOTED_STRING_LITERAL:
                            {
                            int LA125_86 = input.LA(3);
                            if ( (LA125_86==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_86>=IN_SET && LA125_86<=REGEXP)||(LA125_86>=OR_EXPR && LA125_86<=NOT_EXPR)||LA125_86==IS||LA125_86==RCURLY||LA125_86==COMMA||(LA125_86>=EQUALS && LA125_86<=STAR)||(LA125_86>=LT && LA125_86<=GT)||(LA125_86>=BOR && LA125_86<=PLUS)||(LA125_86>=BAND && LA125_86<=MOD)) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 86, input);
                                throw nvae;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA125_92 = input.LA(3);
                            if ( ((LA125_92>=IN_SET && LA125_92<=REGEXP)||(LA125_92>=OR_EXPR && LA125_92<=NOT_EXPR)||LA125_92==IS||LA125_92==LBRACK||LA125_92==LPAREN||LA125_92==RCURLY||(LA125_92>=COMMA && LA125_92<=STAR)||(LA125_92>=LT && LA125_92<=PLUS)||(LA125_92>=BAND && LA125_92<=MOD)||LA125_92==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_92==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 92, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TICKED_STRING_LITERAL:
                            {
                            int LA125_93 = input.LA(3);
                            if ( (LA125_93==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_93>=IN_SET && LA125_93<=REGEXP)||(LA125_93>=OR_EXPR && LA125_93<=NOT_EXPR)||LA125_93==IS||LA125_93==LBRACK||LA125_93==LPAREN||LA125_93==RCURLY||(LA125_93>=COMMA && LA125_93<=STAR)||(LA125_93>=LT && LA125_93<=PLUS)||(LA125_93>=BAND && LA125_93<=MOD)||LA125_93==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 93, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AT:
                            {
                            int LA125_94 = input.LA(3);
                            if ( ((LA125_94>=IN_SET && LA125_94<=REGEXP)||(LA125_94>=OR_EXPR && LA125_94<=NOT_EXPR)||LA125_94==IS||LA125_94==LBRACK||LA125_94==LPAREN||LA125_94==RCURLY||(LA125_94>=COMMA && LA125_94<=STAR)||(LA125_94>=LT && LA125_94<=PLUS)||(LA125_94>=BAND && LA125_94<=MOD)||LA125_94==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_94==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 94, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COUNT:
                            {
                            int LA125_95 = input.LA(3);
                            if ( ((LA125_95>=IN_SET && LA125_95<=REGEXP)||(LA125_95>=OR_EXPR && LA125_95<=NOT_EXPR)||LA125_95==IS||LA125_95==LBRACK||LA125_95==LPAREN||LA125_95==RCURLY||(LA125_95>=COMMA && LA125_95<=STAR)||(LA125_95>=LT && LA125_95<=PLUS)||(LA125_95>=BAND && LA125_95<=MOD)||LA125_95==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_95==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 95, input);
                                throw nvae;
                            }
                            }
                            break;
                        case ESCAPE:
                            {
                            int LA125_96 = input.LA(3);
                            if ( ((LA125_96>=IN_SET && LA125_96<=REGEXP)||(LA125_96>=OR_EXPR && LA125_96<=NOT_EXPR)||LA125_96==IS||LA125_96==LBRACK||LA125_96==LPAREN||LA125_96==RCURLY||(LA125_96>=COMMA && LA125_96<=STAR)||(LA125_96>=LT && LA125_96<=PLUS)||(LA125_96>=BAND && LA125_96<=MOD)||LA125_96==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_96==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 96, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVERY_EXPR:
                            {
                            int LA125_97 = input.LA(3);
                            if ( (LA125_97==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_97>=IN_SET && LA125_97<=REGEXP)||(LA125_97>=OR_EXPR && LA125_97<=NOT_EXPR)||LA125_97==IS||LA125_97==LBRACK||LA125_97==LPAREN||LA125_97==RCURLY||(LA125_97>=COMMA && LA125_97<=STAR)||(LA125_97>=LT && LA125_97<=PLUS)||(LA125_97>=BAND && LA125_97<=MOD)||LA125_97==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 97, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SUM:
                            {
                            int LA125_98 = input.LA(3);
                            if ( ((LA125_98>=IN_SET && LA125_98<=REGEXP)||(LA125_98>=OR_EXPR && LA125_98<=NOT_EXPR)||LA125_98==IS||LA125_98==LBRACK||LA125_98==LPAREN||LA125_98==RCURLY||(LA125_98>=COMMA && LA125_98<=STAR)||(LA125_98>=LT && LA125_98<=PLUS)||(LA125_98>=BAND && LA125_98<=MOD)||LA125_98==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_98==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 98, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVG:
                            {
                            int LA125_99 = input.LA(3);
                            if ( ((LA125_99>=IN_SET && LA125_99<=REGEXP)||(LA125_99>=OR_EXPR && LA125_99<=NOT_EXPR)||LA125_99==IS||LA125_99==LBRACK||LA125_99==LPAREN||LA125_99==RCURLY||(LA125_99>=COMMA && LA125_99<=STAR)||(LA125_99>=LT && LA125_99<=PLUS)||(LA125_99>=BAND && LA125_99<=MOD)||LA125_99==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_99==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 99, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MAX:
                            {
                            int LA125_100 = input.LA(3);
                            if ( (LA125_100==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_100>=IN_SET && LA125_100<=REGEXP)||(LA125_100>=OR_EXPR && LA125_100<=NOT_EXPR)||LA125_100==IS||LA125_100==LBRACK||LA125_100==LPAREN||LA125_100==RCURLY||(LA125_100>=COMMA && LA125_100<=STAR)||(LA125_100>=LT && LA125_100<=PLUS)||(LA125_100>=BAND && LA125_100<=MOD)||LA125_100==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 100, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MIN:
                            {
                            int LA125_101 = input.LA(3);
                            if ( ((LA125_101>=IN_SET && LA125_101<=REGEXP)||(LA125_101>=OR_EXPR && LA125_101<=NOT_EXPR)||LA125_101==IS||LA125_101==LBRACK||LA125_101==LPAREN||LA125_101==RCURLY||(LA125_101>=COMMA && LA125_101<=STAR)||(LA125_101>=LT && LA125_101<=PLUS)||(LA125_101>=BAND && LA125_101<=MOD)||LA125_101==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_101==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 101, input);
                                throw nvae;
                            }
                            }
                            break;
                        case COALESCE:
                            {
                            int LA125_102 = input.LA(3);
                            if ( ((LA125_102>=IN_SET && LA125_102<=REGEXP)||(LA125_102>=OR_EXPR && LA125_102<=NOT_EXPR)||LA125_102==IS||LA125_102==LBRACK||LA125_102==LPAREN||LA125_102==RCURLY||(LA125_102>=COMMA && LA125_102<=STAR)||(LA125_102>=LT && LA125_102<=PLUS)||(LA125_102>=BAND && LA125_102<=MOD)||LA125_102==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_102==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 102, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MEDIAN:
                            {
                            int LA125_103 = input.LA(3);
                            if ( ((LA125_103>=IN_SET && LA125_103<=REGEXP)||(LA125_103>=OR_EXPR && LA125_103<=NOT_EXPR)||LA125_103==IS||LA125_103==LBRACK||LA125_103==LPAREN||LA125_103==RCURLY||(LA125_103>=COMMA && LA125_103<=STAR)||(LA125_103>=LT && LA125_103<=PLUS)||(LA125_103>=BAND && LA125_103<=MOD)||LA125_103==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_103==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 103, input);
                                throw nvae;
                            }
                            }
                            break;
                        case STDDEV:
                            {
                            int LA125_104 = input.LA(3);
                            if ( ((LA125_104>=IN_SET && LA125_104<=REGEXP)||(LA125_104>=OR_EXPR && LA125_104<=NOT_EXPR)||LA125_104==IS||LA125_104==LBRACK||LA125_104==LPAREN||LA125_104==RCURLY||(LA125_104>=COMMA && LA125_104<=STAR)||(LA125_104>=LT && LA125_104<=PLUS)||(LA125_104>=BAND && LA125_104<=MOD)||LA125_104==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_104==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 104, input);
                                throw nvae;
                            }
                            }
                            break;
                        case AVEDEV:
                            {
                            int LA125_105 = input.LA(3);
                            if ( ((LA125_105>=IN_SET && LA125_105<=REGEXP)||(LA125_105>=OR_EXPR && LA125_105<=NOT_EXPR)||LA125_105==IS||LA125_105==LBRACK||LA125_105==LPAREN||LA125_105==RCURLY||(LA125_105>=COMMA && LA125_105<=STAR)||(LA125_105>=LT && LA125_105<=PLUS)||(LA125_105>=BAND && LA125_105<=MOD)||LA125_105==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_105==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 105, input);
                                throw nvae;
                            }
                            }
                            break;
                        case EVENTS:
                            {
                            int LA125_106 = input.LA(3);
                            if ( ((LA125_106>=IN_SET && LA125_106<=REGEXP)||(LA125_106>=OR_EXPR && LA125_106<=NOT_EXPR)||LA125_106==IS||LA125_106==LBRACK||LA125_106==LPAREN||LA125_106==RCURLY||(LA125_106>=COMMA && LA125_106<=STAR)||(LA125_106>=LT && LA125_106<=PLUS)||(LA125_106>=BAND && LA125_106<=MOD)||LA125_106==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_106==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 106, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FIRST:
                            {
                            int LA125_107 = input.LA(3);
                            if ( ((LA125_107>=IN_SET && LA125_107<=REGEXP)||(LA125_107>=OR_EXPR && LA125_107<=NOT_EXPR)||LA125_107==IS||LA125_107==LBRACK||LA125_107==LPAREN||LA125_107==RCURLY||(LA125_107>=COMMA && LA125_107<=STAR)||(LA125_107>=LT && LA125_107<=PLUS)||(LA125_107>=BAND && LA125_107<=MOD)||LA125_107==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_107==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 107, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LAST:
                            {
                            int LA125_108 = input.LA(3);
                            if ( ((LA125_108>=IN_SET && LA125_108<=REGEXP)||(LA125_108>=OR_EXPR && LA125_108<=NOT_EXPR)||LA125_108==IS||LA125_108==LBRACK||LA125_108==LPAREN||LA125_108==RCURLY||(LA125_108>=COMMA && LA125_108<=STAR)||(LA125_108>=LT && LA125_108<=PLUS)||(LA125_108>=BAND && LA125_108<=MOD)||LA125_108==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_108==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 108, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WHILE:
                            {
                            int LA125_109 = input.LA(3);
                            if ( ((LA125_109>=IN_SET && LA125_109<=REGEXP)||(LA125_109>=OR_EXPR && LA125_109<=NOT_EXPR)||LA125_109==IS||LA125_109==LBRACK||LA125_109==LPAREN||LA125_109==RCURLY||(LA125_109>=COMMA && LA125_109<=STAR)||(LA125_109>=LT && LA125_109<=PLUS)||(LA125_109>=BAND && LA125_109<=MOD)||LA125_109==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_109==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 109, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MERGE:
                            {
                            int LA125_110 = input.LA(3);
                            if ( ((LA125_110>=IN_SET && LA125_110<=REGEXP)||(LA125_110>=OR_EXPR && LA125_110<=NOT_EXPR)||LA125_110==IS||LA125_110==LBRACK||LA125_110==LPAREN||LA125_110==RCURLY||(LA125_110>=COMMA && LA125_110<=STAR)||(LA125_110>=LT && LA125_110<=PLUS)||(LA125_110>=BAND && LA125_110<=MOD)||LA125_110==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_110==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 110, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHED:
                            {
                            int LA125_111 = input.LA(3);
                            if ( ((LA125_111>=IN_SET && LA125_111<=REGEXP)||(LA125_111>=OR_EXPR && LA125_111<=NOT_EXPR)||LA125_111==IS||LA125_111==LBRACK||LA125_111==LPAREN||LA125_111==RCURLY||(LA125_111>=COMMA && LA125_111<=STAR)||(LA125_111>=LT && LA125_111<=PLUS)||(LA125_111>=BAND && LA125_111<=MOD)||LA125_111==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_111==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 111, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNIDIRECTIONAL:
                            {
                            int LA125_112 = input.LA(3);
                            if ( (LA125_112==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_112>=IN_SET && LA125_112<=REGEXP)||(LA125_112>=OR_EXPR && LA125_112<=NOT_EXPR)||LA125_112==IS||LA125_112==LBRACK||LA125_112==LPAREN||LA125_112==RCURLY||(LA125_112>=COMMA && LA125_112<=STAR)||(LA125_112>=LT && LA125_112<=PLUS)||(LA125_112>=BAND && LA125_112<=MOD)||LA125_112==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 112, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAINUNION:
                            {
                            int LA125_113 = input.LA(3);
                            if ( ((LA125_113>=IN_SET && LA125_113<=REGEXP)||(LA125_113>=OR_EXPR && LA125_113<=NOT_EXPR)||LA125_113==IS||LA125_113==LBRACK||LA125_113==LPAREN||LA125_113==RCURLY||(LA125_113>=COMMA && LA125_113<=STAR)||(LA125_113>=LT && LA125_113<=PLUS)||(LA125_113>=BAND && LA125_113<=MOD)||LA125_113==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_113==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 113, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RETAININTERSECTION:
                            {
                            int LA125_114 = input.LA(3);
                            if ( (LA125_114==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_114>=IN_SET && LA125_114<=REGEXP)||(LA125_114>=OR_EXPR && LA125_114<=NOT_EXPR)||LA125_114==IS||LA125_114==LBRACK||LA125_114==LPAREN||LA125_114==RCURLY||(LA125_114>=COMMA && LA125_114<=STAR)||(LA125_114>=LT && LA125_114<=PLUS)||(LA125_114>=BAND && LA125_114<=MOD)||LA125_114==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 114, input);
                                throw nvae;
                            }
                            }
                            break;
                        case UNTIL:
                            {
                            int LA125_115 = input.LA(3);
                            if ( (LA125_115==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_115>=IN_SET && LA125_115<=REGEXP)||(LA125_115>=OR_EXPR && LA125_115<=NOT_EXPR)||LA125_115==IS||LA125_115==LBRACK||LA125_115==LPAREN||LA125_115==RCURLY||(LA125_115>=COMMA && LA125_115<=STAR)||(LA125_115>=LT && LA125_115<=PLUS)||(LA125_115>=BAND && LA125_115<=MOD)||LA125_115==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 115, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PATTERN:
                            {
                            int LA125_116 = input.LA(3);
                            if ( ((LA125_116>=IN_SET && LA125_116<=REGEXP)||(LA125_116>=OR_EXPR && LA125_116<=NOT_EXPR)||LA125_116==IS||LA125_116==LBRACK||LA125_116==LPAREN||LA125_116==RCURLY||(LA125_116>=COMMA && LA125_116<=STAR)||(LA125_116>=LT && LA125_116<=PLUS)||(LA125_116>=BAND && LA125_116<=MOD)||LA125_116==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_116==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 116, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SQL:
                            {
                            int LA125_117 = input.LA(3);
                            if ( ((LA125_117>=IN_SET && LA125_117<=REGEXP)||(LA125_117>=OR_EXPR && LA125_117<=NOT_EXPR)||LA125_117==IS||LA125_117==LBRACK||LA125_117==LPAREN||LA125_117==RCURLY||(LA125_117>=COMMA && LA125_117<=STAR)||(LA125_117>=LT && LA125_117<=PLUS)||(LA125_117>=BAND && LA125_117<=MOD)||LA125_117==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_117==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 117, input);
                                throw nvae;
                            }
                            }
                            break;
                        case METADATASQL:
                            {
                            int LA125_118 = input.LA(3);
                            if ( ((LA125_118>=IN_SET && LA125_118<=REGEXP)||(LA125_118>=OR_EXPR && LA125_118<=NOT_EXPR)||LA125_118==IS||LA125_118==LBRACK||LA125_118==LPAREN||LA125_118==RCURLY||(LA125_118>=COMMA && LA125_118<=STAR)||(LA125_118>=LT && LA125_118<=PLUS)||(LA125_118>=BAND && LA125_118<=MOD)||LA125_118==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_118==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 118, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUS:
                            {
                            int LA125_119 = input.LA(3);
                            if ( ((LA125_119>=IN_SET && LA125_119<=REGEXP)||(LA125_119>=OR_EXPR && LA125_119<=NOT_EXPR)||LA125_119==IS||LA125_119==LBRACK||LA125_119==LPAREN||LA125_119==RCURLY||(LA125_119>=COMMA && LA125_119<=STAR)||(LA125_119>=LT && LA125_119<=PLUS)||(LA125_119>=BAND && LA125_119<=MOD)||LA125_119==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_119==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 119, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PREVIOUSTAIL:
                            {
                            int LA125_120 = input.LA(3);
                            if ( ((LA125_120>=IN_SET && LA125_120<=REGEXP)||(LA125_120>=OR_EXPR && LA125_120<=NOT_EXPR)||LA125_120==IS||LA125_120==LBRACK||LA125_120==LPAREN||LA125_120==RCURLY||(LA125_120>=COMMA && LA125_120<=STAR)||(LA125_120>=LT && LA125_120<=PLUS)||(LA125_120>=BAND && LA125_120<=MOD)||LA125_120==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_120==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 120, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PRIOR:
                            {
                            int LA125_121 = input.LA(3);
                            if ( ((LA125_121>=IN_SET && LA125_121<=REGEXP)||(LA125_121>=OR_EXPR && LA125_121<=NOT_EXPR)||LA125_121==IS||LA125_121==LBRACK||LA125_121==LPAREN||LA125_121==RCURLY||(LA125_121>=COMMA && LA125_121<=STAR)||(LA125_121>=LT && LA125_121<=PLUS)||(LA125_121>=BAND && LA125_121<=MOD)||LA125_121==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_121==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 121, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WEEKDAY:
                            {
                            int LA125_122 = input.LA(3);
                            if ( ((LA125_122>=IN_SET && LA125_122<=REGEXP)||(LA125_122>=OR_EXPR && LA125_122<=NOT_EXPR)||LA125_122==IS||LA125_122==LBRACK||LA125_122==LPAREN||LA125_122==RCURLY||(LA125_122>=COMMA && LA125_122<=STAR)||(LA125_122>=LT && LA125_122<=PLUS)||(LA125_122>=BAND && LA125_122<=MOD)||LA125_122==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_122==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 122, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LW:
                            {
                            int LA125_123 = input.LA(3);
                            if ( (LA125_123==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_123>=IN_SET && LA125_123<=REGEXP)||(LA125_123>=OR_EXPR && LA125_123<=NOT_EXPR)||LA125_123==IS||LA125_123==LBRACK||LA125_123==LPAREN||LA125_123==RCURLY||(LA125_123>=COMMA && LA125_123<=STAR)||(LA125_123>=LT && LA125_123<=PLUS)||(LA125_123>=BAND && LA125_123<=MOD)||LA125_123==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 123, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INSTANCEOF:
                            {
                            int LA125_124 = input.LA(3);
                            if ( ((LA125_124>=IN_SET && LA125_124<=REGEXP)||(LA125_124>=OR_EXPR && LA125_124<=NOT_EXPR)||LA125_124==IS||LA125_124==LBRACK||LA125_124==LPAREN||LA125_124==RCURLY||(LA125_124>=COMMA && LA125_124<=STAR)||(LA125_124>=LT && LA125_124<=PLUS)||(LA125_124>=BAND && LA125_124<=MOD)||LA125_124==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_124==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 124, input);
                                throw nvae;
                            }
                            }
                            break;
                        case TYPEOF:
                            {
                            int LA125_125 = input.LA(3);
                            if ( ((LA125_125>=IN_SET && LA125_125<=REGEXP)||(LA125_125>=OR_EXPR && LA125_125<=NOT_EXPR)||LA125_125==IS||LA125_125==LBRACK||LA125_125==LPAREN||LA125_125==RCURLY||(LA125_125>=COMMA && LA125_125<=STAR)||(LA125_125>=LT && LA125_125<=PLUS)||(LA125_125>=BAND && LA125_125<=MOD)||LA125_125==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_125==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 125, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CAST:
                            {
                            int LA125_126 = input.LA(3);
                            if ( ((LA125_126>=IN_SET && LA125_126<=REGEXP)||(LA125_126>=OR_EXPR && LA125_126<=NOT_EXPR)||LA125_126==IS||LA125_126==LBRACK||LA125_126==LPAREN||LA125_126==RCURLY||(LA125_126>=COMMA && LA125_126<=STAR)||(LA125_126>=LT && LA125_126<=PLUS)||(LA125_126>=BAND && LA125_126<=MOD)||LA125_126==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_126==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 126, input);
                                throw nvae;
                            }
                            }
                            break;
                        case SNAPSHOT:
                            {
                            int LA125_127 = input.LA(3);
                            if ( (LA125_127==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_127>=IN_SET && LA125_127<=REGEXP)||(LA125_127>=OR_EXPR && LA125_127<=NOT_EXPR)||LA125_127==IS||LA125_127==LBRACK||LA125_127==LPAREN||LA125_127==RCURLY||(LA125_127>=COMMA && LA125_127<=STAR)||(LA125_127>=LT && LA125_127<=PLUS)||(LA125_127>=BAND && LA125_127<=MOD)||LA125_127==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 127, input);
                                throw nvae;
                            }
                            }
                            break;
                        case VARIABLE:
                            {
                            int LA125_128 = input.LA(3);
                            if ( ((LA125_128>=IN_SET && LA125_128<=REGEXP)||(LA125_128>=OR_EXPR && LA125_128<=NOT_EXPR)||LA125_128==IS||LA125_128==LBRACK||LA125_128==LPAREN||LA125_128==RCURLY||(LA125_128>=COMMA && LA125_128<=STAR)||(LA125_128>=LT && LA125_128<=PLUS)||(LA125_128>=BAND && LA125_128<=MOD)||LA125_128==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_128==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 128, input);
                                throw nvae;
                            }
                            }
                            break;
                        case INDEX:
                            {
                            int LA125_129 = input.LA(3);
                            if ( ((LA125_129>=IN_SET && LA125_129<=REGEXP)||(LA125_129>=OR_EXPR && LA125_129<=NOT_EXPR)||LA125_129==IS||LA125_129==LBRACK||LA125_129==LPAREN||LA125_129==RCURLY||(LA125_129>=COMMA && LA125_129<=STAR)||(LA125_129>=LT && LA125_129<=PLUS)||(LA125_129>=BAND && LA125_129<=MOD)||LA125_129==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_129==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 129, input);
                                throw nvae;
                            }
                            }
                            break;
                        case WINDOW:
                            {
                            int LA125_130 = input.LA(3);
                            if ( ((LA125_130>=IN_SET && LA125_130<=REGEXP)||(LA125_130>=OR_EXPR && LA125_130<=NOT_EXPR)||LA125_130==IS||LA125_130==LBRACK||LA125_130==LPAREN||LA125_130==RCURLY||(LA125_130>=COMMA && LA125_130<=STAR)||(LA125_130>=LT && LA125_130<=PLUS)||(LA125_130>=BAND && LA125_130<=MOD)||LA125_130==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_130==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 130, input);
                                throw nvae;
                            }
                            }
                            break;
                        case LEFT:
                            {
                            int LA125_131 = input.LA(3);
                            if ( ((LA125_131>=IN_SET && LA125_131<=REGEXP)||(LA125_131>=OR_EXPR && LA125_131<=NOT_EXPR)||LA125_131==IS||LA125_131==LBRACK||LA125_131==LPAREN||LA125_131==RCURLY||(LA125_131>=COMMA && LA125_131<=STAR)||(LA125_131>=LT && LA125_131<=PLUS)||(LA125_131>=BAND && LA125_131<=MOD)||LA125_131==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_131==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 131, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RIGHT:
                            {
                            int LA125_132 = input.LA(3);
                            if ( ((LA125_132>=IN_SET && LA125_132<=REGEXP)||(LA125_132>=OR_EXPR && LA125_132<=NOT_EXPR)||LA125_132==IS||LA125_132==LBRACK||LA125_132==LPAREN||LA125_132==RCURLY||(LA125_132>=COMMA && LA125_132<=STAR)||(LA125_132>=LT && LA125_132<=PLUS)||(LA125_132>=BAND && LA125_132<=MOD)||LA125_132==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_132==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 132, input);
                                throw nvae;
                            }
                            }
                            break;
                        case OUTER:
                            {
                            int LA125_133 = input.LA(3);
                            if ( ((LA125_133>=IN_SET && LA125_133<=REGEXP)||(LA125_133>=OR_EXPR && LA125_133<=NOT_EXPR)||LA125_133==IS||LA125_133==LBRACK||LA125_133==LPAREN||LA125_133==RCURLY||(LA125_133>=COMMA && LA125_133<=STAR)||(LA125_133>=LT && LA125_133<=PLUS)||(LA125_133>=BAND && LA125_133<=MOD)||LA125_133==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_133==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 133, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FULL:
                            {
                            int LA125_134 = input.LA(3);
                            if ( (LA125_134==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_134>=IN_SET && LA125_134<=REGEXP)||(LA125_134>=OR_EXPR && LA125_134<=NOT_EXPR)||LA125_134==IS||LA125_134==LBRACK||LA125_134==LPAREN||LA125_134==RCURLY||(LA125_134>=COMMA && LA125_134<=STAR)||(LA125_134>=LT && LA125_134<=PLUS)||(LA125_134>=BAND && LA125_134<=MOD)||LA125_134==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 134, input);
                                throw nvae;
                            }
                            }
                            break;
                        case JOIN:
                            {
                            int LA125_135 = input.LA(3);
                            if ( ((LA125_135>=IN_SET && LA125_135<=REGEXP)||(LA125_135>=OR_EXPR && LA125_135<=NOT_EXPR)||LA125_135==IS||LA125_135==LBRACK||LA125_135==LPAREN||LA125_135==RCURLY||(LA125_135>=COMMA && LA125_135<=STAR)||(LA125_135>=LT && LA125_135<=PLUS)||(LA125_135>=BAND && LA125_135<=MOD)||LA125_135==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_135==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 135, input);
                                throw nvae;
                            }
                            }
                            break;
                        case DEFINE:
                            {
                            int LA125_136 = input.LA(3);
                            if ( ((LA125_136>=IN_SET && LA125_136<=REGEXP)||(LA125_136>=OR_EXPR && LA125_136<=NOT_EXPR)||LA125_136==IS||LA125_136==LBRACK||LA125_136==LPAREN||LA125_136==RCURLY||(LA125_136>=COMMA && LA125_136<=STAR)||(LA125_136>=LT && LA125_136<=PLUS)||(LA125_136>=BAND && LA125_136<=MOD)||LA125_136==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_136==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 136, input);
                                throw nvae;
                            }
                            }
                            break;
                        case PARTITION:
                            {
                            int LA125_137 = input.LA(3);
                            if ( ((LA125_137>=IN_SET && LA125_137<=REGEXP)||(LA125_137>=OR_EXPR && LA125_137<=NOT_EXPR)||LA125_137==IS||LA125_137==LBRACK||LA125_137==LPAREN||LA125_137==RCURLY||(LA125_137>=COMMA && LA125_137<=STAR)||(LA125_137>=LT && LA125_137<=PLUS)||(LA125_137>=BAND && LA125_137<=MOD)||LA125_137==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_137==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 137, input);
                                throw nvae;
                            }
                            }
                            break;
                        case MATCHES:
                            {
                            int LA125_138 = input.LA(3);
                            if ( (LA125_138==COLON) ) {
                                alt125=2;
                            }
                            else if ( ((LA125_138>=IN_SET && LA125_138<=REGEXP)||(LA125_138>=OR_EXPR && LA125_138<=NOT_EXPR)||LA125_138==IS||LA125_138==LBRACK||LA125_138==LPAREN||LA125_138==RCURLY||(LA125_138>=COMMA && LA125_138<=STAR)||(LA125_138>=LT && LA125_138<=PLUS)||(LA125_138>=BAND && LA125_138<=MOD)||LA125_138==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 138, input);
                                throw nvae;
                            }
                            }
                            break;
                        case CONTEXT:
                            {
                            int LA125_139 = input.LA(3);
                            if ( ((LA125_139>=IN_SET && LA125_139<=REGEXP)||(LA125_139>=OR_EXPR && LA125_139<=NOT_EXPR)||LA125_139==IS||LA125_139==LBRACK||LA125_139==LPAREN||LA125_139==RCURLY||(LA125_139>=COMMA && LA125_139<=STAR)||(LA125_139>=LT && LA125_139<=PLUS)||(LA125_139>=BAND && LA125_139<=MOD)||LA125_139==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_139==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 139, input);
                                throw nvae;
                            }
                            }
                            break;
                        case FOR:
                            {
                            int LA125_140 = input.LA(3);
                            if ( ((LA125_140>=IN_SET && LA125_140<=REGEXP)||(LA125_140>=OR_EXPR && LA125_140<=NOT_EXPR)||LA125_140==IS||LA125_140==LBRACK||LA125_140==LPAREN||LA125_140==RCURLY||(LA125_140>=COMMA && LA125_140<=STAR)||(LA125_140>=LT && LA125_140<=PLUS)||(LA125_140>=BAND && LA125_140<=MOD)||LA125_140==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_140==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 140, input);
                                throw nvae;
                            }
                            }
                            break;
                        case USING:
                            {
                            int LA125_141 = input.LA(3);
                            if ( ((LA125_141>=IN_SET && LA125_141<=REGEXP)||(LA125_141>=OR_EXPR && LA125_141<=NOT_EXPR)||LA125_141==IS||LA125_141==LBRACK||LA125_141==LPAREN||LA125_141==RCURLY||(LA125_141>=COMMA && LA125_141<=STAR)||(LA125_141>=LT && LA125_141<=PLUS)||(LA125_141>=BAND && LA125_141<=MOD)||LA125_141==ESCAPECHAR) ) {
                                alt125=1;
                            }
                            else if ( (LA125_141==COLON) ) {
                                alt125=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 141, input);
                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 74, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        alt125=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);
                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expression_in_gopConfig5271);
                            expression335=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression335.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_jsonobject_in_gopConfig5275);
                            jsonobject336=jsonobject();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonobject.add(jsonobject336.getTree());
                            }
                            break;
                        case 3 :
                            {
                            pushFollow(FOLLOW_jsonarray_in_gopConfig5279);
                            jsonarray337=jsonarray();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_jsonarray.add(jsonarray337.getTree());
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GOPCFGITM, "GOPCFGITM"), root_1);
                        adaptor.addChild(root_1, stream_n.nextNode());
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        if ( stream_jsonobject.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonobject.nextTree());
                        }
                        stream_jsonobject.reset();
                        if ( stream_jsonarray.hasNext() ) {
                            adaptor.addChild(root_1, stream_jsonarray.nextTree());
                        }
                        stream_jsonarray.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamFilterExpression_return streamFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamFilterExpression_return retval = new EsperEPL2GrammarParser.streamFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT338=null;
        Token DOT339=null;
        Token DOT341=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression340 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression342 = null;
        CommonTree IDENT338_tree=null;
        CommonTree DOT339_tree=null;
        CommonTree DOT341_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT338=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamFilterExpression5312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT338_tree = (CommonTree)adaptor.create(IDENT338);
            adaptor.addChild(root_0, IDENT338_tree);
            }
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==DOT) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    DOT339=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT339_tree = (CommonTree)adaptor.create(DOT339);
                    adaptor.addChild(root_0, DOT339_tree);
                    }
                    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5317);
                    viewExpression340=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression340.getTree());
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);
                        if ( (LA127_0==DOT) ) {
                            alt127=1;
                        }
                        switch (alt127) {
                    	case 1 :
                    	    {
                    	    DOT341=(Token)match(input,DOT,FOLLOW_DOT_in_streamFilterExpression5320); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT341_tree = (CommonTree)adaptor.create(DOT341);
                    	    adaptor.addChild(root_0, DOT341_tree);
                    	    }
                    	    pushFollow(FOLLOW_viewExpression_in_streamFilterExpression5322);
                    	    viewExpression342=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewExpression342.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop127;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE343=null;
        Token CONTEXT344=null;
        Token AS345=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail346 = null;
        CommonTree name_tree=null;
        CommonTree CREATE343_tree=null;
        CommonTree CONTEXT344_tree=null;
        CommonTree AS345_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE343=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr5338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE343);
            CONTEXT344=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr5340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT344);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr5344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==AS) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    AS345=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr5346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS345);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr5349);
            createContextDetail346=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail346.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createExpressionExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createExpressionExpr_return createExpressionExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createExpressionExpr_return retval = new EsperEPL2GrammarParser.createExpressionExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CREATE347=null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl348 = null;
        CommonTree CREATE347_tree=null;
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        try {
            {
            CREATE347=(Token)match(input,CREATE,FOLLOW_CREATE_in_createExpressionExpr5374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE347);
            pushFollow(FOLLOW_expressionDecl_in_createExpressionExpr5376);
            expressionDecl348=expressionDecl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl348.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_EXPR, "CREATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA351=null;
        Token COMMA353=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice349 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested350 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested352 = null;
        EsperEPL2GrammarParser.contextContextNested_return contextContextNested354 = null;
        CommonTree COMMA351_tree=null;
        CommonTree COMMA353_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_contextContextNested=new RewriteRuleSubtreeStream(adaptor,"rule contextContextNested");
        try {
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==COALESCE||LA131_0==GROUP||LA131_0==PARTITION||LA131_0==START||LA131_0==INITIATED) ) {
                alt131=1;
            }
            else if ( (LA131_0==CONTEXT) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextChoice_in_createContextDetail5397);
                    createContextChoice349=createContextChoice();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextChoice349.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5402);
                    contextContextNested350=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested350.getTree());
                    COMMA351=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA351);
                    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5406);
                    contextContextNested352=contextContextNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested352.getTree());
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);
                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }
                        switch (alt130) {
                    	case 1 :
                    	    {
                    	    COMMA353=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail5409); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA353);
                    	    pushFollow(FOLLOW_contextContextNested_in_createContextDetail5411);
                    	    contextContextNested354=contextContextNested();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_contextContextNested.add(contextContextNested354.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop130;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_NESTED, "CREATE_CTX_NESTED"), root_1);
                        if ( !(stream_contextContextNested.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_contextContextNested.hasNext() ) {
                            adaptor.addChild(root_1, stream_contextContextNested.nextTree());
                        }
                        stream_contextContextNested.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextContextNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextContextNested_return contextContextNested() throws RecognitionException {
        EsperEPL2GrammarParser.contextContextNested_return retval = new EsperEPL2GrammarParser.contextContextNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CONTEXT355=null;
        Token AS356=null;
        EsperEPL2GrammarParser.createContextChoice_return createContextChoice357 = null;
        CommonTree name_tree=null;
        CommonTree CONTEXT355_tree=null;
        CommonTree AS356_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextChoice=new RewriteRuleSubtreeStream(adaptor,"rule createContextChoice");
        try {
            {
            CONTEXT355=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextContextNested5437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT355);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextContextNested5441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==AS) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    AS356=(Token)match(input,AS,FOLLOW_AS_in_contextContextNested5443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS356);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextChoice_in_contextContextNested5446);
            createContextChoice357=createContextChoice();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextChoice.add(createContextChoice357.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextChoice.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextChoice_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextChoice_return createContextChoice() throws RecognitionException {
        EsperEPL2GrammarParser.createContextChoice_return retval = new EsperEPL2GrammarParser.createContextChoice_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token g=null;
        Token p=null;
        Token START358=null;
        Token ATCHAR359=null;
        Token END361=null;
        Token INITIATED363=null;
        Token BY364=null;
        Token ATCHAR365=null;
        Token AND_EXPR366=null;
        Token TERMINATED368=null;
        Token BY369=null;
        Token PARTITION371=null;
        Token BY372=null;
        Token COMMA374=null;
        Token COMMA377=null;
        Token FROM379=null;
        Token COALESCE381=null;
        Token BY382=null;
        Token COMMA384=null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint360 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint362 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint367 = null;
        EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint370 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem373 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem375 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem376 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem378 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression380 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem383 = null;
        EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem385 = null;
        EsperEPL2GrammarParser.number_return number386 = null;
        CommonTree i_tree=null;
        CommonTree g_tree=null;
        CommonTree p_tree=null;
        CommonTree START358_tree=null;
        CommonTree ATCHAR359_tree=null;
        CommonTree END361_tree=null;
        CommonTree INITIATED363_tree=null;
        CommonTree BY364_tree=null;
        CommonTree ATCHAR365_tree=null;
        CommonTree AND_EXPR366_tree=null;
        CommonTree TERMINATED368_tree=null;
        CommonTree BY369_tree=null;
        CommonTree PARTITION371_tree=null;
        CommonTree BY372_tree=null;
        CommonTree COMMA374_tree=null;
        CommonTree COMMA377_tree=null;
        CommonTree FROM379_tree=null;
        CommonTree COALESCE381_tree=null;
        CommonTree BY382_tree=null;
        CommonTree COMMA384_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_createContextRangePoint=new RewriteRuleSubtreeStream(adaptor,"rule createContextRangePoint");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextCoalesceItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextCoalesceItem");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        try {
            int alt143=5;
            switch ( input.LA(1) ) {
            case START:
                {
                alt143=1;
                }
                break;
            case INITIATED:
                {
                alt143=2;
                }
                break;
            case PARTITION:
                {
                alt143=3;
                }
                break;
            case GROUP:
                {
                alt143=4;
                }
                break;
            case COALESCE:
                {
                alt143=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);
                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    START358=(Token)match(input,START,FOLLOW_START_in_createContextChoice5471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START358);
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==ATCHAR) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==EVENTS||LA133_0==PATTERN||LA133_0==AFTER||(LA133_0>=IDENT && LA133_0<=LPAREN)||LA133_0==TICKED_STRING_LITERAL) ) {
                        alt133=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);
                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            ATCHAR359=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextChoice5474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR359);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5478); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5482);
                            createContextRangePoint360=createContextRangePoint();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint360.getTree());
                            }
                            break;
                    }
                    END361=(Token)match(input,END,FOLLOW_END_in_createContextChoice5485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END361);
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5487);
                    createContextRangePoint362=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint362.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        if ( !(stream_createContextRangePoint.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextRangePoint.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        }
                        stream_createContextRangePoint.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    INITIATED363=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextChoice5507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED363);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==BY) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            BY364=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY364);
                            }
                            break;
                    }
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==ATCHAR) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            ATCHAR365=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextChoice5515); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR365);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5519); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            AND_EXPR366=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextChoice5521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR366);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5525);
                    createContextRangePoint367=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint367.getTree());
                    TERMINATED368=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextChoice5527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED368);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==BY) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            BY369=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5530); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY369);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextRangePoint_in_createContextChoice5534);
                    createContextRangePoint370=createContextRangePoint();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextRangePoint.add(createContextRangePoint370.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        adaptor.addChild(root_1, stream_createContextRangePoint.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    PARTITION371=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextChoice5555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION371);
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( (LA137_0==BY) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            BY372=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5558); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY372);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5562);
                    createContextPartitionItem373=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem373.getTree());
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);
                        if ( (LA138_0==COMMA) ) {
                            int LA138_3 = input.LA(2);
                            if ( (LA138_3==WINDOW||LA138_3==ESCAPE||LA138_3==EVERY_EXPR||(LA138_3>=SUM && LA138_3<=COUNT)||LA138_3==OUTER||(LA138_3>=JOIN && LA138_3<=FULL)||(LA138_3>=EVENTS && LA138_3<=LAST)||(LA138_3>=UNIDIRECTIONAL && LA138_3<=PREVIOUSTAIL)||LA138_3==PRIOR||(LA138_3>=WEEKDAY && LA138_3<=CAST)||LA138_3==SNAPSHOT||(LA138_3>=VARIABLE && LA138_3<=INDEX)||(LA138_3>=DEFINE && LA138_3<=MATCHES)||(LA138_3>=FOR && LA138_3<=MATCHED)||LA138_3==IDENT||LA138_3==TICKED_STRING_LITERAL) ) {
                                alt138=1;
                            }
                            else if ( (LA138_3==CONTEXT) ) {
                                int LA138_51 = input.LA(3);
                                if ( (LA138_51==AND_EXPR||LA138_51==FROM||LA138_51==LBRACK||LA138_51==LPAREN||(LA138_51>=COMMA && LA138_51<=DOT)||LA138_51==QUESTION||LA138_51==ESCAPECHAR) ) {
                                    alt138=1;
                                }
                            }
                        }
                        switch (alt138) {
                    	case 1 :
                    	    {
                    	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5565); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA374);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextChoice5567);
                    	    createContextPartitionItem375=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem375.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop138;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5586);
                    createContextGroupItem376=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem376.getTree());
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);
                        if ( (LA139_0==COMMA) ) {
                            alt139=1;
                        }
                        switch (alt139) {
                    	case 1 :
                    	    {
                    	    COMMA377=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5589); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA377);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextChoice5591);
                    	    createContextGroupItem378=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem378.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop139;
                        }
                    } while (true);
                    FROM379=(Token)match(input,FROM,FOLLOW_FROM_in_createContextChoice5595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM379);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextChoice5597);
                    eventFilterExpression380=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression380.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    COALESCE381=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_createContextChoice5615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE381);
                    int alt140=2;
                    int LA140_0 = input.LA(1);
                    if ( (LA140_0==BY) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            BY382=(Token)match(input,BY,FOLLOW_BY_in_createContextChoice5618); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY382);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5622);
                    createContextCoalesceItem383=createContextCoalesceItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem383.getTree());
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);
                        if ( (LA141_0==COMMA) ) {
                            alt141=1;
                        }
                        switch (alt141) {
                    	case 1 :
                    	    {
                    	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextChoice5625); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);
                    	    pushFollow(FOLLOW_createContextCoalesceItem_in_createContextChoice5627);
                    	    createContextCoalesceItem385=createContextCoalesceItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextCoalesceItem.add(createContextCoalesceItem385.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop141;
                        }
                    } while (true);
                    g=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(g);
                    pushFollow(FOLLOW_number_in_createContextChoice5635);
                    number386=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number386.getTree());
                    int alt142=2;
                    int LA142_0 = input.LA(1);
                    if ( (LA142_0==IDENT) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            p=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextChoice5640); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(p);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_COAL, "CREATE_CTX_COAL"), root_1);
                        if ( !(stream_createContextCoalesceItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextCoalesceItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextCoalesceItem.nextTree());
                        }
                        stream_createContextCoalesceItem.reset();
                        adaptor.addChild(root_1, stream_g.nextNode());
                        adaptor.addChild(root_1, stream_number.nextTree());
                        if ( stream_p.hasNext() ) {
                            adaptor.addChild(root_1, stream_p.nextNode());
                        }
                        stream_p.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextRangePoint_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextRangePoint_return createContextRangePoint() throws RecognitionException {
        EsperEPL2GrammarParser.createContextRangePoint_return retval = new EsperEPL2GrammarParser.createContextRangePoint_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR389=null;
        Token AFTER391=null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter387 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression388 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet390 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod392 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR389_tree=null;
        CommonTree AFTER391_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt145=4;
            switch ( input.LA(1) ) {
            case EVENTS:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt145=1;
                }
                break;
            case PATTERN:
                {
                alt145=2;
                }
                break;
            case LPAREN:
                {
                alt145=3;
                }
                break;
            case AFTER:
                {
                alt145=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);
                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_createContextFilter_in_createContextRangePoint5674);
                    createContextFilter387=createContextFilter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextFilter387.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_createContextRangePoint5681);
                    patternInclusionExpression388=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression388.getTree());
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==ATCHAR) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            ATCHAR389=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_createContextRangePoint5684); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR389);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextRangePoint5688); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PATTERN, "CREATE_CTX_PATTERN"), root_1);
                        adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextRangePoint5707);
                    crontabLimitParameterSet390=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, crontabLimitParameterSet390.getTree());
                    }
                    break;
                case 4 :
                    {
                    AFTER391=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextRangePoint5712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER391);
                    pushFollow(FOLLOW_timePeriod_in_createContextRangePoint5714);
                    timePeriod392=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod392.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS394=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression393 = null;
        CommonTree i_tree=null;
        CommonTree AS394_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter5735);
            eventFilterExpression393=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression393.getTree());
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==AS||LA147_0==IDENT) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==AS) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            AS394=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter5738); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS394);
                            }
                            break;
                    }
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter5743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR396=null;
        Token COMMA397=null;
        Token FROM399=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty395 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty398 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression400 = null;
        CommonTree AND_EXPR396_tree=null;
        CommonTree COMMA397_tree=null;
        CommonTree FROM399_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5770);
            eventProperty395=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty395.getTree());
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);
                if ( (LA149_0==AND_EXPR||LA149_0==COMMA) ) {
                    alt149=1;
                }
                switch (alt149) {
            	case 1 :
            	    {
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);
            	    if ( (LA148_0==AND_EXPR) ) {
            	        alt148=1;
            	    }
            	    else if ( (LA148_0==COMMA) ) {
            	        alt148=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            {
            	            AND_EXPR396=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem5774); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR396);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA397=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem5776); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA397);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem5779);
            	    eventProperty398=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty398.getTree());
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            FROM399=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem5783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM399);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem5785);
            eventFilterExpression400=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression400.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextCoalesceItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextCoalesceItem_return createContextCoalesceItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextCoalesceItem_return retval = new EsperEPL2GrammarParser.createContextCoalesceItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FROM402=null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass401 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression403 = null;
        CommonTree FROM402_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionNoClass_in_createContextCoalesceItem5811);
            libFunctionNoClass401=libFunctionNoClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass401.getTree());
            FROM402=(Token)match(input,FROM,FOLLOW_FROM_in_createContextCoalesceItem5813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM402);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextCoalesceItem5815);
            eventFilterExpression403=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression403.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COALESCE, "COALESCE"), root_1);
                adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP404=null;
        Token BY405=null;
        Token AS407=null;
        EsperEPL2GrammarParser.expression_return expression406 = null;
        CommonTree i_tree=null;
        CommonTree GROUP404_tree=null;
        CommonTree BY405_tree=null;
        CommonTree AS407_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP404=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem5839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP404);
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==BY) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    BY405=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem5841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY405);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem5844);
            expression406=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression406.getTree());
            AS407=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem5846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS407);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem5850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList408 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual5880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual5882);
            columnList408=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList408.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA410=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement409 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement411 = null;
        CommonTree COMMA410_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList5908);
            variantListElement409=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement409.getTree());
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( (LA151_0==COMMA) ) {
                    int LA151_4 = input.LA(2);
                    if ( (LA151_4==IDENT) ) {
                        int LA151_6 = input.LA(3);
                        if ( (LA151_6==EOF||LA151_6==FOR||LA151_6==IDENT||(LA151_6>=COMMA && LA151_6<=DOT)) ) {
                            alt151=1;
                        }
                    }
                    else if ( (LA151_4==EVENTS||LA151_4==STAR||LA151_4==TICKED_STRING_LITERAL) ) {
                        alt151=1;
                    }
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    COMMA410=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList5911); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA410);
            	    pushFollow(FOLLOW_variantListElement_in_variantList5913);
            	    variantListElement411=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement411.getTree());
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR412=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier413 = null;
        CommonTree STAR412_tree=null;
        try {
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==STAR) ) {
                alt152=1;
            }
            else if ( (LA152_0==EVENTS||LA152_0==IDENT||LA152_0==TICKED_STRING_LITERAL) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);
                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR412=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement5940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR412_tree = (CommonTree)adaptor.create(STAR412);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR412_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement5946);
                    classIdentifier413=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier413.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO414=null;
        Token LPAREN416=null;
        Token RPAREN418=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier415 = null;
        EsperEPL2GrammarParser.columnList_return columnList417 = null;
        CommonTree s_tree=null;
        CommonTree INTO414_tree=null;
        CommonTree LPAREN416_tree=null;
        CommonTree RPAREN418_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt153=4;
            switch ( input.LA(1) ) {
                case ISTREAM:
                    {
                    alt153=1;
                    }
                    break;
                case RSTREAM:
                    {
                    alt153=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt153=3;
                    }
                    break;
            }
            switch (alt153) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr5971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr5977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_insertIntoExpr5983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            INTO414=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr5987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO414);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr5989);
            classIdentifier415=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier415.getTree());
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==LPAREN) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    LPAREN416=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr5992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN416);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr5994);
                    columnList417=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList417.getTree());
                    RPAREN418=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr5996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN418);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT419=null;
        Token COMMA420=null;
        Token IDENT421=null;
        CommonTree IDENT419_tree=null;
        CommonTree COMMA420_tree=null;
        CommonTree IDENT421_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT419=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT419);
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( (LA155_0==COMMA) ) {
                    int LA155_4 = input.LA(2);
                    if ( (LA155_4==IDENT) ) {
                        int LA155_6 = input.LA(3);
                        if ( (LA155_6==EOF||LA155_6==FOR||LA155_6==IDENT||LA155_6==RPAREN||LA155_6==COMMA) ) {
                            alt155=1;
                        }
                    }
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    COMMA420=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList6032); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA420);
            	    IDENT421=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList6034); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT421);
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression422 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin423 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList424 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause6072);
            streamExpression422=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression422.getTree());
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==EOF||LA156_0==WHERE||(LA156_0>=GROUP && LA156_0<=HAVING)||LA156_0==OUTPUT||LA156_0==ORDER||LA156_0==ROW_LIMIT_EXPR||LA156_0==MATCH_RECOGNIZE||LA156_0==FOR||LA156_0==RPAREN||LA156_0==COMMA) ) {
                alt156=1;
            }
            else if ( ((LA156_0>=INNER && LA156_0<=FULL)) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);
                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause6075);
                    regularJoin423=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin423.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause6079);
                    outerJoinList424=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList424.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA425=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression426 = null;
        CommonTree COMMA425_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);
                if ( (LA157_0==COMMA) ) {
                    alt157=1;
                }
                switch (alt157) {
            	case 1 :
            	    {
            	    COMMA425=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin6093); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin6096);
            	    streamExpression426=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression426.getTree());
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin427 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin428 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList6110);
            outerJoin427=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin427.getTree());
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);
                if ( ((LA158_0>=INNER && LA158_0<=FULL)) ) {
                    alt158=1;
                }
                switch (alt158) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList6113);
            	    outerJoin428=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin428.getTree());
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER429=null;
        Token JOIN430=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression431 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent432 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER429_tree=null;
        CommonTree JOIN430_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( ((LA161_0>=JOIN && LA161_0<=FULL)) ) {
                alt161=1;
            }
            else if ( (LA161_0==INNER) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);
                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    {
                    int alt160=2;
                    int LA160_0 = input.LA(1);
                    if ( ((LA160_0>=LEFT && LA160_0<=FULL)) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            {
                            int alt159=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt159=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt159=2;
                                }
                                break;
                            case FULL:
                                {
                                alt159=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 0, input);
                                throw nvae;
                            }
                            switch (alt159) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin6156); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin6160); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin6164); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER429=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin6167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER429);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin6188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN430=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin6202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN430);
            pushFollow(FOLLOW_streamExpression_in_outerJoin6204);
            streamExpression431=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression431.getTree());
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==ON) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outerJoinIdent_in_outerJoin6206);
                    outerJoinIdent432=outerJoinIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent432.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, (CommonTree)adaptor.create(ON, "ON"));
                if ( stream_outerJoinIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                }
                stream_outerJoinIdent.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON433=null;
        Token AND_EXPR435=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair434 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair436 = null;
        CommonTree ON433_tree=null;
        CommonTree AND_EXPR435_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON433=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent6284); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6287);
            outerJoinIdentPair434=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair434.getTree());
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);
                if ( (LA163_0==AND_EXPR) ) {
                    alt163=1;
                }
                switch (alt163) {
            	case 1 :
            	    {
            	    AND_EXPR435=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent6290); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent6293);
            	    outerJoinIdentPair436=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair436.getTree());
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS438=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty437 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty439 = null;
        CommonTree EQUALS438_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6308);
            eventProperty437=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty437.getTree());
            EQUALS438=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair6310); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair6313);
            eventProperty439=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty439.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression440 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause6335);
            evalOrExpression440=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression440.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList441 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt164=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt164=1;
                    }
                    break;
                case ISTREAM:
                    {
                    int LA164_2 = input.LA(2);
                    if ( (LA164_2==LPAREN) ) {
                        int LA164_81 = input.LA(3);
                        if ( (LA164_81==WINDOW||LA164_81==BETWEEN||LA164_81==ESCAPE||(LA164_81>=NOT_EXPR && LA164_81<=EVERY_EXPR)||LA164_81==WHERE||(LA164_81>=SUM && LA164_81<=CASE)||LA164_81==OUTER||(LA164_81>=JOIN && LA164_81<=FULL)||(LA164_81>=EVENTS && LA164_81<=LAST)||LA164_81==ISTREAM||(LA164_81>=UNIDIRECTIONAL && LA164_81<=CURRENT_TIMESTAMP)||(LA164_81>=SNAPSHOT && LA164_81<=INDEX)||(LA164_81>=BOOLEAN_TRUE && LA164_81<=VALUE_NULL)||(LA164_81>=DEFINE && LA164_81<=MATCHED)||LA164_81==NEWKW||LA164_81==CONTEXT||LA164_81==NUM_DOUBLE||(LA164_81>=IDENT && LA164_81<=LPAREN)||LA164_81==LCURLY||LA164_81==QUESTION||(LA164_81>=PLUS && LA164_81<=QUOTED_STRING_LITERAL)||LA164_81==MINUS||LA164_81==NUM_INT||(LA164_81>=TICKED_STRING_LITERAL && LA164_81<=NUM_FLOAT)) ) {
                            alt164=2;
                        }
                    }
                    else if ( (LA164_2==WINDOW||LA164_2==BETWEEN||LA164_2==ESCAPE||(LA164_2>=NOT_EXPR && LA164_2<=EVERY_EXPR)||LA164_2==WHERE||(LA164_2>=SUM && LA164_2<=COUNT)||LA164_2==CASE||LA164_2==OUTER||(LA164_2>=JOIN && LA164_2<=FULL)||LA164_2==DISTINCT||(LA164_2>=EVENTS && LA164_2<=LAST)||LA164_2==ISTREAM||(LA164_2>=UNIDIRECTIONAL && LA164_2<=CURRENT_TIMESTAMP)||(LA164_2>=SNAPSHOT && LA164_2<=INDEX)||(LA164_2>=BOOLEAN_TRUE && LA164_2<=VALUE_NULL)||(LA164_2>=DEFINE && LA164_2<=MATCHED)||LA164_2==NEWKW||LA164_2==CONTEXT||LA164_2==NUM_DOUBLE||LA164_2==IDENT||LA164_2==LCURLY||LA164_2==STAR||LA164_2==QUESTION||(LA164_2>=PLUS && LA164_2<=QUOTED_STRING_LITERAL)||LA164_2==MINUS||LA164_2==NUM_INT||(LA164_2>=TICKED_STRING_LITERAL && LA164_2<=NUM_FLOAT)) ) {
                        alt164=2;
                    }
                    }
                    break;
                case IRSTREAM:
                    {
                    alt164=3;
                    }
                    break;
            }
            switch (alt164) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause6371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause6377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause6383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt165=2;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==DISTINCT) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause6389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause6392);
            selectionList441=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList441.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA443=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement442 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement444 = null;
        CommonTree COMMA443_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList6423);
            selectionListElement442=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement442.getTree());
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);
                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }
                switch (alt166) {
            	case 1 :
            	    {
            	    COMMA443=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList6426); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList6429);
            	    selectionListElement444=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement444.getTree());
            	    }
            	    break;
            	default :
            	    break loop166;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS447=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector445 = null;
        EsperEPL2GrammarParser.expression_return expression446 = null;
        CommonTree s_tree=null;
        CommonTree AS447_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt168=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt168=1;
                }
                break;
            case IDENT:
                {
                int LA168_2 = input.LA(2);
                if ( (LA168_2==DOT) ) {
                    int LA168_78 = input.LA(3);
                    if ( (LA168_78==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt168=2;
                    }
                    else if ( (LA168_78==WINDOW||LA168_78==BETWEEN||LA168_78==ESCAPE||LA168_78==EVERY_EXPR||LA168_78==WHERE||(LA168_78>=SUM && LA168_78<=COUNT)||LA168_78==OUTER||(LA168_78>=JOIN && LA168_78<=FULL)||(LA168_78>=EVENTS && LA168_78<=LAST)||(LA168_78>=UNIDIRECTIONAL && LA168_78<=PREVIOUSTAIL)||LA168_78==PRIOR||(LA168_78>=WEEKDAY && LA168_78<=CAST)||(LA168_78>=SNAPSHOT && LA168_78<=INDEX)||(LA168_78>=DEFINE && LA168_78<=MATCHED)||LA168_78==CONTEXT||LA168_78==IDENT||LA168_78==TICKED_STRING_LITERAL) ) {
                        alt168=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 78, input);
                        throw nvae;
                    }
                }
                else if ( (LA168_2==EOF||(LA168_2>=IN_SET && LA168_2<=REGEXP)||(LA168_2>=OR_EXPR && LA168_2<=NOT_EXPR)||(LA168_2>=WHERE && LA168_2<=AS)||(LA168_2>=WHEN && LA168_2<=THEN)||LA168_2==FROM||LA168_2==IS||(LA168_2>=GROUP && LA168_2<=HAVING)||LA168_2==OUTPUT||LA168_2==INSERT||LA168_2==ORDER||LA168_2==ROW_LIMIT_EXPR||LA168_2==FOR||LA168_2==LBRACK||LA168_2==LPAREN||LA168_2==COMMA||(LA168_2>=EQUALS && LA168_2<=STAR)||(LA168_2>=LT && LA168_2<=PLUS)||(LA168_2>=BAND && LA168_2<=MOD)||LA168_2==ESCAPECHAR) ) {
                    alt168=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt168=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);
                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement6455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement6473);
                    streamSelector445=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector445.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement6478);
                    expression446=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression446.getTree());
                    int alt167=2;
                    int LA167_0 = input.LA(1);
                    if ( (LA167_0==AS) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            {
                            AS447=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement6481); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS447);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement6485);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT448=null;
        Token STAR449=null;
        Token AS450=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT448_tree=null;
        CommonTree STAR449_tree=null;
        CommonTree AS450_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT448=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector6543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT448);
            STAR449=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector6545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR449);
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==AS) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    AS450=(Token)match(input,AS,FOLLOW_AS_in_streamSelector6548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS450);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector6552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT455=null;
        Token DOT457=null;
        Token AS459=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression451 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression452 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression453 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression454 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression456 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression458 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT455_tree=null;
        CommonTree DOT457_tree=null;
        CommonTree AS459_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt170=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA170_1 = input.LA(2);
                if ( (LA170_1==EOF||(LA170_1>=WHERE && LA170_1<=AS)||(LA170_1>=INNER && LA170_1<=ON)||(LA170_1>=GROUP && LA170_1<=HAVING)||LA170_1==OUTPUT||LA170_1==ORDER||(LA170_1>=UNIDIRECTIONAL && LA170_1<=RETAININTERSECTION)||LA170_1==ROW_LIMIT_EXPR||LA170_1==MATCH_RECOGNIZE||LA170_1==FOR||LA170_1==LBRACK||(LA170_1>=IDENT && LA170_1<=RPAREN)||(LA170_1>=COMMA && LA170_1<=EQUALS)) ) {
                    alt170=1;
                }
                else if ( (LA170_1==COLON) ) {
                    alt170=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);
                    throw nvae;
                }
                }
                break;
            case EVENTS:
            case TICKED_STRING_LITERAL:
                {
                alt170=1;
                }
                break;
            case PATTERN:
                {
                alt170=2;
                }
                break;
            case SQL:
                {
                alt170=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);
                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression6582);
                    eventFilterExpression451=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression451.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression6586);
                    patternInclusionExpression452=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression452.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression6590);
                    databaseJoinExpression453=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression453.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression6594);
                    methodJoinExpression454=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression454.getTree());
                    }
                    break;
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==DOT) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    DOT455=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT455);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression6603);
                    viewExpression456=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression456.getTree());
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);
                        if ( (LA171_0==DOT) ) {
                            alt171=1;
                        }
                        switch (alt171) {
                    	case 1 :
                    	    {
                    	    DOT457=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression6606); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT457);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression6608);
                    	    viewExpression458=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression458.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop171;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt173=3;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==AS) ) {
                alt173=1;
            }
            else if ( (LA173_0==IDENT) ) {
                alt173=2;
            }
            switch (alt173) {
                case 1 :
                    {
                    AS459=(Token)match(input,AS,FOLLOW_AS_in_streamExpression6615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS459);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression6625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==UNIDIRECTIONAL) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression6632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt175=3;
            int LA175_0 = input.LA(1);
            if ( (LA175_0==RETAINUNION) ) {
                alt175=1;
            }
            else if ( (LA175_0==RETAININTERSECTION) ) {
                alt175=2;
            }
            switch (alt175) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression6639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression6643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR460=null;
        Token LPAREN461=null;
        Token RPAREN463=null;
        EsperEPL2GrammarParser.expressionList_return expressionList462 = null;
        CommonTree i_tree=null;
        CommonTree FOR460_tree=null;
        CommonTree LPAREN461_tree=null;
        CommonTree RPAREN463_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR460=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr6699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR460);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr6703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==LPAREN) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    LPAREN461=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr6706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN461);
                    int alt176=2;
                    int LA176_0 = input.LA(1);
                    if ( (LA176_0==WINDOW||LA176_0==BETWEEN||LA176_0==ESCAPE||(LA176_0>=NOT_EXPR && LA176_0<=EVERY_EXPR)||LA176_0==WHERE||(LA176_0>=SUM && LA176_0<=COUNT)||LA176_0==CASE||LA176_0==OUTER||(LA176_0>=JOIN && LA176_0<=FULL)||(LA176_0>=EVENTS && LA176_0<=LAST)||LA176_0==ISTREAM||(LA176_0>=UNIDIRECTIONAL && LA176_0<=CURRENT_TIMESTAMP)||(LA176_0>=SNAPSHOT && LA176_0<=INDEX)||(LA176_0>=BOOLEAN_TRUE && LA176_0<=VALUE_NULL)||(LA176_0>=DEFINE && LA176_0<=MATCHED)||LA176_0==NEWKW||LA176_0==CONTEXT||LA176_0==NUM_DOUBLE||(LA176_0>=IDENT && LA176_0<=LPAREN)||LA176_0==LCURLY||LA176_0==QUESTION||(LA176_0>=PLUS && LA176_0<=QUOTED_STRING_LITERAL)||LA176_0==MINUS||LA176_0==NUM_INT||(LA176_0>=TICKED_STRING_LITERAL && LA176_0<=NUM_FLOAT)) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr6708);
                            expressionList462=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList462.getTree());
                            }
                            break;
                    }
                    RPAREN463=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr6711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN463);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE464=null;
        Token LPAREN465=null;
        Token RPAREN473=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy466 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures467 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection468 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip469 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern470 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval471 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine472 = null;
        CommonTree MATCH_RECOGNIZE464_tree=null;
        CommonTree LPAREN465_tree=null;
        CommonTree RPAREN473_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE464=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog6747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE464);
            LPAREN465=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog6761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN465);
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==PARTITION) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog6767);
                    matchRecogPartitionBy466=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy466.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog6774);
            matchRecogMeasures467=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures467.getTree());
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==ALL) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog6779);
                    matchRecogMatchesSelection468=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection468.getTree());
                    }
                    break;
            }
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==AFTER) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog6785);
                    matchRecogMatchesAfterSkip469=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip469.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog6791);
            matchRecogPattern470=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern470.getTree());
            int alt181=2;
            int LA181_0 = input.LA(1);
            if ( (LA181_0==IDENT) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog6797);
                    matchRecogMatchesInterval471=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval471.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog6803);
            matchRecogDefine472=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine472.getTree());
            RPAREN473=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog6810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN473);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION474=null;
        Token BY475=null;
        Token COMMA477=null;
        EsperEPL2GrammarParser.expression_return expression476 = null;
        EsperEPL2GrammarParser.expression_return expression478 = null;
        CommonTree PARTITION474_tree=null;
        CommonTree BY475_tree=null;
        CommonTree COMMA477_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION474=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy6847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION474);
            BY475=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy6849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY475);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6851);
            expression476=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression476.getTree());
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);
                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }
                switch (alt182) {
            	case 1 :
            	    {
            	    COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy6854); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA477);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy6856);
            	    expression478=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression478.getTree());
            	    }
            	    break;
            	default :
            	    break loop182;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES479=null;
        Token COMMA481=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem480 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem482 = null;
        CommonTree MEASURES479_tree=null;
        CommonTree COMMA481_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES479=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures6885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES479);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6887);
            matchRecogMeasureItem480=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem480.getTree());
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);
                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }
                switch (alt183) {
            	case 1 :
            	    {
            	    COMMA481=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures6890); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA481);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures6892);
            	    matchRecogMeasureItem482=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem482.getTree());
            	    }
            	    break;
            	default :
            	    break loop183;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS484=null;
        EsperEPL2GrammarParser.expression_return expression483 = null;
        CommonTree i_tree=null;
        CommonTree AS484_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem6917);
            expression483=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression483.getTree());
            int alt185=2;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==AS) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    AS484=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem6920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS484);
                    int alt184=2;
                    int LA184_0 = input.LA(1);
                    if ( (LA184_0==IDENT) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem6925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL485=null;
        Token MATCHES486=null;
        CommonTree ALL485_tree=null;
        CommonTree MATCHES486_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL485=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection6956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL485_tree = (CommonTree)adaptor.create(ALL485);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL485_tree, root_0);
            }
            MATCHES486=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection6959); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN487=null;
        Token LPAREN488=null;
        Token RPAREN490=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration489 = null;
        CommonTree PATTERN487_tree=null;
        CommonTree LPAREN488_tree=null;
        CommonTree RPAREN490_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN487=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern6974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN487);
            LPAREN488=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern6976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN488);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern6978);
            matchRecogPatternAlteration489=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration489.getTree());
            RPAREN490=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern6980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN490);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER491=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER491_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER491=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip7002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER491);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7006);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7010);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7014);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7018);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip7022);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod492 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval7058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval7060);
            timePeriod492=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod492.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat493 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat494 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7086);
            matchRecogPatternConcat493=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat493.getTree());
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);
                if ( (LA186_0==BOR) ) {
                    alt186=1;
                }
                switch (alt186) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration7091); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration7093);
            	    matchRecogPatternConcat494=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat494.getTree());
            	    }
            	    break;
            	default :
            	    break loop186;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary495 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt187=0;
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);
                if ( ((LA187_0>=IDENT && LA187_0<=LPAREN)) ) {
                    alt187=1;
                }
                switch (alt187) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat7126);
            	    matchRecogPatternUnary495=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary495.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt187 >= 1 ) break loop187;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(187, input);
                        throw eee;
                }
                cnt187++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested496 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom497 = null;
        try {
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==LPAREN) ) {
                alt188=1;
            }
            else if ( (LA188_0==IDENT) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);
                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary7151);
                    matchRecogPatternNested496=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested496.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary7157);
                    matchRecogPatternAtom497=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom497.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN498=null;
        Token RPAREN500=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration499 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree RPAREN500_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested7169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN498);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested7171);
            matchRecogPatternAlteration499=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration499.getTree());
            RPAREN500=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested7173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN500);
            int alt189=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt189=1;
                    }
                    break;
                case PLUS:
                    {
                    alt189=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt189=3;
                    }
                    break;
            }
            switch (alt189) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested7178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested7184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested7190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom7229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt192=2;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==STAR||LA192_0==QUESTION||LA192_0==PLUS) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    {
                    int alt190=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt190=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt190=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt190=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);
                        throw nvae;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom7235); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom7241); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7247); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt191=2;
                    int LA191_0 = input.LA(1);
                    if ( (LA191_0==QUESTION) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom7253); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE501=null;
        Token COMMA503=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem502 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem504 = null;
        CommonTree DEFINE501_tree=null;
        CommonTree COMMA503_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE501=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine7297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE501);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7299);
            matchRecogDefineItem502=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem502.getTree());
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);
                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }
                switch (alt193) {
            	case 1 :
            	    {
            	    COMMA503=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine7302); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA503);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine7304);
            	    matchRecogDefineItem504=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem504.getTree());
            	    }
            	    break;
            	default :
            	    break loop193;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS505=null;
        EsperEPL2GrammarParser.expression_return expression506 = null;
        CommonTree i_tree=null;
        CommonTree AS505_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem7331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS505=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem7333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS505);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem7335);
            expression506=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression506.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN507=null;
        Token LBRACK508=null;
        Token RBRACK510=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression509 = null;
        CommonTree PATTERN507_tree=null;
        CommonTree LBRACK508_tree=null;
        CommonTree RBRACK510_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN507=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression7360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN507);
            LBRACK508=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression7362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK508);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression7364);
            patternExpression509=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression509.getTree());
            RBRACK510=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression7366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK510);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL511=null;
        Token COLON512=null;
        Token LBRACK513=null;
        Token METADATASQL514=null;
        Token RBRACK515=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL511_tree=null;
        CommonTree COLON512_tree=null;
        CommonTree LBRACK513_tree=null;
        CommonTree METADATASQL514_tree=null;
        CommonTree RBRACK515_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL511=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression7399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL511);
            COLON512=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression7401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON512);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression7405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK513=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression7407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK513);
            int alt194=2;
            int LA194_0 = input.LA(1);
            if ( (LA194_0==STRING_LITERAL) ) {
                alt194=1;
            }
            else if ( (LA194_0==QUOTED_STRING_LITERAL) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);
                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt196=2;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==METADATASQL) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    {
                    METADATASQL514=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression7422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL514);
                    int alt195=2;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==STRING_LITERAL) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==QUOTED_STRING_LITERAL) ) {
                        alt195=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);
                        throw nvae;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression7427); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression7433); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK515=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression7438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK515);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON516=null;
        Token LPAREN518=null;
        Token RPAREN520=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier517 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList519 = null;
        CommonTree i_tree=null;
        CommonTree COLON516_tree=null;
        CommonTree LPAREN518_tree=null;
        CommonTree RPAREN520_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression7489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON516=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression7491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON516);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression7493);
            classIdentifier517=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier517.getTree());
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==LPAREN) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    LPAREN518=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression7496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN518);
                    int alt197=2;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==WINDOW||LA197_0==BETWEEN||LA197_0==ESCAPE||(LA197_0>=NOT_EXPR && LA197_0<=EVERY_EXPR)||LA197_0==WHERE||(LA197_0>=SUM && LA197_0<=COUNT)||LA197_0==CASE||LA197_0==OUTER||(LA197_0>=JOIN && LA197_0<=FULL)||(LA197_0>=EVENTS && LA197_0<=LAST)||LA197_0==ISTREAM||(LA197_0>=UNIDIRECTIONAL && LA197_0<=CURRENT_TIMESTAMP)||(LA197_0>=SNAPSHOT && LA197_0<=INDEX)||(LA197_0>=BOOLEAN_TRUE && LA197_0<=VALUE_NULL)||(LA197_0>=DEFINE && LA197_0<=MATCHED)||LA197_0==NEWKW||LA197_0==CONTEXT||LA197_0==NUM_DOUBLE||(LA197_0>=IDENT && LA197_0<=LPAREN)||LA197_0==LCURLY||LA197_0==QUESTION||(LA197_0>=PLUS && LA197_0<=QUOTED_STRING_LITERAL)||LA197_0==MINUS||LA197_0==NUM_INT||(LA197_0>=TICKED_STRING_LITERAL && LA197_0<=NUM_FLOAT)) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression7498);
                            expressionList519=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList519.getTree());
                            }
                            break;
                    }
                    RPAREN520=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression7501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN520);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON521=null;
        Token LPAREN522=null;
        Token RPAREN524=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList523 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON521_tree=null;
        CommonTree LPAREN522_tree=null;
        CommonTree RPAREN524_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON521=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression7556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON521);
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==IDENT) ) {
                alt199=1;
            }
            else if ( (LA199_0==MERGE) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);
                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression7561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression7565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN522=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression7568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN522);
            int alt200=2;
            int LA200_0 = input.LA(1);
            if ( (LA200_0==WINDOW||LA200_0==BETWEEN||LA200_0==ESCAPE||(LA200_0>=NOT_EXPR && LA200_0<=EVERY_EXPR)||LA200_0==WHERE||(LA200_0>=SUM && LA200_0<=COUNT)||LA200_0==CASE||LA200_0==OUTER||(LA200_0>=JOIN && LA200_0<=FULL)||(LA200_0>=EVENTS && LA200_0<=LAST)||LA200_0==ISTREAM||(LA200_0>=UNIDIRECTIONAL && LA200_0<=CURRENT_TIMESTAMP)||(LA200_0>=SNAPSHOT && LA200_0<=INDEX)||(LA200_0>=BOOLEAN_TRUE && LA200_0<=VALUE_NULL)||(LA200_0>=DEFINE && LA200_0<=MATCHED)||LA200_0==NEWKW||LA200_0==CONTEXT||LA200_0==NUM_DOUBLE||LA200_0==LBRACK||(LA200_0>=IDENT && LA200_0<=LPAREN)||LA200_0==LCURLY||LA200_0==STAR||LA200_0==QUESTION||(LA200_0>=PLUS && LA200_0<=QUOTED_STRING_LITERAL)||LA200_0==MINUS||LA200_0==NUM_INT||(LA200_0>=TICKED_STRING_LITERAL && LA200_0<=NUM_FLOAT)) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression7570);
                    expressionWithTimeList523=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList523.getTree());
                    }
                    break;
            }
            RPAREN524=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression7573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN524);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA526=null;
        EsperEPL2GrammarParser.expression_return expression525 = null;
        EsperEPL2GrammarParser.expression_return expression527 = null;
        CommonTree COMMA526_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr7633);
            expression525=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression525.getTree());
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);
                if ( (LA201_0==COMMA) ) {
                    alt201=1;
                }
                switch (alt201) {
            	case 1 :
            	    {
            	    COMMA526=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr7636); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA526);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr7638);
            	    expression527=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression527.getTree());
            	    }
            	    break;
            	default :
            	    break loop201;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA529=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement528 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement530 = null;
        CommonTree COMMA529_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7673);
            orderByListElement528=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement528.getTree());
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);
                if ( (LA202_0==COMMA) ) {
                    alt202=1;
                }
                switch (alt202) {
            	case 1 :
            	    {
            	    COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr7676); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA529);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr7678);
            	    orderByListElement530=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement530.getTree());
            	    }
            	    break;
            	default :
            	    break loop202;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression531 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement7703);
            expression531=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression531.getTree());
            int alt203=3;
            int LA203_0 = input.LA(1);
            if ( (LA203_0==ASC) ) {
                alt203=1;
            }
            else if ( (LA203_0==DESC) ) {
                alt203=2;
            }
            switch (alt203) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement7708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement7712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression532 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause7750);
            evalOrExpression532=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression532.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token THEN538=null;
        Token TERMINATED540=null;
        Token AND_EXPR541=null;
        Token THEN543=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter533 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod534 = null;
        EsperEPL2GrammarParser.number_return number535 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet536 = null;
        EsperEPL2GrammarParser.expression_return expression537 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr539 = null;
        EsperEPL2GrammarParser.expression_return expression542 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr544 = null;
        EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm545 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree THEN538_tree=null;
        CommonTree TERMINATED540_tree=null;
        CommonTree AND_EXPR541_tree=null;
        CommonTree THEN543_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_outputLimitAndTerm=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAndTerm");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt204=2;
            int LA204_0 = input.LA(1);
            if ( (LA204_0==AFTER) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit7788);
                    outputLimitAfter533=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter533.getTree());
                    }
                    break;
            }
            int alt205=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt205=1;
                    }
                    break;
                case FIRST:
                    {
                    alt205=2;
                    }
                    break;
                case LAST:
                    {
                    alt205=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt205=4;
                    }
                    break;
            }
            switch (alt205) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit7803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit7807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit7811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit7815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt211=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt211=1;
                }
                break;
            case AT:
                {
                alt211=2;
                }
                break;
            case WHEN:
                {
                int LA211_3 = input.LA(2);
                if ( (LA211_3==TERMINATED) ) {
                    alt211=4;
                }
                else if ( (LA211_3==WINDOW||LA211_3==BETWEEN||LA211_3==ESCAPE||(LA211_3>=NOT_EXPR && LA211_3<=EVERY_EXPR)||LA211_3==WHERE||(LA211_3>=SUM && LA211_3<=COUNT)||LA211_3==CASE||LA211_3==OUTER||(LA211_3>=JOIN && LA211_3<=FULL)||(LA211_3>=EVENTS && LA211_3<=LAST)||LA211_3==ISTREAM||(LA211_3>=UNIDIRECTIONAL && LA211_3<=CURRENT_TIMESTAMP)||(LA211_3>=SNAPSHOT && LA211_3<=INDEX)||(LA211_3>=BOOLEAN_TRUE && LA211_3<=VALUE_NULL)||(LA211_3>=DEFINE && LA211_3<=MATCHED)||LA211_3==NEWKW||LA211_3==CONTEXT||LA211_3==NUM_DOUBLE||(LA211_3>=IDENT && LA211_3<=LPAREN)||LA211_3==LCURLY||LA211_3==QUESTION||(LA211_3>=PLUS && LA211_3<=QUOTED_STRING_LITERAL)||LA211_3==MINUS||LA211_3==NUM_INT||(LA211_3>=TICKED_STRING_LITERAL && LA211_3<=NUM_FLOAT)) ) {
                    alt211=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
            case RPAREN:
                {
                alt211=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);
                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit7846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt207=2;
                    int LA207_0 = input.LA(1);
                    if ( (LA207_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else if ( (LA207_0==NUM_INT) ) {
                        int LA207_3 = input.LA(2);
                        if ( (LA207_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==EVENTS) ) {
                            alt207=2;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_0==NUM_LONG) ) {
                        int LA207_4 = input.LA(2);
                        if ( (LA207_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==EVENTS) ) {
                            alt207=2;
                        }
                        else if ( (LA207_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_0==NUM_FLOAT) ) {
                        int LA207_5 = input.LA(2);
                        if ( (LA207_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==EVENTS) ) {
                            alt207=2;
                        }
                        else if ( (LA207_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_0==NUM_DOUBLE) ) {
                        int LA207_6 = input.LA(2);
                        if ( (LA207_6==EVENTS) ) {
                            alt207=2;
                        }
                        else if ( (LA207_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_0==IDENT) ) {
                        int LA207_7 = input.LA(2);
                        if ( (LA207_7==EVENTS) ) {
                            alt207=2;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else if ( (LA207_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt207=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA207_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt207=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 0, input);
                        throw nvae;
                    }
                    switch (alt207) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit7872);
                            timePeriod534=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod534.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt206=2;
                            int LA206_0 = input.LA(1);
                            if ( (LA206_0==NUM_DOUBLE||LA206_0==NUM_INT||(LA206_0>=NUM_LONG && LA206_0<=NUM_FLOAT)) ) {
                                alt206=1;
                            }
                            else if ( (LA206_0==IDENT) ) {
                                alt206=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 206, 0, input);
                                throw nvae;
                            }
                            switch (alt206) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit7883);
                                    number535=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number535.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit7889); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit7895); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit7926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit7928);
                    crontabLimitParameterSet536=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet536.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit7947);
                    expression537=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression537.getTree());
                    int alt208=2;
                    int LA208_0 = input.LA(1);
                    if ( (LA208_0==THEN) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            {
                            THEN538=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7950); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN538);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7952);
                            onSetExpr539=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr539.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit7972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED540=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit7974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED540);
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==AND_EXPR) ) {
                        int LA209_1 = input.LA(2);
                        if ( (LA209_1==WINDOW||LA209_1==BETWEEN||LA209_1==ESCAPE||(LA209_1>=NOT_EXPR && LA209_1<=EVERY_EXPR)||LA209_1==WHERE||(LA209_1>=SUM && LA209_1<=COUNT)||LA209_1==CASE||LA209_1==OUTER||(LA209_1>=JOIN && LA209_1<=FULL)||(LA209_1>=EVENTS && LA209_1<=LAST)||LA209_1==ISTREAM||(LA209_1>=UNIDIRECTIONAL && LA209_1<=CURRENT_TIMESTAMP)||(LA209_1>=SNAPSHOT && LA209_1<=INDEX)||(LA209_1>=BOOLEAN_TRUE && LA209_1<=VALUE_NULL)||(LA209_1>=DEFINE && LA209_1<=MATCHED)||LA209_1==NEWKW||LA209_1==CONTEXT||LA209_1==NUM_DOUBLE||(LA209_1>=IDENT && LA209_1<=LPAREN)||LA209_1==LCURLY||LA209_1==QUESTION||(LA209_1>=PLUS && LA209_1<=QUOTED_STRING_LITERAL)||LA209_1==MINUS||LA209_1==NUM_INT||(LA209_1>=TICKED_STRING_LITERAL && LA209_1<=NUM_FLOAT)) ) {
                            alt209=1;
                        }
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            AND_EXPR541=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit7977); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR541);
                            pushFollow(FOLLOW_expression_in_outputLimit7979);
                            expression542=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression542.getTree());
                            }
                            break;
                    }
                    int alt210=2;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==THEN) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            THEN543=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit7984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN543);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit7986);
                            onSetExpr544=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr544.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==AND_EXPR) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAndTerm_in_outputLimit8019);
                    outputLimitAndTerm545=outputLimitAndTerm();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAndTerm.add(outputLimitAndTerm545.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_outputLimitAndTerm.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAndTerm.nextTree());
                }
                stream_outputLimitAndTerm.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAndTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAndTerm_return outputLimitAndTerm() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAndTerm_return retval = new EsperEPL2GrammarParser.outputLimitAndTerm_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR546=null;
        Token WHEN547=null;
        Token TERMINATED548=null;
        Token AND_EXPR549=null;
        Token THEN551=null;
        EsperEPL2GrammarParser.expression_return expression550 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr552 = null;
        CommonTree AND_EXPR546_tree=null;
        CommonTree WHEN547_tree=null;
        CommonTree TERMINATED548_tree=null;
        CommonTree AND_EXPR549_tree=null;
        CommonTree THEN551_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        try {
            {
            AND_EXPR546=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR546);
            WHEN547=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimitAndTerm8195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN547);
            TERMINATED548=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimitAndTerm8197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED548);
            int alt213=2;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==AND_EXPR) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    {
                    AND_EXPR549=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimitAndTerm8200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR549);
                    pushFollow(FOLLOW_expression_in_outputLimitAndTerm8202);
                    expression550=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression550.getTree());
                    }
                    break;
            }
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==THEN) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    {
                    THEN551=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimitAndTerm8207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THEN.add(THEN551);
                    pushFollow(FOLLOW_onSetExpr_in_outputLimitAndTerm8209);
                    onSetExpr552=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr552.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_TERMINATED.nextNode(), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS555=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod553 = null;
        EsperEPL2GrammarParser.number_return number554 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS555_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter8239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt215=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case QUESTION:
            case PLUS:
            case MINUS:
                {
                alt215=1;
                }
                break;
            case NUM_INT:
                {
                int LA215_3 = input.LA(2);
                if ( (LA215_3==MIN||(LA215_3>=TIMEPERIOD_YEAR && LA215_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt215=1;
                }
                else if ( (LA215_3==EVENTS) ) {
                    alt215=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA215_4 = input.LA(2);
                if ( (LA215_4==MIN||(LA215_4>=TIMEPERIOD_YEAR && LA215_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt215=1;
                }
                else if ( (LA215_4==EVENTS) ) {
                    alt215=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA215_5 = input.LA(2);
                if ( (LA215_5==MIN||(LA215_5>=TIMEPERIOD_YEAR && LA215_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt215=1;
                }
                else if ( (LA215_5==EVENTS) ) {
                    alt215=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA215_6 = input.LA(2);
                if ( (LA215_6==MIN||(LA215_6>=TIMEPERIOD_YEAR && LA215_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt215=1;
                }
                else if ( (LA215_6==EVENTS) ) {
                    alt215=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);
                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter8242);
                    timePeriod553=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod553.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter8246);
                    number554=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number554.getTree());
                    EVENTS555=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter8248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS555);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==NUM_DOUBLE||LA216_0==PLUS||LA216_0==MINUS||LA216_0==NUM_INT||(LA216_0>=NUM_LONG && LA216_0<=NUM_FLOAT)) ) {
                alt216=1;
            }
            else if ( (LA216_0==IDENT) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);
                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit8294);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( (LA219_0==OFFSET||LA219_0==COMMA) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    int alt217=2;
                    int LA217_0 = input.LA(1);
                    if ( (LA217_0==COMMA) ) {
                        alt217=1;
                    }
                    else if ( (LA217_0==OFFSET) ) {
                        alt217=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 217, 0, input);
                        throw nvae;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit8307); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit8313); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt218=2;
                    int LA218_0 = input.LA(1);
                    if ( (LA218_0==NUM_DOUBLE||LA218_0==PLUS||LA218_0==MINUS||LA218_0==NUM_INT||(LA218_0>=NUM_LONG && LA218_0<=NUM_FLOAT)) ) {
                        alt218=1;
                    }
                    else if ( (LA218_0==IDENT) ) {
                        alt218=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 0, input);
                        throw nvae;
                    }
                    switch (alt218) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit8319);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit8325); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN556=null;
        Token RPAREN558=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList557 = null;
        CommonTree LPAREN556_tree=null;
        CommonTree RPAREN558_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            LPAREN556=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet8377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN556);
            pushFollow(FOLLOW_expressionWithTimeList_in_crontabLimitParameterSet8379);
            expressionWithTimeList557=expressionWithTimeList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList557.getTree());
            RPAREN558=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet8381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN558);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN559=null;
        Token THEN561=null;
        EsperEPL2GrammarParser.expression_return expression560 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        CommonTree WHEN559_tree=null;
        CommonTree THEN561_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN559=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause8410); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8413);
            expression560=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression560.getTree());
            THEN561=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause8415); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause8418);
            expression562=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression562.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE563=null;
        EsperEPL2GrammarParser.expression_return expression564 = null;
        CommonTree ELSE563_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE563=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause8431); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause8434);
            expression564=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression564.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression565 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression8447);
            caseExpression565=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression565.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE566=null;
        Token END569=null;
        Token CASE570=null;
        Token END574=null;
        EsperEPL2GrammarParser.whenClause_return whenClause567 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause568 = null;
        EsperEPL2GrammarParser.expression_return expression571 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause572 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause573 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression575 = null;
        CommonTree CASE566_tree=null;
        CommonTree END569_tree=null;
        CommonTree CASE570_tree=null;
        CommonTree END574_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt224=3;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==CASE) ) {
                int LA224_1 = input.LA(2);
                if ( (LA224_1==WHEN) ) {
                    alt224=1;
                }
                else if ( (LA224_1==WINDOW||LA224_1==BETWEEN||LA224_1==ESCAPE||(LA224_1>=NOT_EXPR && LA224_1<=EVERY_EXPR)||LA224_1==WHERE||(LA224_1>=SUM && LA224_1<=COUNT)||LA224_1==CASE||LA224_1==OUTER||(LA224_1>=JOIN && LA224_1<=FULL)||(LA224_1>=EVENTS && LA224_1<=LAST)||LA224_1==ISTREAM||(LA224_1>=UNIDIRECTIONAL && LA224_1<=CURRENT_TIMESTAMP)||(LA224_1>=SNAPSHOT && LA224_1<=INDEX)||(LA224_1>=BOOLEAN_TRUE && LA224_1<=VALUE_NULL)||(LA224_1>=DEFINE && LA224_1<=MATCHED)||LA224_1==NEWKW||LA224_1==CONTEXT||LA224_1==NUM_DOUBLE||(LA224_1>=IDENT && LA224_1<=LPAREN)||LA224_1==LCURLY||LA224_1==QUESTION||(LA224_1>=PLUS && LA224_1<=QUOTED_STRING_LITERAL)||LA224_1==MINUS||LA224_1==NUM_INT||(LA224_1>=TICKED_STRING_LITERAL && LA224_1<=NUM_FLOAT)) ) {
                    alt224=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 224, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA224_0==WINDOW||LA224_0==BETWEEN||LA224_0==ESCAPE||(LA224_0>=NOT_EXPR && LA224_0<=EVERY_EXPR)||LA224_0==WHERE||(LA224_0>=SUM && LA224_0<=COUNT)||LA224_0==OUTER||(LA224_0>=JOIN && LA224_0<=FULL)||(LA224_0>=EVENTS && LA224_0<=LAST)||LA224_0==ISTREAM||(LA224_0>=UNIDIRECTIONAL && LA224_0<=CURRENT_TIMESTAMP)||(LA224_0>=SNAPSHOT && LA224_0<=INDEX)||(LA224_0>=BOOLEAN_TRUE && LA224_0<=VALUE_NULL)||(LA224_0>=DEFINE && LA224_0<=MATCHED)||LA224_0==NEWKW||LA224_0==CONTEXT||LA224_0==NUM_DOUBLE||(LA224_0>=IDENT && LA224_0<=LPAREN)||LA224_0==LCURLY||LA224_0==QUESTION||(LA224_0>=PLUS && LA224_0<=QUOTED_STRING_LITERAL)||LA224_0==MINUS||LA224_0==NUM_INT||(LA224_0>=TICKED_STRING_LITERAL && LA224_0<=NUM_FLOAT)) ) {
                alt224=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);
                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE566=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE566_tree = (CommonTree)adaptor.create(CASE566);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE566_tree, root_0);
                    }
                    int cnt220=0;
                    loop220:
                    do {
                        int alt220=2;
                        int LA220_0 = input.LA(1);
                        if ( (LA220_0==WHEN) ) {
                            alt220=1;
                        }
                        switch (alt220) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8464);
                    	    whenClause567=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause567.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt220 >= 1 ) break loop220;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(220, input);
                                throw eee;
                        }
                        cnt220++;
                    } while (true);
                    int alt221=2;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==ELSE) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8467);
                            elseClause568=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause568.getTree());
                            }
                            break;
                    }
                    END569=(Token)match(input,END,FOLLOW_END_in_caseExpression8470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE570=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression8481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE570);
                    pushFollow(FOLLOW_expression_in_caseExpression8483);
                    expression571=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression571.getTree());
                    int cnt222=0;
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);
                        if ( (LA222_0==WHEN) ) {
                            alt222=1;
                        }
                        switch (alt222) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression8485);
                    	    whenClause572=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause572.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt222 >= 1 ) break loop222;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(222, input);
                                throw eee;
                        }
                        cnt222++;
                    } while (true);
                    int alt223=2;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==ELSE) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression8488);
                            elseClause573=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause573.getTree());
                            }
                            break;
                    }
                    END574=(Token)match(input,END,FOLLOW_END_in_caseExpression8491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END574);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression8515);
                    evalOrExpression575=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression575.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression576 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression577 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8526);
            evalAndExpression576=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression576.getTree());
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);
                if ( (LA225_0==OR_EXPR) ) {
                    alt225=1;
                }
                switch (alt225) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression8531); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression8533);
            	    evalAndExpression577=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression577.getTree());
            	    }
            	    break;
            	default :
            	    break loop225;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression578 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression579 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8565);
            bitWiseExpression578=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression578.getTree());
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);
                if ( (LA226_0==AND_EXPR) ) {
                    int LA226_16 = input.LA(2);
                    if ( (LA226_16==WINDOW||LA226_16==BETWEEN||LA226_16==ESCAPE||(LA226_16>=NOT_EXPR && LA226_16<=EVERY_EXPR)||LA226_16==WHERE||(LA226_16>=SUM && LA226_16<=COUNT)||LA226_16==OUTER||(LA226_16>=JOIN && LA226_16<=FULL)||(LA226_16>=EVENTS && LA226_16<=LAST)||LA226_16==ISTREAM||(LA226_16>=UNIDIRECTIONAL && LA226_16<=CURRENT_TIMESTAMP)||(LA226_16>=SNAPSHOT && LA226_16<=INDEX)||(LA226_16>=BOOLEAN_TRUE && LA226_16<=VALUE_NULL)||(LA226_16>=DEFINE && LA226_16<=MATCHED)||LA226_16==NEWKW||LA226_16==CONTEXT||LA226_16==NUM_DOUBLE||(LA226_16>=IDENT && LA226_16<=LPAREN)||LA226_16==LCURLY||LA226_16==QUESTION||(LA226_16>=PLUS && LA226_16<=QUOTED_STRING_LITERAL)||LA226_16==MINUS||LA226_16==NUM_INT||(LA226_16>=TICKED_STRING_LITERAL && LA226_16<=NUM_FLOAT)) ) {
                        alt226=1;
                    }
                }
                switch (alt226) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression8570); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression8572);
            	    bitWiseExpression579=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression579.getTree());
            	    }
            	    break;
            	default :
            	    break loop226;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND581=null;
        Token BOR582=null;
        Token BXOR583=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression580 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression584 = null;
        CommonTree BAND581_tree=null;
        CommonTree BOR582_tree=null;
        CommonTree BXOR583_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8604);
            negatedExpression580=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression580.getTree());
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( (LA228_0==BOR||(LA228_0>=BAND && LA228_0<=BXOR)) ) {
                    alt228=1;
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    int alt227=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt227=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt227=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt227=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 227, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt227) {
            	        case 1 :
            	            {
            	            BAND581=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression8609); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND581_tree = (CommonTree)adaptor.create(BAND581);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND581_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR582=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression8612); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR582_tree = (CommonTree)adaptor.create(BOR582);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR582_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR583=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression8615); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR583_tree = (CommonTree)adaptor.create(BXOR583);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR583_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression8619);
            	    negatedExpression584=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression584.getTree());
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR586=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression585 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression587 = null;
        CommonTree NOT_EXPR586_tree=null;
        try {
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==WINDOW||LA229_0==BETWEEN||LA229_0==ESCAPE||LA229_0==EVERY_EXPR||LA229_0==WHERE||(LA229_0>=SUM && LA229_0<=COUNT)||LA229_0==OUTER||(LA229_0>=JOIN && LA229_0<=FULL)||(LA229_0>=EVENTS && LA229_0<=LAST)||LA229_0==ISTREAM||(LA229_0>=UNIDIRECTIONAL && LA229_0<=CURRENT_TIMESTAMP)||(LA229_0>=SNAPSHOT && LA229_0<=INDEX)||(LA229_0>=BOOLEAN_TRUE && LA229_0<=VALUE_NULL)||(LA229_0>=DEFINE && LA229_0<=MATCHED)||LA229_0==NEWKW||LA229_0==CONTEXT||LA229_0==NUM_DOUBLE||(LA229_0>=IDENT && LA229_0<=LPAREN)||LA229_0==LCURLY||LA229_0==QUESTION||(LA229_0>=PLUS && LA229_0<=QUOTED_STRING_LITERAL)||LA229_0==MINUS||LA229_0==NUM_INT||(LA229_0>=TICKED_STRING_LITERAL && LA229_0<=NUM_FLOAT)) ) {
                alt229=1;
            }
            else if ( (LA229_0==NOT_EXPR) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);
                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8634);
                    evalEqualsExpression585=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression585.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR586=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression8640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR586_tree = (CommonTree)adaptor.create(NOT_EXPR586);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR586_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression8643);
                    evalEqualsExpression587=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression587.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR589=null;
        Token LPAREN591=null;
        Token RPAREN593=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression588 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression590 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList592 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression594 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR589_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree RPAREN593_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8656);
            evalRelationalExpression588=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression588.getTree());
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);
                if ( (LA235_0==IS||LA235_0==EQUALS||(LA235_0>=SQL_NE && LA235_0<=NOT_EQUAL)) ) {
                    alt235=1;
                }
                switch (alt235) {
            	case 1 :
            	    {
            	    int alt230=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt230=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA230_2 = input.LA(2);
            	        if ( (LA230_2==NOT_EXPR) ) {
            	            alt230=3;
            	        }
            	        else if ( (LA230_2==WINDOW||LA230_2==BETWEEN||LA230_2==ESCAPE||LA230_2==EVERY_EXPR||LA230_2==WHERE||(LA230_2>=SUM && LA230_2<=COUNT)||LA230_2==OUTER||(LA230_2>=JOIN && LA230_2<=FULL)||(LA230_2>=ALL && LA230_2<=SOME)||(LA230_2>=EVENTS && LA230_2<=LAST)||LA230_2==ISTREAM||(LA230_2>=UNIDIRECTIONAL && LA230_2<=CURRENT_TIMESTAMP)||(LA230_2>=SNAPSHOT && LA230_2<=INDEX)||(LA230_2>=BOOLEAN_TRUE && LA230_2<=VALUE_NULL)||(LA230_2>=DEFINE && LA230_2<=MATCHED)||LA230_2==NEWKW||LA230_2==CONTEXT||LA230_2==NUM_DOUBLE||(LA230_2>=IDENT && LA230_2<=LPAREN)||LA230_2==LCURLY||LA230_2==QUESTION||(LA230_2>=PLUS && LA230_2<=QUOTED_STRING_LITERAL)||LA230_2==MINUS||LA230_2==NUM_INT||(LA230_2>=TICKED_STRING_LITERAL && LA230_2<=NUM_FLOAT)) ) {
            	            alt230=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 230, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt230=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt230=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 230, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression8669); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8687); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression8701); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR589=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression8703); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR589);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression8717); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression8731); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt234=2;
            	    int LA234_0 = input.LA(1);
            	    if ( (LA234_0==WINDOW||LA234_0==BETWEEN||LA234_0==ESCAPE||LA234_0==EVERY_EXPR||LA234_0==WHERE||(LA234_0>=SUM && LA234_0<=COUNT)||LA234_0==OUTER||(LA234_0>=JOIN && LA234_0<=FULL)||(LA234_0>=EVENTS && LA234_0<=LAST)||LA234_0==ISTREAM||(LA234_0>=UNIDIRECTIONAL && LA234_0<=CURRENT_TIMESTAMP)||(LA234_0>=SNAPSHOT && LA234_0<=INDEX)||(LA234_0>=BOOLEAN_TRUE && LA234_0<=VALUE_NULL)||(LA234_0>=DEFINE && LA234_0<=MATCHED)||LA234_0==NEWKW||LA234_0==CONTEXT||LA234_0==NUM_DOUBLE||(LA234_0>=IDENT && LA234_0<=LPAREN)||LA234_0==LCURLY||LA234_0==QUESTION||(LA234_0>=PLUS && LA234_0<=QUOTED_STRING_LITERAL)||LA234_0==MINUS||LA234_0==NUM_INT||(LA234_0>=TICKED_STRING_LITERAL && LA234_0<=NUM_FLOAT)) ) {
            	        alt234=1;
            	    }
            	    else if ( ((LA234_0>=ALL && LA234_0<=SOME)) ) {
            	        alt234=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 234, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt234) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression8761);
            	            evalRelationalExpression590=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression590.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt231=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt231=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt231=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt231=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 231, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt231) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression8778); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression8784); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression8790); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt233=2;
            	            int LA233_0 = input.LA(1);
            	            if ( (LA233_0==LPAREN) ) {
            	                int LA233_1 = input.LA(2);
            	                if ( (LA233_1==SELECT) ) {
            	                    alt233=2;
            	                }
            	                else if ( (LA233_1==WINDOW||LA233_1==BETWEEN||LA233_1==ESCAPE||(LA233_1>=NOT_EXPR && LA233_1<=EVERY_EXPR)||LA233_1==WHERE||(LA233_1>=SUM && LA233_1<=COUNT)||LA233_1==CASE||LA233_1==OUTER||(LA233_1>=JOIN && LA233_1<=FULL)||(LA233_1>=EVENTS && LA233_1<=LAST)||LA233_1==ISTREAM||(LA233_1>=UNIDIRECTIONAL && LA233_1<=CURRENT_TIMESTAMP)||(LA233_1>=SNAPSHOT && LA233_1<=INDEX)||(LA233_1>=BOOLEAN_TRUE && LA233_1<=VALUE_NULL)||(LA233_1>=DEFINE && LA233_1<=MATCHED)||LA233_1==NEWKW||LA233_1==CONTEXT||LA233_1==NUM_DOUBLE||(LA233_1>=IDENT && LA233_1<=RPAREN)||LA233_1==LCURLY||LA233_1==QUESTION||(LA233_1>=PLUS && LA233_1<=QUOTED_STRING_LITERAL)||LA233_1==MINUS||LA233_1==NUM_INT||(LA233_1>=TICKED_STRING_LITERAL && LA233_1<=NUM_FLOAT)) ) {
            	                    alt233=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 233, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 233, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt233) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression8796); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN591);
            	                    int alt232=2;
            	                    int LA232_0 = input.LA(1);
            	                    if ( (LA232_0==WINDOW||LA232_0==BETWEEN||LA232_0==ESCAPE||(LA232_0>=NOT_EXPR && LA232_0<=EVERY_EXPR)||LA232_0==WHERE||(LA232_0>=SUM && LA232_0<=COUNT)||LA232_0==CASE||LA232_0==OUTER||(LA232_0>=JOIN && LA232_0<=FULL)||(LA232_0>=EVENTS && LA232_0<=LAST)||LA232_0==ISTREAM||(LA232_0>=UNIDIRECTIONAL && LA232_0<=CURRENT_TIMESTAMP)||(LA232_0>=SNAPSHOT && LA232_0<=INDEX)||(LA232_0>=BOOLEAN_TRUE && LA232_0<=VALUE_NULL)||(LA232_0>=DEFINE && LA232_0<=MATCHED)||LA232_0==NEWKW||LA232_0==CONTEXT||LA232_0==NUM_DOUBLE||(LA232_0>=IDENT && LA232_0<=LPAREN)||LA232_0==LCURLY||LA232_0==QUESTION||(LA232_0>=PLUS && LA232_0<=QUOTED_STRING_LITERAL)||LA232_0==MINUS||LA232_0==NUM_INT||(LA232_0>=TICKED_STRING_LITERAL && LA232_0<=NUM_FLOAT)) ) {
            	                        alt232=1;
            	                    }
            	                    switch (alt232) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression8798);
            	                            expressionList592=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList592.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression8801); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN593);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression8806);
            	                    subSelectGroupExpression594=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression594.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop235;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN597=null;
        Token RPAREN599=null;
        Token COMMA603=null;
        Token IN_SET605=null;
        Token BETWEEN607=null;
        Token LIKE609=null;
        Token ESCAPE611=null;
        Token REGEXP613=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr595 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr596 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList598 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression600 = null;
        EsperEPL2GrammarParser.expression_return expression601 = null;
        EsperEPL2GrammarParser.expression_return expression602 = null;
        EsperEPL2GrammarParser.expression_return expression604 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery606 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList608 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr610 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant612 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr614 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN597_tree=null;
        CommonTree RPAREN599_tree=null;
        CommonTree COMMA603_tree=null;
        CommonTree IN_SET605_tree=null;
        CommonTree BETWEEN607_tree=null;
        CommonTree LIKE609_tree=null;
        CommonTree ESCAPE611_tree=null;
        CommonTree REGEXP613_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8966);
            concatenationExpr595=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr595.getTree());
            int alt249=2;
            int LA249_0 = input.LA(1);
            if ( (LA249_0==EOF||(LA249_0>=OR_EXPR && LA249_0<=AND_EXPR)||(LA249_0>=WHERE && LA249_0<=AS)||(LA249_0>=ELSE && LA249_0<=FROM)||LA249_0==IS||(LA249_0>=GROUP && LA249_0<=HAVING)||LA249_0==ALL||LA249_0==OUTPUT||LA249_0==INSERT||(LA249_0>=ORDER && LA249_0<=DESC)||LA249_0==PATTERN||(LA249_0>=TIMEPERIOD_SEC && LA249_0<=TIMEPERIOD_SECONDS)||LA249_0==ROW_LIMIT_EXPR||LA249_0==MEASURES||(LA249_0>=AFTER && LA249_0<=FOR)||LA249_0==RBRACK||(LA249_0>=RPAREN && LA249_0<=COLON)||LA249_0==RCURLY||(LA249_0>=ATCHAR && LA249_0<=COMMA)||LA249_0==EQUALS||(LA249_0>=LT && LA249_0<=GT)||LA249_0==BOR||(LA249_0>=BAND && LA249_0<=GE)||LA249_0==FOLLOWMAX_END) ) {
                alt249=1;
            }
            else if ( ((LA249_0>=IN_SET && LA249_0<=REGEXP)||LA249_0==NOT_EXPR) ) {
                alt249=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);
                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    {
                    {
                    loop241:
                    do {
                        int alt241=2;
                        int LA241_0 = input.LA(1);
                        if ( ((LA241_0>=LT && LA241_0<=GT)||(LA241_0>=LE && LA241_0<=GE)) ) {
                            alt241=1;
                        }
                        switch (alt241) {
                    	case 1 :
                    	    {
                    	    int alt236=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt236=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt236=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt236=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt236=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 236, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt236) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression8998); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression9002); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression9006); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression9010); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt240=2;
                    	    int LA240_0 = input.LA(1);
                    	    if ( (LA240_0==WINDOW||LA240_0==BETWEEN||LA240_0==ESCAPE||LA240_0==EVERY_EXPR||LA240_0==WHERE||(LA240_0>=SUM && LA240_0<=COUNT)||LA240_0==OUTER||(LA240_0>=JOIN && LA240_0<=FULL)||(LA240_0>=EVENTS && LA240_0<=LAST)||LA240_0==ISTREAM||(LA240_0>=UNIDIRECTIONAL && LA240_0<=CURRENT_TIMESTAMP)||(LA240_0>=SNAPSHOT && LA240_0<=INDEX)||(LA240_0>=BOOLEAN_TRUE && LA240_0<=VALUE_NULL)||(LA240_0>=DEFINE && LA240_0<=MATCHED)||LA240_0==NEWKW||LA240_0==CONTEXT||LA240_0==NUM_DOUBLE||(LA240_0>=IDENT && LA240_0<=LPAREN)||LA240_0==LCURLY||LA240_0==QUESTION||(LA240_0>=PLUS && LA240_0<=QUOTED_STRING_LITERAL)||LA240_0==MINUS||LA240_0==NUM_INT||(LA240_0>=TICKED_STRING_LITERAL && LA240_0<=NUM_FLOAT)) ) {
                    	        alt240=1;
                    	    }
                    	    else if ( ((LA240_0>=ALL && LA240_0<=SOME)) ) {
                    	        alt240=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 240, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt240) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9034);
                    	            concatenationExpr596=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr596.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt237=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt237=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt237=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt237=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 237, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt237) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression9051); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression9057); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression9063); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt239=2;
                    	            int LA239_0 = input.LA(1);
                    	            if ( (LA239_0==LPAREN) ) {
                    	                int LA239_1 = input.LA(2);
                    	                if ( (LA239_1==SELECT) ) {
                    	                    alt239=2;
                    	                }
                    	                else if ( (LA239_1==WINDOW||LA239_1==BETWEEN||LA239_1==ESCAPE||(LA239_1>=NOT_EXPR && LA239_1<=EVERY_EXPR)||LA239_1==WHERE||(LA239_1>=SUM && LA239_1<=COUNT)||LA239_1==CASE||LA239_1==OUTER||(LA239_1>=JOIN && LA239_1<=FULL)||(LA239_1>=EVENTS && LA239_1<=LAST)||LA239_1==ISTREAM||(LA239_1>=UNIDIRECTIONAL && LA239_1<=CURRENT_TIMESTAMP)||(LA239_1>=SNAPSHOT && LA239_1<=INDEX)||(LA239_1>=BOOLEAN_TRUE && LA239_1<=VALUE_NULL)||(LA239_1>=DEFINE && LA239_1<=MATCHED)||LA239_1==NEWKW||LA239_1==CONTEXT||LA239_1==NUM_DOUBLE||(LA239_1>=IDENT && LA239_1<=RPAREN)||LA239_1==LCURLY||LA239_1==QUESTION||(LA239_1>=PLUS && LA239_1<=QUOTED_STRING_LITERAL)||LA239_1==MINUS||LA239_1==NUM_INT||(LA239_1>=TICKED_STRING_LITERAL && LA239_1<=NUM_FLOAT)) ) {
                    	                    alt239=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 239, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 239, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt239) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN597=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9069); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN597);
                    	                    int alt238=2;
                    	                    int LA238_0 = input.LA(1);
                    	                    if ( (LA238_0==WINDOW||LA238_0==BETWEEN||LA238_0==ESCAPE||(LA238_0>=NOT_EXPR && LA238_0<=EVERY_EXPR)||LA238_0==WHERE||(LA238_0>=SUM && LA238_0<=COUNT)||LA238_0==CASE||LA238_0==OUTER||(LA238_0>=JOIN && LA238_0<=FULL)||(LA238_0>=EVENTS && LA238_0<=LAST)||LA238_0==ISTREAM||(LA238_0>=UNIDIRECTIONAL && LA238_0<=CURRENT_TIMESTAMP)||(LA238_0>=SNAPSHOT && LA238_0<=INDEX)||(LA238_0>=BOOLEAN_TRUE && LA238_0<=VALUE_NULL)||(LA238_0>=DEFINE && LA238_0<=MATCHED)||LA238_0==NEWKW||LA238_0==CONTEXT||LA238_0==NUM_DOUBLE||(LA238_0>=IDENT && LA238_0<=LPAREN)||LA238_0==LCURLY||LA238_0==QUESTION||(LA238_0>=PLUS && LA238_0<=QUOTED_STRING_LITERAL)||LA238_0==MINUS||LA238_0==NUM_INT||(LA238_0>=TICKED_STRING_LITERAL && LA238_0<=NUM_FLOAT)) ) {
                    	                        alt238=1;
                    	                    }
                    	                    switch (alt238) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression9071);
                    	                            expressionList598=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList598.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9074); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN599);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression9079);
                    	                    subSelectGroupExpression600=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression600.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop241;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==NOT_EXPR) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression9175); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt248=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA248_1 = input.LA(2);
                        if ( (LA248_1==LPAREN) ) {
                            int LA248_5 = input.LA(3);
                            if ( (LA248_5==SELECT) ) {
                                alt248=2;
                            }
                            else if ( (LA248_5==WINDOW||LA248_5==BETWEEN||LA248_5==ESCAPE||(LA248_5>=NOT_EXPR && LA248_5<=EVERY_EXPR)||LA248_5==WHERE||(LA248_5>=SUM && LA248_5<=COUNT)||LA248_5==CASE||LA248_5==OUTER||(LA248_5>=JOIN && LA248_5<=FULL)||(LA248_5>=EVENTS && LA248_5<=LAST)||LA248_5==ISTREAM||(LA248_5>=UNIDIRECTIONAL && LA248_5<=CURRENT_TIMESTAMP)||(LA248_5>=SNAPSHOT && LA248_5<=INDEX)||(LA248_5>=BOOLEAN_TRUE && LA248_5<=VALUE_NULL)||(LA248_5>=DEFINE && LA248_5<=MATCHED)||LA248_5==NEWKW||LA248_5==CONTEXT||LA248_5==NUM_DOUBLE||(LA248_5>=IDENT && LA248_5<=LPAREN)||LA248_5==LCURLY||LA248_5==QUESTION||(LA248_5>=PLUS && LA248_5<=QUOTED_STRING_LITERAL)||LA248_5==MINUS||LA248_5==NUM_INT||(LA248_5>=TICKED_STRING_LITERAL && LA248_5<=NUM_FLOAT)) ) {
                                alt248=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 248, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA248_1==LBRACK) ) {
                            alt248=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 248, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt248=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt248=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt248=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 248, 0, input);
                        throw nvae;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9202); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt243=2;
                            int LA243_0 = input.LA(1);
                            if ( (LA243_0==LPAREN) ) {
                                alt243=1;
                            }
                            else if ( (LA243_0==LBRACK) ) {
                                alt243=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 243, 0, input);
                                throw nvae;
                            }
                            switch (alt243) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression9214); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression9220); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression9223);
                            expression601=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression601.getTree());
                            int alt245=2;
                            int LA245_0 = input.LA(1);
                            if ( (LA245_0==COLON) ) {
                                alt245=1;
                            }
                            else if ( (LA245_0==RBRACK||LA245_0==RPAREN||LA245_0==COMMA) ) {
                                alt245=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 245, 0, input);
                                throw nvae;
                            }
                            switch (alt245) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression9245); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression9248);
                                    expression602=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression602.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop244:
                                    do {
                                        int alt244=2;
                                        int LA244_0 = input.LA(1);
                                        if ( (LA244_0==COMMA) ) {
                                            alt244=1;
                                        }
                                        switch (alt244) {
                                    	case 1 :
                                    	    {
                                    	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression9274); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA603);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression9276);
                                    	    expression604=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression604.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop244;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt246=2;
                            int LA246_0 = input.LA(1);
                            if ( (LA246_0==RPAREN) ) {
                                alt246=1;
                            }
                            else if ( (LA246_0==RBRACK) ) {
                                alt246=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 246, 0, input);
                                throw nvae;
                            }
                            switch (alt246) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression9302); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression9308); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET605=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression9431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET605);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression9433);
                            inSubSelectQuery606=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery606.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN607=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression9479); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN607);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression9481);
                            betweenList608=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList608.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE609=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression9531); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE609);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9533);
                            concatenationExpr610=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr610.getTree());
                            int alt247=2;
                            int LA247_0 = input.LA(1);
                            if ( (LA247_0==ESCAPE) ) {
                                alt247=1;
                            }
                            switch (alt247) {
                                case 1 :
                                    {
                                    ESCAPE611=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression9536); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE611);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression9538);
                                    stringconstant612=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant612.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP613=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression9590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP613);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression9592);
                            concatenationExpr614=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr614.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr615 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery9654);
            subQueryExpr615=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr615.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR618=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression616 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression617 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression619 = null;
        CommonTree c_tree=null;
        CommonTree LOR618_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9679);
            additiveExpression616=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression616.getTree());
            int alt251=2;
            int LA251_0 = input.LA(1);
            if ( (LA251_0==LOR) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9687);
                    additiveExpression617=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression617.getTree());
                    loop250:
                    do {
                        int alt250=2;
                        int LA250_0 = input.LA(1);
                        if ( (LA250_0==LOR) ) {
                            alt250=1;
                        }
                        switch (alt250) {
                    	case 1 :
                    	    {
                    	    LOR618=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr9691); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR618);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr9693);
                    	    additiveExpression619=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression619.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop250;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS621=null;
        Token MINUS622=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression620 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression623 = null;
        CommonTree PLUS621_tree=null;
        CommonTree MINUS622_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9734);
            multiplyExpression620=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression620.getTree());
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);
                if ( (LA253_0==PLUS||LA253_0==MINUS) ) {
                    alt253=1;
                }
                switch (alt253) {
            	case 1 :
            	    {
            	    int alt252=2;
            	    int LA252_0 = input.LA(1);
            	    if ( (LA252_0==PLUS) ) {
            	        alt252=1;
            	    }
            	    else if ( (LA252_0==MINUS) ) {
            	        alt252=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 252, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt252) {
            	        case 1 :
            	            {
            	            PLUS621=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression9739); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS621_tree = (CommonTree)adaptor.create(PLUS621);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS621_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS622=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression9742); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS622_tree = (CommonTree)adaptor.create(MINUS622);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS622_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression9746);
            	    multiplyExpression623=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression623.getTree());
            	    }
            	    break;
            	default :
            	    break loop253;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR625=null;
        Token DIV626=null;
        Token MOD627=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression624 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression628 = null;
        CommonTree STAR625_tree=null;
        CommonTree DIV626_tree=null;
        CommonTree MOD627_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9760);
            unaryExpression624=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression624.getTree());
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);
                if ( (LA255_0==STAR||(LA255_0>=DIV && LA255_0<=MOD)) ) {
                    alt255=1;
                }
                switch (alt255) {
            	case 1 :
            	    {
            	    int alt254=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt254=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt254=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt254=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 254, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt254) {
            	        case 1 :
            	            {
            	            STAR625=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression9765); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR625_tree = (CommonTree)adaptor.create(STAR625);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR625_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV626=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression9768); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV626_tree = (CommonTree)adaptor.create(DIV626);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV626_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD627=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression9771); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD627_tree = (CommonTree)adaptor.create(MOD627);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD627_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression9775);
            	    unaryExpression628=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression628.getTree());
            	    }
            	    break;
            	default :
            	    break loop255;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS629=null;
        Token LPAREN633=null;
        Token RPAREN635=null;
        Token NEWKW645=null;
        Token LCURLY646=null;
        Token COMMA648=null;
        Token RCURLY650=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty630 = null;
        EsperEPL2GrammarParser.constant_return constant631 = null;
        EsperEPL2GrammarParser.substitution_return substitution632 = null;
        EsperEPL2GrammarParser.expression_return expression634 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass636 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass637 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction638 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc639 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression640 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression641 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass642 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass643 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression644 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign647 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign649 = null;
        CommonTree d_tree=null;
        CommonTree MINUS629_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN635_tree=null;
        CommonTree NEWKW645_tree=null;
        CommonTree LCURLY646_tree=null;
        CommonTree COMMA648_tree=null;
        CommonTree RCURLY650_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt261=10;
            alt261 = dfa261.predict(input);
            switch (alt261) {
                case 1 :
                    {
                    MINUS629=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression9790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS629);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression9792);
                    eventProperty630=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty630.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression9805);
                    constant631=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant631.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression9810);
                    substitution632=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution632.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression9815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN633);
                    pushFollow(FOLLOW_expression_in_unaryExpression9817);
                    expression634=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression634.getTree());
                    RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression9819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN635);
                    int alt257=2;
                    int LA257_0 = input.LA(1);
                    if ( (LA257_0==DOT) ) {
                        alt257=1;
                    }
                    switch (alt257) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9824); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9826);
                            libFunctionNoClass636=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass636.getTree());
                            loop256:
                            do {
                                int alt256=2;
                                int LA256_0 = input.LA(1);
                                if ( (LA256_0==DOT) ) {
                                    alt256=1;
                                }
                                switch (alt256) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9831); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9833);
                            	    libFunctionNoClass637=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass637.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop256;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression9870);
                    eventPropertyOrLibFunction638=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction638.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression9882);
                    builtinFunc639=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc639.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression9888);
                    arrayExpression640=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression640.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression9893);
                    subSelectExpression641=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression641.getTree());
                    int alt259=2;
                    int LA259_0 = input.LA(1);
                    if ( (LA259_0==DOT) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9898); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9900);
                            libFunctionNoClass642=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass642.getTree());
                            loop258:
                            do {
                                int alt258=2;
                                int LA258_0 = input.LA(1);
                                if ( (LA258_0==DOT) ) {
                                    alt258=1;
                                }
                                switch (alt258) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression9905); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression9907);
                            	    libFunctionNoClass643=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass643.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop258;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression9944);
                    existsSubSelectExpression644=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression644.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW645=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression9949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW645);
                    LCURLY646=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression9951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY646);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression9953);
                    newAssign647=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign647.getTree());
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);
                        if ( (LA260_0==COMMA) ) {
                            alt260=1;
                        }
                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    COMMA648=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression9956); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA648);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression9958);
                    	    newAssign649=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign649.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    RCURLY650=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression9962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY650);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS652=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty651 = null;
        EsperEPL2GrammarParser.expression_return expression653 = null;
        CommonTree EQUALS652_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign9984);
            eventProperty651=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty651.getTree());
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( (LA262_0==EQUALS) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    EQUALS652=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign9987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS652);
                    pushFollow(FOLLOW_expression_in_newAssign9989);
                    expression653=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression653.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr654 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression10017);
            subQueryExpr654=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr654.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr655 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression10039);
            subQueryExpr655=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr655.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS656=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr657 = null;
        CommonTree EXISTS656_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS656=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression10061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS656);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression10063);
            subQueryExpr657=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr657.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN658=null;
        Token SELECT659=null;
        Token DISTINCT660=null;
        Token FROM662=null;
        Token WHERE664=null;
        Token RPAREN666=null;
        EsperEPL2GrammarParser.selectionList_return selectionList661 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr663 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause665 = null;
        CommonTree LPAREN658_tree=null;
        CommonTree SELECT659_tree=null;
        CommonTree DISTINCT660_tree=null;
        CommonTree FROM662_tree=null;
        CommonTree WHERE664_tree=null;
        CommonTree RPAREN666_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN658=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr10096); if (state.failed) return retval;
            SELECT659=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr10102); if (state.failed) return retval;
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( (LA263_0==DISTINCT) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    DISTINCT660=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr10105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT660_tree = (CommonTree)adaptor.create(DISTINCT660);
                    adaptor.addChild(root_0, DISTINCT660_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr10108);
            selectionList661=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList661.getTree());
            FROM662=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr10115); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr10118);
            subSelectFilterExpr663=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr663.getTree());
            int alt264=2;
            int LA264_0 = input.LA(1);
            if ( (LA264_0==WHERE) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    WHERE664=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr10126); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr10129);
                    whereClause665=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause665.getTree());
                    }
                    break;
            }
            RPAREN666=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr10138); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT668=null;
        Token DOT670=null;
        Token AS672=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression667 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression669 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression671 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT668_tree=null;
        CommonTree DOT670_tree=null;
        CommonTree AS672_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr10162);
            eventFilterExpression667=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression667.getTree());
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==DOT) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    DOT668=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT668);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10169);
                    viewExpression669=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression669.getTree());
                    loop265:
                    do {
                        int alt265=2;
                        int LA265_0 = input.LA(1);
                        if ( (LA265_0==DOT) ) {
                            alt265=1;
                        }
                        switch (alt265) {
                    	case 1 :
                    	    {
                    	    DOT670=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr10172); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT670);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr10174);
                    	    viewExpression671=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression671.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop265;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt267=3;
            int LA267_0 = input.LA(1);
            if ( (LA267_0==AS) ) {
                alt267=1;
            }
            else if ( (LA267_0==IDENT) ) {
                alt267=2;
            }
            switch (alt267) {
                case 1 :
                    {
                    AS672=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr10181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS672);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr10191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt268=3;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==RETAINUNION) ) {
                alt268=1;
            }
            else if ( (LA268_0==RETAININTERSECTION) ) {
                alt268=2;
            }
            switch (alt268) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr10198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr10202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY673=null;
        Token COMMA675=null;
        Token RCURLY677=null;
        EsperEPL2GrammarParser.expression_return expression674 = null;
        EsperEPL2GrammarParser.expression_return expression676 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass678 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass679 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY673_tree=null;
        CommonTree COMMA675_tree=null;
        CommonTree RCURLY677_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY673=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression10242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY673);
            int alt270=2;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==WINDOW||LA270_0==BETWEEN||LA270_0==ESCAPE||(LA270_0>=NOT_EXPR && LA270_0<=EVERY_EXPR)||LA270_0==WHERE||(LA270_0>=SUM && LA270_0<=COUNT)||LA270_0==CASE||LA270_0==OUTER||(LA270_0>=JOIN && LA270_0<=FULL)||(LA270_0>=EVENTS && LA270_0<=LAST)||LA270_0==ISTREAM||(LA270_0>=UNIDIRECTIONAL && LA270_0<=CURRENT_TIMESTAMP)||(LA270_0>=SNAPSHOT && LA270_0<=INDEX)||(LA270_0>=BOOLEAN_TRUE && LA270_0<=VALUE_NULL)||(LA270_0>=DEFINE && LA270_0<=MATCHED)||LA270_0==NEWKW||LA270_0==CONTEXT||LA270_0==NUM_DOUBLE||(LA270_0>=IDENT && LA270_0<=LPAREN)||LA270_0==LCURLY||LA270_0==QUESTION||(LA270_0>=PLUS && LA270_0<=QUOTED_STRING_LITERAL)||LA270_0==MINUS||LA270_0==NUM_INT||(LA270_0>=TICKED_STRING_LITERAL && LA270_0<=NUM_FLOAT)) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression10245);
                    expression674=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression674.getTree());
                    loop269:
                    do {
                        int alt269=2;
                        int LA269_0 = input.LA(1);
                        if ( (LA269_0==COMMA) ) {
                            alt269=1;
                        }
                        switch (alt269) {
                    	case 1 :
                    	    {
                    	    COMMA675=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression10248); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA675);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression10250);
                    	    expression676=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression676.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop269;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY677=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression10257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY677);
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==DOT) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10264);
                    libFunctionNoClass678=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass678.getTree());
                    loop271:
                    do {
                        int alt271=2;
                        int LA271_0 = input.LA(1);
                        if ( (LA271_0==DOT) ) {
                            alt271=1;
                        }
                        switch (alt271) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression10269); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression10271);
                    	    libFunctionNoClass679=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass679.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop271;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM680=null;
        Token LPAREN681=null;
        Token ALL682=null;
        Token DISTINCT683=null;
        Token RPAREN686=null;
        Token AVG687=null;
        Token LPAREN688=null;
        Token ALL689=null;
        Token DISTINCT690=null;
        Token RPAREN693=null;
        Token COUNT694=null;
        Token LPAREN695=null;
        Token ALL696=null;
        Token DISTINCT697=null;
        Token STAR699=null;
        Token RPAREN701=null;
        Token MEDIAN702=null;
        Token LPAREN703=null;
        Token ALL704=null;
        Token DISTINCT705=null;
        Token RPAREN708=null;
        Token STDDEV709=null;
        Token LPAREN710=null;
        Token ALL711=null;
        Token DISTINCT712=null;
        Token RPAREN715=null;
        Token AVEDEV716=null;
        Token LPAREN717=null;
        Token ALL718=null;
        Token DISTINCT719=null;
        Token RPAREN722=null;
        Token COALESCE726=null;
        Token LPAREN727=null;
        Token COMMA729=null;
        Token COMMA731=null;
        Token RPAREN733=null;
        Token PREVIOUS734=null;
        Token LPAREN735=null;
        Token COMMA737=null;
        Token RPAREN739=null;
        Token PREVIOUSTAIL742=null;
        Token LPAREN743=null;
        Token COMMA745=null;
        Token RPAREN747=null;
        Token PREVIOUSCOUNT750=null;
        Token LPAREN751=null;
        Token RPAREN753=null;
        Token PREVIOUSWINDOW754=null;
        Token LPAREN755=null;
        Token RPAREN757=null;
        Token PRIOR760=null;
        Token LPAREN761=null;
        Token NUM_INT762=null;
        Token COMMA763=null;
        Token RPAREN765=null;
        Token INSTANCEOF766=null;
        Token LPAREN767=null;
        Token COMMA769=null;
        Token COMMA771=null;
        Token RPAREN773=null;
        Token TYPEOF774=null;
        Token LPAREN775=null;
        Token RPAREN777=null;
        Token CAST778=null;
        Token LPAREN779=null;
        Token COMMA781=null;
        Token AS782=null;
        Token RPAREN784=null;
        Token EXISTS787=null;
        Token LPAREN788=null;
        Token RPAREN790=null;
        Token CURRENT_TIMESTAMP791=null;
        Token LPAREN792=null;
        Token RPAREN793=null;
        Token ISTREAM796=null;
        Token LPAREN797=null;
        Token RPAREN798=null;
        EsperEPL2GrammarParser.expression_return expression684 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr685 = null;
        EsperEPL2GrammarParser.expression_return expression691 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr692 = null;
        EsperEPL2GrammarParser.expression_return expression698 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr700 = null;
        EsperEPL2GrammarParser.expression_return expression706 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr707 = null;
        EsperEPL2GrammarParser.expression_return expression713 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr714 = null;
        EsperEPL2GrammarParser.expression_return expression720 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr721 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation723 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation724 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation725 = null;
        EsperEPL2GrammarParser.expression_return expression728 = null;
        EsperEPL2GrammarParser.expression_return expression730 = null;
        EsperEPL2GrammarParser.expression_return expression732 = null;
        EsperEPL2GrammarParser.expression_return expression736 = null;
        EsperEPL2GrammarParser.expression_return expression738 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass740 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass741 = null;
        EsperEPL2GrammarParser.expression_return expression744 = null;
        EsperEPL2GrammarParser.expression_return expression746 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass748 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass749 = null;
        EsperEPL2GrammarParser.expression_return expression752 = null;
        EsperEPL2GrammarParser.expression_return expression756 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass758 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass759 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty764 = null;
        EsperEPL2GrammarParser.expression_return expression768 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier770 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier772 = null;
        EsperEPL2GrammarParser.expression_return expression776 = null;
        EsperEPL2GrammarParser.expression_return expression780 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier783 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass785 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass786 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty789 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass794 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass795 = null;
        CommonTree d_tree=null;
        CommonTree SUM680_tree=null;
        CommonTree LPAREN681_tree=null;
        CommonTree ALL682_tree=null;
        CommonTree DISTINCT683_tree=null;
        CommonTree RPAREN686_tree=null;
        CommonTree AVG687_tree=null;
        CommonTree LPAREN688_tree=null;
        CommonTree ALL689_tree=null;
        CommonTree DISTINCT690_tree=null;
        CommonTree RPAREN693_tree=null;
        CommonTree COUNT694_tree=null;
        CommonTree LPAREN695_tree=null;
        CommonTree ALL696_tree=null;
        CommonTree DISTINCT697_tree=null;
        CommonTree STAR699_tree=null;
        CommonTree RPAREN701_tree=null;
        CommonTree MEDIAN702_tree=null;
        CommonTree LPAREN703_tree=null;
        CommonTree ALL704_tree=null;
        CommonTree DISTINCT705_tree=null;
        CommonTree RPAREN708_tree=null;
        CommonTree STDDEV709_tree=null;
        CommonTree LPAREN710_tree=null;
        CommonTree ALL711_tree=null;
        CommonTree DISTINCT712_tree=null;
        CommonTree RPAREN715_tree=null;
        CommonTree AVEDEV716_tree=null;
        CommonTree LPAREN717_tree=null;
        CommonTree ALL718_tree=null;
        CommonTree DISTINCT719_tree=null;
        CommonTree RPAREN722_tree=null;
        CommonTree COALESCE726_tree=null;
        CommonTree LPAREN727_tree=null;
        CommonTree COMMA729_tree=null;
        CommonTree COMMA731_tree=null;
        CommonTree RPAREN733_tree=null;
        CommonTree PREVIOUS734_tree=null;
        CommonTree LPAREN735_tree=null;
        CommonTree COMMA737_tree=null;
        CommonTree RPAREN739_tree=null;
        CommonTree PREVIOUSTAIL742_tree=null;
        CommonTree LPAREN743_tree=null;
        CommonTree COMMA745_tree=null;
        CommonTree RPAREN747_tree=null;
        CommonTree PREVIOUSCOUNT750_tree=null;
        CommonTree LPAREN751_tree=null;
        CommonTree RPAREN753_tree=null;
        CommonTree PREVIOUSWINDOW754_tree=null;
        CommonTree LPAREN755_tree=null;
        CommonTree RPAREN757_tree=null;
        CommonTree PRIOR760_tree=null;
        CommonTree LPAREN761_tree=null;
        CommonTree NUM_INT762_tree=null;
        CommonTree COMMA763_tree=null;
        CommonTree RPAREN765_tree=null;
        CommonTree INSTANCEOF766_tree=null;
        CommonTree LPAREN767_tree=null;
        CommonTree COMMA769_tree=null;
        CommonTree COMMA771_tree=null;
        CommonTree RPAREN773_tree=null;
        CommonTree TYPEOF774_tree=null;
        CommonTree LPAREN775_tree=null;
        CommonTree RPAREN777_tree=null;
        CommonTree CAST778_tree=null;
        CommonTree LPAREN779_tree=null;
        CommonTree COMMA781_tree=null;
        CommonTree AS782_tree=null;
        CommonTree RPAREN784_tree=null;
        CommonTree EXISTS787_tree=null;
        CommonTree LPAREN788_tree=null;
        CommonTree RPAREN790_tree=null;
        CommonTree CURRENT_TIMESTAMP791_tree=null;
        CommonTree LPAREN792_tree=null;
        CommonTree RPAREN793_tree=null;
        CommonTree ISTREAM796_tree=null;
        CommonTree LPAREN797_tree=null;
        CommonTree RPAREN798_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt302=21;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt302=1;
                }
                break;
            case AVG:
                {
                alt302=2;
                }
                break;
            case COUNT:
                {
                alt302=3;
                }
                break;
            case MEDIAN:
                {
                alt302=4;
                }
                break;
            case STDDEV:
                {
                alt302=5;
                }
                break;
            case AVEDEV:
                {
                alt302=6;
                }
                break;
            case FIRST:
                {
                alt302=7;
                }
                break;
            case LAST:
                {
                alt302=8;
                }
                break;
            case WINDOW:
                {
                alt302=9;
                }
                break;
            case COALESCE:
                {
                alt302=10;
                }
                break;
            case PREVIOUS:
                {
                alt302=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt302=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt302=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt302=14;
                }
                break;
            case PRIOR:
                {
                alt302=15;
                }
                break;
            case INSTANCEOF:
                {
                alt302=16;
                }
                break;
            case TYPEOF:
                {
                alt302=17;
                }
                break;
            case CAST:
                {
                alt302=18;
                }
                break;
            case EXISTS:
                {
                alt302=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt302=20;
                }
                break;
            case ISTREAM:
                {
                alt302=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);
                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM680=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc10320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM680_tree = (CommonTree)adaptor.create(SUM680);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM680_tree, root_0);
                    }
                    LPAREN681=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10323); if (state.failed) return retval;
                    int alt273=3;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==ALL) ) {
                        alt273=1;
                    }
                    else if ( (LA273_0==DISTINCT) ) {
                        alt273=2;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            ALL682=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10327); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT683=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10332); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT683_tree = (CommonTree)adaptor.create(DISTINCT683);
                            adaptor.addChild(root_0, DISTINCT683_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10336);
                    expression684=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression684.getTree());
                    int alt274=2;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==COMMA) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10338);
                            aggregationFilterExpr685=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr685.getTree());
                            }
                            break;
                    }
                    RPAREN686=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10341); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG687=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc10347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG687_tree = (CommonTree)adaptor.create(AVG687);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG687_tree, root_0);
                    }
                    LPAREN688=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10350); if (state.failed) return retval;
                    int alt275=3;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==ALL) ) {
                        alt275=1;
                    }
                    else if ( (LA275_0==DISTINCT) ) {
                        alt275=2;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            ALL689=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10354); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT690=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10359); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT690_tree = (CommonTree)adaptor.create(DISTINCT690);
                            adaptor.addChild(root_0, DISTINCT690_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10363);
                    expression691=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression691.getTree());
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==COMMA) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10365);
                            aggregationFilterExpr692=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr692.getTree());
                            }
                            break;
                    }
                    RPAREN693=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10368); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT694=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc10374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT694_tree = (CommonTree)adaptor.create(COUNT694);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT694_tree, root_0);
                    }
                    LPAREN695=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10377); if (state.failed) return retval;
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==WINDOW||LA278_0==BETWEEN||LA278_0==ESCAPE||(LA278_0>=NOT_EXPR && LA278_0<=EVERY_EXPR)||LA278_0==WHERE||(LA278_0>=SUM && LA278_0<=COUNT)||LA278_0==CASE||LA278_0==OUTER||(LA278_0>=JOIN && LA278_0<=FULL)||(LA278_0>=DISTINCT && LA278_0<=ALL)||(LA278_0>=EVENTS && LA278_0<=LAST)||LA278_0==ISTREAM||(LA278_0>=UNIDIRECTIONAL && LA278_0<=CURRENT_TIMESTAMP)||(LA278_0>=SNAPSHOT && LA278_0<=INDEX)||(LA278_0>=BOOLEAN_TRUE && LA278_0<=VALUE_NULL)||(LA278_0>=DEFINE && LA278_0<=MATCHED)||LA278_0==NEWKW||LA278_0==CONTEXT||LA278_0==NUM_DOUBLE||(LA278_0>=IDENT && LA278_0<=LPAREN)||LA278_0==LCURLY||LA278_0==QUESTION||(LA278_0>=PLUS && LA278_0<=QUOTED_STRING_LITERAL)||LA278_0==MINUS||LA278_0==NUM_INT||(LA278_0>=TICKED_STRING_LITERAL && LA278_0<=NUM_FLOAT)) ) {
                        alt278=1;
                    }
                    else if ( (LA278_0==STAR) ) {
                        alt278=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 278, 0, input);
                        throw nvae;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            int alt277=3;
                            int LA277_0 = input.LA(1);
                            if ( (LA277_0==ALL) ) {
                                alt277=1;
                            }
                            else if ( (LA277_0==DISTINCT) ) {
                                alt277=2;
                            }
                            switch (alt277) {
                                case 1 :
                                    {
                                    ALL696=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10389); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT697=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10394); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT697_tree = (CommonTree)adaptor.create(DISTINCT697);
                                    adaptor.addChild(root_0, DISTINCT697_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc10398);
                            expression698=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression698.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR699=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc10409); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==COMMA) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10420);
                            aggregationFilterExpr700=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr700.getTree());
                            }
                            break;
                    }
                    RPAREN701=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10423); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN702=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc10429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN702_tree = (CommonTree)adaptor.create(MEDIAN702);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN702_tree, root_0);
                    }
                    LPAREN703=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10432); if (state.failed) return retval;
                    int alt280=3;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==ALL) ) {
                        alt280=1;
                    }
                    else if ( (LA280_0==DISTINCT) ) {
                        alt280=2;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            ALL704=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10436); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT705=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10441); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT705_tree = (CommonTree)adaptor.create(DISTINCT705);
                            adaptor.addChild(root_0, DISTINCT705_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10445);
                    expression706=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression706.getTree());
                    int alt281=2;
                    int LA281_0 = input.LA(1);
                    if ( (LA281_0==COMMA) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10447);
                            aggregationFilterExpr707=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr707.getTree());
                            }
                            break;
                    }
                    RPAREN708=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10450); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV709=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc10456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV709_tree = (CommonTree)adaptor.create(STDDEV709);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV709_tree, root_0);
                    }
                    LPAREN710=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10459); if (state.failed) return retval;
                    int alt282=3;
                    int LA282_0 = input.LA(1);
                    if ( (LA282_0==ALL) ) {
                        alt282=1;
                    }
                    else if ( (LA282_0==DISTINCT) ) {
                        alt282=2;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            ALL711=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10463); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT712=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10468); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT712_tree = (CommonTree)adaptor.create(DISTINCT712);
                            adaptor.addChild(root_0, DISTINCT712_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10472);
                    expression713=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression713.getTree());
                    int alt283=2;
                    int LA283_0 = input.LA(1);
                    if ( (LA283_0==COMMA) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10474);
                            aggregationFilterExpr714=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr714.getTree());
                            }
                            break;
                    }
                    RPAREN715=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10477); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV716=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc10483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV716_tree = (CommonTree)adaptor.create(AVEDEV716);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV716_tree, root_0);
                    }
                    LPAREN717=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10486); if (state.failed) return retval;
                    int alt284=3;
                    int LA284_0 = input.LA(1);
                    if ( (LA284_0==ALL) ) {
                        alt284=1;
                    }
                    else if ( (LA284_0==DISTINCT) ) {
                        alt284=2;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            ALL718=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc10490); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT719=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc10495); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT719_tree = (CommonTree)adaptor.create(DISTINCT719);
                            adaptor.addChild(root_0, DISTINCT719_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc10499);
                    expression720=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression720.getTree());
                    int alt285=2;
                    int LA285_0 = input.LA(1);
                    if ( (LA285_0==COMMA) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc10501);
                            aggregationFilterExpr721=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr721.getTree());
                            }
                            break;
                    }
                    RPAREN722=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10504); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc10510);
                    firstAggregation723=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation723.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc10515);
                    lastAggregation724=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation724.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc10520);
                    windowAggregation725=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation725.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE726=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc10525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE726_tree = (CommonTree)adaptor.create(COALESCE726);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE726_tree, root_0);
                    }
                    LPAREN727=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10528); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10531);
                    expression728=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression728.getTree());
                    COMMA729=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10533); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10536);
                    expression730=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression730.getTree());
                    loop286:
                    do {
                        int alt286=2;
                        int LA286_0 = input.LA(1);
                        if ( (LA286_0==COMMA) ) {
                            alt286=1;
                        }
                        switch (alt286) {
                    	case 1 :
                    	    {
                    	    COMMA731=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10539); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc10542);
                    	    expression732=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression732.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop286;
                        }
                    } while (true);
                    RPAREN733=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10546); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS734=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc10552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS734);
                    LPAREN735=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN735);
                    pushFollow(FOLLOW_expression_in_builtinFunc10556);
                    expression736=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression736.getTree());
                    int alt287=2;
                    int LA287_0 = input.LA(1);
                    if ( (LA287_0==COMMA) ) {
                        alt287=1;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            COMMA737=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10559); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA737);
                            pushFollow(FOLLOW_expression_in_builtinFunc10561);
                            expression738=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression738.getTree());
                            }
                            break;
                    }
                    RPAREN739=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN739);
                    int alt289=2;
                    int LA289_0 = input.LA(1);
                    if ( (LA289_0==DOT) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10570); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10572);
                            libFunctionNoClass740=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass740.getTree());
                            loop288:
                            do {
                                int alt288=2;
                                int LA288_0 = input.LA(1);
                                if ( (LA288_0==DOT) ) {
                                    alt288=1;
                                }
                                switch (alt288) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10577); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10579);
                            	    libFunctionNoClass741=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass741.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop288;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL742=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc10626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL742);
                    LPAREN743=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN743);
                    pushFollow(FOLLOW_expression_in_builtinFunc10630);
                    expression744=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression744.getTree());
                    int alt290=2;
                    int LA290_0 = input.LA(1);
                    if ( (LA290_0==COMMA) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            COMMA745=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10633); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA745);
                            pushFollow(FOLLOW_expression_in_builtinFunc10635);
                            expression746=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression746.getTree());
                            }
                            break;
                    }
                    RPAREN747=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN747);
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==DOT) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10644); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10646);
                            libFunctionNoClass748=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass748.getTree());
                            loop291:
                            do {
                                int alt291=2;
                                int LA291_0 = input.LA(1);
                                if ( (LA291_0==DOT) ) {
                                    alt291=1;
                                }
                                switch (alt291) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10651); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10653);
                            	    libFunctionNoClass749=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass749.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop291;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT750=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc10700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT750_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT750);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT750_tree, root_0);
                    }
                    LPAREN751=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10703); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10706);
                    expression752=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression752.getTree());
                    RPAREN753=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10708); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW754=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc10714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW754);
                    LPAREN755=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN755);
                    pushFollow(FOLLOW_expression_in_builtinFunc10718);
                    expression756=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression756.getTree());
                    RPAREN757=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN757);
                    int alt294=2;
                    int LA294_0 = input.LA(1);
                    if ( (LA294_0==DOT) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10725); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10727);
                            libFunctionNoClass758=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass758.getTree());
                            loop293:
                            do {
                                int alt293=2;
                                int LA293_0 = input.LA(1);
                                if ( (LA293_0==DOT) ) {
                                    alt293=1;
                                }
                                switch (alt293) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10732); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10734);
                            	    libFunctionNoClass759=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass759.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop293;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR760=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc10779); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR760_tree = (CommonTree)adaptor.create(PRIOR760);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR760_tree, root_0);
                    }
                    LPAREN761=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10782); if (state.failed) return retval;
                    NUM_INT762=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc10785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT762_tree = (CommonTree)adaptor.create(NUM_INT762);
                    adaptor.addChild(root_0, NUM_INT762_tree);
                    }
                    COMMA763=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10787); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10790);
                    eventProperty764=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty764.getTree());
                    RPAREN765=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10792); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF766=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc10802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF766_tree = (CommonTree)adaptor.create(INSTANCEOF766);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF766_tree, root_0);
                    }
                    LPAREN767=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10805); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10808);
                    expression768=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression768.getTree());
                    COMMA769=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10810); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10813);
                    classIdentifier770=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier770.getTree());
                    loop295:
                    do {
                        int alt295=2;
                        int LA295_0 = input.LA(1);
                        if ( (LA295_0==COMMA) ) {
                            alt295=1;
                        }
                        switch (alt295) {
                    	case 1 :
                    	    {
                    	    COMMA771=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10816); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10819);
                    	    classIdentifier772=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier772.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop295;
                        }
                    } while (true);
                    RPAREN773=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10823); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF774=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc10829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF774_tree = (CommonTree)adaptor.create(TYPEOF774);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF774_tree, root_0);
                    }
                    LPAREN775=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10832); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc10835);
                    expression776=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression776.getTree());
                    RPAREN777=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10837); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST778=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc10843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST778);
                    LPAREN779=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN779);
                    pushFollow(FOLLOW_expression_in_builtinFunc10847);
                    expression780=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression780.getTree());
                    int alt296=2;
                    int LA296_0 = input.LA(1);
                    if ( (LA296_0==COMMA) ) {
                        alt296=1;
                    }
                    else if ( (LA296_0==AS) ) {
                        alt296=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 296, 0, input);
                        throw nvae;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            COMMA781=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc10850); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA781);
                            }
                            break;
                        case 2 :
                            {
                            AS782=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc10854); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS782);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc10857);
                    classIdentifier783=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier783.getTree());
                    RPAREN784=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN784);
                    int alt298=2;
                    int LA298_0 = input.LA(1);
                    if ( (LA298_0==DOT) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10866);
                            libFunctionNoClass785=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass785.getTree());
                            loop297:
                            do {
                                int alt297=2;
                                int LA297_0 = input.LA(1);
                                if ( (LA297_0==DOT) ) {
                                    alt297=1;
                                }
                                switch (alt297) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10871); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10873);
                            	    libFunctionNoClass786=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass786.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop297;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS787=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc10918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS787_tree = (CommonTree)adaptor.create(EXISTS787);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS787_tree, root_0);
                    }
                    LPAREN788=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10921); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc10924);
                    eventProperty789=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty789.getTree());
                    RPAREN790=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10926); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP791=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc10932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP791);
                    int alt299=2;
                    int LA299_0 = input.LA(1);
                    if ( (LA299_0==LPAREN) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            LPAREN792=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10935); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN792);
                            RPAREN793=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN793);
                            }
                            break;
                    }
                    int alt301=2;
                    int LA301_0 = input.LA(1);
                    if ( (LA301_0==DOT) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10944); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10946);
                            libFunctionNoClass794=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass794.getTree());
                            loop300:
                            do {
                                int alt300=2;
                                int LA300_0 = input.LA(1);
                                if ( (LA300_0==DOT) ) {
                                    alt300=1;
                                }
                                switch (alt300) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc10951); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc10953);
                            	    libFunctionNoClass795=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass795.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop300;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ISTREAM796=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_builtinFunc10990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISTREAM796_tree = (CommonTree)adaptor.create(ISTREAM796);
                    root_0 = (CommonTree)adaptor.becomeRoot(ISTREAM796_tree, root_0);
                    }
                    LPAREN797=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc10993); if (state.failed) return retval;
                    RPAREN798=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc10996); if (state.failed) return retval;
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST799=null;
        Token LPAREN800=null;
        Token COMMA802=null;
        Token RPAREN804=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr801 = null;
        EsperEPL2GrammarParser.expression_return expression803 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass805 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass806 = null;
        CommonTree d_tree=null;
        CommonTree FIRST799_tree=null;
        CommonTree LPAREN800_tree=null;
        CommonTree COMMA802_tree=null;
        CommonTree RPAREN804_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST799=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation11009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST799);
            LPAREN800=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation11011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN800);
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==WINDOW||LA304_0==BETWEEN||LA304_0==ESCAPE||(LA304_0>=NOT_EXPR && LA304_0<=EVERY_EXPR)||LA304_0==WHERE||(LA304_0>=SUM && LA304_0<=COUNT)||LA304_0==CASE||LA304_0==OUTER||(LA304_0>=JOIN && LA304_0<=FULL)||(LA304_0>=EVENTS && LA304_0<=LAST)||LA304_0==ISTREAM||(LA304_0>=UNIDIRECTIONAL && LA304_0<=CURRENT_TIMESTAMP)||(LA304_0>=SNAPSHOT && LA304_0<=INDEX)||(LA304_0>=BOOLEAN_TRUE && LA304_0<=VALUE_NULL)||(LA304_0>=DEFINE && LA304_0<=MATCHED)||LA304_0==NEWKW||LA304_0==CONTEXT||LA304_0==NUM_DOUBLE||(LA304_0>=IDENT && LA304_0<=LPAREN)||LA304_0==LCURLY||LA304_0==STAR||LA304_0==QUESTION||(LA304_0>=PLUS && LA304_0<=QUOTED_STRING_LITERAL)||LA304_0==MINUS||LA304_0==NUM_INT||(LA304_0>=TICKED_STRING_LITERAL && LA304_0<=NUM_FLOAT)) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation11014);
                    accessAggExpr801=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr801.getTree());
                    int alt303=2;
                    int LA303_0 = input.LA(1);
                    if ( (LA303_0==COMMA) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            COMMA802=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation11017); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA802);
                            pushFollow(FOLLOW_expression_in_firstAggregation11019);
                            expression803=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression803.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN804=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation11025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN804);
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==DOT) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11032);
                    libFunctionNoClass805=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass805.getTree());
                    loop305:
                    do {
                        int alt305=2;
                        int LA305_0 = input.LA(1);
                        if ( (LA305_0==DOT) ) {
                            alt305=1;
                        }
                        switch (alt305) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation11037); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation11039);
                    	    libFunctionNoClass806=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass806.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop305;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST807=null;
        Token LPAREN808=null;
        Token COMMA810=null;
        Token RPAREN812=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr809 = null;
        EsperEPL2GrammarParser.expression_return expression811 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass813 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass814 = null;
        CommonTree d_tree=null;
        CommonTree LAST807_tree=null;
        CommonTree LPAREN808_tree=null;
        CommonTree COMMA810_tree=null;
        CommonTree RPAREN812_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST807=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation11094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST807);
            LPAREN808=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation11096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN808);
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==WINDOW||LA308_0==BETWEEN||LA308_0==ESCAPE||(LA308_0>=NOT_EXPR && LA308_0<=EVERY_EXPR)||LA308_0==WHERE||(LA308_0>=SUM && LA308_0<=COUNT)||LA308_0==CASE||LA308_0==OUTER||(LA308_0>=JOIN && LA308_0<=FULL)||(LA308_0>=EVENTS && LA308_0<=LAST)||LA308_0==ISTREAM||(LA308_0>=UNIDIRECTIONAL && LA308_0<=CURRENT_TIMESTAMP)||(LA308_0>=SNAPSHOT && LA308_0<=INDEX)||(LA308_0>=BOOLEAN_TRUE && LA308_0<=VALUE_NULL)||(LA308_0>=DEFINE && LA308_0<=MATCHED)||LA308_0==NEWKW||LA308_0==CONTEXT||LA308_0==NUM_DOUBLE||(LA308_0>=IDENT && LA308_0<=LPAREN)||LA308_0==LCURLY||LA308_0==STAR||LA308_0==QUESTION||(LA308_0>=PLUS && LA308_0<=QUOTED_STRING_LITERAL)||LA308_0==MINUS||LA308_0==NUM_INT||(LA308_0>=TICKED_STRING_LITERAL && LA308_0<=NUM_FLOAT)) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation11099);
                    accessAggExpr809=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr809.getTree());
                    int alt307=2;
                    int LA307_0 = input.LA(1);
                    if ( (LA307_0==COMMA) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            COMMA810=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation11102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA810);
                            pushFollow(FOLLOW_expression_in_lastAggregation11104);
                            expression811=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression811.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN812=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation11110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN812);
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==DOT) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11117);
                    libFunctionNoClass813=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass813.getTree());
                    loop309:
                    do {
                        int alt309=2;
                        int LA309_0 = input.LA(1);
                        if ( (LA309_0==DOT) ) {
                            alt309=1;
                        }
                        switch (alt309) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation11122); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation11124);
                    	    libFunctionNoClass814=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass814.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop309;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW815=null;
        Token LPAREN816=null;
        Token RPAREN818=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr817 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass819 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass820 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW815_tree=null;
        CommonTree LPAREN816_tree=null;
        CommonTree RPAREN818_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW815=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation11180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW815);
            LPAREN816=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation11182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN816);
            int alt311=2;
            int LA311_0 = input.LA(1);
            if ( (LA311_0==WINDOW||LA311_0==BETWEEN||LA311_0==ESCAPE||(LA311_0>=NOT_EXPR && LA311_0<=EVERY_EXPR)||LA311_0==WHERE||(LA311_0>=SUM && LA311_0<=COUNT)||LA311_0==CASE||LA311_0==OUTER||(LA311_0>=JOIN && LA311_0<=FULL)||(LA311_0>=EVENTS && LA311_0<=LAST)||LA311_0==ISTREAM||(LA311_0>=UNIDIRECTIONAL && LA311_0<=CURRENT_TIMESTAMP)||(LA311_0>=SNAPSHOT && LA311_0<=INDEX)||(LA311_0>=BOOLEAN_TRUE && LA311_0<=VALUE_NULL)||(LA311_0>=DEFINE && LA311_0<=MATCHED)||LA311_0==NEWKW||LA311_0==CONTEXT||LA311_0==NUM_DOUBLE||(LA311_0>=IDENT && LA311_0<=LPAREN)||LA311_0==LCURLY||LA311_0==STAR||LA311_0==QUESTION||(LA311_0>=PLUS && LA311_0<=QUOTED_STRING_LITERAL)||LA311_0==MINUS||LA311_0==NUM_INT||(LA311_0>=TICKED_STRING_LITERAL && LA311_0<=NUM_FLOAT)) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation11184);
                    accessAggExpr817=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr817.getTree());
                    }
                    break;
            }
            RPAREN818=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation11187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN818);
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==DOT) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11194);
                    libFunctionNoClass819=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass819.getTree());
                    loop312:
                    do {
                        int alt312=2;
                        int LA312_0 = input.LA(1);
                        if ( (LA312_0==DOT) ) {
                            alt312=1;
                        }
                        switch (alt312) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation11199); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation11201);
                    	    libFunctionNoClass820=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass820.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop312;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector821 = null;
        EsperEPL2GrammarParser.expression_return expression822 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt314=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt314=1;
                }
                break;
            case IDENT:
                {
                int LA314_2 = input.LA(2);
                if ( (LA314_2==DOT) ) {
                    int LA314_78 = input.LA(3);
                    if ( (LA314_78==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_78==WINDOW||LA314_78==BETWEEN||LA314_78==ESCAPE||LA314_78==EVERY_EXPR||LA314_78==WHERE||(LA314_78>=SUM && LA314_78<=COUNT)||LA314_78==OUTER||(LA314_78>=JOIN && LA314_78<=FULL)||(LA314_78>=EVENTS && LA314_78<=LAST)||(LA314_78>=UNIDIRECTIONAL && LA314_78<=PREVIOUSTAIL)||LA314_78==PRIOR||(LA314_78>=WEEKDAY && LA314_78<=CAST)||(LA314_78>=SNAPSHOT && LA314_78<=INDEX)||(LA314_78>=DEFINE && LA314_78<=MATCHED)||LA314_78==CONTEXT||LA314_78==IDENT||LA314_78==TICKED_STRING_LITERAL) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA314_2>=IN_SET && LA314_2<=REGEXP)||(LA314_2>=OR_EXPR && LA314_2<=NOT_EXPR)||LA314_2==IS||LA314_2==LBRACK||(LA314_2>=LPAREN && LA314_2<=RPAREN)||LA314_2==COMMA||(LA314_2>=EQUALS && LA314_2<=STAR)||(LA314_2>=LT && LA314_2<=PLUS)||(LA314_2>=BAND && LA314_2<=MOD)||LA314_2==ESCAPECHAR) ) {
                    alt314=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt314=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr11258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr11278);
                    propertyStreamSelector821=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector821.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr11291);
                    expression822=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression822.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA823=null;
        EsperEPL2GrammarParser.expression_return expression824 = null;
        CommonTree COMMA823_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA823=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr11310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA823);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr11312);
            expression824=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression824.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty825 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction826 = null;
        try {
            int alt315=2;
            alt315 = dfa315.predict(input);
            switch (alt315) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction11340);
                    eventProperty825=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty825.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction11345);
                    libFunction826=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction826.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT828=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass827 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass829 = null;
        CommonTree DOT828_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction11357);
            libFunctionWithClass827=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass827.getTree());
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);
                if ( (LA316_0==DOT) ) {
                    alt316=1;
                }
                switch (alt316) {
            	case 1 :
            	    {
            	    DOT828=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction11360); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT828);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction11362);
            	    libFunctionNoClass829=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass829.getTree());
            	    }
            	    break;
            	default :
            	    break loop316;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT831=null;
        Token RPAREN834=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy830 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent832 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs833 = null;
        CommonTree l_tree=null;
        CommonTree DOT831_tree=null;
        CommonTree RPAREN834_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt317=2;
            switch ( input.LA(1) ) {
                case IDENT:
                    {
                    int LA317_1 = input.LA(2);
                    if ( (LA317_1==DOT) ) {
                        alt317=1;
                    }
                    }
                    break;
                case EVENTS:
                    {
                    alt317=1;
                    }
                    break;
                case TICKED_STRING_LITERAL:
                    {
                    int LA317_3 = input.LA(2);
                    if ( (LA317_3==DOT) ) {
                        alt317=1;
                    }
                    }
                    break;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass11395);
                    classIdentifierNonGreedy830=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy830.getTree());
                    DOT831=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass11397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT831);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass11401);
            funcIdent832=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent832.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass11405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==WINDOW||LA318_0==BETWEEN||LA318_0==ESCAPE||(LA318_0>=NOT_EXPR && LA318_0<=EVERY_EXPR)||LA318_0==WHERE||(LA318_0>=SUM && LA318_0<=COUNT)||LA318_0==CASE||LA318_0==OUTER||(LA318_0>=JOIN && LA318_0<=FULL)||(LA318_0>=DISTINCT && LA318_0<=ALL)||(LA318_0>=EVENTS && LA318_0<=LAST)||LA318_0==ISTREAM||(LA318_0>=UNIDIRECTIONAL && LA318_0<=CURRENT_TIMESTAMP)||(LA318_0>=SNAPSHOT && LA318_0<=INDEX)||(LA318_0>=BOOLEAN_TRUE && LA318_0<=VALUE_NULL)||(LA318_0>=DEFINE && LA318_0<=MATCHED)||LA318_0==NEWKW||LA318_0==CONTEXT||LA318_0==NUM_DOUBLE||LA318_0==LBRACK||(LA318_0>=IDENT && LA318_0<=LPAREN)||LA318_0==LCURLY||LA318_0==STAR||LA318_0==QUESTION||(LA318_0>=PLUS && LA318_0<=QUOTED_STRING_LITERAL)||LA318_0==MINUS||LA318_0==NUM_INT||(LA318_0>=TICKED_STRING_LITERAL && LA318_0<=NUM_FLOAT)) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass11408);
                    libFunctionArgs833=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs833.getTree());
                    }
                    break;
            }
            RPAREN834=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass11412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN834);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN837=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent835 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs836 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN837_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass11445);
            funcIdent835=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent835.getTree());
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==LPAREN) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass11450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt319=2;
                    int LA319_0 = input.LA(1);
                    if ( (LA319_0==WINDOW||LA319_0==BETWEEN||LA319_0==ESCAPE||(LA319_0>=NOT_EXPR && LA319_0<=EVERY_EXPR)||LA319_0==WHERE||(LA319_0>=SUM && LA319_0<=COUNT)||LA319_0==CASE||LA319_0==OUTER||(LA319_0>=JOIN && LA319_0<=FULL)||(LA319_0>=DISTINCT && LA319_0<=ALL)||(LA319_0>=EVENTS && LA319_0<=LAST)||LA319_0==ISTREAM||(LA319_0>=UNIDIRECTIONAL && LA319_0<=CURRENT_TIMESTAMP)||(LA319_0>=SNAPSHOT && LA319_0<=INDEX)||(LA319_0>=BOOLEAN_TRUE && LA319_0<=VALUE_NULL)||(LA319_0>=DEFINE && LA319_0<=MATCHED)||LA319_0==NEWKW||LA319_0==CONTEXT||LA319_0==NUM_DOUBLE||LA319_0==LBRACK||(LA319_0>=IDENT && LA319_0<=LPAREN)||LA319_0==LCURLY||LA319_0==STAR||LA319_0==QUESTION||(LA319_0>=PLUS && LA319_0<=QUOTED_STRING_LITERAL)||LA319_0==MINUS||LA319_0==NUM_INT||(LA319_0>=TICKED_STRING_LITERAL && LA319_0<=NUM_FLOAT)) ) {
                        alt319=1;
                    }
                    switch (alt319) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass11453);
                            libFunctionArgs836=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs836.getTree());
                            }
                            break;
                    }
                    RPAREN837=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass11457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN837);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent838 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt321=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt321=1;
                }
                break;
            case MAX:
                {
                alt321=2;
                }
                break;
            case MIN:
                {
                alt321=3;
                }
                break;
            case WHERE:
                {
                alt321=4;
                }
                break;
            case SET:
                {
                alt321=5;
                }
                break;
            case AFTER:
                {
                alt321=6;
                }
                break;
            case BETWEEN:
                {
                alt321=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent11489);
                    escapableIdent838=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent838.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent11496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent11508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent11520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent11532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent11544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent11555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL839=null;
        Token DISTINCT840=null;
        Token COMMA842=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem841 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem843 = null;
        CommonTree ALL839_tree=null;
        CommonTree DISTINCT840_tree=null;
        CommonTree COMMA842_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt322=3;
            int LA322_0 = input.LA(1);
            if ( (LA322_0==ALL) ) {
                alt322=1;
            }
            else if ( (LA322_0==DISTINCT) ) {
                alt322=2;
            }
            switch (alt322) {
                case 1 :
                    {
                    ALL839=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs11572); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT840=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs11577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT840_tree = (CommonTree)adaptor.create(DISTINCT840);
                    adaptor.addChild(root_0, DISTINCT840_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11581);
            libFunctionArgItem841=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem841.getTree());
            loop323:
            do {
                int alt323=2;
                int LA323_0 = input.LA(1);
                if ( (LA323_0==COMMA) ) {
                    alt323=1;
                }
                switch (alt323) {
            	case 1 :
            	    {
            	    COMMA842=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs11584); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs11587);
            	    libFunctionArgItem843=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem843.getTree());
            	    }
            	    break;
            	default :
            	    break loop323;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl844 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime845 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt324=2;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==IDENT) ) {
                int LA324_1 = input.LA(2);
                if ( (LA324_1==GOES) ) {
                    alt324=1;
                }
            }
            else if ( (LA324_0==LPAREN) ) {
                int LA324_2 = input.LA(2);
                if ( (LA324_2==IDENT) ) {
                    int LA324_150 = input.LA(3);
                    if ( (LA324_150==RPAREN) ) {
                        int LA324_236 = input.LA(4);
                        if ( (LA324_236==GOES) ) {
                            alt324=1;
                        }
                    }
                    else if ( (LA324_150==COMMA) ) {
                        alt324=1;
                    }
                }
            }
            switch (alt324) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem11601);
                    expressionLambdaDecl844=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl844.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem11604);
            expressionWithTime845=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime845.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR847=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr846 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr848 = null;
        CommonTree AND_EXPR847_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11615);
            concatenationExpr846=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr846.getTree());
            AND_EXPR847=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList11617); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList11620);
            concatenationExpr848=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr848.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression849 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression11648);
            followedByExpression849=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression849.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression850 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat851 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression11667);
            orExpression850=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression850.getTree());
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);
                if ( (LA325_0==FOLLOWED_BY||LA325_0==FOLLOWMAX_BEGIN) ) {
                    alt325=1;
                }
                switch (alt325) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression11670);
            	    followedByRepeat851=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat851.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop325;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END853=null;
        EsperEPL2GrammarParser.expression_return expression852 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression854 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END853_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt326=2;
            int LA326_0 = input.LA(1);
            if ( (LA326_0==FOLLOWED_BY) ) {
                alt326=1;
            }
            else if ( (LA326_0==FOLLOWMAX_BEGIN) ) {
                alt326=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);
                throw nvae;
            }
            switch (alt326) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat11723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat11730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat11732);
                    expression852=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression852.getTree());
                    FOLLOWMAX_END853=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat11734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END853);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat11738);
            orExpression854=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression854.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression855 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression856 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression11767);
            andExpression855=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression855.getTree());
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);
                if ( (LA327_0==OR_EXPR) ) {
                    alt327=1;
                }
                switch (alt327) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression11772); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression11774);
            	    andExpression856=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression856.getTree());
            	    }
            	    break;
            	default :
            	    break loop327;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression857 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression858 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression11806);
            matchUntilExpression857=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression857.getTree());
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);
                if ( (LA328_0==AND_EXPR) ) {
                    alt328=1;
                }
                switch (alt328) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression11811); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression11813);
            	    matchUntilExpression858=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression858.getTree());
            	    }
            	    break;
            	default :
            	    break loop328;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression859 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression860 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==LBRACK) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression11848);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11852);
            qualifyExpression859=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression859.getTree());
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==UNTIL) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression11857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression11859);
                    qualifyExpression860=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression860.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList861 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix862 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt333=2;
            int LA333_0 = input.LA(1);
            if ( ((LA333_0>=NOT_EXPR && LA333_0<=EVERY_DISTINCT_EXPR)) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    {
                    int alt331=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt331=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt331=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt331=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 331, 0, input);
                        throw nvae;
                    }
                    switch (alt331) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression11924); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression11930); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression11936); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression11938);
                            distinctExpressionList861=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList861.getTree());
                            }
                            break;
                    }
                    int alt332=2;
                    int LA332_0 = input.LA(1);
                    if ( (LA332_0==LBRACK) ) {
                        alt332=1;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression11944);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression11953);
            guardPostFix862=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix862.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN863=null;
        Token COMMA865=null;
        Token RPAREN867=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom864 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom866 = null;
        CommonTree LPAREN863_tree=null;
        CommonTree COMMA865_tree=null;
        CommonTree RPAREN867_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN863=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList12068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN863);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12070);
            distinctExpressionAtom864=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom864.getTree());
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);
                if ( (LA334_0==COMMA) ) {
                    alt334=1;
                }
                switch (alt334) {
            	case 1 :
            	    {
            	    COMMA865=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList12073); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA865);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList12075);
            	    distinctExpressionAtom866=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom866.getTree());
            	    }
            	    break;
            	default :
            	    break loop334;
                }
            } while (true);
            RPAREN867=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList12079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN867);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime868 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom12102);
            expressionWithTime868=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime868.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN871=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression869 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression870 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression872 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression873 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN871_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==EVENTS||LA335_0==IDENT||LA335_0==TICKED_STRING_LITERAL) ) {
                alt335=1;
            }
            else if ( (LA335_0==LPAREN) ) {
                alt335=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 335, 0, input);
                throw nvae;
            }
            switch (alt335) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix12117);
                    atomicExpression869=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression869.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix12123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix12125);
                    patternExpression870=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression870.getTree());
                    RPAREN871=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix12127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN871);
                    }
                    break;
            }
            int alt336=3;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==WHERE) ) {
                alt336=1;
            }
            else if ( (LA336_0==WHILE) ) {
                alt336=2;
            }
            switch (alt336) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix12134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix12136);
                    guardWhereExpression872=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression872.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix12144); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix12146);
                    guardWhileExpression873=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression873.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression874 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression875 = null;
        try {
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==IDENT) ) {
                int LA337_1 = input.LA(2);
                if ( (LA337_1==COLON) ) {
                    alt337=1;
                }
                else if ( (LA337_1==EOF||(LA337_1>=OR_EXPR && LA337_1<=AND_EXPR)||LA337_1==WHERE||LA337_1==UNTIL||LA337_1==WHILE||(LA337_1>=LBRACK && LA337_1<=RBRACK)||(LA337_1>=LPAREN && LA337_1<=RPAREN)||LA337_1==ATCHAR||(LA337_1>=DOT && LA337_1<=EQUALS)||LA337_1==FOLLOWED_BY||LA337_1==FOLLOWMAX_BEGIN) ) {
                    alt337=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 337, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA337_0==EVENTS||LA337_0==TICKED_STRING_LITERAL) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);
                throw nvae;
            }
            switch (alt337) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression12208);
                    observerExpression874=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression874.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression12212);
                    patternFilterExpression875=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression875.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON876=null;
        Token LPAREN877=null;
        Token RPAREN879=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList878 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON876_tree=null;
        CommonTree LPAREN877_tree=null;
        CommonTree RPAREN879_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON876=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression12229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON876);
            int alt338=2;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==IDENT) ) {
                alt338=1;
            }
            else if ( (LA338_0==AT) ) {
                alt338=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);
                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression12234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression12240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN877=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression12243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN877);
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==WINDOW||LA339_0==BETWEEN||LA339_0==ESCAPE||(LA339_0>=NOT_EXPR && LA339_0<=EVERY_EXPR)||LA339_0==WHERE||(LA339_0>=SUM && LA339_0<=COUNT)||LA339_0==CASE||LA339_0==OUTER||(LA339_0>=JOIN && LA339_0<=FULL)||(LA339_0>=EVENTS && LA339_0<=LAST)||LA339_0==ISTREAM||(LA339_0>=UNIDIRECTIONAL && LA339_0<=CURRENT_TIMESTAMP)||(LA339_0>=SNAPSHOT && LA339_0<=INDEX)||(LA339_0>=BOOLEAN_TRUE && LA339_0<=VALUE_NULL)||(LA339_0>=DEFINE && LA339_0<=MATCHED)||LA339_0==NEWKW||LA339_0==CONTEXT||LA339_0==NUM_DOUBLE||LA339_0==LBRACK||(LA339_0>=IDENT && LA339_0<=LPAREN)||LA339_0==LCURLY||LA339_0==STAR||LA339_0==QUESTION||(LA339_0>=PLUS && LA339_0<=QUOTED_STRING_LITERAL)||LA339_0==MINUS||LA339_0==NUM_INT||(LA339_0>=TICKED_STRING_LITERAL && LA339_0<=NUM_FLOAT)) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression12245);
                    expressionWithTimeList878=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList878.getTree());
                    }
                    break;
            }
            RPAREN879=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression12248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN879);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT880=null;
        Token COLON881=null;
        Token IDENT882=null;
        Token LPAREN883=null;
        Token RPAREN885=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList884 = null;
        CommonTree IDENT880_tree=null;
        CommonTree COLON881_tree=null;
        CommonTree IDENT882_tree=null;
        CommonTree LPAREN883_tree=null;
        CommonTree RPAREN885_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT880=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT880_tree = (CommonTree)adaptor.create(IDENT880);
            adaptor.addChild(root_0, IDENT880_tree);
            }
            COLON881=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression12299); if (state.failed) return retval;
            IDENT882=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression12302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT882_tree = (CommonTree)adaptor.create(IDENT882);
            adaptor.addChild(root_0, IDENT882_tree);
            }
            LPAREN883=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression12304); if (state.failed) return retval;
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==WINDOW||LA340_0==BETWEEN||LA340_0==ESCAPE||(LA340_0>=NOT_EXPR && LA340_0<=EVERY_EXPR)||LA340_0==WHERE||(LA340_0>=SUM && LA340_0<=COUNT)||LA340_0==CASE||LA340_0==OUTER||(LA340_0>=JOIN && LA340_0<=FULL)||(LA340_0>=EVENTS && LA340_0<=LAST)||LA340_0==ISTREAM||(LA340_0>=UNIDIRECTIONAL && LA340_0<=CURRENT_TIMESTAMP)||(LA340_0>=SNAPSHOT && LA340_0<=INDEX)||(LA340_0>=BOOLEAN_TRUE && LA340_0<=VALUE_NULL)||(LA340_0>=DEFINE && LA340_0<=MATCHED)||LA340_0==NEWKW||LA340_0==CONTEXT||LA340_0==NUM_DOUBLE||LA340_0==LBRACK||(LA340_0>=IDENT && LA340_0<=LPAREN)||LA340_0==LCURLY||LA340_0==STAR||LA340_0==QUESTION||(LA340_0>=PLUS && LA340_0<=QUOTED_STRING_LITERAL)||LA340_0==MINUS||LA340_0==NUM_INT||(LA340_0>=TICKED_STRING_LITERAL && LA340_0<=NUM_FLOAT)) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression12308);
                    expressionWithTimeList884=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList884.getTree());
                    }
                    break;
            }
            RPAREN885=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression12312); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN886=null;
        Token RPAREN888=null;
        EsperEPL2GrammarParser.expression_return expression887 = null;
        CommonTree LPAREN886_tree=null;
        CommonTree RPAREN888_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN886=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression12325); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression12328);
            expression887=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression887.getTree());
            RPAREN888=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression12330); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK889=null;
        Token RBRACK893=null;
        EsperEPL2GrammarParser.expression_return expression890 = null;
        EsperEPL2GrammarParser.expression_return expression891 = null;
        EsperEPL2GrammarParser.expression_return expression892 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK889_tree=null;
        CommonTree RBRACK893_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK889=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange12351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK889);
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==WINDOW||LA343_0==BETWEEN||LA343_0==ESCAPE||(LA343_0>=NOT_EXPR && LA343_0<=EVERY_EXPR)||LA343_0==WHERE||(LA343_0>=SUM && LA343_0<=COUNT)||LA343_0==CASE||LA343_0==OUTER||(LA343_0>=JOIN && LA343_0<=FULL)||(LA343_0>=EVENTS && LA343_0<=LAST)||LA343_0==ISTREAM||(LA343_0>=UNIDIRECTIONAL && LA343_0<=CURRENT_TIMESTAMP)||(LA343_0>=SNAPSHOT && LA343_0<=INDEX)||(LA343_0>=BOOLEAN_TRUE && LA343_0<=VALUE_NULL)||(LA343_0>=DEFINE && LA343_0<=MATCHED)||LA343_0==NEWKW||LA343_0==CONTEXT||LA343_0==NUM_DOUBLE||(LA343_0>=IDENT && LA343_0<=LPAREN)||LA343_0==LCURLY||LA343_0==QUESTION||(LA343_0>=PLUS && LA343_0<=QUOTED_STRING_LITERAL)||LA343_0==MINUS||LA343_0==NUM_INT||(LA343_0>=TICKED_STRING_LITERAL && LA343_0<=NUM_FLOAT)) ) {
                alt343=1;
            }
            else if ( (LA343_0==COLON) ) {
                alt343=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);
                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange12358);
                    expression890=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression890.getTree());
                    int alt342=2;
                    int LA342_0 = input.LA(1);
                    if ( (LA342_0==COLON) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12363); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt341=2;
                            int LA341_0 = input.LA(1);
                            if ( (LA341_0==WINDOW||LA341_0==BETWEEN||LA341_0==ESCAPE||(LA341_0>=NOT_EXPR && LA341_0<=EVERY_EXPR)||LA341_0==WHERE||(LA341_0>=SUM && LA341_0<=COUNT)||LA341_0==CASE||LA341_0==OUTER||(LA341_0>=JOIN && LA341_0<=FULL)||(LA341_0>=EVENTS && LA341_0<=LAST)||LA341_0==ISTREAM||(LA341_0>=UNIDIRECTIONAL && LA341_0<=CURRENT_TIMESTAMP)||(LA341_0>=SNAPSHOT && LA341_0<=INDEX)||(LA341_0>=BOOLEAN_TRUE && LA341_0<=VALUE_NULL)||(LA341_0>=DEFINE && LA341_0<=MATCHED)||LA341_0==NEWKW||LA341_0==CONTEXT||LA341_0==NUM_DOUBLE||(LA341_0>=IDENT && LA341_0<=LPAREN)||LA341_0==LCURLY||LA341_0==QUESTION||(LA341_0>=PLUS && LA341_0<=QUOTED_STRING_LITERAL)||LA341_0==MINUS||LA341_0==NUM_INT||(LA341_0>=TICKED_STRING_LITERAL && LA341_0<=NUM_FLOAT)) ) {
                                alt341=1;
                            }
                            switch (alt341) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange12366);
                                    expression891=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression891.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange12386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange12388);
                    expression892=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression892.getTree());
                    }
                    break;
            }
            RBRACK893=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange12399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK893);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS894=null;
        Token LPAREN896=null;
        Token RPAREN898=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier895 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList897 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression899 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS894_tree=null;
        CommonTree LPAREN896_tree=null;
        CommonTree RPAREN898_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt344=2;
            int LA344_0 = input.LA(1);
            if ( (LA344_0==IDENT) ) {
                int LA344_1 = input.LA(2);
                if ( (LA344_1==EQUALS) ) {
                    alt344=1;
                }
            }
            switch (alt344) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression12486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS894=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression12488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS894);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression12497);
            classIdentifier895=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier895.getTree());
            int alt346=2;
            int LA346_0 = input.LA(1);
            if ( (LA346_0==LPAREN) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    {
                    LPAREN896=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression12508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN896);
                    int alt345=2;
                    int LA345_0 = input.LA(1);
                    if ( (LA345_0==WINDOW||LA345_0==BETWEEN||LA345_0==ESCAPE||(LA345_0>=NOT_EXPR && LA345_0<=EVERY_EXPR)||LA345_0==WHERE||(LA345_0>=SUM && LA345_0<=COUNT)||LA345_0==CASE||LA345_0==OUTER||(LA345_0>=JOIN && LA345_0<=FULL)||(LA345_0>=EVENTS && LA345_0<=LAST)||LA345_0==ISTREAM||(LA345_0>=UNIDIRECTIONAL && LA345_0<=CURRENT_TIMESTAMP)||(LA345_0>=SNAPSHOT && LA345_0<=INDEX)||(LA345_0>=BOOLEAN_TRUE && LA345_0<=VALUE_NULL)||(LA345_0>=DEFINE && LA345_0<=MATCHED)||LA345_0==NEWKW||LA345_0==CONTEXT||LA345_0==NUM_DOUBLE||(LA345_0>=IDENT && LA345_0<=LPAREN)||LA345_0==LCURLY||LA345_0==QUESTION||(LA345_0>=PLUS && LA345_0<=QUOTED_STRING_LITERAL)||LA345_0==MINUS||LA345_0==NUM_INT||(LA345_0>=TICKED_STRING_LITERAL && LA345_0<=NUM_FLOAT)) ) {
                        alt345=1;
                    }
                    switch (alt345) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression12510);
                            expressionList897=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList897.getTree());
                            }
                            break;
                    }
                    RPAREN898=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression12513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN898);
                    }
                    break;
            }
            int alt347=2;
            int LA347_0 = input.LA(1);
            if ( (LA347_0==LBRACK) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression12525);
                    propertyExpression899=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression899.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic900 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic901 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12570);
            propertyExpressionAtomic900=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic900.getTree());
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);
                if ( (LA348_0==LBRACK) ) {
                    alt348=1;
                }
                switch (alt348) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression12573);
            	    propertyExpressionAtomic901=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic901.getTree());
            	    }
            	    break;
            	default :
            	    break loop348;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK902=null;
        Token AS906=null;
        Token IDENT907=null;
        Token WHERE908=null;
        Token RBRACK910=null;
        EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect903 = null;
        EsperEPL2GrammarParser.expression_return expression904 = null;
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation905 = null;
        EsperEPL2GrammarParser.expression_return expression909 = null;
        CommonTree LBRACK902_tree=null;
        CommonTree AS906_tree=null;
        CommonTree IDENT907_tree=null;
        CommonTree WHERE908_tree=null;
        CommonTree RBRACK910_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyExpressionAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAnnotation");
        RewriteRuleSubtreeStream stream_propertyExpressionSelect=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionSelect");
        try {
            {
            LBRACK902=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic12603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK902);
            int alt349=2;
            int LA349_0 = input.LA(1);
            if ( (LA349_0==SELECT) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionSelect_in_propertyExpressionAtomic12605);
                    propertyExpressionSelect903=propertyExpressionSelect();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionSelect.add(propertyExpressionSelect903.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12608);
            expression904=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression904.getTree());
            int alt350=2;
            int LA350_0 = input.LA(1);
            if ( (LA350_0==ATCHAR) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpressionAnnotation_in_propertyExpressionAtomic12610);
                    propertyExpressionAnnotation905=propertyExpressionAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpressionAnnotation.add(propertyExpressionAnnotation905.getTree());
                    }
                    break;
            }
            int alt351=2;
            int LA351_0 = input.LA(1);
            if ( (LA351_0==AS) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    {
                    AS906=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic12614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS906);
                    IDENT907=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic12616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT907);
                    }
                    break;
            }
            int alt352=2;
            int LA352_0 = input.LA(1);
            if ( (LA352_0==WHERE) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    {
                    WHERE908=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic12621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE908);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic12623);
                    expression909=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression909.getTree());
                    }
                    break;
            }
            RBRACK910=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic12627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK910);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertyExpressionSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionSelect.nextTree());
                }
                stream_propertyExpressionSelect.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_propertyExpressionAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAnnotation.nextTree());
                }
                stream_propertyExpressionAnnotation.reset();
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionSelect_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionSelect_return propertyExpressionSelect() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionSelect_return retval = new EsperEPL2GrammarParser.propertyExpressionSelect_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT911=null;
        Token FROM913=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList912 = null;
        CommonTree SELECT911_tree=null;
        CommonTree FROM913_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        try {
            {
            SELECT911=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionSelect12685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT911);
            pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionSelect12687);
            propertySelectionList912=propertySelectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList912.getTree());
            FROM913=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionSelect12689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM913);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAnnotation_return propertyExpressionAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAnnotation_return retval = new EsperEPL2GrammarParser.propertyExpressionAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token v=null;
        Token ATCHAR914=null;
        Token LPAREN915=null;
        Token RPAREN916=null;
        CommonTree n_tree=null;
        CommonTree v_tree=null;
        CommonTree ATCHAR914_tree=null;
        CommonTree LPAREN915_tree=null;
        CommonTree RPAREN916_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        try {
            {
            ATCHAR914=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_propertyExpressionAnnotation12712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR914);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            {
            LPAREN915=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_propertyExpressionAnnotation12719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN915);
            v=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAnnotation12723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(v);
            RPAREN916=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_propertyExpressionAnnotation12725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN916);
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_v.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA918=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement917 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement919 = null;
        CommonTree COMMA918_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12755);
            propertySelectionListElement917=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement917.getTree());
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);
                if ( (LA353_0==COMMA) ) {
                    alt353=1;
                }
                switch (alt353) {
            	case 1 :
            	    {
            	    COMMA918=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList12758); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList12761);
            	    propertySelectionListElement919=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement919.getTree());
            	    }
            	    break;
            	default :
            	    break loop353;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS922=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector920 = null;
        EsperEPL2GrammarParser.expression_return expression921 = null;
        CommonTree s_tree=null;
        CommonTree AS922_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt355=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt355=1;
                }
                break;
            case IDENT:
                {
                int LA355_2 = input.LA(2);
                if ( (LA355_2==DOT) ) {
                    int LA355_78 = input.LA(3);
                    if ( (LA355_78==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt355=2;
                    }
                    else if ( (LA355_78==WINDOW||LA355_78==BETWEEN||LA355_78==ESCAPE||LA355_78==EVERY_EXPR||LA355_78==WHERE||(LA355_78>=SUM && LA355_78<=COUNT)||LA355_78==OUTER||(LA355_78>=JOIN && LA355_78<=FULL)||(LA355_78>=EVENTS && LA355_78<=LAST)||(LA355_78>=UNIDIRECTIONAL && LA355_78<=PREVIOUSTAIL)||LA355_78==PRIOR||(LA355_78>=WEEKDAY && LA355_78<=CAST)||(LA355_78>=SNAPSHOT && LA355_78<=INDEX)||(LA355_78>=DEFINE && LA355_78<=MATCHED)||LA355_78==CONTEXT||LA355_78==IDENT||LA355_78==TICKED_STRING_LITERAL) ) {
                        alt355=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 355, 78, input);
                        throw nvae;
                    }
                }
                else if ( ((LA355_2>=IN_SET && LA355_2<=REGEXP)||(LA355_2>=OR_EXPR && LA355_2<=NOT_EXPR)||LA355_2==AS||LA355_2==FROM||LA355_2==IS||LA355_2==LBRACK||LA355_2==LPAREN||LA355_2==COMMA||(LA355_2>=EQUALS && LA355_2<=STAR)||(LA355_2>=LT && LA355_2<=PLUS)||(LA355_2>=BAND && LA355_2<=MOD)||LA355_2==ESCAPECHAR) ) {
                    alt355=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 355, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case ISTREAM:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case FOR:
            case WHILE:
            case USING:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LPAREN:
            case LCURLY:
            case QUESTION:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt355=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);
                throw nvae;
            }
            switch (alt355) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement12787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement12803);
                    propertyStreamSelector920=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector920.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement12808);
                    expression921=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression921.getTree());
                    int alt354=2;
                    int LA354_0 = input.LA(1);
                    if ( (LA354_0==AS) ) {
                        alt354=1;
                    }
                    switch (alt354) {
                        case 1 :
                            {
                            AS922=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement12811); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS922);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement12815);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT923=null;
        Token STAR924=null;
        Token AS925=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT923_tree=null;
        CommonTree STAR924_tree=null;
        CommonTree AS925_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT923=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector12861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT923);
            STAR924=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector12863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR924);
            int alt356=2;
            int LA356_0 = input.LA(1);
            if ( (LA356_0==AS) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    {
                    AS925=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector12866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS925);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector12870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS926=null;
        Token LPAREN928=null;
        Token RPAREN930=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier927 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList929 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression931 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation932 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS926_tree=null;
        CommonTree LPAREN928_tree=null;
        CommonTree RPAREN930_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt357=2;
            int LA357_0 = input.LA(1);
            if ( (LA357_0==IDENT) ) {
                int LA357_1 = input.LA(2);
                if ( (LA357_1==EQUALS) ) {
                    alt357=1;
                }
            }
            switch (alt357) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression12917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS926=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression12919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS926);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression12928);
            classIdentifier927=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier927.getTree());
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==LPAREN) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    {
                    LPAREN928=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression12939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN928);
                    int alt358=2;
                    int LA358_0 = input.LA(1);
                    if ( (LA358_0==WINDOW||LA358_0==BETWEEN||LA358_0==ESCAPE||(LA358_0>=NOT_EXPR && LA358_0<=EVERY_EXPR)||LA358_0==WHERE||(LA358_0>=SUM && LA358_0<=COUNT)||LA358_0==CASE||LA358_0==OUTER||(LA358_0>=JOIN && LA358_0<=FULL)||(LA358_0>=EVENTS && LA358_0<=LAST)||LA358_0==ISTREAM||(LA358_0>=UNIDIRECTIONAL && LA358_0<=CURRENT_TIMESTAMP)||(LA358_0>=SNAPSHOT && LA358_0<=INDEX)||(LA358_0>=BOOLEAN_TRUE && LA358_0<=VALUE_NULL)||(LA358_0>=DEFINE && LA358_0<=MATCHED)||LA358_0==NEWKW||LA358_0==CONTEXT||LA358_0==NUM_DOUBLE||(LA358_0>=IDENT && LA358_0<=LPAREN)||LA358_0==LCURLY||LA358_0==QUESTION||(LA358_0>=PLUS && LA358_0<=QUOTED_STRING_LITERAL)||LA358_0==MINUS||LA358_0==NUM_INT||(LA358_0>=TICKED_STRING_LITERAL && LA358_0<=NUM_FLOAT)) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression12941);
                            expressionList929=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList929.getTree());
                            }
                            break;
                    }
                    RPAREN930=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression12944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN930);
                    }
                    break;
            }
            int alt360=2;
            int LA360_0 = input.LA(1);
            if ( (LA360_0==LBRACK) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression12956);
                    propertyExpression931=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression931.getTree());
                    }
                    break;
            }
            int alt361=2;
            int LA361_0 = input.LA(1);
            if ( (LA361_0==ATCHAR) ) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression12967);
                    patternFilterAnnotation932=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation932.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR933=null;
        Token LPAREN934=null;
        Token RPAREN936=null;
        EsperEPL2GrammarParser.number_return number935 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR933_tree=null;
        CommonTree LPAREN934_tree=null;
        CommonTree RPAREN936_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR933=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation13019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR933);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation13023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt362=2;
            int LA362_0 = input.LA(1);
            if ( (LA362_0==LPAREN) ) {
                alt362=1;
            }
            switch (alt362) {
                case 1 :
                    {
                    LPAREN934=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation13026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN934);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation13028);
                    number935=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number935.getTree());
                    RPAREN936=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation13030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN936);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT937=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT937_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier13066);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);
                if ( (LA363_0==DOT) ) {
                    int LA363_28 = input.LA(2);
                    if ( (LA363_28==IDENT) ) {
                        int LA363_54 = input.LA(3);
                        if ( (LA363_54==EOF||LA363_54==CREATE||(LA363_54>=OR_EXPR && LA363_54<=AS)||LA363_54==SELECT||LA363_54==END||(LA363_54>=INNER && LA363_54<=ON)||(LA363_54>=GROUP && LA363_54<=HAVING)||(LA363_54>=OUTPUT && LA363_54<=EVENTS)||LA363_54==INSERT||LA363_54==ORDER||(LA363_54>=UNIDIRECTIONAL && LA363_54<=RETAININTERSECTION)||LA363_54==DELETE||LA363_54==SET||LA363_54==UNTIL||LA363_54==ROW_LIMIT_EXPR||(LA363_54>=UPDATE && LA363_54<=MATCH_RECOGNIZE)||(LA363_54>=FOR && LA363_54<=WHILE)||LA363_54==MERGE||LA363_54==EXPRESSIONDECL||LA363_54==CONTEXT||LA363_54==TERMINATED||(LA363_54>=LBRACK && LA363_54<=RPAREN)||(LA363_54>=LCURLY && LA363_54<=RCURLY)||(LA363_54>=ATCHAR && LA363_54<=DOT)||(LA363_54>=FOLLOWED_BY && LA363_54<=GT)||LA363_54==FOLLOWMAX_BEGIN||LA363_54==TICKED_STRING_LITERAL) ) {
                            alt363=1;
                        }
                    }
                    else if ( (LA363_28==EVENTS||LA363_28==TICKED_STRING_LITERAL) ) {
                        alt363=1;
                    }
                }
                switch (alt363) {
            	case 1 :
            	    {
            	    DOT937=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier13085); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT937);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier13089);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop363;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT938=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT938_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13134);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==EVENTS||LA364_0==IDENT||LA364_0==TICKED_STRING_LITERAL) ) {
                    alt364=2;
                }
                else if ( (LA364_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA364_5 = input.LA(3);
                        if ( (LA364_5==EVENTS||LA364_5==IDENT||LA364_5==DOT||LA364_5==TICKED_STRING_LITERAL) ) {
                            alt364=1;
                        }
                        else if ( (LA364_5==LPAREN) ) {
                            alt364=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA364_6 = input.LA(3);
                        if ( (LA364_6==LPAREN) ) {
                            alt364=2;
                        }
                        else if ( (LA364_6==EVENTS||LA364_6==IDENT||LA364_6==DOT||LA364_6==TICKED_STRING_LITERAL) ) {
                            alt364=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt364=2;
                        }
                        break;
                    case EVENTS:
                        {
                        alt364=1;
                        }
                        break;
                    }
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    DOT938=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy13169); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT938);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy13173);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA940=null;
        EsperEPL2GrammarParser.expression_return expression939 = null;
        EsperEPL2GrammarParser.expression_return expression941 = null;
        CommonTree COMMA940_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList13215);
            expression939=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression939.getTree());
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==COMMA) ) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    COMMA940=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13218); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList13221);
            	    expression941=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression941.getTree());
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA943=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast942 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast944 = null;
        CommonTree COMMA943_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13249);
            expressionWithTimeInclLast942=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast942.getTree());
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==COMMA) ) {
                    alt366=1;
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    COMMA943=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList13252); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList13255);
            	    expressionWithTimeInclLast944=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast944.getTree());
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand945 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod946 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable947 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand948 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand949 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator950 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator951 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList952 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar953 = null;
        try {
            int alt367=9;
            int LA367_0 = input.LA(1);
            if ( (LA367_0==LW) ) {
                int LA367_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt367=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt367=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==MINUS) ) {
                int LA367_2 = input.LA(2);
                if ( (LA367_2==NUM_INT) ) {
                    int LA367_116 = input.LA(3);
                    if ( (LA367_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_SECONDS) ) {
                        int LA367_487 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 487, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_116==TIMEPERIOD_SECOND) ) {
                        int LA367_488 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 488, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_116==TIMEPERIOD_SEC) ) {
                        int LA367_489 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 489, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_2==NUM_LONG) ) {
                    int LA367_117 = input.LA(3);
                    if ( (LA367_117==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_SECONDS) ) {
                        int LA367_537 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 537, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_117==TIMEPERIOD_SECOND) ) {
                        int LA367_538 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 538, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_117==TIMEPERIOD_SEC) ) {
                        int LA367_539 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 539, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_117==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_117==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_117==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 117, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_2==NUM_FLOAT) ) {
                    int LA367_118 = input.LA(3);
                    if ( (LA367_118==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==TIMEPERIOD_SECONDS) ) {
                        int LA367_606 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 606, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_118==TIMEPERIOD_SECOND) ) {
                        int LA367_607 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 607, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_118==TIMEPERIOD_SEC) ) {
                        int LA367_608 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 608, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_118==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_118==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 118, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_2==NUM_DOUBLE) ) {
                    int LA367_119 = input.LA(3);
                    if ( (LA367_119==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==TIMEPERIOD_SECONDS) ) {
                        int LA367_653 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 653, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_119==TIMEPERIOD_SECOND) ) {
                        int LA367_654 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 654, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_119==TIMEPERIOD_SEC) ) {
                        int LA367_655 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 655, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_119==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_119==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 119, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==FOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_2==USING) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA367_170 = input.LA(3);
                    if ( (LA367_170==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_SECONDS) ) {
                        int LA367_675 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 675, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_170==TIMEPERIOD_SECOND) ) {
                        int LA367_676 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 676, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_170==TIMEPERIOD_SEC) ) {
                        int LA367_677 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 677, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_170==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_170==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 170, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA367_171 = input.LA(3);
                    if ( (LA367_171==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_SECONDS) ) {
                        int LA367_725 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 725, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_171==TIMEPERIOD_SECOND) ) {
                        int LA367_726 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 726, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_171==TIMEPERIOD_SEC) ) {
                        int LA367_727 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 727, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_171==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_171==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 171, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA367_172 = input.LA(3);
                    if ( (LA367_172==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_SECONDS) ) {
                        int LA367_773 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 773, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_172==TIMEPERIOD_SECOND) ) {
                        int LA367_774 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 774, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_172==TIMEPERIOD_SEC) ) {
                        int LA367_775 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 775, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_172==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_172==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 172, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA367_173 = input.LA(3);
                    if ( (LA367_173==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_SECONDS) ) {
                        int LA367_820 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 820, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_173==TIMEPERIOD_SECOND) ) {
                        int LA367_821 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 821, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_173==TIMEPERIOD_SEC) ) {
                        int LA367_822 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt367=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt367=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 367, 822, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA367_173==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt367=3;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else if ( (LA367_173==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt367=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 173, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==NUM_INT) ) {
                int LA367_4 = input.LA(2);
                if ( (LA367_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_4==TIMEPERIOD_SECONDS) ) {
                    int LA367_180 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 180, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_4==TIMEPERIOD_SECOND) ) {
                    int LA367_181 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 181, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_4==TIMEPERIOD_SEC) ) {
                    int LA367_182 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 182, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==NUM_LONG) ) {
                int LA367_5 = input.LA(2);
                if ( (LA367_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_5==TIMEPERIOD_SECONDS) ) {
                    int LA367_234 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 234, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_5==TIMEPERIOD_SECOND) ) {
                    int LA367_235 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 235, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_5==TIMEPERIOD_SEC) ) {
                    int LA367_236 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 236, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==NUM_FLOAT) ) {
                int LA367_6 = input.LA(2);
                if ( (LA367_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==TIMEPERIOD_SECONDS) ) {
                    int LA367_306 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 306, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_6==TIMEPERIOD_SECOND) ) {
                    int LA367_307 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 307, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_6==TIMEPERIOD_SEC) ) {
                    int LA367_308 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 308, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==NUM_DOUBLE) ) {
                int LA367_7 = input.LA(2);
                if ( (LA367_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==TIMEPERIOD_SECONDS) ) {
                    int LA367_356 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 356, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_7==TIMEPERIOD_SECOND) ) {
                    int LA367_357 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 357, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_7==TIMEPERIOD_SEC) ) {
                    int LA367_358 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 358, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==IDENT) ) {
                int LA367_8 = input.LA(2);
                if ( (LA367_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==TIMEPERIOD_SECONDS) ) {
                    int LA367_406 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 406, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_8==TIMEPERIOD_SECOND) ) {
                    int LA367_407 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 407, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_8==TIMEPERIOD_SEC) ) {
                    int LA367_408 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 408, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==QUESTION) ) {
                int LA367_9 = input.LA(2);
                if ( (LA367_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==TIMEPERIOD_SECONDS) ) {
                    int LA367_450 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 450, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_9==TIMEPERIOD_SECOND) ) {
                    int LA367_451 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 451, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_9==TIMEPERIOD_SEC) ) {
                    int LA367_452 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt367=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt367=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 367, 452, input);
                        throw nvae;
                    }
                }
                else if ( (LA367_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt367=3;
                }
                else if ( (LA367_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt367=4;
                }
                else if ( (LA367_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt367=6;
                }
                else if ( (LA367_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt367=7;
                }
                else if ( (LA367_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else if ( (LA367_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt367=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==FOR) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==USING) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==ISTREAM) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt367=3;
            }
            else if ( (LA367_0==STAR) ) {
                int LA367_77 = input.LA(2);
                if ( (LA367_77==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt367=5;
                }
                else if ( (LA367_77==RPAREN||LA367_77==COMMA) ) {
                    alt367=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 367, 77, input);
                    throw nvae;
                }
            }
            else if ( (LA367_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt367=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime13284);
                    lastWeekdayOperand945=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand945.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime13295);
                    timePeriod946=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod946.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime13306);
                    expressionQualifyable947=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable947.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime13317);
                    rangeOperand948=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand948.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime13329);
                    frequencyOperand949=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand949.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime13340);
                    lastOperator950=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator950.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime13352);
                    weekDayOperator951=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator951.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime13364);
                    numericParameterList952=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList952.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime13369);
                    numberSetStar953=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar953.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand954 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime955 = null;
        try {
            int alt368=2;
            int LA368_0 = input.LA(1);
            if ( (LA368_0==LAST) ) {
                int LA368_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt368=1;
                }
                else if ( (true) ) {
                    alt368=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 368, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA368_0==WINDOW||LA368_0==BETWEEN||LA368_0==ESCAPE||(LA368_0>=NOT_EXPR && LA368_0<=EVERY_EXPR)||LA368_0==WHERE||(LA368_0>=SUM && LA368_0<=COUNT)||LA368_0==CASE||LA368_0==OUTER||(LA368_0>=JOIN && LA368_0<=FULL)||(LA368_0>=EVENTS && LA368_0<=FIRST)||LA368_0==ISTREAM||(LA368_0>=UNIDIRECTIONAL && LA368_0<=CURRENT_TIMESTAMP)||(LA368_0>=SNAPSHOT && LA368_0<=INDEX)||(LA368_0>=BOOLEAN_TRUE && LA368_0<=VALUE_NULL)||(LA368_0>=DEFINE && LA368_0<=MATCHED)||LA368_0==NEWKW||LA368_0==CONTEXT||LA368_0==NUM_DOUBLE||LA368_0==LBRACK||(LA368_0>=IDENT && LA368_0<=LPAREN)||LA368_0==LCURLY||LA368_0==STAR||LA368_0==QUESTION||(LA368_0>=PLUS && LA368_0<=QUOTED_STRING_LITERAL)||LA368_0==MINUS||LA368_0==NUM_INT||(LA368_0>=TICKED_STRING_LITERAL && LA368_0<=NUM_FLOAT)) ) {
                alt368=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 368, 0, input);
                throw nvae;
            }
            switch (alt368) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast13389);
                    lastOperand954=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand954.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast13394);
                    expressionWithTime955=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime955.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression956 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable13405);
            expression956=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression956.getTree());
            int alt369=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt369=1;
                    }
                    break;
                case DESC:
                    {
                    alt369=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt369=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt369=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt369=5;
                    }
                    break;
            }
            switch (alt369) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable13410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable13414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable13418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable13422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable13426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR957=null;
        CommonTree STAR957_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR957=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar13483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR957);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW958=null;
        CommonTree LW958_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW958=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand13503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW958_tree = (CommonTree)adaptor.create(LW958);
            root_0 = (CommonTree)adaptor.becomeRoot(LW958_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST959=null;
        CommonTree LAST959_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST959=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand13516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST959_tree = (CommonTree)adaptor.create(LAST959);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST959_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR960=null;
        Token DIV961=null;
        EsperEPL2GrammarParser.number_return number962 = null;
        EsperEPL2GrammarParser.substitution_return substitution963 = null;
        CommonTree i_tree=null;
        CommonTree STAR960_tree=null;
        CommonTree DIV961_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR960=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand13528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR960);
            DIV961=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand13530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV961);
            int alt370=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt370=1;
                }
                break;
            case IDENT:
                {
                alt370=2;
                }
                break;
            case QUESTION:
                {
                alt370=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 0, input);
                throw nvae;
            }
            switch (alt370) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand13533);
                    number962=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number962.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand13537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand13539);
                    substitution963=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution963.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON966=null;
        EsperEPL2GrammarParser.number_return number964 = null;
        EsperEPL2GrammarParser.substitution_return substitution965 = null;
        EsperEPL2GrammarParser.number_return number967 = null;
        EsperEPL2GrammarParser.substitution_return substitution968 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON966_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt371=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt371=1;
                }
                break;
            case IDENT:
                {
                alt371=2;
                }
                break;
            case QUESTION:
                {
                alt371=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 371, 0, input);
                throw nvae;
            }
            switch (alt371) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13588);
                    number964=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number964.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13594);
                    substitution965=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution965.getTree());
                    }
                    break;
            }
            COLON966=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand13597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON966);
            int alt372=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt372=1;
                }
                break;
            case IDENT:
                {
                alt372=2;
                }
                break;
            case QUESTION:
                {
                alt372=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);
                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand13600);
                    number967=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number967.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand13604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand13606);
                    substitution968=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution968.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST971=null;
        EsperEPL2GrammarParser.number_return number969 = null;
        EsperEPL2GrammarParser.substitution_return substitution970 = null;
        CommonTree i_tree=null;
        CommonTree LAST971_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt373=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt373=1;
                }
                break;
            case IDENT:
                {
                alt373=2;
                }
                break;
            case QUESTION:
                {
                alt373=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);
                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator13720);
                    number969=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number969.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator13724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator13726);
                    substitution970=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution970.getTree());
                    }
                    break;
            }
            LAST971=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator13729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST971);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY974=null;
        EsperEPL2GrammarParser.number_return number972 = null;
        EsperEPL2GrammarParser.substitution_return substitution973 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY974_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt374=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt374=1;
                }
                break;
            case IDENT:
                {
                alt374=2;
                }
                break;
            case QUESTION:
                {
                alt374=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);
                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator13777);
                    number972=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number972.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator13781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator13783);
                    substitution973=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution973.getTree());
                    }
                    break;
            }
            WEEKDAY974=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator13786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY974);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK975=null;
        Token COMMA977=null;
        Token RBRACK979=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter976 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter978 = null;
        CommonTree LBRACK975_tree=null;
        CommonTree COMMA977_tree=null;
        CommonTree RBRACK979_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK975=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList13833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK975);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList13835);
            numericListParameter976=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter976.getTree());
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);
                if ( (LA375_0==COMMA) ) {
                    alt375=1;
                }
                switch (alt375) {
            	case 1 :
            	    {
            	    COMMA977=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList13838); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA977);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList13840);
            	    numericListParameter978=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter978.getTree());
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            RBRACK979=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList13844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK979);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand980 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand981 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant982 = null;
        try {
            int alt376=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA376_1 = input.LA(2);
                if ( (LA376_1==COLON) ) {
                    alt376=1;
                }
                else if ( (LA376_1==RBRACK||LA376_1==COMMA) ) {
                    alt376=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA376_2 = input.LA(2);
                if ( (LA376_2==COLON) ) {
                    alt376=1;
                }
                else if ( (LA376_2==RBRACK||LA376_2==COMMA) ) {
                    alt376=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA376_3 = input.LA(2);
                if ( (LA376_3==RBRACK||LA376_3==COMMA) ) {
                    alt376=3;
                }
                else if ( (LA376_3==COLON) ) {
                    alt376=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA376_4 = input.LA(2);
                if ( (LA376_4==RBRACK||LA376_4==COMMA) ) {
                    alt376=3;
                }
                else if ( (LA376_4==COLON) ) {
                    alt376=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt376=1;
                }
                break;
            case STAR:
                {
                alt376=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt376=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);
                throw nvae;
            }
            switch (alt376) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter13866);
                    rangeOperand980=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand980.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter13872);
                    frequencyOperand981=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand981.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter13877);
                    numberconstant982=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant982.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT984=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic983 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic985 = null;
        CommonTree DOT984_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13893);
            eventPropertyAtomic983=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic983.getTree());
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==DOT) ) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    DOT984=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty13896); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT984);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty13898);
            	    eventPropertyAtomic985=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic985.getTree());
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK987=null;
        Token RPAREN988=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent986 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK987_tree=null;
        CommonTree RPAREN988_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic13924);
            eventPropertyIdent986=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent986.getTree());
            int alt381=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt381=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt381=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt381=3;
                    }
                    break;
            }
            switch (alt381) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic13933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic13937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK987=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic13939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK987);
                    int alt378=2;
                    int LA378_0 = input.LA(1);
                    if ( (LA378_0==QUESTION) ) {
                        alt378=1;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13944); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic13958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt379=2;
                    int LA379_0 = input.LA(1);
                    if ( (LA379_0==STRING_LITERAL) ) {
                        alt379=1;
                    }
                    else if ( (LA379_0==QUOTED_STRING_LITERAL) ) {
                        alt379=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 379, 0, input);
                        throw nvae;
                    }
                    switch (alt379) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic13963); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic13969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN988=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic13972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN988);
                    int alt380=2;
                    int LA380_0 = input.LA(1);
                    if ( (LA380_0==QUESTION) ) {
                        alt380=1;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13977); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic13991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR989=null;
        Token DOT990=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR989_tree=null;
        CommonTree DOT990_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14114);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);
                if ( (LA383_0==ESCAPECHAR) ) {
                    alt383=1;
                }
                switch (alt383) {
            	case 1 :
            	    {
            	    ESCAPECHAR989=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent14126); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR989);
            	    DOT990=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent14128); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT990);
            	    int alt382=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case USING:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt382=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA382_5 = input.LA(2);
            	            if ( (LA382_5==EOF||(LA382_5>=IN_SET && LA382_5<=NOT_EXPR)||(LA382_5>=WHERE && LA382_5<=AS)||(LA382_5>=ELSE && LA382_5<=FROM)||(LA382_5>=INNER && LA382_5<=FULL)||LA382_5==IS||(LA382_5>=GROUP && LA382_5<=HAVING)||LA382_5==ALL||LA382_5==OUTPUT||LA382_5==INSERT||(LA382_5>=ORDER && LA382_5<=DESC)||LA382_5==PATTERN||(LA382_5>=TIMEPERIOD_SEC && LA382_5<=TIMEPERIOD_SECONDS)||LA382_5==ROW_LIMIT_EXPR||(LA382_5>=MATCH_RECOGNIZE && LA382_5<=MEASURES)||(LA382_5>=AFTER && LA382_5<=FOR)||(LA382_5>=LBRACK && LA382_5<=RBRACK)||(LA382_5>=LPAREN && LA382_5<=COLON)||LA382_5==RCURLY||(LA382_5>=ATCHAR && LA382_5<=STAR)||(LA382_5>=LT && LA382_5<=PLUS)||(LA382_5>=BAND && LA382_5<=MOD)||(LA382_5>=FOLLOWMAX_END && LA382_5<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA382_25 = input.LA(2);
            	            if ( (LA382_25==LPAREN) ) {
            	                int LA382_180 = input.LA(3);
            	                if ( ((LA382_180>=STRING_LITERAL && LA382_180<=QUOTED_STRING_LITERAL)) ) {
            	                    alt382=1;
            	                }
            	            }
            	            else if ( (LA382_25==EOF||(LA382_25>=IN_SET && LA382_25<=NOT_EXPR)||(LA382_25>=WHERE && LA382_25<=AS)||(LA382_25>=ELSE && LA382_25<=FROM)||(LA382_25>=INNER && LA382_25<=FULL)||LA382_25==IS||(LA382_25>=GROUP && LA382_25<=HAVING)||LA382_25==ALL||LA382_25==OUTPUT||LA382_25==INSERT||(LA382_25>=ORDER && LA382_25<=DESC)||LA382_25==PATTERN||(LA382_25>=TIMEPERIOD_SEC && LA382_25<=TIMEPERIOD_SECONDS)||LA382_25==ROW_LIMIT_EXPR||(LA382_25>=MATCH_RECOGNIZE && LA382_25<=MEASURES)||(LA382_25>=AFTER && LA382_25<=FOR)||(LA382_25>=LBRACK && LA382_25<=RBRACK)||(LA382_25>=RPAREN && LA382_25<=COLON)||LA382_25==RCURLY||(LA382_25>=ATCHAR && LA382_25<=STAR)||(LA382_25>=LT && LA382_25<=PLUS)||(LA382_25>=BAND && LA382_25<=MOD)||(LA382_25>=FOLLOWMAX_END && LA382_25<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA382_40 = input.LA(2);
            	            if ( (LA382_40==EOF||(LA382_40>=IN_SET && LA382_40<=NOT_EXPR)||(LA382_40>=WHERE && LA382_40<=AS)||(LA382_40>=ELSE && LA382_40<=FROM)||(LA382_40>=INNER && LA382_40<=FULL)||LA382_40==IS||(LA382_40>=GROUP && LA382_40<=HAVING)||LA382_40==ALL||LA382_40==OUTPUT||LA382_40==INSERT||(LA382_40>=ORDER && LA382_40<=DESC)||LA382_40==PATTERN||(LA382_40>=TIMEPERIOD_SEC && LA382_40<=TIMEPERIOD_SECONDS)||LA382_40==ROW_LIMIT_EXPR||(LA382_40>=MATCH_RECOGNIZE && LA382_40<=MEASURES)||(LA382_40>=AFTER && LA382_40<=FOR)||(LA382_40>=LBRACK && LA382_40<=RBRACK)||(LA382_40>=LPAREN && LA382_40<=COLON)||LA382_40==RCURLY||(LA382_40>=ATCHAR && LA382_40<=STAR)||(LA382_40>=LT && LA382_40<=PLUS)||(LA382_40>=BAND && LA382_40<=MOD)||(LA382_40>=FOLLOWMAX_END && LA382_40<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA382_41 = input.LA(2);
            	            if ( (LA382_41==EOF||(LA382_41>=IN_SET && LA382_41<=NOT_EXPR)||(LA382_41>=WHERE && LA382_41<=AS)||(LA382_41>=ELSE && LA382_41<=FROM)||(LA382_41>=INNER && LA382_41<=FULL)||LA382_41==IS||(LA382_41>=GROUP && LA382_41<=HAVING)||LA382_41==ALL||LA382_41==OUTPUT||LA382_41==INSERT||(LA382_41>=ORDER && LA382_41<=DESC)||LA382_41==PATTERN||(LA382_41>=TIMEPERIOD_SEC && LA382_41<=TIMEPERIOD_SECONDS)||LA382_41==ROW_LIMIT_EXPR||(LA382_41>=MATCH_RECOGNIZE && LA382_41<=MEASURES)||(LA382_41>=AFTER && LA382_41<=FOR)||(LA382_41>=LBRACK && LA382_41<=RBRACK)||(LA382_41>=LPAREN && LA382_41<=COLON)||LA382_41==RCURLY||(LA382_41>=ATCHAR && LA382_41<=STAR)||(LA382_41>=LT && LA382_41<=PLUS)||(LA382_41>=BAND && LA382_41<=MOD)||(LA382_41>=FOLLOWMAX_END && LA382_41<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA382_43 = input.LA(2);
            	            if ( (LA382_43==EOF||(LA382_43>=IN_SET && LA382_43<=NOT_EXPR)||(LA382_43>=WHERE && LA382_43<=AS)||(LA382_43>=ELSE && LA382_43<=FROM)||(LA382_43>=INNER && LA382_43<=FULL)||LA382_43==IS||(LA382_43>=GROUP && LA382_43<=HAVING)||LA382_43==ALL||LA382_43==OUTPUT||LA382_43==INSERT||(LA382_43>=ORDER && LA382_43<=DESC)||LA382_43==PATTERN||(LA382_43>=TIMEPERIOD_SEC && LA382_43<=TIMEPERIOD_SECONDS)||LA382_43==ROW_LIMIT_EXPR||(LA382_43>=MATCH_RECOGNIZE && LA382_43<=MEASURES)||(LA382_43>=AFTER && LA382_43<=FOR)||(LA382_43>=LBRACK && LA382_43<=RBRACK)||(LA382_43>=LPAREN && LA382_43<=COLON)||LA382_43==RCURLY||(LA382_43>=ATCHAR && LA382_43<=STAR)||(LA382_43>=LT && LA382_43<=PLUS)||(LA382_43>=BAND && LA382_43<=MOD)||(LA382_43>=FOLLOWMAX_END && LA382_43<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA382_44 = input.LA(2);
            	            if ( (LA382_44==EOF||(LA382_44>=IN_SET && LA382_44<=NOT_EXPR)||(LA382_44>=WHERE && LA382_44<=AS)||(LA382_44>=ELSE && LA382_44<=FROM)||(LA382_44>=INNER && LA382_44<=FULL)||LA382_44==IS||(LA382_44>=GROUP && LA382_44<=HAVING)||LA382_44==ALL||LA382_44==OUTPUT||LA382_44==INSERT||(LA382_44>=ORDER && LA382_44<=DESC)||(LA382_44>=TIMEPERIOD_SEC && LA382_44<=TIMEPERIOD_SECONDS)||LA382_44==ROW_LIMIT_EXPR||(LA382_44>=MATCH_RECOGNIZE && LA382_44<=MEASURES)||(LA382_44>=AFTER && LA382_44<=FOR)||(LA382_44>=LBRACK && LA382_44<=RBRACK)||(LA382_44>=LPAREN && LA382_44<=COLON)||LA382_44==RCURLY||(LA382_44>=ATCHAR && LA382_44<=STAR)||(LA382_44>=LT && LA382_44<=PLUS)||(LA382_44>=BAND && LA382_44<=MOD)||(LA382_44>=FOLLOWMAX_END && LA382_44<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            else if ( (LA382_44==PATTERN) ) {
            	                int LA382_499 = input.LA(3);
            	                if ( (LA382_499==LPAREN) ) {
            	                    alt382=1;
            	                }
            	            }
            	            }
            	            break;
            	        case FOR:
            	            {
            	            int LA382_49 = input.LA(2);
            	            if ( (LA382_49==EOF||(LA382_49>=IN_SET && LA382_49<=NOT_EXPR)||(LA382_49>=WHERE && LA382_49<=AS)||(LA382_49>=ELSE && LA382_49<=FROM)||(LA382_49>=INNER && LA382_49<=FULL)||LA382_49==IS||(LA382_49>=GROUP && LA382_49<=HAVING)||LA382_49==ALL||LA382_49==OUTPUT||LA382_49==INSERT||(LA382_49>=ORDER && LA382_49<=DESC)||LA382_49==PATTERN||(LA382_49>=TIMEPERIOD_SEC && LA382_49<=TIMEPERIOD_SECONDS)||LA382_49==ROW_LIMIT_EXPR||(LA382_49>=MATCH_RECOGNIZE && LA382_49<=MEASURES)||(LA382_49>=AFTER && LA382_49<=FOR)||(LA382_49>=LBRACK && LA382_49<=RBRACK)||(LA382_49>=LPAREN && LA382_49<=COLON)||LA382_49==RCURLY||(LA382_49>=ATCHAR && LA382_49<=STAR)||(LA382_49>=LT && LA382_49<=PLUS)||(LA382_49>=BAND && LA382_49<=MOD)||(LA382_49>=FOLLOWMAX_END && LA382_49<=ESCAPECHAR)) ) {
            	                alt382=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt382) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent14132);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop383;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT991=null;
        Token COUNT992=null;
        Token ESCAPE993=null;
        Token EVERY_EXPR994=null;
        Token SUM995=null;
        Token AVG996=null;
        Token MAX997=null;
        Token MIN998=null;
        Token COALESCE999=null;
        Token MEDIAN1000=null;
        Token STDDEV1001=null;
        Token AVEDEV1002=null;
        Token EVENTS1003=null;
        Token FIRST1004=null;
        Token LAST1005=null;
        Token WHILE1006=null;
        Token MERGE1007=null;
        Token MATCHED1008=null;
        Token UNIDIRECTIONAL1009=null;
        Token RETAINUNION1010=null;
        Token RETAININTERSECTION1011=null;
        Token UNTIL1012=null;
        Token PATTERN1013=null;
        Token SQL1014=null;
        Token METADATASQL1015=null;
        Token PREVIOUS1016=null;
        Token PREVIOUSTAIL1017=null;
        Token PRIOR1018=null;
        Token WEEKDAY1019=null;
        Token LW1020=null;
        Token INSTANCEOF1021=null;
        Token TYPEOF1022=null;
        Token CAST1023=null;
        Token SNAPSHOT1024=null;
        Token VARIABLE1025=null;
        Token INDEX1026=null;
        Token WINDOW1027=null;
        Token LEFT1028=null;
        Token RIGHT1029=null;
        Token OUTER1030=null;
        Token FULL1031=null;
        Token JOIN1032=null;
        Token DEFINE1033=null;
        Token PARTITION1034=null;
        Token MATCHES1035=null;
        Token CONTEXT1036=null;
        Token FOR1037=null;
        Token USING1038=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT991_tree=null;
        CommonTree COUNT992_tree=null;
        CommonTree ESCAPE993_tree=null;
        CommonTree EVERY_EXPR994_tree=null;
        CommonTree SUM995_tree=null;
        CommonTree AVG996_tree=null;
        CommonTree MAX997_tree=null;
        CommonTree MIN998_tree=null;
        CommonTree COALESCE999_tree=null;
        CommonTree MEDIAN1000_tree=null;
        CommonTree STDDEV1001_tree=null;
        CommonTree AVEDEV1002_tree=null;
        CommonTree EVENTS1003_tree=null;
        CommonTree FIRST1004_tree=null;
        CommonTree LAST1005_tree=null;
        CommonTree WHILE1006_tree=null;
        CommonTree MERGE1007_tree=null;
        CommonTree MATCHED1008_tree=null;
        CommonTree UNIDIRECTIONAL1009_tree=null;
        CommonTree RETAINUNION1010_tree=null;
        CommonTree RETAININTERSECTION1011_tree=null;
        CommonTree UNTIL1012_tree=null;
        CommonTree PATTERN1013_tree=null;
        CommonTree SQL1014_tree=null;
        CommonTree METADATASQL1015_tree=null;
        CommonTree PREVIOUS1016_tree=null;
        CommonTree PREVIOUSTAIL1017_tree=null;
        CommonTree PRIOR1018_tree=null;
        CommonTree WEEKDAY1019_tree=null;
        CommonTree LW1020_tree=null;
        CommonTree INSTANCEOF1021_tree=null;
        CommonTree TYPEOF1022_tree=null;
        CommonTree CAST1023_tree=null;
        CommonTree SNAPSHOT1024_tree=null;
        CommonTree VARIABLE1025_tree=null;
        CommonTree INDEX1026_tree=null;
        CommonTree WINDOW1027_tree=null;
        CommonTree LEFT1028_tree=null;
        CommonTree RIGHT1029_tree=null;
        CommonTree OUTER1030_tree=null;
        CommonTree FULL1031_tree=null;
        CommonTree JOIN1032_tree=null;
        CommonTree DEFINE1033_tree=null;
        CommonTree PARTITION1034_tree=null;
        CommonTree MATCHES1035_tree=null;
        CommonTree CONTEXT1036_tree=null;
        CommonTree FOR1037_tree=null;
        CommonTree USING1038_tree=null;
        try {
            int alt384=50;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt384=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt384=2;
                }
                break;
            case AT:
                {
                alt384=3;
                }
                break;
            case COUNT:
                {
                alt384=4;
                }
                break;
            case ESCAPE:
                {
                alt384=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt384=6;
                }
                break;
            case SUM:
                {
                alt384=7;
                }
                break;
            case AVG:
                {
                alt384=8;
                }
                break;
            case MAX:
                {
                alt384=9;
                }
                break;
            case MIN:
                {
                alt384=10;
                }
                break;
            case COALESCE:
                {
                alt384=11;
                }
                break;
            case MEDIAN:
                {
                alt384=12;
                }
                break;
            case STDDEV:
                {
                alt384=13;
                }
                break;
            case AVEDEV:
                {
                alt384=14;
                }
                break;
            case EVENTS:
                {
                alt384=15;
                }
                break;
            case FIRST:
                {
                alt384=16;
                }
                break;
            case LAST:
                {
                alt384=17;
                }
                break;
            case WHILE:
                {
                alt384=18;
                }
                break;
            case MERGE:
                {
                alt384=19;
                }
                break;
            case MATCHED:
                {
                alt384=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt384=21;
                }
                break;
            case RETAINUNION:
                {
                alt384=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt384=23;
                }
                break;
            case UNTIL:
                {
                alt384=24;
                }
                break;
            case PATTERN:
                {
                alt384=25;
                }
                break;
            case SQL:
                {
                alt384=26;
                }
                break;
            case METADATASQL:
                {
                alt384=27;
                }
                break;
            case PREVIOUS:
                {
                alt384=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt384=29;
                }
                break;
            case PRIOR:
                {
                alt384=30;
                }
                break;
            case WEEKDAY:
                {
                alt384=31;
                }
                break;
            case LW:
                {
                alt384=32;
                }
                break;
            case INSTANCEOF:
                {
                alt384=33;
                }
                break;
            case TYPEOF:
                {
                alt384=34;
                }
                break;
            case CAST:
                {
                alt384=35;
                }
                break;
            case SNAPSHOT:
                {
                alt384=36;
                }
                break;
            case VARIABLE:
                {
                alt384=37;
                }
                break;
            case INDEX:
                {
                alt384=38;
                }
                break;
            case WINDOW:
                {
                alt384=39;
                }
                break;
            case LEFT:
                {
                alt384=40;
                }
                break;
            case RIGHT:
                {
                alt384=41;
                }
                break;
            case OUTER:
                {
                alt384=42;
                }
                break;
            case FULL:
                {
                alt384=43;
                }
                break;
            case JOIN:
                {
                alt384=44;
                }
                break;
            case DEFINE:
                {
                alt384=45;
                }
                break;
            case PARTITION:
                {
                alt384=46;
                }
                break;
            case MATCHES:
                {
                alt384=47;
                }
                break;
            case CONTEXT:
                {
                alt384=48;
                }
                break;
            case FOR:
                {
                alt384=49;
                }
                break;
            case USING:
                {
                alt384=50;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);
                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent14171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent14180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT991=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent14187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT991_tree = (CommonTree)adaptor.create(AT991);
                    adaptor.addChild(root_0, AT991_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT992=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent14194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT992_tree = (CommonTree)adaptor.create(COUNT992);
                    adaptor.addChild(root_0, COUNT992_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE993=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent14201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE993_tree = (CommonTree)adaptor.create(ESCAPE993);
                    adaptor.addChild(root_0, ESCAPE993_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR994=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent14212); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR994_tree = (CommonTree)adaptor.create(EVERY_EXPR994);
                    adaptor.addChild(root_0, EVERY_EXPR994_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM995=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent14219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM995_tree = (CommonTree)adaptor.create(SUM995);
                    adaptor.addChild(root_0, SUM995_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG996=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent14226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG996_tree = (CommonTree)adaptor.create(AVG996);
                    adaptor.addChild(root_0, AVG996_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX997=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent14233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX997_tree = (CommonTree)adaptor.create(MAX997);
                    adaptor.addChild(root_0, MAX997_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN998=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent14240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN998_tree = (CommonTree)adaptor.create(MIN998);
                    adaptor.addChild(root_0, MIN998_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE999=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent14247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE999_tree = (CommonTree)adaptor.create(COALESCE999);
                    adaptor.addChild(root_0, COALESCE999_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN1000=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent14254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN1000_tree = (CommonTree)adaptor.create(MEDIAN1000);
                    adaptor.addChild(root_0, MEDIAN1000_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV1001=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent14261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV1001_tree = (CommonTree)adaptor.create(STDDEV1001);
                    adaptor.addChild(root_0, STDDEV1001_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV1002=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent14268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV1002_tree = (CommonTree)adaptor.create(AVEDEV1002);
                    adaptor.addChild(root_0, AVEDEV1002_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS1003=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent14275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS1003_tree = (CommonTree)adaptor.create(EVENTS1003);
                    adaptor.addChild(root_0, EVENTS1003_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST1004=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent14282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST1004_tree = (CommonTree)adaptor.create(FIRST1004);
                    adaptor.addChild(root_0, FIRST1004_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST1005=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent14289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST1005_tree = (CommonTree)adaptor.create(LAST1005);
                    adaptor.addChild(root_0, LAST1005_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE1006=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent14296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE1006_tree = (CommonTree)adaptor.create(WHILE1006);
                    adaptor.addChild(root_0, WHILE1006_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE1007=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent14303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE1007_tree = (CommonTree)adaptor.create(MERGE1007);
                    adaptor.addChild(root_0, MERGE1007_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED1008=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent14310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED1008_tree = (CommonTree)adaptor.create(MATCHED1008);
                    adaptor.addChild(root_0, MATCHED1008_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL1009=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent14317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL1009_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL1009);
                    adaptor.addChild(root_0, UNIDIRECTIONAL1009_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION1010=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent14324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION1010_tree = (CommonTree)adaptor.create(RETAINUNION1010);
                    adaptor.addChild(root_0, RETAINUNION1010_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION1011=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent14331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION1011_tree = (CommonTree)adaptor.create(RETAININTERSECTION1011);
                    adaptor.addChild(root_0, RETAININTERSECTION1011_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL1012=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent14338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL1012_tree = (CommonTree)adaptor.create(UNTIL1012);
                    adaptor.addChild(root_0, UNTIL1012_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN1013=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent14345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN1013_tree = (CommonTree)adaptor.create(PATTERN1013);
                    adaptor.addChild(root_0, PATTERN1013_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL1014=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent14352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL1014_tree = (CommonTree)adaptor.create(SQL1014);
                    adaptor.addChild(root_0, SQL1014_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL1015=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent14359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL1015_tree = (CommonTree)adaptor.create(METADATASQL1015);
                    adaptor.addChild(root_0, METADATASQL1015_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS1016=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent14366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS1016_tree = (CommonTree)adaptor.create(PREVIOUS1016);
                    adaptor.addChild(root_0, PREVIOUS1016_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL1017=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent14373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL1017_tree = (CommonTree)adaptor.create(PREVIOUSTAIL1017);
                    adaptor.addChild(root_0, PREVIOUSTAIL1017_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR1018=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent14380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR1018_tree = (CommonTree)adaptor.create(PRIOR1018);
                    adaptor.addChild(root_0, PRIOR1018_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY1019=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent14387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY1019_tree = (CommonTree)adaptor.create(WEEKDAY1019);
                    adaptor.addChild(root_0, WEEKDAY1019_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW1020=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent14394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW1020_tree = (CommonTree)adaptor.create(LW1020);
                    adaptor.addChild(root_0, LW1020_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF1021=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent14401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF1021_tree = (CommonTree)adaptor.create(INSTANCEOF1021);
                    adaptor.addChild(root_0, INSTANCEOF1021_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF1022=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent14408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF1022_tree = (CommonTree)adaptor.create(TYPEOF1022);
                    adaptor.addChild(root_0, TYPEOF1022_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST1023=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent14415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST1023_tree = (CommonTree)adaptor.create(CAST1023);
                    adaptor.addChild(root_0, CAST1023_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT1024=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent14422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT1024_tree = (CommonTree)adaptor.create(SNAPSHOT1024);
                    adaptor.addChild(root_0, SNAPSHOT1024_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE1025=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent14429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE1025_tree = (CommonTree)adaptor.create(VARIABLE1025);
                    adaptor.addChild(root_0, VARIABLE1025_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX1026=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent14438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX1026_tree = (CommonTree)adaptor.create(INDEX1026);
                    adaptor.addChild(root_0, INDEX1026_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW1027=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent14447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW1027_tree = (CommonTree)adaptor.create(WINDOW1027);
                    adaptor.addChild(root_0, WINDOW1027_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT1028=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent14454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT1028_tree = (CommonTree)adaptor.create(LEFT1028);
                    adaptor.addChild(root_0, LEFT1028_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT1029=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent14461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT1029_tree = (CommonTree)adaptor.create(RIGHT1029);
                    adaptor.addChild(root_0, RIGHT1029_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER1030=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent14468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER1030_tree = (CommonTree)adaptor.create(OUTER1030);
                    adaptor.addChild(root_0, OUTER1030_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL1031=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent14475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL1031_tree = (CommonTree)adaptor.create(FULL1031);
                    adaptor.addChild(root_0, FULL1031_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN1032=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent14482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN1032_tree = (CommonTree)adaptor.create(JOIN1032);
                    adaptor.addChild(root_0, JOIN1032_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE1033=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent14489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE1033_tree = (CommonTree)adaptor.create(DEFINE1033);
                    adaptor.addChild(root_0, DEFINE1033_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION1034=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent14496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION1034_tree = (CommonTree)adaptor.create(PARTITION1034);
                    adaptor.addChild(root_0, PARTITION1034_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES1035=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent14503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES1035_tree = (CommonTree)adaptor.create(MATCHES1035);
                    adaptor.addChild(root_0, MATCHES1035_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT1036=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent14510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT1036_tree = (CommonTree)adaptor.create(CONTEXT1036);
                    adaptor.addChild(root_0, CONTEXT1036_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
                case 49 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FOR1037=(Token)match(input,FOR,FOLLOW_FOR_in_keywordAllowedIdent14517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOR1037_tree = (CommonTree)adaptor.create(FOR1037);
                    adaptor.addChild(root_0, FOR1037_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "for"; 
                    }
                    }
                    break;
                case 50 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    USING1038=(Token)match(input,USING,FOLLOW_USING_in_keywordAllowedIdent14524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING1038_tree = (CommonTree)adaptor.create(USING1038);
                    adaptor.addChild(root_0, USING1038_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "using"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token i3=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree i3_tree=null;
        try {
            int alt385=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt385=1;
                }
                break;
            case EVENTS:
                {
                alt385=2;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt385=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 385, 0, input);
                throw nvae;
            }
            switch (alt385) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr14545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_escapableStr14554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i2.getText(); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i3=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr14563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i3_tree = (CommonTree)adaptor.create(i3);
                    adaptor.addChild(root_0, i3_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i3.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT1039=null;
        CommonTree t_tree=null;
        CommonTree IDENT1039_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt386=2;
            int LA386_0 = input.LA(1);
            if ( (LA386_0==IDENT) ) {
                alt386=1;
            }
            else if ( (LA386_0==TICKED_STRING_LITERAL) ) {
                alt386=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);
                throw nvae;
            }
            switch (alt386) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT1039=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent14577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT1039_tree = (CommonTree)adaptor.create(IDENT1039);
                    adaptor.addChild(root_0, IDENT1039_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent14585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart1040 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1041 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1042 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1043 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1044 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1045 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1046 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1047 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart1048 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1049 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1050 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1051 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1052 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1053 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1054 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart1055 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1056 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1057 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1058 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1059 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1060 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart1061 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1062 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1063 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1064 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1065 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart1066 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1067 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1068 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1069 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart1070 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1071 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1072 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart1073 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1074 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart1075 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt415=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt415=6;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt415=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt415=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt415=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt415=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt415=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt415=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt415=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 415, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt415=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt415=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt415=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt415=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt415=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt415=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt415=4;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt415=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);
                throw nvae;
            }
            switch (alt415) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod14610);
                    yearPart1040=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart1040.getTree());
                    int alt387=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_26 = input.LA(3);
                                    if ( ((LA387_26>=TIMEPERIOD_MONTH && LA387_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_27 = input.LA(3);
                                    if ( ((LA387_27>=TIMEPERIOD_MONTH && LA387_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_28 = input.LA(3);
                                    if ( ((LA387_28>=TIMEPERIOD_MONTH && LA387_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_29 = input.LA(3);
                                    if ( ((LA387_29>=TIMEPERIOD_MONTH && LA387_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA387_30 = input.LA(3);
                                    if ( ((LA387_30>=TIMEPERIOD_MONTH && LA387_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA387_31 = input.LA(3);
                                    if ( ((LA387_31>=TIMEPERIOD_MONTH && LA387_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA387_32 = input.LA(3);
                                    if ( ((LA387_32>=TIMEPERIOD_MONTH && LA387_32<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA387_33 = input.LA(3);
                                    if ( ((LA387_33>=TIMEPERIOD_MONTH && LA387_33<=TIMEPERIOD_MONTHS)) ) {
                                        alt387=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA387_3 = input.LA(2);
                            if ( ((LA387_3>=TIMEPERIOD_MONTH && LA387_3<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA387_4 = input.LA(2);
                            if ( ((LA387_4>=TIMEPERIOD_MONTH && LA387_4<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA387_5 = input.LA(2);
                            if ( ((LA387_5>=TIMEPERIOD_MONTH && LA387_5<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA387_6 = input.LA(2);
                            if ( ((LA387_6>=TIMEPERIOD_MONTH && LA387_6<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA387_7 = input.LA(2);
                            if ( ((LA387_7>=TIMEPERIOD_MONTH && LA387_7<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA387_8 = input.LA(2);
                            if ( ((LA387_8>=TIMEPERIOD_MONTH && LA387_8<=TIMEPERIOD_MONTHS)) ) {
                                alt387=1;
                            }
                            }
                            break;
                    }
                    switch (alt387) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod14612);
                            monthPart1041=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart1041.getTree());
                            }
                            break;
                    }
                    int alt388=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_26 = input.LA(3);
                                    if ( ((LA388_26>=TIMEPERIOD_WEEK && LA388_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_27 = input.LA(3);
                                    if ( ((LA388_27>=TIMEPERIOD_WEEK && LA388_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_28 = input.LA(3);
                                    if ( ((LA388_28>=TIMEPERIOD_WEEK && LA388_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_29 = input.LA(3);
                                    if ( ((LA388_29>=TIMEPERIOD_WEEK && LA388_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA388_30 = input.LA(3);
                                    if ( ((LA388_30>=TIMEPERIOD_WEEK && LA388_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA388_31 = input.LA(3);
                                    if ( ((LA388_31>=TIMEPERIOD_WEEK && LA388_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA388_32 = input.LA(3);
                                    if ( ((LA388_32>=TIMEPERIOD_WEEK && LA388_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA388_33 = input.LA(3);
                                    if ( ((LA388_33>=TIMEPERIOD_WEEK && LA388_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt388=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA388_3 = input.LA(2);
                            if ( ((LA388_3>=TIMEPERIOD_WEEK && LA388_3<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA388_4 = input.LA(2);
                            if ( ((LA388_4>=TIMEPERIOD_WEEK && LA388_4<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA388_5 = input.LA(2);
                            if ( ((LA388_5>=TIMEPERIOD_WEEK && LA388_5<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA388_6 = input.LA(2);
                            if ( ((LA388_6>=TIMEPERIOD_WEEK && LA388_6<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA388_7 = input.LA(2);
                            if ( ((LA388_7>=TIMEPERIOD_WEEK && LA388_7<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA388_8 = input.LA(2);
                            if ( ((LA388_8>=TIMEPERIOD_WEEK && LA388_8<=TIMEPERIOD_WEEKS)) ) {
                                alt388=1;
                            }
                            }
                            break;
                    }
                    switch (alt388) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14615);
                            weekPart1042=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1042.getTree());
                            }
                            break;
                    }
                    int alt389=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_26 = input.LA(3);
                                    if ( ((LA389_26>=TIMEPERIOD_DAY && LA389_26<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_27 = input.LA(3);
                                    if ( ((LA389_27>=TIMEPERIOD_DAY && LA389_27<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_28 = input.LA(3);
                                    if ( ((LA389_28>=TIMEPERIOD_DAY && LA389_28<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_29 = input.LA(3);
                                    if ( ((LA389_29>=TIMEPERIOD_DAY && LA389_29<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA389_30 = input.LA(3);
                                    if ( ((LA389_30>=TIMEPERIOD_DAY && LA389_30<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA389_31 = input.LA(3);
                                    if ( ((LA389_31>=TIMEPERIOD_DAY && LA389_31<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA389_32 = input.LA(3);
                                    if ( ((LA389_32>=TIMEPERIOD_DAY && LA389_32<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA389_33 = input.LA(3);
                                    if ( ((LA389_33>=TIMEPERIOD_DAY && LA389_33<=TIMEPERIOD_DAYS)) ) {
                                        alt389=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA389_3 = input.LA(2);
                            if ( ((LA389_3>=TIMEPERIOD_DAY && LA389_3<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA389_4 = input.LA(2);
                            if ( ((LA389_4>=TIMEPERIOD_DAY && LA389_4<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA389_5 = input.LA(2);
                            if ( ((LA389_5>=TIMEPERIOD_DAY && LA389_5<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA389_6 = input.LA(2);
                            if ( ((LA389_6>=TIMEPERIOD_DAY && LA389_6<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA389_7 = input.LA(2);
                            if ( ((LA389_7>=TIMEPERIOD_DAY && LA389_7<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA389_8 = input.LA(2);
                            if ( ((LA389_8>=TIMEPERIOD_DAY && LA389_8<=TIMEPERIOD_DAYS)) ) {
                                alt389=1;
                            }
                            }
                            break;
                    }
                    switch (alt389) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14618);
                            dayPart1043=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1043.getTree());
                            }
                            break;
                    }
                    int alt390=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_26 = input.LA(3);
                                    if ( ((LA390_26>=TIMEPERIOD_HOUR && LA390_26<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_27 = input.LA(3);
                                    if ( ((LA390_27>=TIMEPERIOD_HOUR && LA390_27<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_28 = input.LA(3);
                                    if ( ((LA390_28>=TIMEPERIOD_HOUR && LA390_28<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_29 = input.LA(3);
                                    if ( ((LA390_29>=TIMEPERIOD_HOUR && LA390_29<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA390_30 = input.LA(3);
                                    if ( ((LA390_30>=TIMEPERIOD_HOUR && LA390_30<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA390_31 = input.LA(3);
                                    if ( ((LA390_31>=TIMEPERIOD_HOUR && LA390_31<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA390_32 = input.LA(3);
                                    if ( ((LA390_32>=TIMEPERIOD_HOUR && LA390_32<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA390_33 = input.LA(3);
                                    if ( ((LA390_33>=TIMEPERIOD_HOUR && LA390_33<=TIMEPERIOD_HOURS)) ) {
                                        alt390=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA390_3 = input.LA(2);
                            if ( ((LA390_3>=TIMEPERIOD_HOUR && LA390_3<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA390_4 = input.LA(2);
                            if ( ((LA390_4>=TIMEPERIOD_HOUR && LA390_4<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA390_5 = input.LA(2);
                            if ( ((LA390_5>=TIMEPERIOD_HOUR && LA390_5<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA390_6 = input.LA(2);
                            if ( ((LA390_6>=TIMEPERIOD_HOUR && LA390_6<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA390_7 = input.LA(2);
                            if ( ((LA390_7>=TIMEPERIOD_HOUR && LA390_7<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA390_8 = input.LA(2);
                            if ( ((LA390_8>=TIMEPERIOD_HOUR && LA390_8<=TIMEPERIOD_HOURS)) ) {
                                alt390=1;
                            }
                            }
                            break;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14621);
                            hourPart1044=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1044.getTree());
                            }
                            break;
                    }
                    int alt391=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_26 = input.LA(3);
                                    if ( (LA391_26==MIN||(LA391_26>=TIMEPERIOD_MINUTE && LA391_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_27 = input.LA(3);
                                    if ( (LA391_27==MIN||(LA391_27>=TIMEPERIOD_MINUTE && LA391_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_28 = input.LA(3);
                                    if ( (LA391_28==MIN||(LA391_28>=TIMEPERIOD_MINUTE && LA391_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_29 = input.LA(3);
                                    if ( (LA391_29==MIN||(LA391_29>=TIMEPERIOD_MINUTE && LA391_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA391_30 = input.LA(3);
                                    if ( (LA391_30==MIN||(LA391_30>=TIMEPERIOD_MINUTE && LA391_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA391_31 = input.LA(3);
                                    if ( (LA391_31==MIN||(LA391_31>=TIMEPERIOD_MINUTE && LA391_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA391_32 = input.LA(3);
                                    if ( (LA391_32==MIN||(LA391_32>=TIMEPERIOD_MINUTE && LA391_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA391_33 = input.LA(3);
                                    if ( (LA391_33==MIN||(LA391_33>=TIMEPERIOD_MINUTE && LA391_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt391=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA391_3 = input.LA(2);
                            if ( (LA391_3==MIN||(LA391_3>=TIMEPERIOD_MINUTE && LA391_3<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA391_4 = input.LA(2);
                            if ( (LA391_4==MIN||(LA391_4>=TIMEPERIOD_MINUTE && LA391_4<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA391_5 = input.LA(2);
                            if ( (LA391_5==MIN||(LA391_5>=TIMEPERIOD_MINUTE && LA391_5<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA391_6 = input.LA(2);
                            if ( (LA391_6==MIN||(LA391_6>=TIMEPERIOD_MINUTE && LA391_6<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA391_7 = input.LA(2);
                            if ( (LA391_7==MIN||(LA391_7>=TIMEPERIOD_MINUTE && LA391_7<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA391_8 = input.LA(2);
                            if ( (LA391_8==MIN||(LA391_8>=TIMEPERIOD_MINUTE && LA391_8<=TIMEPERIOD_MINUTES)) ) {
                                alt391=1;
                            }
                            }
                            break;
                    }
                    switch (alt391) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14624);
                            minutePart1045=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1045.getTree());
                            }
                            break;
                    }
                    int alt392=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA392_26 = input.LA(3);
                                    if ( ((LA392_26>=TIMEPERIOD_SEC && LA392_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA392_27 = input.LA(3);
                                    if ( ((LA392_27>=TIMEPERIOD_SEC && LA392_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA392_28 = input.LA(3);
                                    if ( ((LA392_28>=TIMEPERIOD_SEC && LA392_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA392_29 = input.LA(3);
                                    if ( ((LA392_29>=TIMEPERIOD_SEC && LA392_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA392_30 = input.LA(3);
                                    if ( ((LA392_30>=TIMEPERIOD_SEC && LA392_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA392_31 = input.LA(3);
                                    if ( ((LA392_31>=TIMEPERIOD_SEC && LA392_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA392_32 = input.LA(3);
                                    if ( ((LA392_32>=TIMEPERIOD_SEC && LA392_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA392_33 = input.LA(3);
                                    if ( ((LA392_33>=TIMEPERIOD_SEC && LA392_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt392=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA392_3 = input.LA(2);
                            if ( ((LA392_3>=TIMEPERIOD_SEC && LA392_3<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA392_4 = input.LA(2);
                            if ( ((LA392_4>=TIMEPERIOD_SEC && LA392_4<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA392_5 = input.LA(2);
                            if ( ((LA392_5>=TIMEPERIOD_SEC && LA392_5<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA392_6 = input.LA(2);
                            if ( ((LA392_6>=TIMEPERIOD_SEC && LA392_6<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA392_7 = input.LA(2);
                            if ( ((LA392_7>=TIMEPERIOD_SEC && LA392_7<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA392_8 = input.LA(2);
                            if ( ((LA392_8>=TIMEPERIOD_SEC && LA392_8<=TIMEPERIOD_SECONDS)) ) {
                                alt392=1;
                            }
                            }
                            break;
                    }
                    switch (alt392) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14627);
                            secondPart1046=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1046.getTree());
                            }
                            break;
                    }
                    int alt393=2;
                    int LA393_0 = input.LA(1);
                    if ( (LA393_0==NUM_DOUBLE||LA393_0==IDENT||LA393_0==QUESTION||LA393_0==PLUS||LA393_0==MINUS||LA393_0==NUM_INT||(LA393_0>=NUM_LONG && LA393_0<=NUM_FLOAT)) ) {
                        alt393=1;
                    }
                    switch (alt393) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14630);
                            millisecondPart1047=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1047.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod14636);
                    monthPart1048=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart1048.getTree());
                    int alt394=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_26 = input.LA(3);
                                    if ( ((LA394_26>=TIMEPERIOD_WEEK && LA394_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_27 = input.LA(3);
                                    if ( ((LA394_27>=TIMEPERIOD_WEEK && LA394_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_28 = input.LA(3);
                                    if ( ((LA394_28>=TIMEPERIOD_WEEK && LA394_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_29 = input.LA(3);
                                    if ( ((LA394_29>=TIMEPERIOD_WEEK && LA394_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA394_30 = input.LA(3);
                                    if ( ((LA394_30>=TIMEPERIOD_WEEK && LA394_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA394_31 = input.LA(3);
                                    if ( ((LA394_31>=TIMEPERIOD_WEEK && LA394_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA394_32 = input.LA(3);
                                    if ( ((LA394_32>=TIMEPERIOD_WEEK && LA394_32<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA394_33 = input.LA(3);
                                    if ( ((LA394_33>=TIMEPERIOD_WEEK && LA394_33<=TIMEPERIOD_WEEKS)) ) {
                                        alt394=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA394_3 = input.LA(2);
                            if ( ((LA394_3>=TIMEPERIOD_WEEK && LA394_3<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA394_4 = input.LA(2);
                            if ( ((LA394_4>=TIMEPERIOD_WEEK && LA394_4<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA394_5 = input.LA(2);
                            if ( ((LA394_5>=TIMEPERIOD_WEEK && LA394_5<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA394_6 = input.LA(2);
                            if ( ((LA394_6>=TIMEPERIOD_WEEK && LA394_6<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA394_7 = input.LA(2);
                            if ( ((LA394_7>=TIMEPERIOD_WEEK && LA394_7<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA394_8 = input.LA(2);
                            if ( ((LA394_8>=TIMEPERIOD_WEEK && LA394_8<=TIMEPERIOD_WEEKS)) ) {
                                alt394=1;
                            }
                            }
                            break;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod14638);
                            weekPart1049=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart1049.getTree());
                            }
                            break;
                    }
                    int alt395=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_26 = input.LA(3);
                                    if ( ((LA395_26>=TIMEPERIOD_DAY && LA395_26<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_27 = input.LA(3);
                                    if ( ((LA395_27>=TIMEPERIOD_DAY && LA395_27<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_28 = input.LA(3);
                                    if ( ((LA395_28>=TIMEPERIOD_DAY && LA395_28<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_29 = input.LA(3);
                                    if ( ((LA395_29>=TIMEPERIOD_DAY && LA395_29<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA395_30 = input.LA(3);
                                    if ( ((LA395_30>=TIMEPERIOD_DAY && LA395_30<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA395_31 = input.LA(3);
                                    if ( ((LA395_31>=TIMEPERIOD_DAY && LA395_31<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA395_32 = input.LA(3);
                                    if ( ((LA395_32>=TIMEPERIOD_DAY && LA395_32<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA395_33 = input.LA(3);
                                    if ( ((LA395_33>=TIMEPERIOD_DAY && LA395_33<=TIMEPERIOD_DAYS)) ) {
                                        alt395=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA395_3 = input.LA(2);
                            if ( ((LA395_3>=TIMEPERIOD_DAY && LA395_3<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA395_4 = input.LA(2);
                            if ( ((LA395_4>=TIMEPERIOD_DAY && LA395_4<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA395_5 = input.LA(2);
                            if ( ((LA395_5>=TIMEPERIOD_DAY && LA395_5<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA395_6 = input.LA(2);
                            if ( ((LA395_6>=TIMEPERIOD_DAY && LA395_6<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA395_7 = input.LA(2);
                            if ( ((LA395_7>=TIMEPERIOD_DAY && LA395_7<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA395_8 = input.LA(2);
                            if ( ((LA395_8>=TIMEPERIOD_DAY && LA395_8<=TIMEPERIOD_DAYS)) ) {
                                alt395=1;
                            }
                            }
                            break;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14641);
                            dayPart1050=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1050.getTree());
                            }
                            break;
                    }
                    int alt396=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_26 = input.LA(3);
                                    if ( ((LA396_26>=TIMEPERIOD_HOUR && LA396_26<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_27 = input.LA(3);
                                    if ( ((LA396_27>=TIMEPERIOD_HOUR && LA396_27<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_28 = input.LA(3);
                                    if ( ((LA396_28>=TIMEPERIOD_HOUR && LA396_28<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_29 = input.LA(3);
                                    if ( ((LA396_29>=TIMEPERIOD_HOUR && LA396_29<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA396_30 = input.LA(3);
                                    if ( ((LA396_30>=TIMEPERIOD_HOUR && LA396_30<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA396_31 = input.LA(3);
                                    if ( ((LA396_31>=TIMEPERIOD_HOUR && LA396_31<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA396_32 = input.LA(3);
                                    if ( ((LA396_32>=TIMEPERIOD_HOUR && LA396_32<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA396_33 = input.LA(3);
                                    if ( ((LA396_33>=TIMEPERIOD_HOUR && LA396_33<=TIMEPERIOD_HOURS)) ) {
                                        alt396=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA396_3 = input.LA(2);
                            if ( ((LA396_3>=TIMEPERIOD_HOUR && LA396_3<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA396_4 = input.LA(2);
                            if ( ((LA396_4>=TIMEPERIOD_HOUR && LA396_4<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA396_5 = input.LA(2);
                            if ( ((LA396_5>=TIMEPERIOD_HOUR && LA396_5<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA396_6 = input.LA(2);
                            if ( ((LA396_6>=TIMEPERIOD_HOUR && LA396_6<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA396_7 = input.LA(2);
                            if ( ((LA396_7>=TIMEPERIOD_HOUR && LA396_7<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA396_8 = input.LA(2);
                            if ( ((LA396_8>=TIMEPERIOD_HOUR && LA396_8<=TIMEPERIOD_HOURS)) ) {
                                alt396=1;
                            }
                            }
                            break;
                    }
                    switch (alt396) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14644);
                            hourPart1051=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1051.getTree());
                            }
                            break;
                    }
                    int alt397=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_26 = input.LA(3);
                                    if ( (LA397_26==MIN||(LA397_26>=TIMEPERIOD_MINUTE && LA397_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_27 = input.LA(3);
                                    if ( (LA397_27==MIN||(LA397_27>=TIMEPERIOD_MINUTE && LA397_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_28 = input.LA(3);
                                    if ( (LA397_28==MIN||(LA397_28>=TIMEPERIOD_MINUTE && LA397_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_29 = input.LA(3);
                                    if ( (LA397_29==MIN||(LA397_29>=TIMEPERIOD_MINUTE && LA397_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA397_30 = input.LA(3);
                                    if ( (LA397_30==MIN||(LA397_30>=TIMEPERIOD_MINUTE && LA397_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA397_31 = input.LA(3);
                                    if ( (LA397_31==MIN||(LA397_31>=TIMEPERIOD_MINUTE && LA397_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA397_32 = input.LA(3);
                                    if ( (LA397_32==MIN||(LA397_32>=TIMEPERIOD_MINUTE && LA397_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA397_33 = input.LA(3);
                                    if ( (LA397_33==MIN||(LA397_33>=TIMEPERIOD_MINUTE && LA397_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt397=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA397_3 = input.LA(2);
                            if ( (LA397_3==MIN||(LA397_3>=TIMEPERIOD_MINUTE && LA397_3<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA397_4 = input.LA(2);
                            if ( (LA397_4==MIN||(LA397_4>=TIMEPERIOD_MINUTE && LA397_4<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA397_5 = input.LA(2);
                            if ( (LA397_5==MIN||(LA397_5>=TIMEPERIOD_MINUTE && LA397_5<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA397_6 = input.LA(2);
                            if ( (LA397_6==MIN||(LA397_6>=TIMEPERIOD_MINUTE && LA397_6<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA397_7 = input.LA(2);
                            if ( (LA397_7==MIN||(LA397_7>=TIMEPERIOD_MINUTE && LA397_7<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA397_8 = input.LA(2);
                            if ( (LA397_8==MIN||(LA397_8>=TIMEPERIOD_MINUTE && LA397_8<=TIMEPERIOD_MINUTES)) ) {
                                alt397=1;
                            }
                            }
                            break;
                    }
                    switch (alt397) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14647);
                            minutePart1052=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1052.getTree());
                            }
                            break;
                    }
                    int alt398=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_26 = input.LA(3);
                                    if ( ((LA398_26>=TIMEPERIOD_SEC && LA398_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_27 = input.LA(3);
                                    if ( ((LA398_27>=TIMEPERIOD_SEC && LA398_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_28 = input.LA(3);
                                    if ( ((LA398_28>=TIMEPERIOD_SEC && LA398_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_29 = input.LA(3);
                                    if ( ((LA398_29>=TIMEPERIOD_SEC && LA398_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA398_30 = input.LA(3);
                                    if ( ((LA398_30>=TIMEPERIOD_SEC && LA398_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA398_31 = input.LA(3);
                                    if ( ((LA398_31>=TIMEPERIOD_SEC && LA398_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA398_32 = input.LA(3);
                                    if ( ((LA398_32>=TIMEPERIOD_SEC && LA398_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA398_33 = input.LA(3);
                                    if ( ((LA398_33>=TIMEPERIOD_SEC && LA398_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt398=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA398_3 = input.LA(2);
                            if ( ((LA398_3>=TIMEPERIOD_SEC && LA398_3<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA398_4 = input.LA(2);
                            if ( ((LA398_4>=TIMEPERIOD_SEC && LA398_4<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA398_5 = input.LA(2);
                            if ( ((LA398_5>=TIMEPERIOD_SEC && LA398_5<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA398_6 = input.LA(2);
                            if ( ((LA398_6>=TIMEPERIOD_SEC && LA398_6<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA398_7 = input.LA(2);
                            if ( ((LA398_7>=TIMEPERIOD_SEC && LA398_7<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA398_8 = input.LA(2);
                            if ( ((LA398_8>=TIMEPERIOD_SEC && LA398_8<=TIMEPERIOD_SECONDS)) ) {
                                alt398=1;
                            }
                            }
                            break;
                    }
                    switch (alt398) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14650);
                            secondPart1053=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1053.getTree());
                            }
                            break;
                    }
                    int alt399=2;
                    int LA399_0 = input.LA(1);
                    if ( (LA399_0==NUM_DOUBLE||LA399_0==IDENT||LA399_0==QUESTION||LA399_0==PLUS||LA399_0==MINUS||LA399_0==NUM_INT||(LA399_0>=NUM_LONG && LA399_0<=NUM_FLOAT)) ) {
                        alt399=1;
                    }
                    switch (alt399) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14653);
                            millisecondPart1054=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1054.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod14659);
                    weekPart1055=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart1055.getTree());
                    int alt400=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_26 = input.LA(3);
                                    if ( ((LA400_26>=TIMEPERIOD_DAY && LA400_26<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_27 = input.LA(3);
                                    if ( ((LA400_27>=TIMEPERIOD_DAY && LA400_27<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_28 = input.LA(3);
                                    if ( ((LA400_28>=TIMEPERIOD_DAY && LA400_28<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_29 = input.LA(3);
                                    if ( ((LA400_29>=TIMEPERIOD_DAY && LA400_29<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA400_30 = input.LA(3);
                                    if ( ((LA400_30>=TIMEPERIOD_DAY && LA400_30<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA400_31 = input.LA(3);
                                    if ( ((LA400_31>=TIMEPERIOD_DAY && LA400_31<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA400_32 = input.LA(3);
                                    if ( ((LA400_32>=TIMEPERIOD_DAY && LA400_32<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA400_33 = input.LA(3);
                                    if ( ((LA400_33>=TIMEPERIOD_DAY && LA400_33<=TIMEPERIOD_DAYS)) ) {
                                        alt400=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA400_3 = input.LA(2);
                            if ( ((LA400_3>=TIMEPERIOD_DAY && LA400_3<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA400_4 = input.LA(2);
                            if ( ((LA400_4>=TIMEPERIOD_DAY && LA400_4<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA400_5 = input.LA(2);
                            if ( ((LA400_5>=TIMEPERIOD_DAY && LA400_5<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA400_6 = input.LA(2);
                            if ( ((LA400_6>=TIMEPERIOD_DAY && LA400_6<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA400_7 = input.LA(2);
                            if ( ((LA400_7>=TIMEPERIOD_DAY && LA400_7<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA400_8 = input.LA(2);
                            if ( ((LA400_8>=TIMEPERIOD_DAY && LA400_8<=TIMEPERIOD_DAYS)) ) {
                                alt400=1;
                            }
                            }
                            break;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod14661);
                            dayPart1056=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart1056.getTree());
                            }
                            break;
                    }
                    int alt401=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA401_26 = input.LA(3);
                                    if ( ((LA401_26>=TIMEPERIOD_HOUR && LA401_26<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA401_27 = input.LA(3);
                                    if ( ((LA401_27>=TIMEPERIOD_HOUR && LA401_27<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA401_28 = input.LA(3);
                                    if ( ((LA401_28>=TIMEPERIOD_HOUR && LA401_28<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA401_29 = input.LA(3);
                                    if ( ((LA401_29>=TIMEPERIOD_HOUR && LA401_29<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA401_30 = input.LA(3);
                                    if ( ((LA401_30>=TIMEPERIOD_HOUR && LA401_30<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA401_31 = input.LA(3);
                                    if ( ((LA401_31>=TIMEPERIOD_HOUR && LA401_31<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA401_32 = input.LA(3);
                                    if ( ((LA401_32>=TIMEPERIOD_HOUR && LA401_32<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA401_33 = input.LA(3);
                                    if ( ((LA401_33>=TIMEPERIOD_HOUR && LA401_33<=TIMEPERIOD_HOURS)) ) {
                                        alt401=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA401_3 = input.LA(2);
                            if ( ((LA401_3>=TIMEPERIOD_HOUR && LA401_3<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA401_4 = input.LA(2);
                            if ( ((LA401_4>=TIMEPERIOD_HOUR && LA401_4<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA401_5 = input.LA(2);
                            if ( ((LA401_5>=TIMEPERIOD_HOUR && LA401_5<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA401_6 = input.LA(2);
                            if ( ((LA401_6>=TIMEPERIOD_HOUR && LA401_6<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA401_7 = input.LA(2);
                            if ( ((LA401_7>=TIMEPERIOD_HOUR && LA401_7<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA401_8 = input.LA(2);
                            if ( ((LA401_8>=TIMEPERIOD_HOUR && LA401_8<=TIMEPERIOD_HOURS)) ) {
                                alt401=1;
                            }
                            }
                            break;
                    }
                    switch (alt401) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14664);
                            hourPart1057=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1057.getTree());
                            }
                            break;
                    }
                    int alt402=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_26 = input.LA(3);
                                    if ( (LA402_26==MIN||(LA402_26>=TIMEPERIOD_MINUTE && LA402_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_27 = input.LA(3);
                                    if ( (LA402_27==MIN||(LA402_27>=TIMEPERIOD_MINUTE && LA402_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_28 = input.LA(3);
                                    if ( (LA402_28==MIN||(LA402_28>=TIMEPERIOD_MINUTE && LA402_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_29 = input.LA(3);
                                    if ( (LA402_29==MIN||(LA402_29>=TIMEPERIOD_MINUTE && LA402_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA402_30 = input.LA(3);
                                    if ( (LA402_30==MIN||(LA402_30>=TIMEPERIOD_MINUTE && LA402_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA402_31 = input.LA(3);
                                    if ( (LA402_31==MIN||(LA402_31>=TIMEPERIOD_MINUTE && LA402_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA402_32 = input.LA(3);
                                    if ( (LA402_32==MIN||(LA402_32>=TIMEPERIOD_MINUTE && LA402_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA402_33 = input.LA(3);
                                    if ( (LA402_33==MIN||(LA402_33>=TIMEPERIOD_MINUTE && LA402_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt402=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA402_3 = input.LA(2);
                            if ( (LA402_3==MIN||(LA402_3>=TIMEPERIOD_MINUTE && LA402_3<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA402_4 = input.LA(2);
                            if ( (LA402_4==MIN||(LA402_4>=TIMEPERIOD_MINUTE && LA402_4<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA402_5 = input.LA(2);
                            if ( (LA402_5==MIN||(LA402_5>=TIMEPERIOD_MINUTE && LA402_5<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA402_6 = input.LA(2);
                            if ( (LA402_6==MIN||(LA402_6>=TIMEPERIOD_MINUTE && LA402_6<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA402_7 = input.LA(2);
                            if ( (LA402_7==MIN||(LA402_7>=TIMEPERIOD_MINUTE && LA402_7<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA402_8 = input.LA(2);
                            if ( (LA402_8==MIN||(LA402_8>=TIMEPERIOD_MINUTE && LA402_8<=TIMEPERIOD_MINUTES)) ) {
                                alt402=1;
                            }
                            }
                            break;
                    }
                    switch (alt402) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14667);
                            minutePart1058=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1058.getTree());
                            }
                            break;
                    }
                    int alt403=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_26 = input.LA(3);
                                    if ( ((LA403_26>=TIMEPERIOD_SEC && LA403_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_27 = input.LA(3);
                                    if ( ((LA403_27>=TIMEPERIOD_SEC && LA403_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_28 = input.LA(3);
                                    if ( ((LA403_28>=TIMEPERIOD_SEC && LA403_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_29 = input.LA(3);
                                    if ( ((LA403_29>=TIMEPERIOD_SEC && LA403_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA403_30 = input.LA(3);
                                    if ( ((LA403_30>=TIMEPERIOD_SEC && LA403_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA403_31 = input.LA(3);
                                    if ( ((LA403_31>=TIMEPERIOD_SEC && LA403_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA403_32 = input.LA(3);
                                    if ( ((LA403_32>=TIMEPERIOD_SEC && LA403_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA403_33 = input.LA(3);
                                    if ( ((LA403_33>=TIMEPERIOD_SEC && LA403_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt403=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA403_3 = input.LA(2);
                            if ( ((LA403_3>=TIMEPERIOD_SEC && LA403_3<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA403_4 = input.LA(2);
                            if ( ((LA403_4>=TIMEPERIOD_SEC && LA403_4<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA403_5 = input.LA(2);
                            if ( ((LA403_5>=TIMEPERIOD_SEC && LA403_5<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA403_6 = input.LA(2);
                            if ( ((LA403_6>=TIMEPERIOD_SEC && LA403_6<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA403_7 = input.LA(2);
                            if ( ((LA403_7>=TIMEPERIOD_SEC && LA403_7<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA403_8 = input.LA(2);
                            if ( ((LA403_8>=TIMEPERIOD_SEC && LA403_8<=TIMEPERIOD_SECONDS)) ) {
                                alt403=1;
                            }
                            }
                            break;
                    }
                    switch (alt403) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14670);
                            secondPart1059=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1059.getTree());
                            }
                            break;
                    }
                    int alt404=2;
                    int LA404_0 = input.LA(1);
                    if ( (LA404_0==NUM_DOUBLE||LA404_0==IDENT||LA404_0==QUESTION||LA404_0==PLUS||LA404_0==MINUS||LA404_0==NUM_INT||(LA404_0>=NUM_LONG && LA404_0<=NUM_FLOAT)) ) {
                        alt404=1;
                    }
                    switch (alt404) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14673);
                            millisecondPart1060=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1060.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod14679);
                    dayPart1061=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart1061.getTree());
                    int alt405=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_26 = input.LA(3);
                                    if ( ((LA405_26>=TIMEPERIOD_HOUR && LA405_26<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_27 = input.LA(3);
                                    if ( ((LA405_27>=TIMEPERIOD_HOUR && LA405_27<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_28 = input.LA(3);
                                    if ( ((LA405_28>=TIMEPERIOD_HOUR && LA405_28<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_29 = input.LA(3);
                                    if ( ((LA405_29>=TIMEPERIOD_HOUR && LA405_29<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA405_30 = input.LA(3);
                                    if ( ((LA405_30>=TIMEPERIOD_HOUR && LA405_30<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA405_31 = input.LA(3);
                                    if ( ((LA405_31>=TIMEPERIOD_HOUR && LA405_31<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA405_32 = input.LA(3);
                                    if ( ((LA405_32>=TIMEPERIOD_HOUR && LA405_32<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA405_33 = input.LA(3);
                                    if ( ((LA405_33>=TIMEPERIOD_HOUR && LA405_33<=TIMEPERIOD_HOURS)) ) {
                                        alt405=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA405_3 = input.LA(2);
                            if ( ((LA405_3>=TIMEPERIOD_HOUR && LA405_3<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA405_4 = input.LA(2);
                            if ( ((LA405_4>=TIMEPERIOD_HOUR && LA405_4<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA405_5 = input.LA(2);
                            if ( ((LA405_5>=TIMEPERIOD_HOUR && LA405_5<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA405_6 = input.LA(2);
                            if ( ((LA405_6>=TIMEPERIOD_HOUR && LA405_6<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA405_7 = input.LA(2);
                            if ( ((LA405_7>=TIMEPERIOD_HOUR && LA405_7<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA405_8 = input.LA(2);
                            if ( ((LA405_8>=TIMEPERIOD_HOUR && LA405_8<=TIMEPERIOD_HOURS)) ) {
                                alt405=1;
                            }
                            }
                            break;
                    }
                    switch (alt405) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod14681);
                            hourPart1062=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart1062.getTree());
                            }
                            break;
                    }
                    int alt406=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA406_26 = input.LA(3);
                                    if ( (LA406_26==MIN||(LA406_26>=TIMEPERIOD_MINUTE && LA406_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA406_27 = input.LA(3);
                                    if ( (LA406_27==MIN||(LA406_27>=TIMEPERIOD_MINUTE && LA406_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA406_28 = input.LA(3);
                                    if ( (LA406_28==MIN||(LA406_28>=TIMEPERIOD_MINUTE && LA406_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA406_29 = input.LA(3);
                                    if ( (LA406_29==MIN||(LA406_29>=TIMEPERIOD_MINUTE && LA406_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA406_30 = input.LA(3);
                                    if ( (LA406_30==MIN||(LA406_30>=TIMEPERIOD_MINUTE && LA406_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA406_31 = input.LA(3);
                                    if ( (LA406_31==MIN||(LA406_31>=TIMEPERIOD_MINUTE && LA406_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA406_32 = input.LA(3);
                                    if ( (LA406_32==MIN||(LA406_32>=TIMEPERIOD_MINUTE && LA406_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA406_33 = input.LA(3);
                                    if ( (LA406_33==MIN||(LA406_33>=TIMEPERIOD_MINUTE && LA406_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt406=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA406_3 = input.LA(2);
                            if ( (LA406_3==MIN||(LA406_3>=TIMEPERIOD_MINUTE && LA406_3<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA406_4 = input.LA(2);
                            if ( (LA406_4==MIN||(LA406_4>=TIMEPERIOD_MINUTE && LA406_4<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA406_5 = input.LA(2);
                            if ( (LA406_5==MIN||(LA406_5>=TIMEPERIOD_MINUTE && LA406_5<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA406_6 = input.LA(2);
                            if ( (LA406_6==MIN||(LA406_6>=TIMEPERIOD_MINUTE && LA406_6<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA406_7 = input.LA(2);
                            if ( (LA406_7==MIN||(LA406_7>=TIMEPERIOD_MINUTE && LA406_7<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA406_8 = input.LA(2);
                            if ( (LA406_8==MIN||(LA406_8>=TIMEPERIOD_MINUTE && LA406_8<=TIMEPERIOD_MINUTES)) ) {
                                alt406=1;
                            }
                            }
                            break;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14684);
                            minutePart1063=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1063.getTree());
                            }
                            break;
                    }
                    int alt407=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA407_26 = input.LA(3);
                                    if ( ((LA407_26>=TIMEPERIOD_SEC && LA407_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA407_27 = input.LA(3);
                                    if ( ((LA407_27>=TIMEPERIOD_SEC && LA407_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA407_28 = input.LA(3);
                                    if ( ((LA407_28>=TIMEPERIOD_SEC && LA407_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA407_29 = input.LA(3);
                                    if ( ((LA407_29>=TIMEPERIOD_SEC && LA407_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA407_30 = input.LA(3);
                                    if ( ((LA407_30>=TIMEPERIOD_SEC && LA407_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA407_31 = input.LA(3);
                                    if ( ((LA407_31>=TIMEPERIOD_SEC && LA407_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA407_32 = input.LA(3);
                                    if ( ((LA407_32>=TIMEPERIOD_SEC && LA407_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA407_33 = input.LA(3);
                                    if ( ((LA407_33>=TIMEPERIOD_SEC && LA407_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt407=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA407_3 = input.LA(2);
                            if ( ((LA407_3>=TIMEPERIOD_SEC && LA407_3<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA407_4 = input.LA(2);
                            if ( ((LA407_4>=TIMEPERIOD_SEC && LA407_4<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA407_5 = input.LA(2);
                            if ( ((LA407_5>=TIMEPERIOD_SEC && LA407_5<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA407_6 = input.LA(2);
                            if ( ((LA407_6>=TIMEPERIOD_SEC && LA407_6<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA407_7 = input.LA(2);
                            if ( ((LA407_7>=TIMEPERIOD_SEC && LA407_7<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA407_8 = input.LA(2);
                            if ( ((LA407_8>=TIMEPERIOD_SEC && LA407_8<=TIMEPERIOD_SECONDS)) ) {
                                alt407=1;
                            }
                            }
                            break;
                    }
                    switch (alt407) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14687);
                            secondPart1064=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1064.getTree());
                            }
                            break;
                    }
                    int alt408=2;
                    int LA408_0 = input.LA(1);
                    if ( (LA408_0==NUM_DOUBLE||LA408_0==IDENT||LA408_0==QUESTION||LA408_0==PLUS||LA408_0==MINUS||LA408_0==NUM_INT||(LA408_0>=NUM_LONG && LA408_0<=NUM_FLOAT)) ) {
                        alt408=1;
                    }
                    switch (alt408) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14690);
                            millisecondPart1065=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1065.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod14696);
                    hourPart1066=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart1066.getTree());
                    int alt409=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_26 = input.LA(3);
                                    if ( (LA409_26==MIN||(LA409_26>=TIMEPERIOD_MINUTE && LA409_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_27 = input.LA(3);
                                    if ( (LA409_27==MIN||(LA409_27>=TIMEPERIOD_MINUTE && LA409_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_28 = input.LA(3);
                                    if ( (LA409_28==MIN||(LA409_28>=TIMEPERIOD_MINUTE && LA409_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_29 = input.LA(3);
                                    if ( (LA409_29==MIN||(LA409_29>=TIMEPERIOD_MINUTE && LA409_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA409_30 = input.LA(3);
                                    if ( (LA409_30==MIN||(LA409_30>=TIMEPERIOD_MINUTE && LA409_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA409_31 = input.LA(3);
                                    if ( (LA409_31==MIN||(LA409_31>=TIMEPERIOD_MINUTE && LA409_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA409_32 = input.LA(3);
                                    if ( (LA409_32==MIN||(LA409_32>=TIMEPERIOD_MINUTE && LA409_32<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA409_33 = input.LA(3);
                                    if ( (LA409_33==MIN||(LA409_33>=TIMEPERIOD_MINUTE && LA409_33<=TIMEPERIOD_MINUTES)) ) {
                                        alt409=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA409_3 = input.LA(2);
                            if ( (LA409_3==MIN||(LA409_3>=TIMEPERIOD_MINUTE && LA409_3<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA409_4 = input.LA(2);
                            if ( (LA409_4==MIN||(LA409_4>=TIMEPERIOD_MINUTE && LA409_4<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA409_5 = input.LA(2);
                            if ( (LA409_5==MIN||(LA409_5>=TIMEPERIOD_MINUTE && LA409_5<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA409_6 = input.LA(2);
                            if ( (LA409_6==MIN||(LA409_6>=TIMEPERIOD_MINUTE && LA409_6<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA409_7 = input.LA(2);
                            if ( (LA409_7==MIN||(LA409_7>=TIMEPERIOD_MINUTE && LA409_7<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA409_8 = input.LA(2);
                            if ( (LA409_8==MIN||(LA409_8>=TIMEPERIOD_MINUTE && LA409_8<=TIMEPERIOD_MINUTES)) ) {
                                alt409=1;
                            }
                            }
                            break;
                    }
                    switch (alt409) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod14698);
                            minutePart1067=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart1067.getTree());
                            }
                            break;
                    }
                    int alt410=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA410_26 = input.LA(3);
                                    if ( ((LA410_26>=TIMEPERIOD_SEC && LA410_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA410_27 = input.LA(3);
                                    if ( ((LA410_27>=TIMEPERIOD_SEC && LA410_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA410_28 = input.LA(3);
                                    if ( ((LA410_28>=TIMEPERIOD_SEC && LA410_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA410_29 = input.LA(3);
                                    if ( ((LA410_29>=TIMEPERIOD_SEC && LA410_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA410_30 = input.LA(3);
                                    if ( ((LA410_30>=TIMEPERIOD_SEC && LA410_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA410_31 = input.LA(3);
                                    if ( ((LA410_31>=TIMEPERIOD_SEC && LA410_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA410_32 = input.LA(3);
                                    if ( ((LA410_32>=TIMEPERIOD_SEC && LA410_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA410_33 = input.LA(3);
                                    if ( ((LA410_33>=TIMEPERIOD_SEC && LA410_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt410=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA410_3 = input.LA(2);
                            if ( ((LA410_3>=TIMEPERIOD_SEC && LA410_3<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA410_4 = input.LA(2);
                            if ( ((LA410_4>=TIMEPERIOD_SEC && LA410_4<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA410_5 = input.LA(2);
                            if ( ((LA410_5>=TIMEPERIOD_SEC && LA410_5<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA410_6 = input.LA(2);
                            if ( ((LA410_6>=TIMEPERIOD_SEC && LA410_6<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA410_7 = input.LA(2);
                            if ( ((LA410_7>=TIMEPERIOD_SEC && LA410_7<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA410_8 = input.LA(2);
                            if ( ((LA410_8>=TIMEPERIOD_SEC && LA410_8<=TIMEPERIOD_SECONDS)) ) {
                                alt410=1;
                            }
                            }
                            break;
                    }
                    switch (alt410) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14701);
                            secondPart1068=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1068.getTree());
                            }
                            break;
                    }
                    int alt411=2;
                    int LA411_0 = input.LA(1);
                    if ( (LA411_0==NUM_DOUBLE||LA411_0==IDENT||LA411_0==QUESTION||LA411_0==PLUS||LA411_0==MINUS||LA411_0==NUM_INT||(LA411_0>=NUM_LONG && LA411_0<=NUM_FLOAT)) ) {
                        alt411=1;
                    }
                    switch (alt411) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14704);
                            millisecondPart1069=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1069.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod14710);
                    minutePart1070=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart1070.getTree());
                    int alt412=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA412_26 = input.LA(3);
                                    if ( ((LA412_26>=TIMEPERIOD_SEC && LA412_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA412_27 = input.LA(3);
                                    if ( ((LA412_27>=TIMEPERIOD_SEC && LA412_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA412_28 = input.LA(3);
                                    if ( ((LA412_28>=TIMEPERIOD_SEC && LA412_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA412_29 = input.LA(3);
                                    if ( ((LA412_29>=TIMEPERIOD_SEC && LA412_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA412_30 = input.LA(3);
                                    if ( ((LA412_30>=TIMEPERIOD_SEC && LA412_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA412_31 = input.LA(3);
                                    if ( ((LA412_31>=TIMEPERIOD_SEC && LA412_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA412_32 = input.LA(3);
                                    if ( ((LA412_32>=TIMEPERIOD_SEC && LA412_32<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA412_33 = input.LA(3);
                                    if ( ((LA412_33>=TIMEPERIOD_SEC && LA412_33<=TIMEPERIOD_SECONDS)) ) {
                                        alt412=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA412_3 = input.LA(2);
                            if ( ((LA412_3>=TIMEPERIOD_SEC && LA412_3<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA412_4 = input.LA(2);
                            if ( ((LA412_4>=TIMEPERIOD_SEC && LA412_4<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA412_5 = input.LA(2);
                            if ( ((LA412_5>=TIMEPERIOD_SEC && LA412_5<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA412_6 = input.LA(2);
                            if ( ((LA412_6>=TIMEPERIOD_SEC && LA412_6<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA412_7 = input.LA(2);
                            if ( ((LA412_7>=TIMEPERIOD_SEC && LA412_7<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA412_8 = input.LA(2);
                            if ( ((LA412_8>=TIMEPERIOD_SEC && LA412_8<=TIMEPERIOD_SECONDS)) ) {
                                alt412=1;
                            }
                            }
                            break;
                    }
                    switch (alt412) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod14712);
                            secondPart1071=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart1071.getTree());
                            }
                            break;
                    }
                    int alt413=2;
                    int LA413_0 = input.LA(1);
                    if ( (LA413_0==NUM_DOUBLE||LA413_0==IDENT||LA413_0==QUESTION||LA413_0==PLUS||LA413_0==MINUS||LA413_0==NUM_INT||(LA413_0>=NUM_LONG && LA413_0<=NUM_FLOAT)) ) {
                        alt413=1;
                    }
                    switch (alt413) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14715);
                            millisecondPart1072=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1072.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod14721);
                    secondPart1073=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart1073.getTree());
                    int alt414=2;
                    int LA414_0 = input.LA(1);
                    if ( (LA414_0==NUM_DOUBLE||LA414_0==IDENT||LA414_0==QUESTION||LA414_0==PLUS||LA414_0==MINUS||LA414_0==NUM_INT||(LA414_0>=NUM_LONG && LA414_0<=NUM_FLOAT)) ) {
                        alt414=1;
                    }
                    switch (alt414) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod14723);
                            millisecondPart1074=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1074.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod14729);
                    millisecondPart1075=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart1075.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS1078=null;
        Token TIMEPERIOD_YEAR1079=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1076 = null;
        EsperEPL2GrammarParser.substitution_return substitution1077 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS1078_tree=null;
        CommonTree TIMEPERIOD_YEAR1079_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt416=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt416=1;
                }
                break;
            case IDENT:
                {
                alt416=2;
                }
                break;
            case QUESTION:
                {
                alt416=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);
                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart14776);
                    numberconstant1076=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1076.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart14780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart14782);
                    substitution1077=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1077.getTree());
                    }
                    break;
            }
            int alt417=2;
            int LA417_0 = input.LA(1);
            if ( (LA417_0==TIMEPERIOD_YEARS) ) {
                alt417=1;
            }
            else if ( (LA417_0==TIMEPERIOD_YEAR) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);
                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS1078=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart14786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS1078);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR1079=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart14790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR1079);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS1082=null;
        Token TIMEPERIOD_MONTH1083=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1080 = null;
        EsperEPL2GrammarParser.substitution_return substitution1081 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS1082_tree=null;
        CommonTree TIMEPERIOD_MONTH1083_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt418=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt418=1;
                }
                break;
            case IDENT:
                {
                alt418=2;
                }
                break;
            case QUESTION:
                {
                alt418=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);
                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart14838);
                    numberconstant1080=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1080.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart14842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart14844);
                    substitution1081=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1081.getTree());
                    }
                    break;
            }
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==TIMEPERIOD_MONTHS) ) {
                alt419=1;
            }
            else if ( (LA419_0==TIMEPERIOD_MONTH) ) {
                alt419=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS1082=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart14848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS1082);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH1083=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart14852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH1083);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS1086=null;
        Token TIMEPERIOD_WEEK1087=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1084 = null;
        EsperEPL2GrammarParser.substitution_return substitution1085 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS1086_tree=null;
        CommonTree TIMEPERIOD_WEEK1087_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt420=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt420=1;
                }
                break;
            case IDENT:
                {
                alt420=2;
                }
                break;
            case QUESTION:
                {
                alt420=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);
                throw nvae;
            }
            switch (alt420) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart14900);
                    numberconstant1084=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1084.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart14904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart14906);
                    substitution1085=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1085.getTree());
                    }
                    break;
            }
            int alt421=2;
            int LA421_0 = input.LA(1);
            if ( (LA421_0==TIMEPERIOD_WEEKS) ) {
                alt421=1;
            }
            else if ( (LA421_0==TIMEPERIOD_WEEK) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);
                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS1086=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart14910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS1086);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK1087=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart14914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK1087);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS1090=null;
        Token TIMEPERIOD_DAY1091=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1088 = null;
        EsperEPL2GrammarParser.substitution_return substitution1089 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS1090_tree=null;
        CommonTree TIMEPERIOD_DAY1091_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt422=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt422=1;
                }
                break;
            case IDENT:
                {
                alt422=2;
                }
                break;
            case QUESTION:
                {
                alt422=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);
                throw nvae;
            }
            switch (alt422) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart14962);
                    numberconstant1088=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1088.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart14966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart14968);
                    substitution1089=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1089.getTree());
                    }
                    break;
            }
            int alt423=2;
            int LA423_0 = input.LA(1);
            if ( (LA423_0==TIMEPERIOD_DAYS) ) {
                alt423=1;
            }
            else if ( (LA423_0==TIMEPERIOD_DAY) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS1090=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart14972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS1090);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY1091=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart14976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY1091);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS1094=null;
        Token TIMEPERIOD_HOUR1095=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1092 = null;
        EsperEPL2GrammarParser.substitution_return substitution1093 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS1094_tree=null;
        CommonTree TIMEPERIOD_HOUR1095_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt424=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt424=1;
                }
                break;
            case IDENT:
                {
                alt424=2;
                }
                break;
            case QUESTION:
                {
                alt424=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart15025);
                    numberconstant1092=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1092.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart15029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart15031);
                    substitution1093=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1093.getTree());
                    }
                    break;
            }
            int alt425=2;
            int LA425_0 = input.LA(1);
            if ( (LA425_0==TIMEPERIOD_HOURS) ) {
                alt425=1;
            }
            else if ( (LA425_0==TIMEPERIOD_HOUR) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS1094=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart15035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS1094);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR1095=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart15039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR1095);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES1098=null;
        Token TIMEPERIOD_MINUTE1099=null;
        Token MIN1100=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1096 = null;
        EsperEPL2GrammarParser.substitution_return substitution1097 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES1098_tree=null;
        CommonTree TIMEPERIOD_MINUTE1099_tree=null;
        CommonTree MIN1100_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt426=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt426=1;
                }
                break;
            case IDENT:
                {
                alt426=2;
                }
                break;
            case QUESTION:
                {
                alt426=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart15088);
                    numberconstant1096=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1096.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart15092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart15094);
                    substitution1097=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1097.getTree());
                    }
                    break;
            }
            int alt427=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt427=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt427=2;
                }
                break;
            case MIN:
                {
                alt427=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES1098=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart15098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES1098);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE1099=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart15102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE1099);
                    }
                    break;
                case 3 :
                    {
                    MIN1100=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart15106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN1100);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS1103=null;
        Token TIMEPERIOD_SECOND1104=null;
        Token TIMEPERIOD_SEC1105=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1101 = null;
        EsperEPL2GrammarParser.substitution_return substitution1102 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS1103_tree=null;
        CommonTree TIMEPERIOD_SECOND1104_tree=null;
        CommonTree TIMEPERIOD_SEC1105_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt428=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt428=1;
                }
                break;
            case IDENT:
                {
                alt428=2;
                }
                break;
            case QUESTION:
                {
                alt428=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart15156);
                    numberconstant1101=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1101.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart15160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart15162);
                    substitution1102=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1102.getTree());
                    }
                    break;
            }
            int alt429=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt429=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt429=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt429=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS1103=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart15166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS1103);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND1104=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart15170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND1104);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC1105=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart15174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC1105);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS1108=null;
        Token TIMEPERIOD_MILLISECOND1109=null;
        Token TIMEPERIOD_MILLISEC1110=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1106 = null;
        EsperEPL2GrammarParser.substitution_return substitution1107 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS1108_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND1109_tree=null;
        CommonTree TIMEPERIOD_MILLISEC1110_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt430=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt430=1;
                }
                break;
            case IDENT:
                {
                alt430=2;
                }
                break;
            case QUESTION:
                {
                alt430=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);
                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart15224);
                    numberconstant1106=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant1106.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart15228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart15230);
                    substitution1107=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution1107.getTree());
                    }
                    break;
            }
            int alt431=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt431=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt431=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt431=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);
                throw nvae;
            }
            switch (alt431) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS1108=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart15234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS1108);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND1109=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart15238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND1109);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC1110=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart15242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC1110);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt432=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt432=1;
                }
                break;
            case NUM_LONG:
                {
                alt432=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt432=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt432=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);
                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number15297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number15314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number15331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number15348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution15369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant1111 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1112 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt433=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt433=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt433=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt433=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt433=4;
                }
                break;
            case VALUE_NULL:
                {
                alt433=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);
                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant15388);
                    numberconstant1111=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant1111.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant15395);
                    stringconstant1112=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant1112.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant15408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant15428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant15448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number1113 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt434=3;
            int LA434_0 = input.LA(1);
            if ( (LA434_0==MINUS) ) {
                alt434=1;
            }
            else if ( (LA434_0==PLUS) ) {
                alt434=2;
            }
            switch (alt434) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant15470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant15476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant15480);
            number1113=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number1113.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number1113!=null?((CommonTree)number1113.tree):null).getType(), "-" + (number1113!=null?input.toString(number1113.start,number1113.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt435=2;
            int LA435_0 = input.LA(1);
            if ( (LA435_0==STRING_LITERAL) ) {
                alt435=1;
            }
            else if ( (LA435_0==QUOTED_STRING_LITERAL) ) {
                alt435=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 435, 0, input);
                throw nvae;
            }
            switch (alt435) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant15509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant15525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonvalue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonvalue_return jsonvalue() throws RecognitionException {
        EsperEPL2GrammarParser.jsonvalue_return retval = new EsperEPL2GrammarParser.jsonvalue_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.constant_return constant1114 = null;
        EsperEPL2GrammarParser.jsonobject_return jsonobject1115 = null;
        EsperEPL2GrammarParser.jsonarray_return jsonarray1116 = null;
        try {
            int alt436=3;
            switch ( input.LA(1) ) {
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt436=1;
                }
                break;
            case LCURLY:
                {
                alt436=2;
                }
                break;
            case LBRACK:
                {
                alt436=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 436, 0, input);
                throw nvae;
            }
            switch (alt436) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_jsonvalue15546);
                    constant1114=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant1114.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonobject_in_jsonvalue15551);
                    jsonobject1115=jsonobject();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonobject1115.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_jsonarray_in_jsonvalue15556);
                    jsonarray1116=jsonarray();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonarray1116.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonobject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonobject_return jsonobject() throws RecognitionException {
        EsperEPL2GrammarParser.jsonobject_return retval = new EsperEPL2GrammarParser.jsonobject_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY1117=null;
        Token RCURLY1119=null;
        EsperEPL2GrammarParser.jsonmembers_return jsonmembers1118 = null;
        CommonTree LCURLY1117_tree=null;
        CommonTree RCURLY1119_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_jsonmembers=new RewriteRuleSubtreeStream(adaptor,"rule jsonmembers");
        try {
            {
            LCURLY1117=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_jsonobject15567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY1117);
            pushFollow(FOLLOW_jsonmembers_in_jsonobject15569);
            jsonmembers1118=jsonmembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonmembers.add(jsonmembers1118.getTree());
            RCURLY1119=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_jsonobject15571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY1119);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_OBJECT, "JSON_OBJECT"), root_1);
                adaptor.addChild(root_1, stream_jsonmembers.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonarray_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonarray_return jsonarray() throws RecognitionException {
        EsperEPL2GrammarParser.jsonarray_return retval = new EsperEPL2GrammarParser.jsonarray_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK1120=null;
        Token RBRACK1122=null;
        EsperEPL2GrammarParser.jsonelements_return jsonelements1121 = null;
        CommonTree LBRACK1120_tree=null;
        CommonTree RBRACK1122_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_jsonelements=new RewriteRuleSubtreeStream(adaptor,"rule jsonelements");
        try {
            {
            LBRACK1120=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_jsonarray15603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK1120);
            int alt437=2;
            int LA437_0 = input.LA(1);
            if ( ((LA437_0>=BOOLEAN_TRUE && LA437_0<=VALUE_NULL)||LA437_0==NUM_DOUBLE||LA437_0==LBRACK||LA437_0==LCURLY||(LA437_0>=PLUS && LA437_0<=QUOTED_STRING_LITERAL)||LA437_0==MINUS||LA437_0==NUM_INT||(LA437_0>=NUM_LONG && LA437_0<=NUM_FLOAT)) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    {
                    pushFollow(FOLLOW_jsonelements_in_jsonarray15605);
                    jsonelements1121=jsonelements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_jsonelements.add(jsonelements1121.getTree());
                    }
                    break;
            }
            RBRACK1122=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_jsonarray15608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK1122);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_ARRAY, "JSON_ARRAY"), root_1);
                if ( stream_jsonelements.hasNext() ) {
                    adaptor.addChild(root_1, stream_jsonelements.nextTree());
                }
                stream_jsonelements.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonelements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonelements_return jsonelements() throws RecognitionException {
        EsperEPL2GrammarParser.jsonelements_return retval = new EsperEPL2GrammarParser.jsonelements_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1124=null;
        Token COMMA1126=null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1123 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1125 = null;
        CommonTree COMMA1124_tree=null;
        CommonTree COMMA1126_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonvalue_in_jsonelements15631);
            jsonvalue1123=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1123.getTree());
            loop438:
            do {
                int alt438=2;
                int LA438_0 = input.LA(1);
                if ( (LA438_0==COMMA) ) {
                    int LA438_1 = input.LA(2);
                    if ( ((LA438_1>=BOOLEAN_TRUE && LA438_1<=VALUE_NULL)||LA438_1==NUM_DOUBLE||LA438_1==LBRACK||LA438_1==LCURLY||(LA438_1>=PLUS && LA438_1<=QUOTED_STRING_LITERAL)||LA438_1==MINUS||LA438_1==NUM_INT||(LA438_1>=NUM_LONG && LA438_1<=NUM_FLOAT)) ) {
                        alt438=1;
                    }
                }
                switch (alt438) {
            	case 1 :
            	    {
            	    COMMA1124=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15634); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonvalue_in_jsonelements15637);
            	    jsonvalue1125=jsonvalue();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonvalue1125.getTree());
            	    }
            	    break;
            	default :
            	    break loop438;
                }
            } while (true);
            int alt439=2;
            int LA439_0 = input.LA(1);
            if ( (LA439_0==COMMA) ) {
                alt439=1;
            }
            switch (alt439) {
                case 1 :
                    {
                    COMMA1126=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonelements15642); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonmembers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonmembers_return jsonmembers() throws RecognitionException {
        EsperEPL2GrammarParser.jsonmembers_return retval = new EsperEPL2GrammarParser.jsonmembers_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA1128=null;
        Token COMMA1130=null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1127 = null;
        EsperEPL2GrammarParser.jsonpair_return jsonpair1129 = null;
        CommonTree COMMA1128_tree=null;
        CommonTree COMMA1130_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_jsonpair_in_jsonmembers15658);
            jsonpair1127=jsonpair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1127.getTree());
            loop440:
            do {
                int alt440=2;
                int LA440_0 = input.LA(1);
                if ( (LA440_0==COMMA) ) {
                    int LA440_1 = input.LA(2);
                    if ( (LA440_1==WINDOW||LA440_1==ESCAPE||LA440_1==EVERY_EXPR||(LA440_1>=SUM && LA440_1<=COUNT)||LA440_1==OUTER||(LA440_1>=JOIN && LA440_1<=FULL)||(LA440_1>=EVENTS && LA440_1<=LAST)||(LA440_1>=UNIDIRECTIONAL && LA440_1<=PREVIOUSTAIL)||LA440_1==PRIOR||(LA440_1>=WEEKDAY && LA440_1<=CAST)||LA440_1==SNAPSHOT||(LA440_1>=VARIABLE && LA440_1<=INDEX)||(LA440_1>=DEFINE && LA440_1<=MATCHES)||(LA440_1>=FOR && LA440_1<=MATCHED)||LA440_1==CONTEXT||LA440_1==IDENT||(LA440_1>=STRING_LITERAL && LA440_1<=QUOTED_STRING_LITERAL)||LA440_1==TICKED_STRING_LITERAL) ) {
                        alt440=1;
                    }
                }
                switch (alt440) {
            	case 1 :
            	    {
            	    COMMA1128=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15661); if (state.failed) return retval;
            	    pushFollow(FOLLOW_jsonpair_in_jsonmembers15664);
            	    jsonpair1129=jsonpair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jsonpair1129.getTree());
            	    }
            	    break;
            	default :
            	    break loop440;
                }
            } while (true);
            int alt441=2;
            int LA441_0 = input.LA(1);
            if ( (LA441_0==COMMA) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    {
                    COMMA1130=(Token)match(input,COMMA,FOLLOW_COMMA_in_jsonmembers15669); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class jsonpair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.jsonpair_return jsonpair() throws RecognitionException {
        EsperEPL2GrammarParser.jsonpair_return retval = new EsperEPL2GrammarParser.jsonpair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COLON1133=null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant1131 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent1132 = null;
        EsperEPL2GrammarParser.jsonvalue_return jsonvalue1134 = null;
        CommonTree COLON1133_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_jsonvalue=new RewriteRuleSubtreeStream(adaptor,"rule jsonvalue");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            int alt442=2;
            int LA442_0 = input.LA(1);
            if ( ((LA442_0>=STRING_LITERAL && LA442_0<=QUOTED_STRING_LITERAL)) ) {
                alt442=1;
            }
            else if ( (LA442_0==WINDOW||LA442_0==ESCAPE||LA442_0==EVERY_EXPR||(LA442_0>=SUM && LA442_0<=COUNT)||LA442_0==OUTER||(LA442_0>=JOIN && LA442_0<=FULL)||(LA442_0>=EVENTS && LA442_0<=LAST)||(LA442_0>=UNIDIRECTIONAL && LA442_0<=PREVIOUSTAIL)||LA442_0==PRIOR||(LA442_0>=WEEKDAY && LA442_0<=CAST)||LA442_0==SNAPSHOT||(LA442_0>=VARIABLE && LA442_0<=INDEX)||(LA442_0>=DEFINE && LA442_0<=MATCHES)||(LA442_0>=FOR && LA442_0<=MATCHED)||LA442_0==CONTEXT||LA442_0==IDENT||LA442_0==TICKED_STRING_LITERAL) ) {
                alt442=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);
                throw nvae;
            }
            switch (alt442) {
                case 1 :
                    {
                    pushFollow(FOLLOW_stringconstant_in_jsonpair15686);
                    stringconstant1131=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant1131.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_keywordAllowedIdent_in_jsonpair15690);
                    keywordAllowedIdent1132=keywordAllowedIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(keywordAllowedIdent1132.getTree());
                    }
                    break;
            }
            COLON1133=(Token)match(input,COLON,FOLLOW_COLON_in_jsonpair15693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON1133);
            pushFollow(FOLLOW_jsonvalue_in_jsonpair15695);
            jsonvalue1134=jsonvalue();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jsonvalue.add(jsonvalue1134.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(JSON_FIELD, "JSON_FIELD"), root_1);
                if ( stream_stringconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                }
                stream_stringconstant.reset();
                if ( stream_keywordAllowedIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_keywordAllowedIdent.nextTree());
                }
                stream_keywordAllowedIdent.reset();
                adaptor.addChild(root_1, stream_jsonvalue.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar6468);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar7867);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar9876);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar11273);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar11335);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar12798);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar13279);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar13290);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar13301);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar13312);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar13324);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar13335);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar13346);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar13359);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar13384);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA261 dfa261 = new DFA261(this);
    protected DFA315 dfa315 = new DFA315(this);
    static final String DFA261_eotS =
        "\u0c66\uffff";
    static final String DFA261_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0c31\uffff";
    static final String DFA261_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\21\uffff\1\u0146\u0087\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74\uffff"+
        "\1\5\74\uffff\1\u0157\74\uffff\1\5\74\uffff\1\5\74\uffff\1\5\74"+
        "\uffff\1\5\74\uffff\1\5\2\6\115\uffff\2\6\114\uffff\2\6\114\uffff"+
        "\2\6\112\uffff\2\6\114\uffff\2\6\114\uffff\2\6\114\uffff\2\6\114"+
        "\uffff\2\6\114\uffff\2\6\112\uffff\2\6\115\uffff\2\6\112\uffff\2"+
        "\6\112\uffff\2\6\112\uffff\2\6\u0093\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\115\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\114\uffff\1\0\5\uffff\1\0\141\uffff"+
        "\1\0\30\uffff\1\0\5\uffff";
    static final String DFA261_maxS =
        "\2\u0169\13\uffff\1\u0169\3\uffff\1\u0166\2\uffff\2\u0166\2\uffff"+
        "\4\u0166\1\uffff\2\u0166\12\uffff\3\u0166\2\uffff\3\u0166\3\uffff"+
        "\1\u0166\21\uffff\1\u0146\u0087\uffff\1\u0169\74\uffff\1\u0169\74"+
        "\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0163\74\uffff\1\u0169\74\uffff\1\u0169"+
        "\74\uffff\1\u0169\74\uffff\1\u0169\74\uffff\1\u0167\2\u0162\115"+
        "\uffff\2\u0162\114\uffff\2\u0162\114\uffff\2\u0162\112\uffff\2\u0162"+
        "\114\uffff\2\u0162\114\uffff\2\u0162\114\uffff\2\u0162\114\uffff"+
        "\2\u0162\114\uffff\2\u0162\112\uffff\2\u0162\115\uffff\2\u0162\112"+
        "\uffff\2\u0162\112\uffff\2\u0162\112\uffff\2\u0162\u0093\uffff\1"+
        "\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1"+
        "\0\115\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\114\uffff"+
        "\1\0\5\uffff\1\0\141\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA261_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\65\uffff\2\6\1\uffff\2\6"+
        "\1\7\1\12\4\uffff\1\1\61\uffff\1\10\1\4\u041e\uffff\115\6\2\uffff"+
        "\114\6\2\uffff\114\6\2\uffff\112\6\2\uffff\114\6\2\uffff\114\6\2"+
        "\uffff\114\6\2\uffff\114\6\2\uffff\114\6\2\uffff\112\6\2\uffff\113"+
        "\6\4\uffff\112\6\2\uffff\112\6\2\uffff\112\6\2\uffff\114\6\1\11"+
        "\106\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff"+
        "\55\6\1\uffff\36\6\1\uffff\31\6\1\uffff\24\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\5\6\1\uffff\55\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\36\6\1\uffff\31\6\1\uffff\23\6\1\uffff"+
        "\5\6\1\uffff\62\6\1\uffff\32\6\1\uffff\23\6\1\uffff\30\6\1\uffff"+
        "\5\6";
    static final String DFA261_specialS =
        "\1\0\u00cd\uffff\1\1\74\uffff\1\2\74\uffff\1\3\74\uffff\1\4\74"+
        "\uffff\1\5\74\uffff\1\6\74\uffff\1\7\74\uffff\1\10\74\uffff\1\11"+
        "\74\uffff\1\12\74\uffff\1\13\74\uffff\1\14\74\uffff\1\15\74\uffff"+
        "\1\16\74\uffff\1\17\74\uffff\1\20\74\uffff\1\21\1\22\1\23\115\uffff"+
        "\1\24\1\25\114\uffff\1\26\1\27\114\uffff\1\30\1\31\112\uffff\1\32"+
        "\1\33\114\uffff\1\34\1\35\114\uffff\1\36\1\37\114\uffff\1\40\1\41"+
        "\114\uffff\1\42\1\43\114\uffff\1\44\1\45\112\uffff\1\46\1\47\115"+
        "\uffff\1\50\1\51\112\uffff\1\52\1\53\112\uffff\1\54\1\55\112\uffff"+
        "\1\56\1\57\u0093\uffff\1\60\31\uffff\1\61\31\uffff\1\62\31\uffff"+
        "\1\63\5\uffff\1\64\55\uffff\1\65\115\uffff\1\66\31\uffff\1\67\31"+
        "\uffff\1\70\31\uffff\1\71\31\uffff\1\72\31\uffff\1\73\31\uffff\1"+
        "\74\5\uffff\1\75\55\uffff\1\76\31\uffff\1\77\31\uffff\1\100\31\uffff"+
        "\1\101\31\uffff\1\102\31\uffff\1\103\114\uffff\1\104\5\uffff\1\105"+
        "\141\uffff\1\106\30\uffff\1\107\5\uffff}>";
    static final short[] DFA261_eot = DFA.unpackEncodedString(DFA261_eotS);
    static final short[] DFA261_eof = DFA.unpackEncodedString(DFA261_eofS);
    static final char[] DFA261_min = DFA.unpackEncodedStringToUnsignedChars(DFA261_minS);
    static final char[] DFA261_max = DFA.unpackEncodedStringToUnsignedChars(DFA261_maxS);
    static final short[] DFA261_accept = DFA.unpackEncodedString(DFA261_acceptS);
    static final short[] DFA261_special = DFA.unpackEncodedString(DFA261_specialS);
    static final short[][] DFA261_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA261_transitionS.length;
        DFA261_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA261_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA261_transitionS[i]);
        }
    }
    class DFA261 extends DFA {
        public DFA261(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 261;
            this.eot = DFA261_eot;
            this.eof = DFA261_eof;
            this.min = DFA261_min;
            this.max = DFA261_max;
            this.accept = DFA261_accept;
            this.special = DFA261_special;
            this.transition = DFA261_transition;
        }
        public String getDescription() {
            return "1546:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 261, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA261_0 = input.LA(1);
                        int index261_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_0==MINUS) ) {s = 1;}
                        else if ( ((LA261_0>=BOOLEAN_TRUE && LA261_0<=VALUE_NULL)||LA261_0==NUM_DOUBLE||(LA261_0>=PLUS && LA261_0<=QUOTED_STRING_LITERAL)||LA261_0==NUM_INT||(LA261_0>=NUM_LONG && LA261_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA261_0==QUESTION) ) {s = 12;}
                        else if ( (LA261_0==LPAREN) ) {s = 13;}
                        else if ( (LA261_0==BETWEEN||LA261_0==ESCAPE||LA261_0==EVERY_EXPR||LA261_0==WHERE||(LA261_0>=MAX && LA261_0<=MIN)||LA261_0==OUTER||(LA261_0>=JOIN && LA261_0<=FULL)||LA261_0==EVENTS||(LA261_0>=UNIDIRECTIONAL && LA261_0<=METADATASQL)||(LA261_0>=WEEKDAY && LA261_0<=LW)||(LA261_0>=SNAPSHOT && LA261_0<=INDEX)||(LA261_0>=DEFINE && LA261_0<=MATCHED)||LA261_0==CONTEXT||LA261_0==IDENT||LA261_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA261_0==COUNT) ) {s = 17;}
                        else if ( (LA261_0==SUM) ) {s = 20;}
                        else if ( (LA261_0==AVG) ) {s = 21;}
                        else if ( (LA261_0==COALESCE) ) {s = 24;}
                        else if ( (LA261_0==MEDIAN) ) {s = 25;}
                        else if ( (LA261_0==STDDEV) ) {s = 26;}
                        else if ( (LA261_0==AVEDEV) ) {s = 27;}
                        else if ( (LA261_0==FIRST) ) {s = 29;}
                        else if ( (LA261_0==LAST) ) {s = 30;}
                        else if ( (LA261_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA261_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA261_0==PRIOR) ) {s = 43;}
                        else if ( (LA261_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA261_0==TYPEOF) ) {s = 47;}
                        else if ( (LA261_0==CAST) ) {s = 48;}
                        else if ( (LA261_0==WINDOW) ) {s = 52;}
                        else if ( (LA261_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA261_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA261_0==EXISTS) ) {s = 70;}
                        else if ( (LA261_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA261_0==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA261_0==LCURLY) ) {s = 73;}
                        else if ( (LA261_0==NEWKW) ) {s = 74;}
                        input.seek(index261_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA261_206 = input.LA(1);
                        int index261_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_206==STRING_LITERAL) ) {s = 1183;}
                        else if ( (LA261_206==QUOTED_STRING_LITERAL) ) {s = 1184;}
                        else if ( (LA261_206==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA261_206==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA261_206==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA261_206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA261_206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA261_206==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA261_206==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA261_206==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA261_206==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA261_206==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA261_206==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA261_206==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA261_206==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA261_206==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA261_206==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA261_206==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA261_206==AT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA261_206==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA261_206==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA261_206==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA261_206==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA261_206==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA261_206==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA261_206==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA261_206==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA261_206==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA261_206==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA261_206==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA261_206==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA261_206==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA261_206==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA261_206==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA261_206==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA261_206==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA261_206==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA261_206==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA261_206==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA261_206==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA261_206==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA261_206==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA261_206==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA261_206==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA261_206==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA261_206==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA261_206==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA261_206==LW) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA261_206==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA261_206==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA261_206==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA261_206==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA261_206==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA261_206==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA261_206==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA261_206==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA261_206==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA261_206==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA261_206==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA261_206==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA261_206==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA261_206==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA261_206==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA261_206==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA261_206==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA261_206==USING) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA261_206==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA261_206==SET) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA261_206==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA261_206==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA261_206==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA261_206==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA261_206==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA261_206==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA261_206==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA261_206==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA261_206==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA261_206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA261_206==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        input.seek(index261_206);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA261_267 = input.LA(1);
                        int index261_267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_267==STRING_LITERAL) ) {s = 1262;}
                        else if ( (LA261_267==QUOTED_STRING_LITERAL) ) {s = 1263;}
                        else if ( (LA261_267==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA261_267==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA261_267==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA261_267==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA261_267==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA261_267==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA261_267==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA261_267==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA261_267==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA261_267==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA261_267==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA261_267==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA261_267==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA261_267==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA261_267==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA261_267==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA261_267==AT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA261_267==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA261_267==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA261_267==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA261_267==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA261_267==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA261_267==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA261_267==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA261_267==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA261_267==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA261_267==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA261_267==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA261_267==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA261_267==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA261_267==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA261_267==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA261_267==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA261_267==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA261_267==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA261_267==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA261_267==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA261_267==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA261_267==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA261_267==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA261_267==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA261_267==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA261_267==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA261_267==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA261_267==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA261_267==LW) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA261_267==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA261_267==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA261_267==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA261_267==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA261_267==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA261_267==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA261_267==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA261_267==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA261_267==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA261_267==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA261_267==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA261_267==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA261_267==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA261_267==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA261_267==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA261_267==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA261_267==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA261_267==USING) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA261_267==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA261_267==SET) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA261_267==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA261_267==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA261_267==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA261_267==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA261_267==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA261_267==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA261_267==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA261_267==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA261_267==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA261_267==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        input.seek(index261_267);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA261_328 = input.LA(1);
                        int index261_328 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_328==STRING_LITERAL) ) {s = 1340;}
                        else if ( (LA261_328==QUOTED_STRING_LITERAL) ) {s = 1341;}
                        else if ( (LA261_328==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA261_328==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA261_328==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA261_328==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA261_328==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA261_328==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA261_328==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA261_328==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA261_328==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA261_328==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA261_328==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA261_328==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA261_328==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA261_328==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA261_328==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA261_328==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA261_328==AT) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA261_328==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA261_328==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA261_328==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA261_328==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA261_328==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA261_328==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA261_328==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA261_328==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA261_328==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA261_328==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA261_328==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA261_328==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA261_328==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA261_328==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA261_328==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA261_328==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA261_328==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA261_328==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA261_328==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA261_328==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA261_328==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA261_328==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA261_328==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA261_328==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA261_328==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA261_328==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA261_328==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA261_328==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA261_328==LW) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA261_328==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA261_328==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA261_328==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA261_328==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA261_328==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA261_328==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA261_328==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA261_328==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA261_328==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA261_328==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA261_328==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA261_328==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA261_328==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA261_328==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA261_328==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA261_328==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA261_328==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA261_328==USING) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA261_328==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA261_328==SET) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA261_328==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA261_328==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA261_328==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA261_328==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA261_328==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA261_328==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA261_328==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA261_328==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA261_328==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA261_328==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        input.seek(index261_328);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA261_389 = input.LA(1);
                        int index261_389 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_389==STRING_LITERAL) ) {s = 1418;}
                        else if ( (LA261_389==QUOTED_STRING_LITERAL) ) {s = 1419;}
                        else if ( (LA261_389==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA261_389==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA261_389==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA261_389==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA261_389==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA261_389==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA261_389==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA261_389==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA261_389==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA261_389==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA261_389==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA261_389==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA261_389==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA261_389==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA261_389==AT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA261_389==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA261_389==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA261_389==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA261_389==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA261_389==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA261_389==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA261_389==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA261_389==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA261_389==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA261_389==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA261_389==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA261_389==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA261_389==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA261_389==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA261_389==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA261_389==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA261_389==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA261_389==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA261_389==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA261_389==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA261_389==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA261_389==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA261_389==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA261_389==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA261_389==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA261_389==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA261_389==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA261_389==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA261_389==LW) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA261_389==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA261_389==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA261_389==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA261_389==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA261_389==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA261_389==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA261_389==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA261_389==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA261_389==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA261_389==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA261_389==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA261_389==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA261_389==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA261_389==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA261_389==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA261_389==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA261_389==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA261_389==USING) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA261_389==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA261_389==SET) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA261_389==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA261_389==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA261_389==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA261_389==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA261_389==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA261_389==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA261_389==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA261_389==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA261_389==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA261_389==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        input.seek(index261_389);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA261_450 = input.LA(1);
                        int index261_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_450==STRING_LITERAL) ) {s = 1494;}
                        else if ( (LA261_450==QUOTED_STRING_LITERAL) ) {s = 1495;}
                        else if ( (LA261_450==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA261_450==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA261_450==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA261_450==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA261_450==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA261_450==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA261_450==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA261_450==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA261_450==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA261_450==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA261_450==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA261_450==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA261_450==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA261_450==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA261_450==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA261_450==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA261_450==AT) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA261_450==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA261_450==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA261_450==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA261_450==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA261_450==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA261_450==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA261_450==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA261_450==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA261_450==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA261_450==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA261_450==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA261_450==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA261_450==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA261_450==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA261_450==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA261_450==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA261_450==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA261_450==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA261_450==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA261_450==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA261_450==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA261_450==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA261_450==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA261_450==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA261_450==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA261_450==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA261_450==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA261_450==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA261_450==LW) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA261_450==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA261_450==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA261_450==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA261_450==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA261_450==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA261_450==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA261_450==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA261_450==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA261_450==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA261_450==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA261_450==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA261_450==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA261_450==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA261_450==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA261_450==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA261_450==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA261_450==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA261_450==USING) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA261_450==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA261_450==SET) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA261_450==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA261_450==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA261_450==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA261_450==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA261_450==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA261_450==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA261_450==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA261_450==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA261_450==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA261_450==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        input.seek(index261_450);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA261_511 = input.LA(1);
                        int index261_511 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_511==STRING_LITERAL) ) {s = 1572;}
                        else if ( (LA261_511==QUOTED_STRING_LITERAL) ) {s = 1573;}
                        else if ( (LA261_511==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA261_511==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA261_511==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA261_511==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA261_511==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA261_511==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA261_511==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA261_511==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA261_511==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA261_511==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA261_511==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA261_511==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA261_511==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA261_511==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA261_511==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA261_511==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA261_511==AT) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA261_511==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA261_511==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA261_511==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA261_511==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA261_511==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA261_511==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA261_511==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA261_511==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA261_511==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA261_511==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA261_511==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA261_511==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA261_511==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA261_511==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA261_511==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA261_511==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA261_511==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA261_511==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA261_511==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA261_511==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA261_511==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA261_511==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA261_511==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA261_511==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA261_511==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA261_511==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA261_511==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA261_511==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA261_511==LW) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA261_511==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA261_511==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA261_511==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA261_511==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA261_511==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA261_511==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA261_511==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA261_511==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA261_511==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA261_511==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA261_511==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA261_511==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA261_511==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA261_511==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA261_511==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA261_511==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA261_511==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA261_511==USING) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA261_511==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA261_511==SET) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA261_511==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA261_511==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA261_511==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA261_511==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA261_511==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA261_511==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA261_511==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA261_511==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA261_511==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA261_511==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        input.seek(index261_511);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA261_572 = input.LA(1);
                        int index261_572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_572==STRING_LITERAL) ) {s = 1650;}
                        else if ( (LA261_572==QUOTED_STRING_LITERAL) ) {s = 1651;}
                        else if ( (LA261_572==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA261_572==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA261_572==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA261_572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA261_572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA261_572==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA261_572==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA261_572==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA261_572==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA261_572==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA261_572==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA261_572==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA261_572==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA261_572==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA261_572==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA261_572==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA261_572==AT) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA261_572==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA261_572==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA261_572==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA261_572==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA261_572==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA261_572==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA261_572==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA261_572==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA261_572==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA261_572==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA261_572==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA261_572==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA261_572==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA261_572==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA261_572==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA261_572==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA261_572==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA261_572==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA261_572==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA261_572==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA261_572==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA261_572==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA261_572==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA261_572==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA261_572==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA261_572==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA261_572==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA261_572==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA261_572==LW) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA261_572==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA261_572==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA261_572==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA261_572==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA261_572==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA261_572==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA261_572==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA261_572==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA261_572==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA261_572==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA261_572==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA261_572==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA261_572==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA261_572==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA261_572==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA261_572==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA261_572==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA261_572==USING) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA261_572==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA261_572==SET) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA261_572==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA261_572==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA261_572==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA261_572==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA261_572==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA261_572==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA261_572==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA261_572==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA261_572==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA261_572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        input.seek(index261_572);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA261_633 = input.LA(1);
                        int index261_633 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_633==STRING_LITERAL) ) {s = 1728;}
                        else if ( (LA261_633==QUOTED_STRING_LITERAL) ) {s = 1729;}
                        else if ( (LA261_633==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA261_633==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA261_633==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA261_633==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA261_633==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA261_633==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA261_633==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA261_633==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA261_633==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA261_633==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA261_633==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA261_633==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA261_633==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA261_633==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA261_633==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA261_633==AT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA261_633==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA261_633==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA261_633==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA261_633==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA261_633==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA261_633==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA261_633==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA261_633==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA261_633==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA261_633==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA261_633==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA261_633==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA261_633==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA261_633==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA261_633==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA261_633==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA261_633==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA261_633==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA261_633==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA261_633==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA261_633==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA261_633==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA261_633==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA261_633==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA261_633==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA261_633==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA261_633==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA261_633==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA261_633==LW) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA261_633==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA261_633==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA261_633==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA261_633==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA261_633==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA261_633==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA261_633==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA261_633==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA261_633==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA261_633==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA261_633==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA261_633==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA261_633==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA261_633==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA261_633==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA261_633==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA261_633==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA261_633==USING) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA261_633==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA261_633==SET) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA261_633==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA261_633==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA261_633==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA261_633==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA261_633==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA261_633==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA261_633==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA261_633==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA261_633==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA261_633==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA261_633==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        input.seek(index261_633);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA261_694 = input.LA(1);
                        int index261_694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_694==STRING_LITERAL) ) {s = 1806;}
                        else if ( (LA261_694==QUOTED_STRING_LITERAL) ) {s = 1807;}
                        else if ( (LA261_694==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA261_694==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA261_694==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA261_694==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA261_694==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA261_694==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA261_694==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA261_694==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA261_694==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA261_694==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA261_694==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA261_694==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA261_694==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA261_694==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA261_694==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA261_694==AT) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA261_694==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA261_694==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA261_694==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA261_694==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA261_694==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA261_694==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA261_694==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA261_694==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA261_694==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA261_694==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA261_694==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA261_694==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA261_694==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA261_694==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA261_694==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA261_694==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA261_694==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA261_694==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA261_694==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA261_694==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA261_694==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA261_694==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA261_694==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA261_694==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA261_694==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA261_694==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA261_694==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA261_694==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA261_694==LW) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA261_694==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA261_694==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA261_694==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA261_694==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA261_694==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA261_694==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA261_694==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA261_694==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA261_694==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA261_694==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA261_694==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA261_694==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA261_694==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA261_694==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA261_694==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA261_694==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA261_694==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA261_694==USING) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA261_694==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA261_694==SET) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA261_694==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA261_694==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA261_694==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA261_694==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA261_694==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA261_694==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA261_694==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA261_694==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA261_694==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA261_694==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA261_694==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        input.seek(index261_694);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA261_755 = input.LA(1);
                        int index261_755 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_755==STRING_LITERAL) ) {s = 1884;}
                        else if ( (LA261_755==QUOTED_STRING_LITERAL) ) {s = 1885;}
                        else if ( (LA261_755==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA261_755==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA261_755==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA261_755==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA261_755==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA261_755==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA261_755==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA261_755==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA261_755==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA261_755==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA261_755==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA261_755==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA261_755==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA261_755==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA261_755==AT) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA261_755==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA261_755==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA261_755==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA261_755==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA261_755==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA261_755==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA261_755==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA261_755==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA261_755==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA261_755==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA261_755==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA261_755==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA261_755==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA261_755==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA261_755==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA261_755==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA261_755==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA261_755==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA261_755==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA261_755==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA261_755==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA261_755==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA261_755==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA261_755==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA261_755==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA261_755==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA261_755==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA261_755==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA261_755==LW) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA261_755==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA261_755==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA261_755==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA261_755==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA261_755==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA261_755==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA261_755==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA261_755==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA261_755==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA261_755==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA261_755==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA261_755==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA261_755==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA261_755==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA261_755==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA261_755==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA261_755==FOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA261_755==USING) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA261_755==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA261_755==SET) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA261_755==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA261_755==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA261_755==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA261_755==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA261_755==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA261_755==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA261_755==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA261_755==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA261_755==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA261_755==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        input.seek(index261_755);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA261_816 = input.LA(1);
                        int index261_816 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_816==STRING_LITERAL) ) {s = 1960;}
                        else if ( (LA261_816==QUOTED_STRING_LITERAL) ) {s = 1961;}
                        else if ( (LA261_816==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA261_816==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA261_816==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA261_816==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA261_816==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA261_816==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA261_816==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA261_816==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA261_816==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA261_816==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA261_816==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA261_816==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA261_816==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA261_816==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA261_816==AT) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA261_816==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA261_816==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA261_816==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA261_816==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA261_816==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA261_816==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA261_816==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA261_816==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA261_816==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA261_816==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA261_816==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA261_816==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA261_816==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA261_816==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA261_816==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA261_816==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA261_816==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA261_816==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA261_816==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA261_816==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA261_816==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA261_816==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA261_816==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA261_816==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA261_816==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA261_816==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA261_816==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA261_816==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA261_816==LW) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA261_816==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA261_816==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA261_816==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA261_816==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA261_816==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA261_816==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA261_816==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA261_816==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA261_816==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA261_816==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA261_816==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA261_816==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA261_816==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA261_816==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA261_816==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA261_816==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA261_816==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA261_816==USING) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA261_816==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA261_816==SET) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA261_816==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA261_816==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA261_816==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA261_816==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA261_816==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA261_816==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA261_816==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA261_816==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA261_816==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA261_816==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        input.seek(index261_816);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA261_877 = input.LA(1);
                        int index261_877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_877==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( ((LA261_877>=STRING_LITERAL && LA261_877<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index261_877);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA261_938 = input.LA(1);
                        int index261_938 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_938==STRING_LITERAL) ) {s = 2039;}
                        else if ( (LA261_938==QUOTED_STRING_LITERAL) ) {s = 2040;}
                        else if ( (LA261_938==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA261_938==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA261_938==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA261_938==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA261_938==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA261_938==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA261_938==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA261_938==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA261_938==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA261_938==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA261_938==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA261_938==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA261_938==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA261_938==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA261_938==AT) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA261_938==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA261_938==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA261_938==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA261_938==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA261_938==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA261_938==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA261_938==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA261_938==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA261_938==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA261_938==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA261_938==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA261_938==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA261_938==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA261_938==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA261_938==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA261_938==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA261_938==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA261_938==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA261_938==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA261_938==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA261_938==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA261_938==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA261_938==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA261_938==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA261_938==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA261_938==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA261_938==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA261_938==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA261_938==LW) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA261_938==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA261_938==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA261_938==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA261_938==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA261_938==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA261_938==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA261_938==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA261_938==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA261_938==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA261_938==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA261_938==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA261_938==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA261_938==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA261_938==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA261_938==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA261_938==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA261_938==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA261_938==USING) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA261_938==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA261_938==SET) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA261_938==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA261_938==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA261_938==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA261_938==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA261_938==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA261_938==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA261_938==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA261_938==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA261_938==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA261_938==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        input.seek(index261_938);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA261_999 = input.LA(1);
                        int index261_999 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_999==STRING_LITERAL) ) {s = 2115;}
                        else if ( (LA261_999==QUOTED_STRING_LITERAL) ) {s = 2116;}
                        else if ( (LA261_999==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA261_999==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA261_999==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA261_999==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA261_999==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA261_999==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA261_999==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA261_999==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA261_999==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA261_999==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA261_999==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA261_999==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA261_999==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA261_999==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA261_999==AT) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA261_999==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA261_999==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA261_999==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA261_999==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA261_999==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA261_999==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA261_999==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA261_999==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA261_999==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA261_999==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA261_999==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA261_999==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA261_999==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA261_999==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA261_999==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA261_999==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA261_999==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA261_999==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA261_999==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA261_999==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA261_999==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA261_999==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA261_999==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA261_999==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA261_999==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA261_999==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA261_999==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA261_999==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA261_999==LW) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA261_999==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA261_999==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA261_999==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA261_999==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA261_999==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA261_999==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA261_999==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA261_999==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA261_999==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA261_999==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA261_999==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA261_999==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA261_999==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA261_999==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA261_999==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA261_999==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA261_999==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA261_999==USING) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA261_999==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA261_999==SET) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA261_999==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA261_999==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA261_999==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA261_999==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA261_999==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA261_999==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA261_999==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA261_999==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA261_999==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA261_999==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        input.seek(index261_999);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA261_1060 = input.LA(1);
                        int index261_1060 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1060==STRING_LITERAL) ) {s = 2191;}
                        else if ( (LA261_1060==QUOTED_STRING_LITERAL) ) {s = 2192;}
                        else if ( (LA261_1060==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA261_1060==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA261_1060==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA261_1060==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA261_1060==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA261_1060==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA261_1060==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA261_1060==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA261_1060==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA261_1060==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA261_1060==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA261_1060==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA261_1060==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA261_1060==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA261_1060==AT) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA261_1060==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA261_1060==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA261_1060==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA261_1060==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA261_1060==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA261_1060==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA261_1060==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA261_1060==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA261_1060==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA261_1060==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA261_1060==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA261_1060==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA261_1060==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA261_1060==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA261_1060==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA261_1060==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA261_1060==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA261_1060==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA261_1060==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA261_1060==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA261_1060==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA261_1060==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA261_1060==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA261_1060==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA261_1060==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA261_1060==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA261_1060==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA261_1060==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA261_1060==LW) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA261_1060==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA261_1060==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA261_1060==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA261_1060==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA261_1060==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA261_1060==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA261_1060==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA261_1060==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA261_1060==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA261_1060==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA261_1060==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA261_1060==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA261_1060==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA261_1060==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA261_1060==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA261_1060==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA261_1060==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA261_1060==USING) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA261_1060==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA261_1060==SET) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA261_1060==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA261_1060==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA261_1060==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA261_1060==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA261_1060==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA261_1060==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA261_1060==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA261_1060==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA261_1060==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA261_1060==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        input.seek(index261_1060);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA261_1121 = input.LA(1);
                        int index261_1121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1121==STRING_LITERAL) ) {s = 2267;}
                        else if ( (LA261_1121==QUOTED_STRING_LITERAL) ) {s = 2268;}
                        else if ( (LA261_1121==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA261_1121==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA261_1121==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA261_1121==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA261_1121==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA261_1121==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA261_1121==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA261_1121==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA261_1121==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA261_1121==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA261_1121==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA261_1121==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA261_1121==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA261_1121==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA261_1121==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA261_1121==AT) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA261_1121==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA261_1121==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA261_1121==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA261_1121==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA261_1121==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA261_1121==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA261_1121==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA261_1121==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA261_1121==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA261_1121==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA261_1121==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA261_1121==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA261_1121==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA261_1121==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA261_1121==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA261_1121==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA261_1121==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA261_1121==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA261_1121==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA261_1121==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA261_1121==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA261_1121==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA261_1121==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA261_1121==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA261_1121==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA261_1121==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA261_1121==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA261_1121==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA261_1121==LW) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA261_1121==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA261_1121==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA261_1121==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA261_1121==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA261_1121==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA261_1121==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA261_1121==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA261_1121==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA261_1121==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA261_1121==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA261_1121==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA261_1121==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA261_1121==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA261_1121==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA261_1121==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA261_1121==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA261_1121==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA261_1121==USING) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA261_1121==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA261_1121==SET) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA261_1121==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA261_1121==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA261_1121==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA261_1121==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA261_1121==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA261_1121==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA261_1121==ISTREAM) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA261_1121==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA261_1121==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA261_1121==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA261_1121==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        input.seek(index261_1121);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA261_1182 = input.LA(1);
                        int index261_1182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1182==SELECT) ) {s = 2345;}
                        else if ( (LA261_1182==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA261_1182==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA261_1182==AT) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA261_1182==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA261_1182==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA261_1182==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA261_1182==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA261_1182==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA261_1182==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA261_1182==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA261_1182==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA261_1182==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA261_1182==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA261_1182==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA261_1182==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA261_1182==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA261_1182==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA261_1182==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA261_1182==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA261_1182==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA261_1182==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA261_1182==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA261_1182==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA261_1182==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA261_1182==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA261_1182==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA261_1182==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA261_1182==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA261_1182==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA261_1182==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA261_1182==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA261_1182==LW) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA261_1182==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA261_1182==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA261_1182==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA261_1182==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA261_1182==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA261_1182==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA261_1182==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA261_1182==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA261_1182==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA261_1182==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA261_1182==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA261_1182==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA261_1182==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA261_1182==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA261_1182==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA261_1182==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA261_1182==FOR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA261_1182==USING) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        input.seek(index261_1182);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA261_1183 = input.LA(1);
                        int index261_1183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1183==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA261_1183==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA261_1183==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA261_1183==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA261_1183==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA261_1183==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA261_1183==LT) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA261_1183==GT) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA261_1183==LE) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA261_1183==GE) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA261_1183==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA261_1183==IS) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA261_1183==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA261_1183==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA261_1183==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA261_1183==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA261_1183==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA261_1183==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA261_1183==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA261_1183==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA261_1183==RPAREN) ) {s = 2416;}
                        else if ( (LA261_1183==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA261_1183==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA261_1183==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA261_1183==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA261_1183==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        input.seek(index261_1183);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA261_1184 = input.LA(1);
                        int index261_1184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1184==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA261_1184==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA261_1184==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA261_1184==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA261_1184==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA261_1184==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA261_1184==LT) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA261_1184==GT) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA261_1184==LE) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA261_1184==GE) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA261_1184==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA261_1184==IS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA261_1184==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA261_1184==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA261_1184==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA261_1184==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA261_1184==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA261_1184==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA261_1184==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA261_1184==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA261_1184==RPAREN) ) {s = 2442;}
                        else if ( (LA261_1184==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA261_1184==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA261_1184==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA261_1184==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA261_1184==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        input.seek(index261_1184);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA261_1262 = input.LA(1);
                        int index261_1262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1262==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA261_1262==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA261_1262==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA261_1262==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA261_1262==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA261_1262==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA261_1262==LT) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA261_1262==GT) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA261_1262==LE) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA261_1262==GE) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA261_1262==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA261_1262==IS) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA261_1262==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA261_1262==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA261_1262==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA261_1262==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA261_1262==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA261_1262==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA261_1262==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA261_1262==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA261_1262==RPAREN) ) {s = 2468;}
                        else if ( (LA261_1262==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA261_1262==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA261_1262==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA261_1262==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA261_1262==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        input.seek(index261_1262);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA261_1263 = input.LA(1);
                        int index261_1263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1263==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA261_1263==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA261_1263==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA261_1263==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA261_1263==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA261_1263==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA261_1263==LT) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA261_1263==GT) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA261_1263==LE) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA261_1263==GE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA261_1263==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA261_1263==IS) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA261_1263==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA261_1263==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA261_1263==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA261_1263==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA261_1263==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA261_1263==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA261_1263==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA261_1263==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA261_1263==RPAREN) ) {s = 2494;}
                        else if ( (LA261_1263==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA261_1263==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA261_1263==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA261_1263==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA261_1263==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        input.seek(index261_1263);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA261_1340 = input.LA(1);
                        int index261_1340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1340==RPAREN) ) {s = 2500;}
                        else if ( (LA261_1340==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA261_1340==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA261_1340==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA261_1340==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA261_1340==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA261_1340==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA261_1340==LT) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA261_1340==GT) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA261_1340==LE) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA261_1340==GE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA261_1340==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA261_1340==IS) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA261_1340==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA261_1340==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA261_1340==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA261_1340==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA261_1340==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA261_1340==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA261_1340==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA261_1340==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA261_1340==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA261_1340==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA261_1340==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA261_1340==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA261_1340==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        input.seek(index261_1340);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA261_1341 = input.LA(1);
                        int index261_1341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1341==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA261_1341==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA261_1341==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA261_1341==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA261_1341==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA261_1341==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA261_1341==LT) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA261_1341==GT) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA261_1341==LE) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA261_1341==GE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA261_1341==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA261_1341==IS) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA261_1341==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA261_1341==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA261_1341==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA261_1341==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA261_1341==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA261_1341==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA261_1341==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA261_1341==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA261_1341==RPAREN) ) {s = 2546;}
                        else if ( (LA261_1341==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA261_1341==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA261_1341==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA261_1341==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA261_1341==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        input.seek(index261_1341);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA261_1418 = input.LA(1);
                        int index261_1418 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1418==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA261_1418==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA261_1418==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA261_1418==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA261_1418==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA261_1418==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA261_1418==LT) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA261_1418==GT) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA261_1418==LE) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA261_1418==GE) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA261_1418==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA261_1418==IS) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA261_1418==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA261_1418==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA261_1418==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA261_1418==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA261_1418==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA261_1418==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA261_1418==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA261_1418==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA261_1418==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA261_1418==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA261_1418==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA261_1418==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA261_1418==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA261_1418==RPAREN) ) {s = 14;}
                        input.seek(index261_1418);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA261_1419 = input.LA(1);
                        int index261_1419 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1419==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA261_1419==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA261_1419==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA261_1419==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA261_1419==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA261_1419==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA261_1419==LT) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA261_1419==GT) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA261_1419==LE) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA261_1419==GE) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA261_1419==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA261_1419==IS) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA261_1419==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA261_1419==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA261_1419==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA261_1419==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA261_1419==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA261_1419==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA261_1419==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA261_1419==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA261_1419==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA261_1419==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA261_1419==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA261_1419==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA261_1419==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA261_1419==RPAREN) ) {s = 14;}
                        input.seek(index261_1419);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA261_1494 = input.LA(1);
                        int index261_1494 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1494==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA261_1494==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA261_1494==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA261_1494==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA261_1494==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA261_1494==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA261_1494==LT) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA261_1494==GT) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA261_1494==LE) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA261_1494==GE) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA261_1494==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA261_1494==IS) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA261_1494==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA261_1494==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA261_1494==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA261_1494==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA261_1494==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA261_1494==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA261_1494==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA261_1494==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA261_1494==RPAREN) ) {s = 2624;}
                        else if ( (LA261_1494==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA261_1494==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA261_1494==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA261_1494==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA261_1494==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        input.seek(index261_1494);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA261_1495 = input.LA(1);
                        int index261_1495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1495==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA261_1495==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA261_1495==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA261_1495==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA261_1495==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA261_1495==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA261_1495==LT) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA261_1495==GT) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA261_1495==LE) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA261_1495==GE) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA261_1495==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA261_1495==IS) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA261_1495==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA261_1495==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA261_1495==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA261_1495==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA261_1495==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA261_1495==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA261_1495==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA261_1495==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA261_1495==RPAREN) ) {s = 2650;}
                        else if ( (LA261_1495==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA261_1495==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA261_1495==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA261_1495==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA261_1495==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        input.seek(index261_1495);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA261_1572 = input.LA(1);
                        int index261_1572 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1572==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA261_1572==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA261_1572==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA261_1572==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA261_1572==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA261_1572==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA261_1572==LT) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA261_1572==GT) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA261_1572==LE) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA261_1572==GE) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA261_1572==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA261_1572==IS) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA261_1572==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA261_1572==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA261_1572==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA261_1572==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA261_1572==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA261_1572==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA261_1572==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA261_1572==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA261_1572==RPAREN) ) {s = 2676;}
                        else if ( (LA261_1572==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA261_1572==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA261_1572==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA261_1572==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA261_1572==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        input.seek(index261_1572);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA261_1573 = input.LA(1);
                        int index261_1573 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1573==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA261_1573==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA261_1573==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA261_1573==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA261_1573==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA261_1573==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA261_1573==LT) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA261_1573==GT) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA261_1573==LE) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA261_1573==GE) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA261_1573==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA261_1573==IS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA261_1573==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA261_1573==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA261_1573==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA261_1573==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA261_1573==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA261_1573==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA261_1573==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA261_1573==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA261_1573==RPAREN) ) {s = 2702;}
                        else if ( (LA261_1573==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA261_1573==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA261_1573==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA261_1573==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA261_1573==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        input.seek(index261_1573);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA261_1650 = input.LA(1);
                        int index261_1650 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1650==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA261_1650==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA261_1650==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA261_1650==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA261_1650==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA261_1650==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA261_1650==LT) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA261_1650==GT) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA261_1650==LE) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA261_1650==GE) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA261_1650==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA261_1650==IS) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA261_1650==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA261_1650==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA261_1650==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA261_1650==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA261_1650==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA261_1650==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA261_1650==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA261_1650==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA261_1650==RPAREN) ) {s = 2728;}
                        else if ( (LA261_1650==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA261_1650==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA261_1650==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA261_1650==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA261_1650==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        input.seek(index261_1650);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA261_1651 = input.LA(1);
                        int index261_1651 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1651==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA261_1651==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA261_1651==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA261_1651==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA261_1651==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA261_1651==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA261_1651==LT) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA261_1651==GT) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA261_1651==LE) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA261_1651==GE) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA261_1651==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA261_1651==IS) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA261_1651==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA261_1651==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA261_1651==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA261_1651==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA261_1651==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA261_1651==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA261_1651==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA261_1651==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA261_1651==RPAREN) ) {s = 2754;}
                        else if ( (LA261_1651==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA261_1651==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA261_1651==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA261_1651==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA261_1651==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        input.seek(index261_1651);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA261_1728 = input.LA(1);
                        int index261_1728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1728==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA261_1728==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA261_1728==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA261_1728==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA261_1728==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA261_1728==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA261_1728==LT) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA261_1728==GT) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA261_1728==LE) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA261_1728==GE) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA261_1728==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA261_1728==IS) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA261_1728==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA261_1728==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA261_1728==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA261_1728==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA261_1728==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA261_1728==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA261_1728==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA261_1728==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA261_1728==RPAREN) ) {s = 2780;}
                        else if ( (LA261_1728==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA261_1728==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA261_1728==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA261_1728==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA261_1728==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        input.seek(index261_1728);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA261_1729 = input.LA(1);
                        int index261_1729 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1729==RPAREN) ) {s = 2786;}
                        else if ( (LA261_1729==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA261_1729==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA261_1729==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA261_1729==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA261_1729==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA261_1729==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA261_1729==LT) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA261_1729==GT) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA261_1729==LE) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA261_1729==GE) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA261_1729==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA261_1729==IS) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA261_1729==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA261_1729==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA261_1729==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA261_1729==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA261_1729==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA261_1729==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA261_1729==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA261_1729==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA261_1729==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA261_1729==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA261_1729==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA261_1729==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA261_1729==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        input.seek(index261_1729);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA261_1806 = input.LA(1);
                        int index261_1806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1806==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA261_1806==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA261_1806==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA261_1806==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA261_1806==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA261_1806==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA261_1806==LT) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA261_1806==GT) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA261_1806==LE) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA261_1806==GE) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA261_1806==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA261_1806==IS) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA261_1806==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA261_1806==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA261_1806==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA261_1806==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA261_1806==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA261_1806==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA261_1806==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA261_1806==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA261_1806==RPAREN) ) {s = 2832;}
                        else if ( (LA261_1806==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA261_1806==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA261_1806==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA261_1806==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA261_1806==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        input.seek(index261_1806);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA261_1807 = input.LA(1);
                        int index261_1807 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1807==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA261_1807==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA261_1807==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA261_1807==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA261_1807==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA261_1807==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA261_1807==LT) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA261_1807==GT) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA261_1807==LE) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA261_1807==GE) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA261_1807==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA261_1807==IS) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA261_1807==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA261_1807==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA261_1807==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA261_1807==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA261_1807==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA261_1807==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA261_1807==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA261_1807==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA261_1807==RPAREN) ) {s = 2858;}
                        else if ( (LA261_1807==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA261_1807==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA261_1807==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA261_1807==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA261_1807==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        input.seek(index261_1807);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA261_1884 = input.LA(1);
                        int index261_1884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1884==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA261_1884==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA261_1884==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA261_1884==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA261_1884==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA261_1884==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA261_1884==LT) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA261_1884==GT) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA261_1884==LE) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA261_1884==GE) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA261_1884==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA261_1884==IS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA261_1884==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA261_1884==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA261_1884==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA261_1884==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA261_1884==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA261_1884==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA261_1884==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA261_1884==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA261_1884==RPAREN) ) {s = 2884;}
                        else if ( (LA261_1884==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA261_1884==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA261_1884==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA261_1884==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA261_1884==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        input.seek(index261_1884);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA261_1885 = input.LA(1);
                        int index261_1885 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1885==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA261_1885==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA261_1885==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA261_1885==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA261_1885==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA261_1885==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA261_1885==LT) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA261_1885==GT) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA261_1885==LE) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA261_1885==GE) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA261_1885==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA261_1885==IS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA261_1885==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA261_1885==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA261_1885==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA261_1885==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA261_1885==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA261_1885==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA261_1885==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA261_1885==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA261_1885==RPAREN) ) {s = 2910;}
                        else if ( (LA261_1885==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA261_1885==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA261_1885==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA261_1885==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA261_1885==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        input.seek(index261_1885);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA261_1960 = input.LA(1);
                        int index261_1960 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1960==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA261_1960==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA261_1960==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA261_1960==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA261_1960==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA261_1960==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA261_1960==LT) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA261_1960==GT) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA261_1960==LE) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA261_1960==GE) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA261_1960==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA261_1960==IS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA261_1960==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA261_1960==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA261_1960==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA261_1960==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA261_1960==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA261_1960==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA261_1960==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA261_1960==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA261_1960==RPAREN) ) {s = 2936;}
                        else if ( (LA261_1960==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA261_1960==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA261_1960==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA261_1960==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA261_1960==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        input.seek(index261_1960);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA261_1961 = input.LA(1);
                        int index261_1961 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_1961==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA261_1961==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA261_1961==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA261_1961==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA261_1961==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA261_1961==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA261_1961==LT) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA261_1961==GT) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA261_1961==LE) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA261_1961==GE) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA261_1961==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA261_1961==IS) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA261_1961==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA261_1961==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA261_1961==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA261_1961==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA261_1961==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA261_1961==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA261_1961==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA261_1961==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA261_1961==RPAREN) ) {s = 2962;}
                        else if ( (LA261_1961==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA261_1961==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA261_1961==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA261_1961==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA261_1961==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        input.seek(index261_1961);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA261_2039 = input.LA(1);
                        int index261_2039 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2039==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA261_2039==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA261_2039==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA261_2039==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA261_2039==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA261_2039==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA261_2039==LT) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA261_2039==GT) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA261_2039==LE) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA261_2039==GE) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA261_2039==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA261_2039==IS) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA261_2039==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA261_2039==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA261_2039==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA261_2039==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA261_2039==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA261_2039==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA261_2039==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA261_2039==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA261_2039==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA261_2039==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA261_2039==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA261_2039==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA261_2039==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA261_2039==RPAREN) ) {s = 14;}
                        input.seek(index261_2039);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA261_2040 = input.LA(1);
                        int index261_2040 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2040==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA261_2040==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA261_2040==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA261_2040==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA261_2040==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA261_2040==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA261_2040==LT) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA261_2040==GT) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA261_2040==LE) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA261_2040==GE) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA261_2040==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA261_2040==IS) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA261_2040==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA261_2040==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA261_2040==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA261_2040==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA261_2040==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA261_2040==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA261_2040==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA261_2040==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA261_2040==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA261_2040==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA261_2040==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA261_2040==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA261_2040==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA261_2040==RPAREN) ) {s = 14;}
                        input.seek(index261_2040);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA261_2115 = input.LA(1);
                        int index261_2115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2115==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA261_2115==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA261_2115==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA261_2115==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA261_2115==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA261_2115==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA261_2115==LT) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA261_2115==GT) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA261_2115==LE) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA261_2115==GE) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA261_2115==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA261_2115==IS) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA261_2115==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA261_2115==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA261_2115==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA261_2115==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA261_2115==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA261_2115==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA261_2115==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA261_2115==RPAREN) ) {s = 3039;}
                        else if ( (LA261_2115==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA261_2115==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA261_2115==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA261_2115==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA261_2115==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        input.seek(index261_2115);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA261_2116 = input.LA(1);
                        int index261_2116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2116==RPAREN) ) {s = 3045;}
                        else if ( (LA261_2116==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA261_2116==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA261_2116==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA261_2116==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA261_2116==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA261_2116==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA261_2116==LT) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA261_2116==GT) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA261_2116==LE) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA261_2116==GE) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA261_2116==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA261_2116==IS) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA261_2116==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA261_2116==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA261_2116==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA261_2116==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA261_2116==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA261_2116==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA261_2116==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA261_2116==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA261_2116==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA261_2116==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA261_2116==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA261_2116==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        input.seek(index261_2116);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA261_2191 = input.LA(1);
                        int index261_2191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2191==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA261_2191==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA261_2191==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA261_2191==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA261_2191==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA261_2191==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA261_2191==LT) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA261_2191==GT) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        else if ( (LA261_2191==LE) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA261_2191==GE) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA261_2191==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA261_2191==IS) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA261_2191==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA261_2191==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA261_2191==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA261_2191==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA261_2191==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA261_2191==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA261_2191==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA261_2191==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA261_2191==AS) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA261_2191==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA261_2191==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA261_2191==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA261_2191==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA261_2191==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA261_2191==RPAREN) ) {s = 14;}
                        input.seek(index261_2191);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA261_2192 = input.LA(1);
                        int index261_2192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2192==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA261_2192==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA261_2192==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA261_2192==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA261_2192==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA261_2192==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        else if ( (LA261_2192==LT) && (synpred3_EsperEPL2Grammar())) {s = 3103;}
                        else if ( (LA261_2192==GT) && (synpred3_EsperEPL2Grammar())) {s = 3104;}
                        else if ( (LA261_2192==LE) && (synpred3_EsperEPL2Grammar())) {s = 3105;}
                        else if ( (LA261_2192==GE) && (synpred3_EsperEPL2Grammar())) {s = 3106;}
                        else if ( (LA261_2192==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3107;}
                        else if ( (LA261_2192==IS) && (synpred3_EsperEPL2Grammar())) {s = 3108;}
                        else if ( (LA261_2192==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3109;}
                        else if ( (LA261_2192==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3110;}
                        else if ( (LA261_2192==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3111;}
                        else if ( (LA261_2192==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3112;}
                        else if ( (LA261_2192==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3113;}
                        else if ( (LA261_2192==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3114;}
                        else if ( (LA261_2192==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3115;}
                        else if ( (LA261_2192==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3116;}
                        else if ( (LA261_2192==AS) && (synpred3_EsperEPL2Grammar())) {s = 3117;}
                        else if ( (LA261_2192==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3118;}
                        else if ( (LA261_2192==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3119;}
                        else if ( (LA261_2192==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3120;}
                        else if ( (LA261_2192==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3121;}
                        else if ( (LA261_2192==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3122;}
                        else if ( (LA261_2192==RPAREN) ) {s = 14;}
                        input.seek(index261_2192);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA261_2267 = input.LA(1);
                        int index261_2267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2267==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3124;}
                        else if ( (LA261_2267==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3125;}
                        else if ( (LA261_2267==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3126;}
                        else if ( (LA261_2267==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3127;}
                        else if ( (LA261_2267==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3128;}
                        else if ( (LA261_2267==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3129;}
                        else if ( (LA261_2267==LT) && (synpred3_EsperEPL2Grammar())) {s = 3130;}
                        else if ( (LA261_2267==GT) && (synpred3_EsperEPL2Grammar())) {s = 3131;}
                        else if ( (LA261_2267==LE) && (synpred3_EsperEPL2Grammar())) {s = 3132;}
                        else if ( (LA261_2267==GE) && (synpred3_EsperEPL2Grammar())) {s = 3133;}
                        else if ( (LA261_2267==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3134;}
                        else if ( (LA261_2267==IS) && (synpred3_EsperEPL2Grammar())) {s = 3135;}
                        else if ( (LA261_2267==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3136;}
                        else if ( (LA261_2267==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3137;}
                        else if ( (LA261_2267==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3138;}
                        else if ( (LA261_2267==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3139;}
                        else if ( (LA261_2267==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3140;}
                        else if ( (LA261_2267==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3141;}
                        else if ( (LA261_2267==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3142;}
                        else if ( (LA261_2267==RPAREN) ) {s = 3143;}
                        else if ( (LA261_2267==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3144;}
                        else if ( (LA261_2267==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3145;}
                        else if ( (LA261_2267==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3146;}
                        else if ( (LA261_2267==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3147;}
                        else if ( (LA261_2267==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3148;}
                        input.seek(index261_2267);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA261_2268 = input.LA(1);
                        int index261_2268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA261_2268==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3149;}
                        else if ( (LA261_2268==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3150;}
                        else if ( (LA261_2268==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3151;}
                        else if ( (LA261_2268==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3152;}
                        else if ( (LA261_2268==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3153;}
                        else if ( (LA261_2268==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3154;}
                        else if ( (LA261_2268==LT) && (synpred3_EsperEPL2Grammar())) {s = 3155;}
                        else if ( (LA261_2268==GT) && (synpred3_EsperEPL2Grammar())) {s = 3156;}
                        else if ( (LA261_2268==LE) && (synpred3_EsperEPL2Grammar())) {s = 3157;}
                        else if ( (LA261_2268==GE) && (synpred3_EsperEPL2Grammar())) {s = 3158;}
                        else if ( (LA261_2268==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3159;}
                        else if ( (LA261_2268==IS) && (synpred3_EsperEPL2Grammar())) {s = 3160;}
                        else if ( (LA261_2268==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3161;}
                        else if ( (LA261_2268==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3162;}
                        else if ( (LA261_2268==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3163;}
                        else if ( (LA261_2268==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3164;}
                        else if ( (LA261_2268==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3165;}
                        else if ( (LA261_2268==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3166;}
                        else if ( (LA261_2268==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3167;}
                        else if ( (LA261_2268==RPAREN) ) {s = 3168;}
                        else if ( (LA261_2268==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3169;}
                        else if ( (LA261_2268==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3170;}
                        else if ( (LA261_2268==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3171;}
                        else if ( (LA261_2268==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3172;}
                        else if ( (LA261_2268==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3173;}
                        input.seek(index261_2268);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA261_2416 = input.LA(1);
                        int index261_2416 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2416);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA261_2442 = input.LA(1);
                        int index261_2442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2442);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA261_2468 = input.LA(1);
                        int index261_2468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2468);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA261_2494 = input.LA(1);
                        int index261_2494 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2494);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA261_2500 = input.LA(1);
                        int index261_2500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2500);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA261_2546 = input.LA(1);
                        int index261_2546 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2546);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA261_2624 = input.LA(1);
                        int index261_2624 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2624);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA261_2650 = input.LA(1);
                        int index261_2650 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2650);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA261_2676 = input.LA(1);
                        int index261_2676 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2676);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA261_2702 = input.LA(1);
                        int index261_2702 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2702);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA261_2728 = input.LA(1);
                        int index261_2728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2728);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA261_2754 = input.LA(1);
                        int index261_2754 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2754);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA261_2780 = input.LA(1);
                        int index261_2780 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2780);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA261_2786 = input.LA(1);
                        int index261_2786 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2786);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA261_2832 = input.LA(1);
                        int index261_2832 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2832);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA261_2858 = input.LA(1);
                        int index261_2858 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2858);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA261_2884 = input.LA(1);
                        int index261_2884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2884);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA261_2910 = input.LA(1);
                        int index261_2910 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2910);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA261_2936 = input.LA(1);
                        int index261_2936 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2936);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA261_2962 = input.LA(1);
                        int index261_2962 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_2962);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA261_3039 = input.LA(1);
                        int index261_3039 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_3039);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA261_3045 = input.LA(1);
                        int index261_3045 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_3045);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA261_3143 = input.LA(1);
                        int index261_3143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_3143);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA261_3168 = input.LA(1);
                        int index261_3168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3173;}
                        input.seek(index261_3168);
    return s;
  }
    }
    static final String DFA315_eotS =
        "\u07d9\uffff";
    static final String DFA315_eofS =
        "\1\uffff\1\125\1\u0092\6\uffff\1\u00cf\1\u010c\4\uffff\1\u0149"+
        "\u01a9\uffff\1\u03aa\1\u03e6\6\uffff\1\u0423\1\u0460\4\uffff\1\u049e"+
        "\170\uffff\1\u0519\1\u0555\6\uffff\1\u0592\1\u05cf\4\uffff\1\u060d"+
        "\u00c9\uffff\1\u06c6\1\u0702\6\uffff\1\u073f\1\u077c\4\uffff\1\u07ba"+
        "\u04b2\uffff";
    static final String DFA315_minS =
        "\1\5\2\6\6\uffff\2\6\4\uffff\1\6\51\uffff\1\5\1\uffff\1\5\70\uffff"+
        "\2\5\73\uffff\1\5\74\uffff\1\5\74\uffff\1\5\111\uffff\2\6\102\uffff"+
        "\2\6\6\uffff\2\6\4\uffff\1\6\64\uffff\2\6\102\uffff\2\6\6\uffff"+
        "\2\6\4\uffff\1\6\64\uffff\2\6\117\uffff\2\6\102\uffff\2\6\6\uffff"+
        "\2\6\4\uffff\1\6\100\uffff\1\0\36\uffff\1\0\5\uffff\1\0\2\uffff"+
        "\1\0\71\uffff\1\0\73\uffff\2\0\74\uffff\1\0\74\uffff\1\0\125\uffff"+
        "\1\0\36\uffff\1\0\5\uffff\1\0\2\uffff\1\0\71\uffff\1\0\73\uffff"+
        "\2\0\74\uffff\1\0\74\uffff\1\0\125\uffff\1\0\36\uffff\1\0\36\uffff"+
        "\1\0\36\uffff\1\0\5\uffff\1\0\2\uffff\1\0\71\uffff\1\0\73\uffff"+
        "\2\0\74\uffff\1\0\74\uffff\1\0\74\uffff";
    static final String DFA315_maxS =
        "\1\u0167\2\u0166\6\uffff\2\u0166\4\uffff\1\u0166\51\uffff\1\u0169"+
        "\1\uffff\1\u0167\70\uffff\1\u0169\1\u0167\73\uffff\1\u0169\74\uffff"+
        "\1\u0169\74\uffff\1\u0167\111\uffff\2\u0162\102\uffff\2\u0166\6"+
        "\uffff\2\u0166\4\uffff\1\u0166\64\uffff\2\u0162\102\uffff\2\u0166"+
        "\6\uffff\2\u0166\4\uffff\1\u0166\64\uffff\2\u0162\117\uffff\2\u0162"+
        "\102\uffff\2\u0166\6\uffff\2\u0166\4\uffff\1\u0166\100\uffff\1\0"+
        "\36\uffff\1\0\5\uffff\1\0\2\uffff\1\0\71\uffff\1\0\73\uffff\2\0"+
        "\74\uffff\1\0\74\uffff\1\0\125\uffff\1\0\36\uffff\1\0\5\uffff\1"+
        "\0\2\uffff\1\0\71\uffff\1\0\73\uffff\2\0\74\uffff\1\0\74\uffff\1"+
        "\0\125\uffff\1\0\36\uffff\1\0\36\uffff\1\0\36\uffff\1\0\5\uffff"+
        "\1\0\2\uffff\1\0\71\uffff\1\0\73\uffff\2\0\74\uffff\1\0\74\uffff"+
        "\1\0\74\uffff";
    static final String DFA315_acceptS =
        "\3\uffff\6\1\2\uffff\4\1\1\uffff\43\1\1\2\3\uffff\2\1\1\uffff\1"+
        "\1\1\uffff\70\1\2\uffff\73\1\1\uffff\74\1\1\uffff\74\1\1\uffff\74"+
        "\1\123\uffff\6\1\2\uffff\4\1\1\uffff\43\1\127\uffff\6\1\2\uffff"+
        "\4\1\1\uffff\43\1\u00a8\uffff\6\1\2\uffff\4\1\1\uffff\43\1\103\uffff"+
        "\2\1\1\uffff\71\1\1\uffff\73\1\2\uffff\74\1\1\uffff\74\1\1\uffff"+
        "\74\1\77\uffff\2\1\1\uffff\71\1\1\uffff\73\1\2\uffff\74\1\1\uffff"+
        "\74\1\1\uffff\74\1\175\uffff\2\1\1\uffff\71\1\1\uffff\73\1\2\uffff"+
        "\74\1\1\uffff\74\1\1\uffff\74\1";
    static final String DFA315_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\4\uffff\1\5\53\uffff\1\6\71\uffff"+
        "\1\7\u00b5\uffff\1\10\u008d\uffff\1\11\1\12\6\uffff\1\13\1\14\4"+
        "\uffff\1\15\170\uffff\1\16\1\17\6\uffff\1\20\1\21\4\uffff\1\22\u00c9"+
        "\uffff\1\23\1\24\6\uffff\1\25\1\26\4\uffff\1\27\100\uffff\1\30\36"+
        "\uffff\1\31\5\uffff\1\32\2\uffff\1\33\71\uffff\1\34\73\uffff\1\35"+
        "\1\36\74\uffff\1\37\74\uffff\1\40\125\uffff\1\41\36\uffff\1\42\5"+
        "\uffff\1\43\2\uffff\1\44\71\uffff\1\45\73\uffff\1\46\1\47\74\uffff"+
        "\1\50\74\uffff\1\51\125\uffff\1\52\36\uffff\1\53\36\uffff\1\54\36"+
        "\uffff\1\55\5\uffff\1\56\2\uffff\1\57\71\uffff\1\60\73\uffff\1\61"+
        "\1\62\74\uffff\1\63\74\uffff\1\64\74\uffff}>";
    static final String[] DFA315_transitionS = {
            "\1\47\1\uffff\1\63\2\uffff\1\5\3\uffff\1\6\1\uffff\1\63\1\uffff"+
            "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\4\10\uffff\1\52\1"+
            "\uffff\1\54\1\50\1\51\1\53\12\uffff\1\17\1\20\1\21\11\uffff"+
            "\1\25\1\26\1\27\1\31\1\32\1\33\1\34\1\35\2\uffff\1\36\1\uffff"+
            "\1\37\1\40\1\41\1\42\1\43\2\uffff\1\44\1\63\1\45\1\30\1\3\1"+
            "\46\32\uffff\1\55\1\56\1\57\1\63\1\61\1\22\1\62\1\23\1\24\3"+
            "\uffff\1\60\u00c6\uffff\1\1\41\uffff\1\2",
            "\1\157\1\160\1\161\1\162\1\163\1\116\1\115\1\156\2\uffff\1"+
            "\134\1\135\14\uffff\1\145\1\127\1\130\1\146\1\136\7\uffff\1"+
            "\107\1\uffff\1\117\1\120\1\uffff\1\140\2\uffff\1\121\3\uffff"+
            "\1\131\1\uffff\1\122\1\143\1\144\7\uffff\1\142\41\uffff\1\155"+
            "\1\154\1\153\6\uffff\1\123\3\uffff\1\137\3\uffff\1\141\1\124"+
            "\u00cc\uffff\1\70\1\150\1\uffff\1\71\1\126\1\147\1\uffff\1\132"+
            "\1\uffff\1\152\1\133\1\73\1\106\1\74\1\uffff\1\102\1\103\1\72"+
            "\1\113\1\77\2\uffff\1\112\1\114\1\110\1\111\1\104\1\105\1\101"+
            "\1\100\1\75\1\76\2\uffff\1\151\1\67",
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u008b\1\u008a\1"+
            "\u00ab\2\uffff\1\u0099\1\u009a\14\uffff\1\u00a2\1\u0094\1\u0095"+
            "\1\u00a3\1\u009b\7\uffff\1\u0084\1\uffff\1\u008c\1\u008d\1\uffff"+
            "\1\u009d\2\uffff\1\u008e\3\uffff\1\u0096\1\uffff\1\u008f\1\u00a0"+
            "\1\u00a1\7\uffff\1\u009f\41\uffff\1\u00aa\1\u00a9\1\u00a8\6"+
            "\uffff\1\u0090\3\uffff\1\u009c\3\uffff\1\u009e\1\u0091\u00cc"+
            "\uffff\1\167\1\u00a5\1\uffff\1\164\1\u0093\1\u00a4\1\uffff\1"+
            "\u0097\1\uffff\1\u00a7\1\u0098\1\165\1\u0083\1\171\1\uffff\1"+
            "\177\1\u0080\1\170\1\u0088\1\174\2\uffff\1\u0087\1\u0089\1\u0085"+
            "\1\u0086\1\u0081\1\u0082\1\176\1\175\1\172\1\173\2\uffff\1\u00a6"+
            "\1\166",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00c8\1\u00c7\1"+
            "\u00e8\2\uffff\1\u00d6\1\u00d7\14\uffff\1\u00df\1\u00d1\1\u00d2"+
            "\1\u00e0\1\u00d8\7\uffff\1\u00c1\1\uffff\1\u00c9\1\u00ca\1\uffff"+
            "\1\u00da\2\uffff\1\u00cb\3\uffff\1\u00d3\1\uffff\1\u00cc\1\u00dd"+
            "\1\u00de\7\uffff\1\u00dc\41\uffff\1\u00e7\1\u00e6\1\u00e5\6"+
            "\uffff\1\u00cd\3\uffff\1\u00d9\3\uffff\1\u00db\1\u00ce\u00cc"+
            "\uffff\1\u00b3\1\u00e2\1\uffff\1\u00b1\1\u00d0\1\u00e1\1\uffff"+
            "\1\u00d4\1\uffff\1\u00e4\1\u00d5\1\u00b5\1\u00c0\1\u00b6\1\uffff"+
            "\1\u00bc\1\u00bd\1\u00b4\1\u00c5\1\u00b9\2\uffff\1\u00c4\1\u00c6"+
            "\1\u00c2\1\u00c3\1\u00be\1\u00bf\1\u00bb\1\u00ba\1\u00b7\1\u00b8"+
            "\2\uffff\1\u00e3\1\u00b2",
            "\1\u0126\1\u0127\1\u0128\1\u0129\1\u012a\1\u0105\1\u0104\1"+
            "\u0125\2\uffff\1\u0113\1\u0114\14\uffff\1\u011c\1\u010e\1\u010f"+
            "\1\u011d\1\u0115\7\uffff\1\u00fe\1\uffff\1\u0106\1\u0107\1\uffff"+
            "\1\u0117\2\uffff\1\u0108\3\uffff\1\u0110\1\uffff\1\u0109\1\u011a"+
            "\1\u011b\7\uffff\1\u0119\41\uffff\1\u0124\1\u0123\1\u0122\6"+
            "\uffff\1\u010a\3\uffff\1\u0116\3\uffff\1\u0118\1\u010b\u00cc"+
            "\uffff\1\u00f0\1\u011f\1\uffff\1\u00ee\1\u010d\1\u011e\1\uffff"+
            "\1\u0111\1\uffff\1\u0121\1\u0112\1\u00f2\1\u00fd\1\u00f3\1\uffff"+
            "\1\u00f9\1\u00fa\1\u00f1\1\u0102\1\u00f6\2\uffff\1\u0101\1\u0103"+
            "\1\u00ff\1\u0100\1\u00fb\1\u00fc\1\u00f8\1\u00f7\1\u00f4\1\u00f5"+
            "\2\uffff\1\u0120\1\u00ef",
            "",
            "",
            "",
            "",
            "\1\u0163\1\u0164\1\u0165\1\u0166\1\u0167\1\u0142\1\u0141\1"+
            "\u0162\2\uffff\1\u0150\1\u0151\14\uffff\1\u0159\1\u014b\1\u014c"+
            "\1\u015a\1\u0152\7\uffff\1\u013b\1\uffff\1\u0143\1\u0144\1\uffff"+
            "\1\u0154\2\uffff\1\u0145\3\uffff\1\u014d\1\uffff\1\u0146\1\u0157"+
            "\1\u0158\7\uffff\1\u0156\41\uffff\1\u0161\1\u0160\1\u015f\6"+
            "\uffff\1\u0147\3\uffff\1\u0153\3\uffff\1\u0155\1\u0148\u00cc"+
            "\uffff\1\u012d\1\u015c\1\uffff\1\u012e\1\u014a\1\u015b\1\uffff"+
            "\1\u014e\1\uffff\1\u015e\1\u014f\1\u012b\1\u013a\1\u0130\1\uffff"+
            "\1\u0136\1\u0137\1\u012f\1\u013f\1\u0133\2\uffff\1\u013e\1\u0140"+
            "\1\u013c\1\u013d\1\u0138\1\u0139\1\u0135\1\u0134\1\u0131\1\u0132"+
            "\2\uffff\1\u015d\1\u012c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u0175\1\u0176\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "\1\u01df\1\uffff\1\63\2\uffff\1\u01bd\3\uffff\1\u01be\1\uffff"+
            "\1\63\1\uffff\1\u01bf\1\u01c0\1\u01c1\1\u01c2\1\u01c3\1\u01c4"+
            "\1\u01c5\1\u01c6\1\u01bc\10\uffff\1\u01e2\1\uffff\1\u01e4\1"+
            "\u01e0\1\u01e1\1\u01e3\12\uffff\1\u01c7\1\u01c8\1\u01c9\11\uffff"+
            "\1\u01cd\1\u01ce\1\u01cf\1\u01d1\1\u01d2\1\u01d3\1\u01d4\1\u01d5"+
            "\2\uffff\1\u01d6\1\uffff\1\u01d7\1\u01d8\1\u01d9\1\u01da\1\u01db"+
            "\2\uffff\1\u01dc\1\63\1\u01dd\1\u01d0\1\u01bb\1\u01de\32\uffff"+
            "\1\u01e5\1\u01e6\1\u01e7\1\63\1\u01e9\1\u01ca\1\u01ea\1\u01cb"+
            "\1\u01cc\3\uffff\1\u01e8\u00c6\uffff\1\u01b9\41\uffff\1\u01ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u01fc\1\u01fd\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "\1\u0266\1\uffff\1\63\2\uffff\1\u0244\3\uffff\1\u0245\1\uffff"+
            "\1\63\1\uffff\1\u0246\1\u0247\1\u0248\1\u0249\1\u024a\1\u024b"+
            "\1\u024c\1\u024d\1\u0243\10\uffff\1\u0269\1\uffff\1\u026b\1"+
            "\u0267\1\u0268\1\u026a\12\uffff\1\u024e\1\u024f\1\u0250\11\uffff"+
            "\1\u0254\1\u0255\1\u0256\1\u0258\1\u0259\1\u025a\1\u025b\1\u025c"+
            "\2\uffff\1\u025d\1\uffff\1\u025e\1\u025f\1\u0260\1\u0261\1\u0262"+
            "\2\uffff\1\u0263\1\63\1\u0264\1\u0257\1\u0242\1\u0265\32\uffff"+
            "\1\u026c\1\u026d\1\u026e\1\63\1\u0270\1\u0251\1\u0271\1\u0252"+
            "\1\u0253\3\uffff\1\u026f\u00c6\uffff\1\u0240\41\uffff\1\u0241",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u0283\1\u0284\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\63\1\uffff\1\63\2\uffff\1\63\2\uffff\2\63\1\uffff\1\63"+
            "\1\uffff\11\63\1\uffff\1\63\6\uffff\1\63\1\uffff\4\63\5\uffff"+
            "\2\63\3\uffff\3\63\6\uffff\1\63\2\uffff\22\63\1\uffff\6\63\22"+
            "\uffff\3\63\5\uffff\11\63\1\uffff\1\63\1\uffff\1\63\u00b4\uffff"+
            "\1\63\17\uffff\1\63\1\uffff\3\63\1\uffff\1\63\6\uffff\1\63\3"+
            "\uffff\1\63\1\uffff\1\63\1\u02d4\1\u02d5\7\uffff\1\63\2\uffff"+
            "\1\63\3\uffff\3\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u033e\1\uffff\1\63\2\uffff\1\u031c\3\uffff\1\u031d\1\uffff"+
            "\1\63\1\uffff\1\u031e\1\u031f\1\u0320\1\u0321\1\u0322\1\u0323"+
            "\1\u0324\1\u0325\1\u031b\10\uffff\1\u0341\1\uffff\1\u0343\1"+
            "\u033f\1\u0340\1\u0342\12\uffff\1\u0326\1\u0327\1\u0328\11\uffff"+
            "\1\u032c\1\u032d\1\u032e\1\u0330\1\u0331\1\u0332\1\u0333\1\u0334"+
            "\2\uffff\1\u0335\1\uffff\1\u0336\1\u0337\1\u0338\1\u0339\1\u033a"+
            "\2\uffff\1\u033b\1\63\1\u033c\1\u032f\1\u031a\1\u033d\32\uffff"+
            "\1\u0344\1\u0345\1\u0346\1\63\1\u0348\1\u0329\1\u0349\1\u032a"+
            "\1\u032b\3\uffff\1\u0347\u00c6\uffff\1\u0318\41\uffff\1\u0319",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0367\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0386\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03c4\1\u03c5\1\u03c6\1\u03c7\1\u03c8\1\u03a3\1\u03a2\1"+
            "\u03c3\2\uffff\1\u03b1\1\u03b2\14\uffff\1\u03ba\1\u03ac\1\u03ad"+
            "\1\u03bb\1\u03b3\7\uffff\1\u039c\1\uffff\1\u03a4\1\u03a5\1\uffff"+
            "\1\u03b5\2\uffff\1\u03a6\3\uffff\1\u03ae\1\uffff\1\u03a7\1\u03b8"+
            "\1\u03b9\7\uffff\1\u03b7\41\uffff\1\u03c2\1\u03c1\1\u03c0\6"+
            "\uffff\1\u03a8\3\uffff\1\u03b4\3\uffff\1\u03b6\1\u03a9\u00cc"+
            "\uffff\1\u038e\1\u03bd\1\uffff\1\u038f\1\u03ab\1\u03bc\1\uffff"+
            "\1\u03af\1\uffff\1\u03bf\1\u03b0\1\u038c\1\u039b\1\u0391\1\uffff"+
            "\1\u0397\1\u0398\1\u0390\1\u03a0\1\u0394\2\uffff\1\u039f\1\u03a1"+
            "\1\u039d\1\u039e\1\u0399\1\u039a\1\u0396\1\u0395\1\u0392\1\u0393"+
            "\2\uffff\1\u03be\1\u038d",
            "\1\u0400\1\u0401\1\u0402\1\u0403\1\u0404\1\u03df\1\u03de\1"+
            "\u03ff\2\uffff\1\u03ed\1\u03ee\14\uffff\1\u03f6\1\u03e8\1\u03e9"+
            "\1\u03f7\1\u03ef\7\uffff\1\u03d8\1\uffff\1\u03e0\1\u03e1\1\uffff"+
            "\1\u03f1\2\uffff\1\u03e2\3\uffff\1\u03ea\1\uffff\1\u03e3\1\u03f4"+
            "\1\u03f5\7\uffff\1\u03f3\41\uffff\1\u03fe\1\u03fd\1\u03fc\6"+
            "\uffff\1\u03e4\3\uffff\1\u03f0\3\uffff\1\u03f2\1\u03e5\u00cc"+
            "\uffff\1\u03cb\1\u03f9\1\uffff\1\u03c9\1\u03e7\1\u03f8\1\uffff"+
            "\1\u03eb\1\uffff\1\u03fb\1\u03ec\1\u0405\1\u03d7\1\u03cd\1\uffff"+
            "\1\u03d3\1\u03d4\1\u03cc\1\u03dc\1\u03d0\2\uffff\1\u03db\1\u03dd"+
            "\1\u03d9\1\u03da\1\u03d5\1\u03d6\1\u03d2\1\u03d1\1\u03ce\1\u03cf"+
            "\2\uffff\1\u03fa\1\u03ca",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u043d\1\u043e\1\u043f\1\u0440\1\u0441\1\u041c\1\u041b\1"+
            "\u043c\2\uffff\1\u042a\1\u042b\14\uffff\1\u0433\1\u0425\1\u0426"+
            "\1\u0434\1\u042c\7\uffff\1\u0415\1\uffff\1\u041d\1\u041e\1\uffff"+
            "\1\u042e\2\uffff\1\u041f\3\uffff\1\u0427\1\uffff\1\u0420\1\u0431"+
            "\1\u0432\7\uffff\1\u0430\41\uffff\1\u043b\1\u043a\1\u0439\6"+
            "\uffff\1\u0421\3\uffff\1\u042d\3\uffff\1\u042f\1\u0422\u00cc"+
            "\uffff\1\u0408\1\u0436\1\uffff\1\u0406\1\u0424\1\u0435\1\uffff"+
            "\1\u0428\1\uffff\1\u0438\1\u0429\1\u0442\1\u0414\1\u040a\1\uffff"+
            "\1\u0410\1\u0411\1\u0409\1\u0419\1\u040d\2\uffff\1\u0418\1\u041a"+
            "\1\u0416\1\u0417\1\u0412\1\u0413\1\u040f\1\u040e\1\u040b\1\u040c"+
            "\2\uffff\1\u0437\1\u0407",
            "\1\u047a\1\u047b\1\u047c\1\u047d\1\u047e\1\u0459\1\u0458\1"+
            "\u0479\2\uffff\1\u0467\1\u0468\14\uffff\1\u0470\1\u0462\1\u0463"+
            "\1\u0471\1\u0469\7\uffff\1\u0452\1\uffff\1\u045a\1\u045b\1\uffff"+
            "\1\u046b\2\uffff\1\u045c\3\uffff\1\u0464\1\uffff\1\u045d\1\u046e"+
            "\1\u046f\7\uffff\1\u046d\41\uffff\1\u0478\1\u0477\1\u0476\6"+
            "\uffff\1\u045e\3\uffff\1\u046a\3\uffff\1\u046c\1\u045f\u00cc"+
            "\uffff\1\u0445\1\u0473\1\uffff\1\u0443\1\u0461\1\u0472\1\uffff"+
            "\1\u0465\1\uffff\1\u0475\1\u0466\1\u047f\1\u0451\1\u0447\1\uffff"+
            "\1\u044d\1\u044e\1\u0446\1\u0456\1\u044a\2\uffff\1\u0455\1\u0457"+
            "\1\u0453\1\u0454\1\u044f\1\u0450\1\u044c\1\u044b\1\u0448\1\u0449"+
            "\2\uffff\1\u0474\1\u0444",
            "",
            "",
            "",
            "",
            "\1\u04b8\1\u04b9\1\u04ba\1\u04bb\1\u04bc\1\u0497\1\u0496\1"+
            "\u04b7\2\uffff\1\u04a5\1\u04a6\14\uffff\1\u04ae\1\u04a0\1\u04a1"+
            "\1\u04af\1\u04a7\7\uffff\1\u0490\1\uffff\1\u0498\1\u0499\1\uffff"+
            "\1\u04a9\2\uffff\1\u049a\3\uffff\1\u04a2\1\uffff\1\u049b\1\u04ac"+
            "\1\u04ad\7\uffff\1\u04ab\41\uffff\1\u04b6\1\u04b5\1\u04b4\6"+
            "\uffff\1\u049c\3\uffff\1\u04a8\3\uffff\1\u04aa\1\u049d\u00cc"+
            "\uffff\1\u0482\1\u04b1\1\uffff\1\u0483\1\u049f\1\u04b0\1\uffff"+
            "\1\u04a3\1\uffff\1\u04b3\1\u04a4\1\u0480\1\u048f\1\u0485\1\uffff"+
            "\1\u048b\1\u048c\1\u0484\1\u0494\1\u0488\2\uffff\1\u0493\1\u0495"+
            "\1\u0491\1\u0492\1\u048d\1\u048e\1\u048a\1\u0489\1\u0486\1\u0487"+
            "\2\uffff\1\u04b2\1\u0481",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u04d6\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u04f5\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0533\1\u0534\1\u0535\1\u0536\1\u0537\1\u0512\1\u0511\1"+
            "\u0532\2\uffff\1\u0520\1\u0521\14\uffff\1\u0529\1\u051b\1\u051c"+
            "\1\u052a\1\u0522\7\uffff\1\u050b\1\uffff\1\u0513\1\u0514\1\uffff"+
            "\1\u0524\2\uffff\1\u0515\3\uffff\1\u051d\1\uffff\1\u0516\1\u0527"+
            "\1\u0528\7\uffff\1\u0526\41\uffff\1\u0531\1\u0530\1\u052f\6"+
            "\uffff\1\u0517\3\uffff\1\u0523\3\uffff\1\u0525\1\u0518\u00cc"+
            "\uffff\1\u04fd\1\u052c\1\uffff\1\u04fe\1\u051a\1\u052b\1\uffff"+
            "\1\u051e\1\uffff\1\u052e\1\u051f\1\u04fb\1\u050a\1\u0500\1\uffff"+
            "\1\u0506\1\u0507\1\u04ff\1\u050f\1\u0503\2\uffff\1\u050e\1\u0510"+
            "\1\u050c\1\u050d\1\u0508\1\u0509\1\u0505\1\u0504\1\u0501\1\u0502"+
            "\2\uffff\1\u052d\1\u04fc",
            "\1\u056f\1\u0570\1\u0571\1\u0572\1\u0573\1\u054e\1\u054d\1"+
            "\u056e\2\uffff\1\u055c\1\u055d\14\uffff\1\u0565\1\u0557\1\u0558"+
            "\1\u0566\1\u055e\7\uffff\1\u0547\1\uffff\1\u054f\1\u0550\1\uffff"+
            "\1\u0560\2\uffff\1\u0551\3\uffff\1\u0559\1\uffff\1\u0552\1\u0563"+
            "\1\u0564\7\uffff\1\u0562\41\uffff\1\u056d\1\u056c\1\u056b\6"+
            "\uffff\1\u0553\3\uffff\1\u055f\3\uffff\1\u0561\1\u0554\u00cc"+
            "\uffff\1\u053a\1\u0568\1\uffff\1\u0538\1\u0556\1\u0567\1\uffff"+
            "\1\u055a\1\uffff\1\u056a\1\u055b\1\u0574\1\u0546\1\u053c\1\uffff"+
            "\1\u0542\1\u0543\1\u053b\1\u054b\1\u053f\2\uffff\1\u054a\1\u054c"+
            "\1\u0548\1\u0549\1\u0544\1\u0545\1\u0541\1\u0540\1\u053d\1\u053e"+
            "\2\uffff\1\u0569\1\u0539",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05ac\1\u05ad\1\u05ae\1\u05af\1\u05b0\1\u058b\1\u058a\1"+
            "\u05ab\2\uffff\1\u0599\1\u059a\14\uffff\1\u05a2\1\u0594\1\u0595"+
            "\1\u05a3\1\u059b\7\uffff\1\u0584\1\uffff\1\u058c\1\u058d\1\uffff"+
            "\1\u059d\2\uffff\1\u058e\3\uffff\1\u0596\1\uffff\1\u058f\1\u05a0"+
            "\1\u05a1\7\uffff\1\u059f\41\uffff\1\u05aa\1\u05a9\1\u05a8\6"+
            "\uffff\1\u0590\3\uffff\1\u059c\3\uffff\1\u059e\1\u0591\u00cc"+
            "\uffff\1\u0577\1\u05a5\1\uffff\1\u0575\1\u0593\1\u05a4\1\uffff"+
            "\1\u0597\1\uffff\1\u05a7\1\u0598\1\u05b1\1\u0583\1\u0579\1\uffff"+
            "\1\u057f\1\u0580\1\u0578\1\u0588\1\u057c\2\uffff\1\u0587\1\u0589"+
            "\1\u0585\1\u0586\1\u0581\1\u0582\1\u057e\1\u057d\1\u057a\1\u057b"+
            "\2\uffff\1\u05a6\1\u0576",
            "\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed\1\u05c8\1\u05c7\1"+
            "\u05e8\2\uffff\1\u05d6\1\u05d7\14\uffff\1\u05df\1\u05d1\1\u05d2"+
            "\1\u05e0\1\u05d8\7\uffff\1\u05c1\1\uffff\1\u05c9\1\u05ca\1\uffff"+
            "\1\u05da\2\uffff\1\u05cb\3\uffff\1\u05d3\1\uffff\1\u05cc\1\u05dd"+
            "\1\u05de\7\uffff\1\u05dc\41\uffff\1\u05e7\1\u05e6\1\u05e5\6"+
            "\uffff\1\u05cd\3\uffff\1\u05d9\3\uffff\1\u05db\1\u05ce\u00cc"+
            "\uffff\1\u05b4\1\u05e2\1\uffff\1\u05b2\1\u05d0\1\u05e1\1\uffff"+
            "\1\u05d4\1\uffff\1\u05e4\1\u05d5\1\u05ee\1\u05c0\1\u05b6\1\uffff"+
            "\1\u05bc\1\u05bd\1\u05b5\1\u05c5\1\u05b9\2\uffff\1\u05c4\1\u05c6"+
            "\1\u05c2\1\u05c3\1\u05be\1\u05bf\1\u05bb\1\u05ba\1\u05b7\1\u05b8"+
            "\2\uffff\1\u05e3\1\u05b3",
            "",
            "",
            "",
            "",
            "\1\u0627\1\u0628\1\u0629\1\u062a\1\u062b\1\u0606\1\u0605\1"+
            "\u0626\2\uffff\1\u0614\1\u0615\14\uffff\1\u061d\1\u060f\1\u0610"+
            "\1\u061e\1\u0616\7\uffff\1\u05ff\1\uffff\1\u0607\1\u0608\1\uffff"+
            "\1\u0618\2\uffff\1\u0609\3\uffff\1\u0611\1\uffff\1\u060a\1\u061b"+
            "\1\u061c\7\uffff\1\u061a\41\uffff\1\u0625\1\u0624\1\u0623\6"+
            "\uffff\1\u060b\3\uffff\1\u0617\3\uffff\1\u0619\1\u060c\u00cc"+
            "\uffff\1\u05f1\1\u0620\1\uffff\1\u05f2\1\u060e\1\u061f\1\uffff"+
            "\1\u0612\1\uffff\1\u0622\1\u0613\1\u05ef\1\u05fe\1\u05f4\1\uffff"+
            "\1\u05fa\1\u05fb\1\u05f3\1\u0603\1\u05f7\2\uffff\1\u0602\1\u0604"+
            "\1\u0600\1\u0601\1\u05fc\1\u05fd\1\u05f9\1\u05f8\1\u05f5\1\u05f6"+
            "\2\uffff\1\u0621\1\u05f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0645\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0664\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u0683\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "\4\63\1\uffff\3\63\34\uffff\1\63\16\uffff\2\63\51\uffff\3"+
            "\63\u00e0\uffff\1\u06a2\5\uffff\1\63\1\uffff\2\63\1\uffff\2"+
            "\63\1\uffff\2\63\2\uffff\12\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06e0\1\u06e1\1\u06e2\1\u06e3\1\u06e4\1\u06bf\1\u06be\1"+
            "\u06df\2\uffff\1\u06cd\1\u06ce\14\uffff\1\u06d6\1\u06c8\1\u06c9"+
            "\1\u06d7\1\u06cf\7\uffff\1\u06b8\1\uffff\1\u06c0\1\u06c1\1\uffff"+
            "\1\u06d1\2\uffff\1\u06c2\3\uffff\1\u06ca\1\uffff\1\u06c3\1\u06d4"+
            "\1\u06d5\7\uffff\1\u06d3\41\uffff\1\u06de\1\u06dd\1\u06dc\6"+
            "\uffff\1\u06c4\3\uffff\1\u06d0\3\uffff\1\u06d2\1\u06c5\u00cc"+
            "\uffff\1\u06aa\1\u06d9\1\uffff\1\u06ab\1\u06c7\1\u06d8\1\uffff"+
            "\1\u06cb\1\uffff\1\u06db\1\u06cc\1\u06a8\1\u06b7\1\u06ad\1\uffff"+
            "\1\u06b3\1\u06b4\1\u06ac\1\u06bc\1\u06b0\2\uffff\1\u06bb\1\u06bd"+
            "\1\u06b9\1\u06ba\1\u06b5\1\u06b6\1\u06b2\1\u06b1\1\u06ae\1\u06af"+
            "\2\uffff\1\u06da\1\u06a9",
            "\1\u071c\1\u071d\1\u071e\1\u071f\1\u0720\1\u06fb\1\u06fa\1"+
            "\u071b\2\uffff\1\u0709\1\u070a\14\uffff\1\u0712\1\u0704\1\u0705"+
            "\1\u0713\1\u070b\7\uffff\1\u06f4\1\uffff\1\u06fc\1\u06fd\1\uffff"+
            "\1\u070d\2\uffff\1\u06fe\3\uffff\1\u0706\1\uffff\1\u06ff\1\u0710"+
            "\1\u0711\7\uffff\1\u070f\41\uffff\1\u071a\1\u0719\1\u0718\6"+
            "\uffff\1\u0700\3\uffff\1\u070c\3\uffff\1\u070e\1\u0701\u00cc"+
            "\uffff\1\u06e7\1\u0715\1\uffff\1\u06e5\1\u0703\1\u0714\1\uffff"+
            "\1\u0707\1\uffff\1\u0717\1\u0708\1\u0721\1\u06f3\1\u06e9\1\uffff"+
            "\1\u06ef\1\u06f0\1\u06e8\1\u06f8\1\u06ec\2\uffff\1\u06f7\1\u06f9"+
            "\1\u06f5\1\u06f6\1\u06f1\1\u06f2\1\u06ee\1\u06ed\1\u06ea\1\u06eb"+
            "\2\uffff\1\u0716\1\u06e6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0759\1\u075a\1\u075b\1\u075c\1\u075d\1\u0738\1\u0737\1"+
            "\u0758\2\uffff\1\u0746\1\u0747\14\uffff\1\u074f\1\u0741\1\u0742"+
            "\1\u0750\1\u0748\7\uffff\1\u0731\1\uffff\1\u0739\1\u073a\1\uffff"+
            "\1\u074a\2\uffff\1\u073b\3\uffff\1\u0743\1\uffff\1\u073c\1\u074d"+
            "\1\u074e\7\uffff\1\u074c\41\uffff\1\u0757\1\u0756\1\u0755\6"+
            "\uffff\1\u073d\3\uffff\1\u0749\3\uffff\1\u074b\1\u073e\u00cc"+
            "\uffff\1\u0724\1\u0752\1\uffff\1\u0722\1\u0740\1\u0751\1\uffff"+
            "\1\u0744\1\uffff\1\u0754\1\u0745\1\u075e\1\u0730\1\u0726\1\uffff"+
            "\1\u072c\1\u072d\1\u0725\1\u0735\1\u0729\2\uffff\1\u0734\1\u0736"+
            "\1\u0732\1\u0733\1\u072e\1\u072f\1\u072b\1\u072a\1\u0727\1\u0728"+
            "\2\uffff\1\u0753\1\u0723",
            "\1\u0796\1\u0797\1\u0798\1\u0799\1\u079a\1\u0775\1\u0774\1"+
            "\u0795\2\uffff\1\u0783\1\u0784\14\uffff\1\u078c\1\u077e\1\u077f"+
            "\1\u078d\1\u0785\7\uffff\1\u076e\1\uffff\1\u0776\1\u0777\1\uffff"+
            "\1\u0787\2\uffff\1\u0778\3\uffff\1\u0780\1\uffff\1\u0779\1\u078a"+
            "\1\u078b\7\uffff\1\u0789\41\uffff\1\u0794\1\u0793\1\u0792\6"+
            "\uffff\1\u077a\3\uffff\1\u0786\3\uffff\1\u0788\1\u077b\u00cc"+
            "\uffff\1\u0761\1\u078f\1\uffff\1\u075f\1\u077d\1\u078e\1\uffff"+
            "\1\u0781\1\uffff\1\u0791\1\u0782\1\u079b\1\u076d\1\u0763\1\uffff"+
            "\1\u0769\1\u076a\1\u0762\1\u0772\1\u0766\2\uffff\1\u0771\1\u0773"+
            "\1\u076f\1\u0770\1\u076b\1\u076c\1\u0768\1\u0767\1\u0764\1\u0765"+
            "\2\uffff\1\u0790\1\u0760",
            "",
            "",
            "",
            "",
            "\1\u07d4\1\u07d5\1\u07d6\1\u07d7\1\u07d8\1\u07b3\1\u07b2\1"+
            "\u07d3\2\uffff\1\u07c1\1\u07c2\14\uffff\1\u07ca\1\u07bc\1\u07bd"+
            "\1\u07cb\1\u07c3\7\uffff\1\u07ac\1\uffff\1\u07b4\1\u07b5\1\uffff"+
            "\1\u07c5\2\uffff\1\u07b6\3\uffff\1\u07be\1\uffff\1\u07b7\1\u07c8"+
            "\1\u07c9\7\uffff\1\u07c7\41\uffff\1\u07d2\1\u07d1\1\u07d0\6"+
            "\uffff\1\u07b8\3\uffff\1\u07c4\3\uffff\1\u07c6\1\u07b9\u00cc"+
            "\uffff\1\u079e\1\u07cd\1\uffff\1\u079f\1\u07bb\1\u07cc\1\uffff"+
            "\1\u07bf\1\uffff\1\u07cf\1\u07c0\1\u079c\1\u07ab\1\u07a1\1\uffff"+
            "\1\u07a7\1\u07a8\1\u07a0\1\u07b0\1\u07a4\2\uffff\1\u07af\1\u07b1"+
            "\1\u07ad\1\u07ae\1\u07a9\1\u07aa\1\u07a6\1\u07a5\1\u07a2\1\u07a3"+
            "\2\uffff\1\u07ce\1\u079d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA315_eot = DFA.unpackEncodedString(DFA315_eotS);
    static final short[] DFA315_eof = DFA.unpackEncodedString(DFA315_eofS);
    static final char[] DFA315_min = DFA.unpackEncodedStringToUnsignedChars(DFA315_minS);
    static final char[] DFA315_max = DFA.unpackEncodedStringToUnsignedChars(DFA315_maxS);
    static final short[] DFA315_accept = DFA.unpackEncodedString(DFA315_acceptS);
    static final short[] DFA315_special = DFA.unpackEncodedString(DFA315_specialS);
    static final short[][] DFA315_transition;
    static {
        int numStates = DFA315_transitionS.length;
        DFA315_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA315_transition[i] = DFA.unpackEncodedString(DFA315_transitionS[i]);
        }
    }
    class DFA315 extends DFA {
        public DFA315(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 315;
            this.eot = DFA315_eot;
            this.eof = DFA315_eof;
            this.min = DFA315_min;
            this.max = DFA315_max;
            this.accept = DFA315_accept;
            this.special = DFA315_special;
            this.transition = DFA315_transition;
        }
        public String getDescription() {
            return "1678:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA315_0 = input.LA(1);
                        int index315_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_0==IDENT) ) {s = 1;}
                        else if ( (LA315_0==TICKED_STRING_LITERAL) ) {s = 2;}
                        else if ( (LA315_0==AT) && (synpred5_EsperEPL2Grammar())) {s = 3;}
                        else if ( (LA315_0==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 4;}
                        else if ( (LA315_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 5;}
                        else if ( (LA315_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 6;}
                        else if ( (LA315_0==SUM) && (synpred5_EsperEPL2Grammar())) {s = 7;}
                        else if ( (LA315_0==AVG) && (synpred5_EsperEPL2Grammar())) {s = 8;}
                        else if ( (LA315_0==MAX) ) {s = 9;}
                        else if ( (LA315_0==MIN) ) {s = 10;}
                        else if ( (LA315_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 11;}
                        else if ( (LA315_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 12;}
                        else if ( (LA315_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 13;}
                        else if ( (LA315_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 14;}
                        else if ( (LA315_0==EVENTS) ) {s = 15;}
                        else if ( (LA315_0==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 16;}
                        else if ( (LA315_0==LAST) && (synpred5_EsperEPL2Grammar())) {s = 17;}
                        else if ( (LA315_0==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 18;}
                        else if ( (LA315_0==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 19;}
                        else if ( (LA315_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 20;}
                        else if ( (LA315_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 21;}
                        else if ( (LA315_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 22;}
                        else if ( (LA315_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 23;}
                        else if ( (LA315_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 24;}
                        else if ( (LA315_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 25;}
                        else if ( (LA315_0==SQL) && (synpred5_EsperEPL2Grammar())) {s = 26;}
                        else if ( (LA315_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 27;}
                        else if ( (LA315_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 28;}
                        else if ( (LA315_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 29;}
                        else if ( (LA315_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 30;}
                        else if ( (LA315_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 31;}
                        else if ( (LA315_0==LW) && (synpred5_EsperEPL2Grammar())) {s = 32;}
                        else if ( (LA315_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 33;}
                        else if ( (LA315_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 34;}
                        else if ( (LA315_0==CAST) && (synpred5_EsperEPL2Grammar())) {s = 35;}
                        else if ( (LA315_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 36;}
                        else if ( (LA315_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 37;}
                        else if ( (LA315_0==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 38;}
                        else if ( (LA315_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 39;}
                        else if ( (LA315_0==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 40;}
                        else if ( (LA315_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 41;}
                        else if ( (LA315_0==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 42;}
                        else if ( (LA315_0==FULL) && (synpred5_EsperEPL2Grammar())) {s = 43;}
                        else if ( (LA315_0==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 44;}
                        else if ( (LA315_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 45;}
                        else if ( (LA315_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 46;}
                        else if ( (LA315_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 47;}
                        else if ( (LA315_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 48;}
                        else if ( (LA315_0==FOR) && (synpred5_EsperEPL2Grammar())) {s = 49;}
                        else if ( (LA315_0==USING) && (synpred5_EsperEPL2Grammar())) {s = 50;}
                        else if ( (LA315_0==BETWEEN||LA315_0==WHERE||LA315_0==SET||LA315_0==AFTER) ) {s = 51;}
                        input.seek(index315_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA315_1 = input.LA(1);
                        int index315_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 55;}
                        else if ( (LA315_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 56;}
                        else if ( (LA315_1==LPAREN) ) {s = 57;}
                        else if ( (LA315_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 58;}
                        else if ( (LA315_1==DOT) ) {s = 59;}
                        else if ( (LA315_1==STAR) && (synpred5_EsperEPL2Grammar())) {s = 60;}
                        else if ( (LA315_1==DIV) && (synpred5_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA315_1==MOD) && (synpred5_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA315_1==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA315_1==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA315_1==LOR) && (synpred5_EsperEPL2Grammar())) {s = 65;}
                        else if ( (LA315_1==LT) && (synpred5_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA315_1==GT) && (synpred5_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA315_1==LE) && (synpred5_EsperEPL2Grammar())) {s = 68;}
                        else if ( (LA315_1==GE) && (synpred5_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA315_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 70;}
                        else if ( (LA315_1==IS) && (synpred5_EsperEPL2Grammar())) {s = 71;}
                        else if ( (LA315_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 72;}
                        else if ( (LA315_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 73;}
                        else if ( (LA315_1==BAND) && (synpred5_EsperEPL2Grammar())) {s = 74;}
                        else if ( (LA315_1==BOR) && (synpred5_EsperEPL2Grammar())) {s = 75;}
                        else if ( (LA315_1==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 76;}
                        else if ( (LA315_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 77;}
                        else if ( (LA315_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 78;}
                        else if ( (LA315_1==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 79;}
                        else if ( (LA315_1==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 80;}
                        else if ( (LA315_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 81;}
                        else if ( (LA315_1==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 82;}
                        else if ( (LA315_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 83;}
                        else if ( (LA315_1==FOR) && (synpred5_EsperEPL2Grammar())) {s = 84;}
                        else if ( (LA315_1==EOF) && (synpred5_EsperEPL2Grammar())) {s = 85;}
                        else if ( (LA315_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 86;}
                        else if ( (LA315_1==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 87;}
                        else if ( (LA315_1==THEN) && (synpred5_EsperEPL2Grammar())) {s = 88;}
                        else if ( (LA315_1==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 89;}
                        else if ( (LA315_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 90;}
                        else if ( (LA315_1==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 91;}
                        else if ( (LA315_1==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 92;}
                        else if ( (LA315_1==AS) && (synpred5_EsperEPL2Grammar())) {s = 93;}
                        else if ( (LA315_1==FROM) && (synpred5_EsperEPL2Grammar())) {s = 94;}
                        else if ( (LA315_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 95;}
                        else if ( (LA315_1==ALL) && (synpred5_EsperEPL2Grammar())) {s = 96;}
                        else if ( (LA315_1==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 97;}
                        else if ( (LA315_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 98;}
                        else if ( (LA315_1==ASC) && (synpred5_EsperEPL2Grammar())) {s = 99;}
                        else if ( (LA315_1==DESC) && (synpred5_EsperEPL2Grammar())) {s = 100;}
                        else if ( (LA315_1==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 101;}
                        else if ( (LA315_1==END) && (synpred5_EsperEPL2Grammar())) {s = 102;}
                        else if ( (LA315_1==COLON) && (synpred5_EsperEPL2Grammar())) {s = 103;}
                        else if ( (LA315_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 104;}
                        else if ( (LA315_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 105;}
                        else if ( (LA315_1==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 106;}
                        else if ( (LA315_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 107;}
                        else if ( (LA315_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 108;}
                        else if ( (LA315_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 109;}
                        else if ( (LA315_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 110;}
                        else if ( (LA315_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 111;}
                        else if ( (LA315_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 112;}
                        else if ( (LA315_1==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 113;}
                        else if ( (LA315_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 114;}
                        else if ( (LA315_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 115;}
                        input.seek(index315_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA315_2 = input.LA(1);
                        int index315_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_2==LPAREN) ) {s = 116;}
                        else if ( (LA315_2==DOT) ) {s = 117;}
                        else if ( (LA315_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 118;}
                        else if ( (LA315_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 119;}
                        else if ( (LA315_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 120;}
                        else if ( (LA315_2==STAR) && (synpred5_EsperEPL2Grammar())) {s = 121;}
                        else if ( (LA315_2==DIV) && (synpred5_EsperEPL2Grammar())) {s = 122;}
                        else if ( (LA315_2==MOD) && (synpred5_EsperEPL2Grammar())) {s = 123;}
                        else if ( (LA315_2==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 124;}
                        else if ( (LA315_2==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 125;}
                        else if ( (LA315_2==LOR) && (synpred5_EsperEPL2Grammar())) {s = 126;}
                        else if ( (LA315_2==LT) && (synpred5_EsperEPL2Grammar())) {s = 127;}
                        else if ( (LA315_2==GT) && (synpred5_EsperEPL2Grammar())) {s = 128;}
                        else if ( (LA315_2==LE) && (synpred5_EsperEPL2Grammar())) {s = 129;}
                        else if ( (LA315_2==GE) && (synpred5_EsperEPL2Grammar())) {s = 130;}
                        else if ( (LA315_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 131;}
                        else if ( (LA315_2==IS) && (synpred5_EsperEPL2Grammar())) {s = 132;}
                        else if ( (LA315_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 133;}
                        else if ( (LA315_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 134;}
                        else if ( (LA315_2==BAND) && (synpred5_EsperEPL2Grammar())) {s = 135;}
                        else if ( (LA315_2==BOR) && (synpred5_EsperEPL2Grammar())) {s = 136;}
                        else if ( (LA315_2==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 137;}
                        else if ( (LA315_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 138;}
                        else if ( (LA315_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 139;}
                        else if ( (LA315_2==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 140;}
                        else if ( (LA315_2==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 141;}
                        else if ( (LA315_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 142;}
                        else if ( (LA315_2==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 143;}
                        else if ( (LA315_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 144;}
                        else if ( (LA315_2==FOR) && (synpred5_EsperEPL2Grammar())) {s = 145;}
                        else if ( (LA315_2==EOF) && (synpred5_EsperEPL2Grammar())) {s = 146;}
                        else if ( (LA315_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 147;}
                        else if ( (LA315_2==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 148;}
                        else if ( (LA315_2==THEN) && (synpred5_EsperEPL2Grammar())) {s = 149;}
                        else if ( (LA315_2==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 150;}
                        else if ( (LA315_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 151;}
                        else if ( (LA315_2==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 152;}
                        else if ( (LA315_2==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 153;}
                        else if ( (LA315_2==AS) && (synpred5_EsperEPL2Grammar())) {s = 154;}
                        else if ( (LA315_2==FROM) && (synpred5_EsperEPL2Grammar())) {s = 155;}
                        else if ( (LA315_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 156;}
                        else if ( (LA315_2==ALL) && (synpred5_EsperEPL2Grammar())) {s = 157;}
                        else if ( (LA315_2==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 158;}
                        else if ( (LA315_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 159;}
                        else if ( (LA315_2==ASC) && (synpred5_EsperEPL2Grammar())) {s = 160;}
                        else if ( (LA315_2==DESC) && (synpred5_EsperEPL2Grammar())) {s = 161;}
                        else if ( (LA315_2==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 162;}
                        else if ( (LA315_2==END) && (synpred5_EsperEPL2Grammar())) {s = 163;}
                        else if ( (LA315_2==COLON) && (synpred5_EsperEPL2Grammar())) {s = 164;}
                        else if ( (LA315_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 165;}
                        else if ( (LA315_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 166;}
                        else if ( (LA315_2==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 167;}
                        else if ( (LA315_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 168;}
                        else if ( (LA315_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 169;}
                        else if ( (LA315_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 170;}
                        else if ( (LA315_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 171;}
                        else if ( (LA315_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 172;}
                        else if ( (LA315_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 173;}
                        else if ( (LA315_2==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 174;}
                        else if ( (LA315_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 175;}
                        else if ( (LA315_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 176;}
                        input.seek(index315_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA315_9 = input.LA(1);
                        int index315_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_9==LPAREN) ) {s = 177;}
                        else if ( (LA315_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 178;}
                        else if ( (LA315_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 179;}
                        else if ( (LA315_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 180;}
                        else if ( (LA315_9==DOT) && (synpred5_EsperEPL2Grammar())) {s = 181;}
                        else if ( (LA315_9==STAR) && (synpred5_EsperEPL2Grammar())) {s = 182;}
                        else if ( (LA315_9==DIV) && (synpred5_EsperEPL2Grammar())) {s = 183;}
                        else if ( (LA315_9==MOD) && (synpred5_EsperEPL2Grammar())) {s = 184;}
                        else if ( (LA315_9==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 185;}
                        else if ( (LA315_9==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 186;}
                        else if ( (LA315_9==LOR) && (synpred5_EsperEPL2Grammar())) {s = 187;}
                        else if ( (LA315_9==LT) && (synpred5_EsperEPL2Grammar())) {s = 188;}
                        else if ( (LA315_9==GT) && (synpred5_EsperEPL2Grammar())) {s = 189;}
                        else if ( (LA315_9==LE) && (synpred5_EsperEPL2Grammar())) {s = 190;}
                        else if ( (LA315_9==GE) && (synpred5_EsperEPL2Grammar())) {s = 191;}
                        else if ( (LA315_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 192;}
                        else if ( (LA315_9==IS) && (synpred5_EsperEPL2Grammar())) {s = 193;}
                        else if ( (LA315_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 194;}
                        else if ( (LA315_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 195;}
                        else if ( (LA315_9==BAND) && (synpred5_EsperEPL2Grammar())) {s = 196;}
                        else if ( (LA315_9==BOR) && (synpred5_EsperEPL2Grammar())) {s = 197;}
                        else if ( (LA315_9==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 198;}
                        else if ( (LA315_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 199;}
                        else if ( (LA315_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 200;}
                        else if ( (LA315_9==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 201;}
                        else if ( (LA315_9==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 202;}
                        else if ( (LA315_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 203;}
                        else if ( (LA315_9==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 204;}
                        else if ( (LA315_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 205;}
                        else if ( (LA315_9==FOR) && (synpred5_EsperEPL2Grammar())) {s = 206;}
                        else if ( (LA315_9==EOF) && (synpred5_EsperEPL2Grammar())) {s = 207;}
                        else if ( (LA315_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 208;}
                        else if ( (LA315_9==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 209;}
                        else if ( (LA315_9==THEN) && (synpred5_EsperEPL2Grammar())) {s = 210;}
                        else if ( (LA315_9==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 211;}
                        else if ( (LA315_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 212;}
                        else if ( (LA315_9==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 213;}
                        else if ( (LA315_9==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 214;}
                        else if ( (LA315_9==AS) && (synpred5_EsperEPL2Grammar())) {s = 215;}
                        else if ( (LA315_9==FROM) && (synpred5_EsperEPL2Grammar())) {s = 216;}
                        else if ( (LA315_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 217;}
                        else if ( (LA315_9==ALL) && (synpred5_EsperEPL2Grammar())) {s = 218;}
                        else if ( (LA315_9==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 219;}
                        else if ( (LA315_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 220;}
                        else if ( (LA315_9==ASC) && (synpred5_EsperEPL2Grammar())) {s = 221;}
                        else if ( (LA315_9==DESC) && (synpred5_EsperEPL2Grammar())) {s = 222;}
                        else if ( (LA315_9==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 223;}
                        else if ( (LA315_9==END) && (synpred5_EsperEPL2Grammar())) {s = 224;}
                        else if ( (LA315_9==COLON) && (synpred5_EsperEPL2Grammar())) {s = 225;}
                        else if ( (LA315_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 226;}
                        else if ( (LA315_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 227;}
                        else if ( (LA315_9==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 228;}
                        else if ( (LA315_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 229;}
                        else if ( (LA315_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 230;}
                        else if ( (LA315_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 231;}
                        else if ( (LA315_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 232;}
                        else if ( (LA315_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 233;}
                        else if ( (LA315_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 234;}
                        else if ( (LA315_9==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 235;}
                        else if ( (LA315_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 236;}
                        else if ( (LA315_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 237;}
                        input.seek(index315_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA315_10 = input.LA(1);
                        int index315_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_10==LPAREN) ) {s = 238;}
                        else if ( (LA315_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 239;}
                        else if ( (LA315_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 240;}
                        else if ( (LA315_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 241;}
                        else if ( (LA315_10==DOT) && (synpred5_EsperEPL2Grammar())) {s = 242;}
                        else if ( (LA315_10==STAR) && (synpred5_EsperEPL2Grammar())) {s = 243;}
                        else if ( (LA315_10==DIV) && (synpred5_EsperEPL2Grammar())) {s = 244;}
                        else if ( (LA315_10==MOD) && (synpred5_EsperEPL2Grammar())) {s = 245;}
                        else if ( (LA315_10==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 246;}
                        else if ( (LA315_10==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 247;}
                        else if ( (LA315_10==LOR) && (synpred5_EsperEPL2Grammar())) {s = 248;}
                        else if ( (LA315_10==LT) && (synpred5_EsperEPL2Grammar())) {s = 249;}
                        else if ( (LA315_10==GT) && (synpred5_EsperEPL2Grammar())) {s = 250;}
                        else if ( (LA315_10==LE) && (synpred5_EsperEPL2Grammar())) {s = 251;}
                        else if ( (LA315_10==GE) && (synpred5_EsperEPL2Grammar())) {s = 252;}
                        else if ( (LA315_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 253;}
                        else if ( (LA315_10==IS) && (synpred5_EsperEPL2Grammar())) {s = 254;}
                        else if ( (LA315_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 255;}
                        else if ( (LA315_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 256;}
                        else if ( (LA315_10==BAND) && (synpred5_EsperEPL2Grammar())) {s = 257;}
                        else if ( (LA315_10==BOR) && (synpred5_EsperEPL2Grammar())) {s = 258;}
                        else if ( (LA315_10==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 259;}
                        else if ( (LA315_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 260;}
                        else if ( (LA315_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 261;}
                        else if ( (LA315_10==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 262;}
                        else if ( (LA315_10==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 263;}
                        else if ( (LA315_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 264;}
                        else if ( (LA315_10==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 265;}
                        else if ( (LA315_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 266;}
                        else if ( (LA315_10==FOR) && (synpred5_EsperEPL2Grammar())) {s = 267;}
                        else if ( (LA315_10==EOF) && (synpred5_EsperEPL2Grammar())) {s = 268;}
                        else if ( (LA315_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 269;}
                        else if ( (LA315_10==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 270;}
                        else if ( (LA315_10==THEN) && (synpred5_EsperEPL2Grammar())) {s = 271;}
                        else if ( (LA315_10==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 272;}
                        else if ( (LA315_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 273;}
                        else if ( (LA315_10==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 274;}
                        else if ( (LA315_10==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 275;}
                        else if ( (LA315_10==AS) && (synpred5_EsperEPL2Grammar())) {s = 276;}
                        else if ( (LA315_10==FROM) && (synpred5_EsperEPL2Grammar())) {s = 277;}
                        else if ( (LA315_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 278;}
                        else if ( (LA315_10==ALL) && (synpred5_EsperEPL2Grammar())) {s = 279;}
                        else if ( (LA315_10==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 280;}
                        else if ( (LA315_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 281;}
                        else if ( (LA315_10==ASC) && (synpred5_EsperEPL2Grammar())) {s = 282;}
                        else if ( (LA315_10==DESC) && (synpred5_EsperEPL2Grammar())) {s = 283;}
                        else if ( (LA315_10==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 284;}
                        else if ( (LA315_10==END) && (synpred5_EsperEPL2Grammar())) {s = 285;}
                        else if ( (LA315_10==COLON) && (synpred5_EsperEPL2Grammar())) {s = 286;}
                        else if ( (LA315_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 287;}
                        else if ( (LA315_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 288;}
                        else if ( (LA315_10==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 289;}
                        else if ( (LA315_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 290;}
                        else if ( (LA315_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 291;}
                        else if ( (LA315_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 292;}
                        else if ( (LA315_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 293;}
                        else if ( (LA315_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 294;}
                        else if ( (LA315_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 295;}
                        else if ( (LA315_10==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 296;}
                        else if ( (LA315_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 297;}
                        else if ( (LA315_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 298;}
                        input.seek(index315_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA315_15 = input.LA(1);
                        int index315_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_15==DOT) ) {s = 299;}
                        else if ( (LA315_15==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 300;}
                        else if ( (LA315_15==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 301;}
                        else if ( (LA315_15==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 302;}
                        else if ( (LA315_15==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 303;}
                        else if ( (LA315_15==STAR) && (synpred5_EsperEPL2Grammar())) {s = 304;}
                        else if ( (LA315_15==DIV) && (synpred5_EsperEPL2Grammar())) {s = 305;}
                        else if ( (LA315_15==MOD) && (synpred5_EsperEPL2Grammar())) {s = 306;}
                        else if ( (LA315_15==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 307;}
                        else if ( (LA315_15==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 308;}
                        else if ( (LA315_15==LOR) && (synpred5_EsperEPL2Grammar())) {s = 309;}
                        else if ( (LA315_15==LT) && (synpred5_EsperEPL2Grammar())) {s = 310;}
                        else if ( (LA315_15==GT) && (synpred5_EsperEPL2Grammar())) {s = 311;}
                        else if ( (LA315_15==LE) && (synpred5_EsperEPL2Grammar())) {s = 312;}
                        else if ( (LA315_15==GE) && (synpred5_EsperEPL2Grammar())) {s = 313;}
                        else if ( (LA315_15==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 314;}
                        else if ( (LA315_15==IS) && (synpred5_EsperEPL2Grammar())) {s = 315;}
                        else if ( (LA315_15==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 316;}
                        else if ( (LA315_15==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 317;}
                        else if ( (LA315_15==BAND) && (synpred5_EsperEPL2Grammar())) {s = 318;}
                        else if ( (LA315_15==BOR) && (synpred5_EsperEPL2Grammar())) {s = 319;}
                        else if ( (LA315_15==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 320;}
                        else if ( (LA315_15==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 321;}
                        else if ( (LA315_15==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 322;}
                        else if ( (LA315_15==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 323;}
                        else if ( (LA315_15==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 324;}
                        else if ( (LA315_15==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 325;}
                        else if ( (LA315_15==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 326;}
                        else if ( (LA315_15==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 327;}
                        else if ( (LA315_15==FOR) && (synpred5_EsperEPL2Grammar())) {s = 328;}
                        else if ( (LA315_15==EOF) && (synpred5_EsperEPL2Grammar())) {s = 329;}
                        else if ( (LA315_15==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 330;}
                        else if ( (LA315_15==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 331;}
                        else if ( (LA315_15==THEN) && (synpred5_EsperEPL2Grammar())) {s = 332;}
                        else if ( (LA315_15==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 333;}
                        else if ( (LA315_15==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 334;}
                        else if ( (LA315_15==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 335;}
                        else if ( (LA315_15==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 336;}
                        else if ( (LA315_15==AS) && (synpred5_EsperEPL2Grammar())) {s = 337;}
                        else if ( (LA315_15==FROM) && (synpred5_EsperEPL2Grammar())) {s = 338;}
                        else if ( (LA315_15==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 339;}
                        else if ( (LA315_15==ALL) && (synpred5_EsperEPL2Grammar())) {s = 340;}
                        else if ( (LA315_15==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 341;}
                        else if ( (LA315_15==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 342;}
                        else if ( (LA315_15==ASC) && (synpred5_EsperEPL2Grammar())) {s = 343;}
                        else if ( (LA315_15==DESC) && (synpred5_EsperEPL2Grammar())) {s = 344;}
                        else if ( (LA315_15==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 345;}
                        else if ( (LA315_15==END) && (synpred5_EsperEPL2Grammar())) {s = 346;}
                        else if ( (LA315_15==COLON) && (synpred5_EsperEPL2Grammar())) {s = 347;}
                        else if ( (LA315_15==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 348;}
                        else if ( (LA315_15==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 349;}
                        else if ( (LA315_15==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 350;}
                        else if ( (LA315_15==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 351;}
                        else if ( (LA315_15==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 352;}
                        else if ( (LA315_15==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 353;}
                        else if ( (LA315_15==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 354;}
                        else if ( (LA315_15==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 355;}
                        else if ( (LA315_15==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 356;}
                        else if ( (LA315_15==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 357;}
                        else if ( (LA315_15==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 358;}
                        else if ( (LA315_15==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 359;}
                        input.seek(index315_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA315_59 = input.LA(1);
                        int index315_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_59==IDENT) ) {s = 441;}
                        else if ( (LA315_59==TICKED_STRING_LITERAL) ) {s = 442;}
                        else if ( (LA315_59==AT) && (synpred5_EsperEPL2Grammar())) {s = 443;}
                        else if ( (LA315_59==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 444;}
                        else if ( (LA315_59==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 445;}
                        else if ( (LA315_59==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 446;}
                        else if ( (LA315_59==SUM) && (synpred5_EsperEPL2Grammar())) {s = 447;}
                        else if ( (LA315_59==AVG) && (synpred5_EsperEPL2Grammar())) {s = 448;}
                        else if ( (LA315_59==MAX) ) {s = 449;}
                        else if ( (LA315_59==MIN) ) {s = 450;}
                        else if ( (LA315_59==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 451;}
                        else if ( (LA315_59==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 452;}
                        else if ( (LA315_59==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 453;}
                        else if ( (LA315_59==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 454;}
                        else if ( (LA315_59==EVENTS) ) {s = 455;}
                        else if ( (LA315_59==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 456;}
                        else if ( (LA315_59==LAST) && (synpred5_EsperEPL2Grammar())) {s = 457;}
                        else if ( (LA315_59==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 458;}
                        else if ( (LA315_59==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 459;}
                        else if ( (LA315_59==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 460;}
                        else if ( (LA315_59==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 461;}
                        else if ( (LA315_59==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 462;}
                        else if ( (LA315_59==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 463;}
                        else if ( (LA315_59==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 464;}
                        else if ( (LA315_59==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 465;}
                        else if ( (LA315_59==SQL) && (synpred5_EsperEPL2Grammar())) {s = 466;}
                        else if ( (LA315_59==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 467;}
                        else if ( (LA315_59==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 468;}
                        else if ( (LA315_59==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 469;}
                        else if ( (LA315_59==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 470;}
                        else if ( (LA315_59==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 471;}
                        else if ( (LA315_59==LW) && (synpred5_EsperEPL2Grammar())) {s = 472;}
                        else if ( (LA315_59==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 473;}
                        else if ( (LA315_59==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 474;}
                        else if ( (LA315_59==CAST) && (synpred5_EsperEPL2Grammar())) {s = 475;}
                        else if ( (LA315_59==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 476;}
                        else if ( (LA315_59==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 477;}
                        else if ( (LA315_59==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 478;}
                        else if ( (LA315_59==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 479;}
                        else if ( (LA315_59==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 480;}
                        else if ( (LA315_59==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 481;}
                        else if ( (LA315_59==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 482;}
                        else if ( (LA315_59==FULL) && (synpred5_EsperEPL2Grammar())) {s = 483;}
                        else if ( (LA315_59==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 484;}
                        else if ( (LA315_59==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 485;}
                        else if ( (LA315_59==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 486;}
                        else if ( (LA315_59==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 487;}
                        else if ( (LA315_59==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 488;}
                        else if ( (LA315_59==FOR) && (synpred5_EsperEPL2Grammar())) {s = 489;}
                        else if ( (LA315_59==USING) && (synpred5_EsperEPL2Grammar())) {s = 490;}
                        else if ( (LA315_59==BETWEEN||LA315_59==WHERE||LA315_59==SET||LA315_59==AFTER) ) {s = 51;}
                        input.seek(index315_59);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA315_117 = input.LA(1);
                        int index315_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_117==IDENT) ) {s = 576;}
                        else if ( (LA315_117==TICKED_STRING_LITERAL) ) {s = 577;}
                        else if ( (LA315_117==AT) && (synpred5_EsperEPL2Grammar())) {s = 578;}
                        else if ( (LA315_117==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 579;}
                        else if ( (LA315_117==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 580;}
                        else if ( (LA315_117==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 581;}
                        else if ( (LA315_117==SUM) && (synpred5_EsperEPL2Grammar())) {s = 582;}
                        else if ( (LA315_117==AVG) && (synpred5_EsperEPL2Grammar())) {s = 583;}
                        else if ( (LA315_117==MAX) ) {s = 584;}
                        else if ( (LA315_117==MIN) ) {s = 585;}
                        else if ( (LA315_117==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 586;}
                        else if ( (LA315_117==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 587;}
                        else if ( (LA315_117==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 588;}
                        else if ( (LA315_117==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 589;}
                        else if ( (LA315_117==EVENTS) ) {s = 590;}
                        else if ( (LA315_117==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 591;}
                        else if ( (LA315_117==LAST) && (synpred5_EsperEPL2Grammar())) {s = 592;}
                        else if ( (LA315_117==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 593;}
                        else if ( (LA315_117==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 594;}
                        else if ( (LA315_117==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 595;}
                        else if ( (LA315_117==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 596;}
                        else if ( (LA315_117==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 597;}
                        else if ( (LA315_117==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 598;}
                        else if ( (LA315_117==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 599;}
                        else if ( (LA315_117==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 600;}
                        else if ( (LA315_117==SQL) && (synpred5_EsperEPL2Grammar())) {s = 601;}
                        else if ( (LA315_117==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 602;}
                        else if ( (LA315_117==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 603;}
                        else if ( (LA315_117==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 604;}
                        else if ( (LA315_117==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 605;}
                        else if ( (LA315_117==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 606;}
                        else if ( (LA315_117==LW) && (synpred5_EsperEPL2Grammar())) {s = 607;}
                        else if ( (LA315_117==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 608;}
                        else if ( (LA315_117==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 609;}
                        else if ( (LA315_117==CAST) && (synpred5_EsperEPL2Grammar())) {s = 610;}
                        else if ( (LA315_117==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 611;}
                        else if ( (LA315_117==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 612;}
                        else if ( (LA315_117==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 613;}
                        else if ( (LA315_117==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 614;}
                        else if ( (LA315_117==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 615;}
                        else if ( (LA315_117==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 616;}
                        else if ( (LA315_117==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 617;}
                        else if ( (LA315_117==FULL) && (synpred5_EsperEPL2Grammar())) {s = 618;}
                        else if ( (LA315_117==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 619;}
                        else if ( (LA315_117==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 620;}
                        else if ( (LA315_117==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 621;}
                        else if ( (LA315_117==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 622;}
                        else if ( (LA315_117==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 623;}
                        else if ( (LA315_117==FOR) && (synpred5_EsperEPL2Grammar())) {s = 624;}
                        else if ( (LA315_117==USING) && (synpred5_EsperEPL2Grammar())) {s = 625;}
                        else if ( (LA315_117==BETWEEN||LA315_117==WHERE||LA315_117==SET||LA315_117==AFTER) ) {s = 51;}
                        input.seek(index315_117);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA315_299 = input.LA(1);
                        int index315_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_299==IDENT) ) {s = 792;}
                        else if ( (LA315_299==TICKED_STRING_LITERAL) ) {s = 793;}
                        else if ( (LA315_299==AT) && (synpred5_EsperEPL2Grammar())) {s = 794;}
                        else if ( (LA315_299==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 795;}
                        else if ( (LA315_299==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 796;}
                        else if ( (LA315_299==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 797;}
                        else if ( (LA315_299==SUM) && (synpred5_EsperEPL2Grammar())) {s = 798;}
                        else if ( (LA315_299==AVG) && (synpred5_EsperEPL2Grammar())) {s = 799;}
                        else if ( (LA315_299==MAX) ) {s = 800;}
                        else if ( (LA315_299==MIN) ) {s = 801;}
                        else if ( (LA315_299==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 802;}
                        else if ( (LA315_299==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 803;}
                        else if ( (LA315_299==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 804;}
                        else if ( (LA315_299==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 805;}
                        else if ( (LA315_299==EVENTS) ) {s = 806;}
                        else if ( (LA315_299==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 807;}
                        else if ( (LA315_299==LAST) && (synpred5_EsperEPL2Grammar())) {s = 808;}
                        else if ( (LA315_299==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 809;}
                        else if ( (LA315_299==MERGE) && (synpred5_EsperEPL2Grammar())) {s = 810;}
                        else if ( (LA315_299==MATCHED) && (synpred5_EsperEPL2Grammar())) {s = 811;}
                        else if ( (LA315_299==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 812;}
                        else if ( (LA315_299==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 813;}
                        else if ( (LA315_299==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 814;}
                        else if ( (LA315_299==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 815;}
                        else if ( (LA315_299==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 816;}
                        else if ( (LA315_299==SQL) && (synpred5_EsperEPL2Grammar())) {s = 817;}
                        else if ( (LA315_299==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 818;}
                        else if ( (LA315_299==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 819;}
                        else if ( (LA315_299==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {s = 820;}
                        else if ( (LA315_299==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 821;}
                        else if ( (LA315_299==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 822;}
                        else if ( (LA315_299==LW) && (synpred5_EsperEPL2Grammar())) {s = 823;}
                        else if ( (LA315_299==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 824;}
                        else if ( (LA315_299==TYPEOF) && (synpred5_EsperEPL2Grammar())) {s = 825;}
                        else if ( (LA315_299==CAST) && (synpred5_EsperEPL2Grammar())) {s = 826;}
                        else if ( (LA315_299==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 827;}
                        else if ( (LA315_299==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 828;}
                        else if ( (LA315_299==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 829;}
                        else if ( (LA315_299==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 830;}
                        else if ( (LA315_299==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 831;}
                        else if ( (LA315_299==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 832;}
                        else if ( (LA315_299==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 833;}
                        else if ( (LA315_299==FULL) && (synpred5_EsperEPL2Grammar())) {s = 834;}
                        else if ( (LA315_299==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 835;}
                        else if ( (LA315_299==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 836;}
                        else if ( (LA315_299==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 837;}
                        else if ( (LA315_299==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 838;}
                        else if ( (LA315_299==CONTEXT) && (synpred5_EsperEPL2Grammar())) {s = 839;}
                        else if ( (LA315_299==FOR) && (synpred5_EsperEPL2Grammar())) {s = 840;}
                        else if ( (LA315_299==USING) && (synpred5_EsperEPL2Grammar())) {s = 841;}
                        else if ( (LA315_299==BETWEEN||LA315_299==WHERE||LA315_299==SET||LA315_299==AFTER) ) {s = 51;}
                        input.seek(index315_299);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA315_441 = input.LA(1);
                        int index315_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_441==DOT) ) {s = 908;}
                        else if ( (LA315_441==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 909;}
                        else if ( (LA315_441==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 910;}
                        else if ( (LA315_441==LPAREN) ) {s = 911;}
                        else if ( (LA315_441==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 912;}
                        else if ( (LA315_441==STAR) && (synpred5_EsperEPL2Grammar())) {s = 913;}
                        else if ( (LA315_441==DIV) && (synpred5_EsperEPL2Grammar())) {s = 914;}
                        else if ( (LA315_441==MOD) && (synpred5_EsperEPL2Grammar())) {s = 915;}
                        else if ( (LA315_441==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 916;}
                        else if ( (LA315_441==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 917;}
                        else if ( (LA315_441==LOR) && (synpred5_EsperEPL2Grammar())) {s = 918;}
                        else if ( (LA315_441==LT) && (synpred5_EsperEPL2Grammar())) {s = 919;}
                        else if ( (LA315_441==GT) && (synpred5_EsperEPL2Grammar())) {s = 920;}
                        else if ( (LA315_441==LE) && (synpred5_EsperEPL2Grammar())) {s = 921;}
                        else if ( (LA315_441==GE) && (synpred5_EsperEPL2Grammar())) {s = 922;}
                        else if ( (LA315_441==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 923;}
                        else if ( (LA315_441==IS) && (synpred5_EsperEPL2Grammar())) {s = 924;}
                        else if ( (LA315_441==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 925;}
                        else if ( (LA315_441==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 926;}
                        else if ( (LA315_441==BAND) && (synpred5_EsperEPL2Grammar())) {s = 927;}
                        else if ( (LA315_441==BOR) && (synpred5_EsperEPL2Grammar())) {s = 928;}
                        else if ( (LA315_441==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 929;}
                        else if ( (LA315_441==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 930;}
                        else if ( (LA315_441==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 931;}
                        else if ( (LA315_441==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 932;}
                        else if ( (LA315_441==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 933;}
                        else if ( (LA315_441==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 934;}
                        else if ( (LA315_441==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 935;}
                        else if ( (LA315_441==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 936;}
                        else if ( (LA315_441==FOR) && (synpred5_EsperEPL2Grammar())) {s = 937;}
                        else if ( (LA315_441==EOF) && (synpred5_EsperEPL2Grammar())) {s = 938;}
                        else if ( (LA315_441==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 939;}
                        else if ( (LA315_441==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 940;}
                        else if ( (LA315_441==THEN) && (synpred5_EsperEPL2Grammar())) {s = 941;}
                        else if ( (LA315_441==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 942;}
                        else if ( (LA315_441==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 943;}
                        else if ( (LA315_441==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 944;}
                        else if ( (LA315_441==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 945;}
                        else if ( (LA315_441==AS) && (synpred5_EsperEPL2Grammar())) {s = 946;}
                        else if ( (LA315_441==FROM) && (synpred5_EsperEPL2Grammar())) {s = 947;}
                        else if ( (LA315_441==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 948;}
                        else if ( (LA315_441==ALL) && (synpred5_EsperEPL2Grammar())) {s = 949;}
                        else if ( (LA315_441==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 950;}
                        else if ( (LA315_441==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 951;}
                        else if ( (LA315_441==ASC) && (synpred5_EsperEPL2Grammar())) {s = 952;}
                        else if ( (LA315_441==DESC) && (synpred5_EsperEPL2Grammar())) {s = 953;}
                        else if ( (LA315_441==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 954;}
                        else if ( (LA315_441==END) && (synpred5_EsperEPL2Grammar())) {s = 955;}
                        else if ( (LA315_441==COLON) && (synpred5_EsperEPL2Grammar())) {s = 956;}
                        else if ( (LA315_441==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 957;}
                        else if ( (LA315_441==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 958;}
                        else if ( (LA315_441==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 959;}
                        else if ( (LA315_441==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 960;}
                        else if ( (LA315_441==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 961;}
                        else if ( (LA315_441==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 962;}
                        else if ( (LA315_441==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 963;}
                        else if ( (LA315_441==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 964;}
                        else if ( (LA315_441==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 965;}
                        else if ( (LA315_441==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 966;}
                        else if ( (LA315_441==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 967;}
                        else if ( (LA315_441==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 968;}
                        input.seek(index315_441);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA315_442 = input.LA(1);
                        int index315_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_442==LPAREN) ) {s = 969;}
                        else if ( (LA315_442==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 970;}
                        else if ( (LA315_442==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 971;}
                        else if ( (LA315_442==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 972;}
                        else if ( (LA315_442==STAR) && (synpred5_EsperEPL2Grammar())) {s = 973;}
                        else if ( (LA315_442==DIV) && (synpred5_EsperEPL2Grammar())) {s = 974;}
                        else if ( (LA315_442==MOD) && (synpred5_EsperEPL2Grammar())) {s = 975;}
                        else if ( (LA315_442==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 976;}
                        else if ( (LA315_442==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 977;}
                        else if ( (LA315_442==LOR) && (synpred5_EsperEPL2Grammar())) {s = 978;}
                        else if ( (LA315_442==LT) && (synpred5_EsperEPL2Grammar())) {s = 979;}
                        else if ( (LA315_442==GT) && (synpred5_EsperEPL2Grammar())) {s = 980;}
                        else if ( (LA315_442==LE) && (synpred5_EsperEPL2Grammar())) {s = 981;}
                        else if ( (LA315_442==GE) && (synpred5_EsperEPL2Grammar())) {s = 982;}
                        else if ( (LA315_442==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 983;}
                        else if ( (LA315_442==IS) && (synpred5_EsperEPL2Grammar())) {s = 984;}
                        else if ( (LA315_442==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 985;}
                        else if ( (LA315_442==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 986;}
                        else if ( (LA315_442==BAND) && (synpred5_EsperEPL2Grammar())) {s = 987;}
                        else if ( (LA315_442==BOR) && (synpred5_EsperEPL2Grammar())) {s = 988;}
                        else if ( (LA315_442==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 989;}
                        else if ( (LA315_442==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 990;}
                        else if ( (LA315_442==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 991;}
                        else if ( (LA315_442==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 992;}
                        else if ( (LA315_442==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 993;}
                        else if ( (LA315_442==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 994;}
                        else if ( (LA315_442==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 995;}
                        else if ( (LA315_442==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 996;}
                        else if ( (LA315_442==FOR) && (synpred5_EsperEPL2Grammar())) {s = 997;}
                        else if ( (LA315_442==EOF) && (synpred5_EsperEPL2Grammar())) {s = 998;}
                        else if ( (LA315_442==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 999;}
                        else if ( (LA315_442==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1000;}
                        else if ( (LA315_442==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1001;}
                        else if ( (LA315_442==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1002;}
                        else if ( (LA315_442==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1003;}
                        else if ( (LA315_442==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1004;}
                        else if ( (LA315_442==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1005;}
                        else if ( (LA315_442==AS) && (synpred5_EsperEPL2Grammar())) {s = 1006;}
                        else if ( (LA315_442==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1007;}
                        else if ( (LA315_442==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1008;}
                        else if ( (LA315_442==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1009;}
                        else if ( (LA315_442==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1010;}
                        else if ( (LA315_442==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1011;}
                        else if ( (LA315_442==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1012;}
                        else if ( (LA315_442==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1013;}
                        else if ( (LA315_442==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1014;}
                        else if ( (LA315_442==END) && (synpred5_EsperEPL2Grammar())) {s = 1015;}
                        else if ( (LA315_442==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1016;}
                        else if ( (LA315_442==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1017;}
                        else if ( (LA315_442==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1018;}
                        else if ( (LA315_442==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1019;}
                        else if ( (LA315_442==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1020;}
                        else if ( (LA315_442==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1021;}
                        else if ( (LA315_442==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1022;}
                        else if ( (LA315_442==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1023;}
                        else if ( (LA315_442==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1024;}
                        else if ( (LA315_442==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1025;}
                        else if ( (LA315_442==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1026;}
                        else if ( (LA315_442==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1027;}
                        else if ( (LA315_442==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1028;}
                        else if ( (LA315_442==DOT) ) {s = 1029;}
                        input.seek(index315_442);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA315_449 = input.LA(1);
                        int index315_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_449==LPAREN) ) {s = 1030;}
                        else if ( (LA315_449==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1031;}
                        else if ( (LA315_449==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1032;}
                        else if ( (LA315_449==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1033;}
                        else if ( (LA315_449==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1034;}
                        else if ( (LA315_449==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1035;}
                        else if ( (LA315_449==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1036;}
                        else if ( (LA315_449==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1037;}
                        else if ( (LA315_449==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1038;}
                        else if ( (LA315_449==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1039;}
                        else if ( (LA315_449==LT) && (synpred5_EsperEPL2Grammar())) {s = 1040;}
                        else if ( (LA315_449==GT) && (synpred5_EsperEPL2Grammar())) {s = 1041;}
                        else if ( (LA315_449==LE) && (synpred5_EsperEPL2Grammar())) {s = 1042;}
                        else if ( (LA315_449==GE) && (synpred5_EsperEPL2Grammar())) {s = 1043;}
                        else if ( (LA315_449==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1044;}
                        else if ( (LA315_449==IS) && (synpred5_EsperEPL2Grammar())) {s = 1045;}
                        else if ( (LA315_449==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1046;}
                        else if ( (LA315_449==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1047;}
                        else if ( (LA315_449==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1048;}
                        else if ( (LA315_449==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1049;}
                        else if ( (LA315_449==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1050;}
                        else if ( (LA315_449==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1051;}
                        else if ( (LA315_449==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1052;}
                        else if ( (LA315_449==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1053;}
                        else if ( (LA315_449==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1054;}
                        else if ( (LA315_449==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1055;}
                        else if ( (LA315_449==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1056;}
                        else if ( (LA315_449==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1057;}
                        else if ( (LA315_449==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1058;}
                        else if ( (LA315_449==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1059;}
                        else if ( (LA315_449==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1060;}
                        else if ( (LA315_449==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1061;}
                        else if ( (LA315_449==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1062;}
                        else if ( (LA315_449==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1063;}
                        else if ( (LA315_449==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1064;}
                        else if ( (LA315_449==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1065;}
                        else if ( (LA315_449==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1066;}
                        else if ( (LA315_449==AS) && (synpred5_EsperEPL2Grammar())) {s = 1067;}
                        else if ( (LA315_449==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1068;}
                        else if ( (LA315_449==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1069;}
                        else if ( (LA315_449==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1070;}
                        else if ( (LA315_449==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1071;}
                        else if ( (LA315_449==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1072;}
                        else if ( (LA315_449==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1073;}
                        else if ( (LA315_449==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1074;}
                        else if ( (LA315_449==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1075;}
                        else if ( (LA315_449==END) && (synpred5_EsperEPL2Grammar())) {s = 1076;}
                        else if ( (LA315_449==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1077;}
                        else if ( (LA315_449==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1078;}
                        else if ( (LA315_449==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1079;}
                        else if ( (LA315_449==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1080;}
                        else if ( (LA315_449==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1081;}
                        else if ( (LA315_449==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1082;}
                        else if ( (LA315_449==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1083;}
                        else if ( (LA315_449==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1084;}
                        else if ( (LA315_449==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1085;}
                        else if ( (LA315_449==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1086;}
                        else if ( (LA315_449==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1087;}
                        else if ( (LA315_449==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1088;}
                        else if ( (LA315_449==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1089;}
                        else if ( (LA315_449==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1090;}
                        input.seek(index315_449);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA315_450 = input.LA(1);
                        int index315_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_450==LPAREN) ) {s = 1091;}
                        else if ( (LA315_450==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1092;}
                        else if ( (LA315_450==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1093;}
                        else if ( (LA315_450==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1094;}
                        else if ( (LA315_450==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1095;}
                        else if ( (LA315_450==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1096;}
                        else if ( (LA315_450==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1097;}
                        else if ( (LA315_450==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1098;}
                        else if ( (LA315_450==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1099;}
                        else if ( (LA315_450==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1100;}
                        else if ( (LA315_450==LT) && (synpred5_EsperEPL2Grammar())) {s = 1101;}
                        else if ( (LA315_450==GT) && (synpred5_EsperEPL2Grammar())) {s = 1102;}
                        else if ( (LA315_450==LE) && (synpred5_EsperEPL2Grammar())) {s = 1103;}
                        else if ( (LA315_450==GE) && (synpred5_EsperEPL2Grammar())) {s = 1104;}
                        else if ( (LA315_450==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1105;}
                        else if ( (LA315_450==IS) && (synpred5_EsperEPL2Grammar())) {s = 1106;}
                        else if ( (LA315_450==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1107;}
                        else if ( (LA315_450==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1108;}
                        else if ( (LA315_450==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1109;}
                        else if ( (LA315_450==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1110;}
                        else if ( (LA315_450==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1111;}
                        else if ( (LA315_450==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1112;}
                        else if ( (LA315_450==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1113;}
                        else if ( (LA315_450==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1114;}
                        else if ( (LA315_450==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1115;}
                        else if ( (LA315_450==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1116;}
                        else if ( (LA315_450==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1117;}
                        else if ( (LA315_450==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1118;}
                        else if ( (LA315_450==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1119;}
                        else if ( (LA315_450==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1120;}
                        else if ( (LA315_450==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1121;}
                        else if ( (LA315_450==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1122;}
                        else if ( (LA315_450==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1123;}
                        else if ( (LA315_450==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1124;}
                        else if ( (LA315_450==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1125;}
                        else if ( (LA315_450==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1126;}
                        else if ( (LA315_450==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1127;}
                        else if ( (LA315_450==AS) && (synpred5_EsperEPL2Grammar())) {s = 1128;}
                        else if ( (LA315_450==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1129;}
                        else if ( (LA315_450==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1130;}
                        else if ( (LA315_450==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1131;}
                        else if ( (LA315_450==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1132;}
                        else if ( (LA315_450==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1133;}
                        else if ( (LA315_450==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1134;}
                        else if ( (LA315_450==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1135;}
                        else if ( (LA315_450==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1136;}
                        else if ( (LA315_450==END) && (synpred5_EsperEPL2Grammar())) {s = 1137;}
                        else if ( (LA315_450==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1138;}
                        else if ( (LA315_450==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1139;}
                        else if ( (LA315_450==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1140;}
                        else if ( (LA315_450==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1141;}
                        else if ( (LA315_450==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1142;}
                        else if ( (LA315_450==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1143;}
                        else if ( (LA315_450==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1144;}
                        else if ( (LA315_450==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1145;}
                        else if ( (LA315_450==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA315_450==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA315_450==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA315_450==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA315_450==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA315_450==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1151;}
                        input.seek(index315_450);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA315_455 = input.LA(1);
                        int index315_455 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_455==DOT) ) {s = 1152;}
                        else if ( (LA315_455==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA315_455==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA315_455==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA315_455==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA315_455==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA315_455==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA315_455==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA315_455==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA315_455==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA315_455==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA315_455==LT) && (synpred5_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA315_455==GT) && (synpred5_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA315_455==LE) && (synpred5_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA315_455==GE) && (synpred5_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA315_455==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA315_455==IS) && (synpred5_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA315_455==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA315_455==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA315_455==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA315_455==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA315_455==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA315_455==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA315_455==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA315_455==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA315_455==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA315_455==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA315_455==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA315_455==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA315_455==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA315_455==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA315_455==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA315_455==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA315_455==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA315_455==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA315_455==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA315_455==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA315_455==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA315_455==AS) && (synpred5_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA315_455==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA315_455==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA315_455==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA315_455==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA315_455==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA315_455==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA315_455==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA315_455==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA315_455==END) && (synpred5_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA315_455==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA315_455==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA315_455==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA315_455==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA315_455==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA315_455==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA315_455==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA315_455==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA315_455==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA315_455==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA315_455==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA315_455==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA315_455==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1212;}
                        input.seek(index315_455);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA315_576 = input.LA(1);
                        int index315_576 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_576==DOT) ) {s = 1275;}
                        else if ( (LA315_576==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA315_576==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA315_576==LPAREN) ) {s = 1278;}
                        else if ( (LA315_576==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA315_576==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA315_576==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA315_576==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA315_576==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA315_576==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA315_576==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA315_576==LT) && (synpred5_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA315_576==GT) && (synpred5_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA315_576==LE) && (synpred5_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA315_576==GE) && (synpred5_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA315_576==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA315_576==IS) && (synpred5_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA315_576==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA315_576==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA315_576==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA315_576==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA315_576==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA315_576==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA315_576==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA315_576==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA315_576==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA315_576==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA315_576==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA315_576==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA315_576==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA315_576==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA315_576==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA315_576==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA315_576==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA315_576==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA315_576==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA315_576==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA315_576==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA315_576==AS) && (synpred5_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA315_576==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA315_576==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA315_576==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA315_576==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA315_576==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA315_576==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA315_576==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA315_576==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA315_576==END) && (synpred5_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA315_576==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA315_576==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA315_576==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA315_576==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA315_576==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA315_576==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA315_576==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA315_576==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA315_576==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA315_576==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA315_576==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA315_576==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA315_576==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1335;}
                        input.seek(index315_576);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA315_577 = input.LA(1);
                        int index315_577 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_577==LPAREN) ) {s = 1336;}
                        else if ( (LA315_577==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA315_577==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA315_577==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA315_577==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA315_577==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA315_577==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA315_577==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA315_577==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA315_577==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA315_577==LT) && (synpred5_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA315_577==GT) && (synpred5_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA315_577==LE) && (synpred5_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA315_577==GE) && (synpred5_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA315_577==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA315_577==IS) && (synpred5_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA315_577==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA315_577==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA315_577==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA315_577==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA315_577==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA315_577==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA315_577==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA315_577==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA315_577==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA315_577==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA315_577==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA315_577==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA315_577==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA315_577==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA315_577==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA315_577==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA315_577==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA315_577==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA315_577==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA315_577==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA315_577==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA315_577==AS) && (synpred5_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA315_577==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA315_577==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA315_577==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA315_577==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA315_577==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA315_577==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA315_577==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA315_577==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA315_577==END) && (synpred5_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA315_577==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA315_577==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA315_577==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA315_577==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA315_577==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA315_577==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA315_577==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA315_577==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA315_577==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA315_577==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA315_577==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA315_577==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA315_577==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA315_577==DOT) ) {s = 1396;}
                        input.seek(index315_577);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA315_584 = input.LA(1);
                        int index315_584 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_584==LPAREN) ) {s = 1397;}
                        else if ( (LA315_584==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA315_584==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA315_584==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA315_584==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA315_584==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA315_584==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA315_584==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA315_584==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA315_584==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA315_584==LT) && (synpred5_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA315_584==GT) && (synpred5_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA315_584==LE) && (synpred5_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA315_584==GE) && (synpred5_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA315_584==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA315_584==IS) && (synpred5_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA315_584==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA315_584==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA315_584==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA315_584==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA315_584==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA315_584==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA315_584==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA315_584==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA315_584==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA315_584==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA315_584==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA315_584==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA315_584==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA315_584==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA315_584==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA315_584==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA315_584==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA315_584==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA315_584==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA315_584==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA315_584==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA315_584==AS) && (synpred5_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA315_584==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA315_584==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA315_584==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA315_584==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA315_584==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA315_584==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA315_584==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA315_584==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA315_584==END) && (synpred5_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA315_584==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA315_584==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA315_584==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA315_584==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA315_584==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA315_584==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA315_584==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA315_584==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA315_584==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA315_584==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA315_584==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA315_584==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA315_584==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA315_584==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1457;}
                        input.seek(index315_584);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA315_585 = input.LA(1);
                        int index315_585 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_585==LPAREN) ) {s = 1458;}
                        else if ( (LA315_585==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA315_585==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA315_585==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA315_585==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA315_585==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA315_585==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA315_585==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA315_585==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA315_585==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA315_585==LT) && (synpred5_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA315_585==GT) && (synpred5_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA315_585==LE) && (synpred5_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA315_585==GE) && (synpred5_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA315_585==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA315_585==IS) && (synpred5_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA315_585==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA315_585==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA315_585==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA315_585==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA315_585==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA315_585==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA315_585==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA315_585==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA315_585==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA315_585==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA315_585==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA315_585==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA315_585==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA315_585==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA315_585==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA315_585==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA315_585==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA315_585==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA315_585==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA315_585==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA315_585==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA315_585==AS) && (synpred5_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA315_585==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA315_585==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA315_585==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA315_585==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA315_585==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA315_585==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA315_585==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA315_585==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA315_585==END) && (synpred5_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA315_585==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA315_585==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA315_585==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA315_585==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA315_585==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA315_585==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA315_585==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA315_585==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA315_585==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA315_585==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA315_585==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA315_585==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA315_585==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA315_585==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1518;}
                        input.seek(index315_585);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA315_590 = input.LA(1);
                        int index315_590 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_590==DOT) ) {s = 1519;}
                        else if ( (LA315_590==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA315_590==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA315_590==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA315_590==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA315_590==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA315_590==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA315_590==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA315_590==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA315_590==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA315_590==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA315_590==LT) && (synpred5_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA315_590==GT) && (synpred5_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA315_590==LE) && (synpred5_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA315_590==GE) && (synpred5_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA315_590==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA315_590==IS) && (synpred5_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA315_590==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA315_590==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA315_590==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA315_590==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA315_590==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA315_590==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA315_590==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA315_590==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA315_590==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA315_590==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA315_590==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA315_590==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA315_590==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA315_590==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA315_590==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA315_590==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA315_590==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA315_590==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA315_590==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA315_590==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA315_590==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA315_590==AS) && (synpred5_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA315_590==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA315_590==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA315_590==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA315_590==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA315_590==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA315_590==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA315_590==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA315_590==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA315_590==END) && (synpred5_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA315_590==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA315_590==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA315_590==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA315_590==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA315_590==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA315_590==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA315_590==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA315_590==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA315_590==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA315_590==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA315_590==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA315_590==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA315_590==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1579;}
                        input.seek(index315_590);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA315_792 = input.LA(1);
                        int index315_792 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_792==DOT) ) {s = 1704;}
                        else if ( (LA315_792==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA315_792==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA315_792==LPAREN) ) {s = 1707;}
                        else if ( (LA315_792==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA315_792==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA315_792==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA315_792==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA315_792==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA315_792==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA315_792==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA315_792==LT) && (synpred5_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA315_792==GT) && (synpred5_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA315_792==LE) && (synpred5_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA315_792==GE) && (synpred5_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA315_792==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA315_792==IS) && (synpred5_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA315_792==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA315_792==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA315_792==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA315_792==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA315_792==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA315_792==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA315_792==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA315_792==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA315_792==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA315_792==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA315_792==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA315_792==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA315_792==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA315_792==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA315_792==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA315_792==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA315_792==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA315_792==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA315_792==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA315_792==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA315_792==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA315_792==AS) && (synpred5_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA315_792==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA315_792==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA315_792==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA315_792==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA315_792==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA315_792==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA315_792==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA315_792==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA315_792==END) && (synpred5_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA315_792==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA315_792==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA315_792==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA315_792==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA315_792==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA315_792==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA315_792==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA315_792==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA315_792==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA315_792==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA315_792==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA315_792==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA315_792==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1764;}
                        input.seek(index315_792);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA315_793 = input.LA(1);
                        int index315_793 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_793==LPAREN) ) {s = 1765;}
                        else if ( (LA315_793==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA315_793==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA315_793==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA315_793==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA315_793==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA315_793==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA315_793==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA315_793==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA315_793==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA315_793==LT) && (synpred5_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA315_793==GT) && (synpred5_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA315_793==LE) && (synpred5_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA315_793==GE) && (synpred5_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA315_793==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA315_793==IS) && (synpred5_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA315_793==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA315_793==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA315_793==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA315_793==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA315_793==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA315_793==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA315_793==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA315_793==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA315_793==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA315_793==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA315_793==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA315_793==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA315_793==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA315_793==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA315_793==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA315_793==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA315_793==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA315_793==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA315_793==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA315_793==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA315_793==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA315_793==AS) && (synpred5_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA315_793==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA315_793==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA315_793==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA315_793==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA315_793==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA315_793==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA315_793==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA315_793==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA315_793==END) && (synpred5_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA315_793==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA315_793==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA315_793==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA315_793==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA315_793==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA315_793==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA315_793==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA315_793==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA315_793==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA315_793==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA315_793==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA315_793==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA315_793==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA315_793==DOT) ) {s = 1825;}
                        input.seek(index315_793);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA315_800 = input.LA(1);
                        int index315_800 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_800==LPAREN) ) {s = 1826;}
                        else if ( (LA315_800==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA315_800==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA315_800==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA315_800==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA315_800==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA315_800==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA315_800==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA315_800==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA315_800==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA315_800==LT) && (synpred5_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA315_800==GT) && (synpred5_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA315_800==LE) && (synpred5_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA315_800==GE) && (synpred5_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA315_800==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA315_800==IS) && (synpred5_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA315_800==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA315_800==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA315_800==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA315_800==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA315_800==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA315_800==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA315_800==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA315_800==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA315_800==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA315_800==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA315_800==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA315_800==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA315_800==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA315_800==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA315_800==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA315_800==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA315_800==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA315_800==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA315_800==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA315_800==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA315_800==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA315_800==AS) && (synpred5_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA315_800==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA315_800==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA315_800==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA315_800==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA315_800==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA315_800==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA315_800==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA315_800==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA315_800==END) && (synpred5_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA315_800==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA315_800==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA315_800==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA315_800==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA315_800==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA315_800==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA315_800==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA315_800==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA315_800==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA315_800==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA315_800==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA315_800==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA315_800==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA315_800==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1886;}
                        input.seek(index315_800);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA315_801 = input.LA(1);
                        int index315_801 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_801==LPAREN) ) {s = 1887;}
                        else if ( (LA315_801==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA315_801==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA315_801==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA315_801==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA315_801==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA315_801==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA315_801==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA315_801==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA315_801==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA315_801==LT) && (synpred5_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA315_801==GT) && (synpred5_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA315_801==LE) && (synpred5_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA315_801==GE) && (synpred5_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA315_801==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA315_801==IS) && (synpred5_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA315_801==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA315_801==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA315_801==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA315_801==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA315_801==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA315_801==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA315_801==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA315_801==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA315_801==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA315_801==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA315_801==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA315_801==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA315_801==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA315_801==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA315_801==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA315_801==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA315_801==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA315_801==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA315_801==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA315_801==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA315_801==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA315_801==AS) && (synpred5_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA315_801==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA315_801==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA315_801==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA315_801==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA315_801==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA315_801==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA315_801==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA315_801==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA315_801==END) && (synpred5_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA315_801==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA315_801==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA315_801==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA315_801==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA315_801==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA315_801==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA315_801==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA315_801==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA315_801==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA315_801==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA315_801==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA315_801==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA315_801==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA315_801==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1947;}
                        input.seek(index315_801);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA315_806 = input.LA(1);
                        int index315_806 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA315_806==DOT) ) {s = 1948;}
                        else if ( (LA315_806==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA315_806==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA315_806==LPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA315_806==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA315_806==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA315_806==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA315_806==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA315_806==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA315_806==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA315_806==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA315_806==LT) && (synpred5_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA315_806==GT) && (synpred5_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA315_806==LE) && (synpred5_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA315_806==GE) && (synpred5_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA315_806==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA315_806==IS) && (synpred5_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA315_806==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA315_806==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA315_806==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA315_806==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA315_806==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA315_806==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA315_806==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA315_806==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA315_806==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA315_806==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA315_806==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA315_806==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA315_806==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA315_806==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA315_806==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA315_806==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA315_806==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA315_806==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA315_806==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA315_806==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA315_806==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA315_806==AS) && (synpred5_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA315_806==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA315_806==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA315_806==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA315_806==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA315_806==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA315_806==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA315_806==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA315_806==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA315_806==END) && (synpred5_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA315_806==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA315_806==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA315_806==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA315_806==ATCHAR) && (synpred5_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA315_806==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA315_806==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA315_806==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA315_806==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA315_806==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA315_806==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA315_806==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA315_806==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA315_806==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 2008;}
                        input.seek(index315_806);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA315_871 = input.LA(1);
                        int index315_871 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_871);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA315_902 = input.LA(1);
                        int index315_902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_902);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA315_908 = input.LA(1);
                        int index315_908 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_908);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA315_911 = input.LA(1);
                        int index315_911 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_911);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA315_969 = input.LA(1);
                        int index315_969 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_969);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA315_1029 = input.LA(1);
                        int index315_1029 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1029);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA315_1030 = input.LA(1);
                        int index315_1030 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1030);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA315_1091 = input.LA(1);
                        int index315_1091 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1091);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA315_1152 = input.LA(1);
                        int index315_1152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1152);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA315_1238 = input.LA(1);
                        int index315_1238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1238);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA315_1269 = input.LA(1);
                        int index315_1269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1269);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA315_1275 = input.LA(1);
                        int index315_1275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1275);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA315_1278 = input.LA(1);
                        int index315_1278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1278);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA315_1336 = input.LA(1);
                        int index315_1336 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1336);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA315_1396 = input.LA(1);
                        int index315_1396 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1396);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA315_1397 = input.LA(1);
                        int index315_1397 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1397);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA315_1458 = input.LA(1);
                        int index315_1458 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1458);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA315_1519 = input.LA(1);
                        int index315_1519 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1519);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA315_1605 = input.LA(1);
                        int index315_1605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1605);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA315_1636 = input.LA(1);
                        int index315_1636 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1636);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA315_1667 = input.LA(1);
                        int index315_1667 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1667);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA315_1698 = input.LA(1);
                        int index315_1698 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1698);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA315_1704 = input.LA(1);
                        int index315_1704 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1704);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA315_1707 = input.LA(1);
                        int index315_1707 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1707);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA315_1765 = input.LA(1);
                        int index315_1765 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1765);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA315_1825 = input.LA(1);
                        int index315_1825 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1825);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA315_1826 = input.LA(1);
                        int index315_1826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1826);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA315_1887 = input.LA(1);
                        int index315_1887 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1887);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA315_1948 = input.LA(1);
                        int index315_1948 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 2008;}
                        else if ( (true) ) {s = 51;}
                        input.seek(index315_1948);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 315, _s, input);
            error(nvae);
            throw nvae;
        }
    }
}
