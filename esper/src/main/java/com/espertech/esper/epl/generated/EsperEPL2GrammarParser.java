  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_VAR", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "IDENT", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "GOES", "COMMA", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ATCHAR", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=192;
    public static final int FLOAT_SUFFIX=373;
    public static final int STAR=316;
    public static final int DOT_EXPR=202;
    public static final int NUMERIC_PARAM_LIST=130;
    public static final int MOD=334;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=201;
    public static final int OUTERJOIN_EXPR=174;
    public static final int CREATE_COL_TYPE_LIST=255;
    public static final int BSR=356;
    public static final int MERGE_INS=274;
    public static final int MONTH_PART=207;
    public static final int LIB_FUNCTION=200;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=178;
    public static final int CREATE_CTX_FIXED=279;
    public static final int MATCHREC_PATTERN_CONCAT=296;
    public static final int INC=349;
    public static final int LNOT=345;
    public static final int RPAREN=309;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=321;
    public static final int BSR_ASSIGN=357;
    public static final int CAST_EXPR=234;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=173;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=326;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=139;
    public static final int LAST_AGGREG=262;
    public static final int GOES=310;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=133;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=336;
    public static final int HOUR_PART=210;
    public static final int RBRACK=315;
    public static final int MATCHREC_PATTERN_NESTED=298;
    public static final int MATCH_UNTIL_RANGE_CLOSED=253;
    public static final int GE=330;
    public static final int METHOD_JOIN_EXPR=249;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int CREATE_CTX_PART=280;
    public static final int EVENT_FILTER_EXPR=138;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=137;
    public static final int MINUS_ASSIGN=350;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=149;
    public static final int NUM_DOUBLE=292;
    public static final int INSERTINTO_STREAM_NAME=222;
    public static final int LCURLY=306;
    public static final int UNARY_MINUS=203;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=220;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=147;
    public static final int WS=365;
    public static final int SUBSELECT_GROUP_EXPR=226;
    public static final int ON_SELECT_INSERT_EXPR=244;
    public static final int YEAR_PART=206;
    public static final int FOLLOWED_BY_ITEM=134;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=340;
    public static final int EXPRCOL=197;
    public static final int SL_COMMENT=366;
    public static final int NULL_TYPE=291;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=251;
    public static final int GT=328;
    public static final int BNOT=346;
    public static final int WHERE_EXPR=158;
    public static final int EVAL_IS_EXPR=165;
    public static final int END=33;
    public static final int LAND=363;
    public static final int INNERJOIN_EXPR=175;
    public static final int TERM_LIMIT_EXPR=195;
    public static final int NOT_REGEXP=217;
    public static final int MATCH_UNTIL_EXPR=250;
    public static final int EVENT_PROP_EXPR=182;
    public static final int LBRACK=314;
    public static final int MERGE_UPD=273;
    public static final int VIEW_EXPR=155;
    public static final int ANNOTATION=258;
    public static final int LONG_TYPE=286;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=140;
    public static final int MATCHREC_PATTERN=294;
    public static final int ON_MERGE_EXPR=243;
    public static final int ATCHAR=339;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=341;
    public static final int ON_SELECT_EXPR=241;
    public static final int MINUTE_PART=211;
    public static final int PATTERN_NOT_EXPR=136;
    public static final int SQL_NE=325;
    public static final int SUM=18;
    public static final int HexDigit=371;
    public static final int UPDATE_EXPR=265;
    public static final int LPAREN=308;
    public static final int IN_SUBSELECT_EXPR=228;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=300;
    public static final int NOT_IN_RANGE=224;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=212;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int PARTITIONITEM=284;
    public static final int IDENT=305;
    public static final int DATABASE_JOIN_EXPR=157;
    public static final int BXOR=324;
    public static final int PLUS=318;
    public static final int CASE2=29;
    public static final int MERGE_MAT=272;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=267;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=185;
    public static final int CREATE_INDEX_EXPR=235;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=264;
    public static final int CREATE_CTX_CATITEM=283;
    public static final int EVAL_NOTEQUALS_EXPR=164;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=252;
    public static final int CREATE_VARIABLE_EXPR=248;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=301;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=177;
    public static final int NUMBERSETSTAR=257;
    public static final int LAST_OPERATOR=231;
    public static final int PATTERN_FILTER_EXPR=135;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=338;
    public static final int MERGE_UNM=271;
    public static final int EVAL_AND_EXPR=161;
    public static final int LEFT_OUTERJOIN_EXPR=176;
    public static final int EPL_EXPR=293;
    public static final int GROUP_BY_EXPR=179;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=183;
    public static final int MINUS=332;
    public static final int SEMI=364;
    public static final int INDEXCOL=198;
    public static final int STAR_ASSIGN=352;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=270;
    public static final int FIRST_AGGREG=261;
    public static final int COLON=320;
    public static final int EVAL_EQUALS_GROUP_EXPR=167;
    public static final int BAND_ASSIGN=362;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=193;
    public static final int NOT_IN_SET=214;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=186;
    public static final int SL=358;
    public static final int NOT_IN_SUBSELECT_EXPR=229;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=153;
    public static final int SR=354;
    public static final int RCURLY=307;
    public static final int PLUS_ASSIGN=348;
    public static final int EXISTS_SUBSELECT_EXPR=227;
    public static final int DAY_PART=209;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=148;
    public static final int DIV=333;
    public static final int WEEK_PART=208;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=132;
    public static final int OctalEscape=370;
    public static final int MILLISECOND_PART=213;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=170;
    public static final int LOR=331;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=221;
    public static final int EXPONENT=372;
    public static final int LT=327;
    public static final int PATTERN_INCL_EXPR=156;
    public static final int CREATE_CTX=278;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=180;
    public static final int BOOL_TYPE=290;
    public static final int NEW_ITEM=276;
    public static final int MOD_ASSIGN=353;
    public static final int ANNOTATION_ARRAY=259;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=230;
    public static final int EQUALS=312;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int DIV_ASSIGN=347;
    public static final int WINDOW_AGGREG=263;
    public static final int SL_ASSIGN=359;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int CREATE_CTX_INIT=282;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=299;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=242;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=205;
    public static final int CREATE_COL_TYPE=256;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=168;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=166;
    public static final int FLOAT_TYPE=287;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=150;
    public static final int ANNOTATION_VALUE=260;
    public static final int SUBSELECT_EXPR=225;
    public static final int CONCAT=199;
    public static final int NUMERIC_PARAM_RANGE=129;
    public static final int CLASS_IDENT=152;
    public static final int MATCHREC_PATTERN_ALTER=297;
    public static final int ON_EXPR=238;
    public static final int CREATE_WINDOW_EXPR=236;
    public static final int PROPERTY_SELECTION_STREAM=142;
    public static final int ON_DELETE_EXPR=240;
    public static final int NUM_LONG=342;
    public static final int ON=41;
    public static final int TIME_PERIOD=204;
    public static final int DOUBLE_TYPE=288;
    public static final int DELETE=81;
    public static final int INT_TYPE=285;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=160;
    public static final int ORDER_ELEMENT_EXPR=181;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=233;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=289;
    public static final int NUM_INT=335;
    public static final int MATCHREC_DEFINE_ITEM=302;
    public static final int ON_SET_EXPR=247;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=343;
    public static final int ON_EXPR_FROM=246;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=368;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=141;
    public static final int WEEKDAY_OPERATOR=232;
    public static final int DEC=351;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=360;
    public static final int NUMERIC_PARAM_FREQUENCY=131;
    public static final int AFTER_LIMIT_EXPR=191;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=188;
    public static final int EVENT_FILTER_PARAM=145;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=239;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CONTEXT=126;
    public static final int EVENT_FILTER_RANGE=146;
    public static final int ML_COMMENT=367;
    public static final int INDEX=87;
    public static final int CREATE_CTX_CAT=281;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=187;
    public static final int BOR_ASSIGN=361;
    public static final int COMMA=311;
    public static final int WHEN_LIMIT_EXPR=194;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=190;
    public static final int SOME=49;
    public static final int EQUAL=344;
    public static final int BOR=317;
    public static final int MATCHREC_MEASURE_ITEM=304;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int CREATE_SCHEMA_EXPR_VAR=269;
    public static final int EVENT_FILTER_NOT_BETWEEN=151;
    public static final int IN_RANGE=223;
    public static final int DOT=313;
    public static final int MATCHREC_MEASURES=303;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=143;
    public static final int INSERTINTO_EXPR=196;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=254;
    public static final int MERGE_DEL=275;
    public static final int EVAL_EQUALS_EXPR=163;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=216;
    public static final int EVENT_LIMIT_EXPR=189;
    public static final int NOT_BETWEEN=215;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=162;
    public static final int ON_SELECT_INSERT_OUTPUT=245;
    public static final int AGG_FILTER_EXPR=277;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=323;
    public static final int MATCHREC_PATTERN_ATOM=295;
    public static final int QUOTED_STRING_LITERAL=322;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=319;
    public static final int OBSERVER_EXPR=154;
    public static final int CREATE_SCHEMA_EXPR_QUAL=268;
    public static final int EVENT_FILTER_IDENT=144;
    public static final int EVENT_PROP_MAPPED=184;
    public static final int UnicodeEscape=369;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=218;
    public static final int FOLLOWMAX_BEGIN=337;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=171;
    public static final int CREATE_WINDOW_SELECT_EXPR=237;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=266;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=172;
    public static final int SR_ASSIGN=355;
    public static final int LE=329;
    public static final int DBFROM_CLAUSE=219;
    public static final int EVAL_IDENT=169;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1848);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1852);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1858);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1862); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1877);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1881);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1887);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1920);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1924); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EXPRESSIONDECL11=null;
        Token LCURLY12=null;
        Token RCURLY15=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl13 = null;
        EsperEPL2GrammarParser.expression_return expression14 = null;
        CommonTree i_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree LCURLY12_tree=null;
        CommonTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LCURLY12=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDecl1949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY12);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==GOES) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==LPAREN) ) {
                int LA3_2 = input.LA(2);
                if ( (LA3_2==IDENT) ) {
                    int LA3_106 = input.LA(3);
                    if ( (LA3_106==RPAREN) ) {
                        int LA3_203 = input.LA(4);
                        if ( (LA3_203==GOES) ) {
                            alt3=1;
                        }
                    }
                    else if ( (LA3_106==COMMA) ) {
                        alt3=1;
                    }
                }
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDecl1951);
                    expressionLambdaDecl13=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl13.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_expressionDecl1954);
            expression14=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression14.getTree());
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDecl1956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_expressionLambdaDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                }
                stream_expressionLambdaDecl.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN16=null;
        Token RPAREN18=null;
        Token GOES19=null;
        EsperEPL2GrammarParser.columnList_return columnList17 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN16_tree=null;
        CommonTree RPAREN18_tree=null;
        CommonTree GOES19_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==IDENT) ) {
                alt4=1;
            }
            else if ( (LA4_0==LPAREN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);
                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl1990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN16=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl1995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN16);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl1997);
                    columnList17=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList17.getTree());
                    RPAREN18=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl1999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN18);
                    }
                    }
                    break;
            }
            GOES19=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal20=null;
        Token char_literal22=null;
        Token char_literal25=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier21 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum23 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum24 = null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal20=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal20);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2040);
            classIdentifier21=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier21.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                int LA6_1 = input.LA(2);
                if ( (LA6_1==IDENT) ) {
                    int LA6_14 = input.LA(3);
                    if ( (LA6_14==EQUALS) ) {
                        int LA6_32 = input.LA(4);
                        if ( ((LA6_32>=BOOLEAN_TRUE && LA6_32<=VALUE_NULL)||LA6_32==NUM_DOUBLE||LA6_32==LCURLY||LA6_32==PLUS||(LA6_32>=STRING_LITERAL && LA6_32<=QUOTED_STRING_LITERAL)||LA6_32==MINUS||LA6_32==NUM_INT||LA6_32==ATCHAR||(LA6_32>=NUM_LONG && LA6_32<=NUM_FLOAT)) ) {
                            alt6=1;
                        }
                    }
                }
                else if ( ((LA6_1>=BOOLEAN_TRUE && LA6_1<=VALUE_NULL)||LA6_1==NUM_DOUBLE||LA6_1==LCURLY||LA6_1==RPAREN||LA6_1==PLUS||(LA6_1>=STRING_LITERAL && LA6_1<=QUOTED_STRING_LITERAL)||LA6_1==MINUS||LA6_1==NUM_INT||LA6_1==ATCHAR||(LA6_1>=NUM_LONG && LA6_1<=NUM_FLOAT)) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal22=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal22);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        alt5=1;
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==LCURLY||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==NUM_INT||LA5_0==ATCHAR||(LA5_0>=NUM_LONG && LA5_0<=NUM_FLOAT)) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2048);
                            elementValuePairsNoEnum23=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum23.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2052);
                            elementValueNoEnum24=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum24.getTree());
                            }
                            break;
                    }
                    char_literal25=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal25);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal31=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier27 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum29 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal26=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal26);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2100);
            classIdentifier27=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier27.getTree());
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( (LA8_0==LPAREN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    {
                    char_literal28=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal28);
                    int alt7=3;
                    int LA7_0 = input.LA(1);
                    if ( (LA7_0==IDENT) ) {
                        int LA7_1 = input.LA(2);
                        if ( (LA7_1==EQUALS) ) {
                            alt7=1;
                        }
                        else if ( (LA7_1==RPAREN||LA7_1==DOT) ) {
                            alt7=2;
                        }
                    }
                    else if ( ((LA7_0>=BOOLEAN_TRUE && LA7_0<=VALUE_NULL)||LA7_0==NUM_DOUBLE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0>=STRING_LITERAL && LA7_0<=QUOTED_STRING_LITERAL)||LA7_0==MINUS||LA7_0==NUM_INT||LA7_0==ATCHAR||(LA7_0>=TICKED_STRING_LITERAL && LA7_0<=NUM_FLOAT)) ) {
                        alt7=2;
                    }
                    switch (alt7) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2108);
                            elementValuePairsEnum29=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum29.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2112);
                            elementValueEnum30=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
                            }
                            break;
                    }
                    char_literal31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal31);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA33=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum32 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum34 = null;
        CommonTree COMMA33_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2158);
            elementValuePairNoEnum32=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum32.getTree());
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);
                if ( (LA9_0==COMMA) ) {
                    alt9=1;
                }
                switch (alt9) {
            	case 1 :
            	    {
            	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2161); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2164);
            	    elementValuePairNoEnum34=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum34.getTree());
            	    }
            	    break;
            	default :
            	    break loop9;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA36=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum35 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum37 = null;
        CommonTree COMMA36_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2185);
            elementValuePairEnum35=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum35.getTree());
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);
                if ( (LA10_0==COMMA) ) {
                    alt10=1;
                }
                switch (alt10) {
            	case 1 :
            	    {
            	    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2188); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2191);
            	    elementValuePairEnum37=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum37.getTree());
            	    }
            	    break;
            	default :
            	    break loop10;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        CommonTree i_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal38=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal38);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2218);
            elementValueNoEnum39=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal40=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal40);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2259);
            elementValueEnum41=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum42 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum43 = null;
        EsperEPL2GrammarParser.constant_return constant44 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt11=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt11=1;
                }
                break;
            case LCURLY:
                {
                alt11=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);
                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2290);
                    annotationEnum42=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum42.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2301);
                    elementValueArrayNoEnum43=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum43.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2314);
                    constant44=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant44.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum45 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum46 = null;
        EsperEPL2GrammarParser.constant_return constant47 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier48 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt12=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt12=1;
                }
                break;
            case LCURLY:
                {
                alt12=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt12=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);
                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2337);
                    annotationEnum45=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum45.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2348);
                    elementValueArrayEnum46=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum46.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2361);
                    constant47=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant47.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2369);
                    classIdentifier48=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier48.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal49=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal49);
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==LCURLY||LA14_0==PLUS||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||LA14_0==MINUS||LA14_0==NUM_INT||LA14_0==ATCHAR||(LA14_0>=NUM_LONG && LA14_0<=NUM_FLOAT)) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2392);
                    elementValueNoEnum50=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);
                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);
                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==LCURLY||LA13_1==PLUS||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||LA13_1==MINUS||LA13_1==NUM_INT||LA13_1==ATCHAR||(LA13_1>=NUM_LONG && LA13_1<=NUM_FLOAT)) ) {
                                alt13=1;
                            }
                        }
                        switch (alt13) {
                    	case 1 :
                    	    {
                    	    char_literal51=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2395); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal51);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2397);
                    	    elementValueNoEnum52=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop13;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    char_literal53=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal53);
                    }
                    break;
            }
            char_literal54=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal54);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal55=null;
        Token char_literal57=null;
        Token char_literal59=null;
        Token char_literal60=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum56 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum58 = null;
        CommonTree char_literal55_tree=null;
        CommonTree char_literal57_tree=null;
        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal55);
            int alt17=2;
            int LA17_0 = input.LA(1);
            if ( ((LA17_0>=BOOLEAN_TRUE && LA17_0<=VALUE_NULL)||LA17_0==NUM_DOUBLE||(LA17_0>=IDENT && LA17_0<=LCURLY)||LA17_0==PLUS||(LA17_0>=STRING_LITERAL && LA17_0<=QUOTED_STRING_LITERAL)||LA17_0==MINUS||LA17_0==NUM_INT||LA17_0==ATCHAR||(LA17_0>=TICKED_STRING_LITERAL && LA17_0<=NUM_FLOAT)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2440);
                    elementValueEnum56=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum56.getTree());
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( (LA16_0==COMMA) ) {
                            int LA16_1 = input.LA(2);
                            if ( ((LA16_1>=BOOLEAN_TRUE && LA16_1<=VALUE_NULL)||LA16_1==NUM_DOUBLE||(LA16_1>=IDENT && LA16_1<=LCURLY)||LA16_1==PLUS||(LA16_1>=STRING_LITERAL && LA16_1<=QUOTED_STRING_LITERAL)||LA16_1==MINUS||LA16_1==NUM_INT||LA16_1==ATCHAR||(LA16_1>=TICKED_STRING_LITERAL && LA16_1<=NUM_FLOAT)) ) {
                                alt16=1;
                            }
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    char_literal57=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2443); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal57);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2445);
                    	    elementValueEnum58=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum58.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==COMMA) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    char_literal59=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal59);
                    }
                    break;
            }
            char_literal60=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal60);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr61 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr62 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr63 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr64 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr65 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr66 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr67 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr68 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr69 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr70 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==CONTEXT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2488);
                    contextExpr61=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr61.getTree());
                    }
                    break;
            }
            int alt20=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt20=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt20=2;
                    }
                    break;
                case INDEX:
                    {
                    alt20=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt20=4;
                    }
                    break;
                case CONTEXT:
                    {
                    alt20=6;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt20=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt20=7;
                }
                break;
            case UPDATE:
                {
                alt20=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);
                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2495);
                    selectExpr62=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr62.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2500);
                    createWindowExpr63=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr63.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2505);
                    createIndexExpr64=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr64.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2510);
                    createVariableExpr65=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr65.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2515);
                    createSchemaExpr66=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr66.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2520);
                    createContextExpr67=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr67.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2525);
                    onExpr68=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr68.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2530);
                    updateExpr69=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr69.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==FOR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2533);
                    forExpr70=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr70.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT71=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT71_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT71=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT71);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT72=null;
        Token SELECT74=null;
        Token FROM76=null;
        Token WHERE79=null;
        Token GROUP81=null;
        Token BY82=null;
        Token HAVING84=null;
        Token OUTPUT86=null;
        Token ORDER88=null;
        Token BY89=null;
        Token ROW_LIMIT_EXPR91=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr73 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause75 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause77 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog78 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause80 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr83 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause85 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit87 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr90 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit92 = null;
        CommonTree INSERT72_tree=null;
        CommonTree SELECT74_tree=null;
        CommonTree FROM76_tree=null;
        CommonTree WHERE79_tree=null;
        CommonTree GROUP81_tree=null;
        CommonTree BY82_tree=null;
        CommonTree HAVING84_tree=null;
        CommonTree OUTPUT86_tree=null;
        CommonTree ORDER88_tree=null;
        CommonTree BY89_tree=null;
        CommonTree ROW_LIMIT_EXPR91_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==INSERT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    INSERT72=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2574); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2577);
                    insertIntoExpr73=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr73.getTree());
                    }
                    break;
            }
            SELECT74=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2583); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2586);
            selectClause75=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause75.getTree());
            FROM76=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2590); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2593);
            fromClause77=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause77.getTree());
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==MATCH_RECOGNIZE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2597);
                    matchRecog78=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog78.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==WHERE) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    WHERE79=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2603); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2606);
                    whereClause80=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause80.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==GROUP) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    GROUP81=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2613); if (state.failed) return retval;
                    BY82=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2616); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2619);
                    groupByListExpr83=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr83.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==HAVING) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    HAVING84=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2626); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2629);
                    havingClause85=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause85.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==OUTPUT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    OUTPUT86=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2636); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2639);
                    outputLimit87=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit87.getTree());
                    }
                    break;
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==ORDER) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    ORDER88=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2646); if (state.failed) return retval;
                    BY89=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2649); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2652);
                    orderByListExpr90=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr90.getTree());
                    }
                    break;
            }
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==ROW_LIMIT_EXPR) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR91=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2659); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2662);
                    rowLimit92=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit92.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON93=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr94 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr95 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr96 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr97 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert98 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr99 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr100 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr101 = null;
        CommonTree ON93_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON93=(Token)match(input,ON,FOLLOW_ON_in_onExpr2677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON93);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2679);
            onStreamExpr94=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr94.getTree());
            int alt33=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt33=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt33=2;
                }
                break;
            case SET:
                {
                alt33=3;
                }
                break;
            case UPDATE:
                {
                alt33=4;
                }
                break;
            case MERGE:
                {
                alt33=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);
                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2684);
                    onDeleteExpr95=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr95.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2688);
                    onSelectExpr96=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr96.getTree());
                    int alt32=2;
                    int LA32_0 = input.LA(1);
                    if ( (LA32_0==INSERT) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            {
                            int cnt30=0;
                            loop30:
                            do {
                                int alt30=2;
                                int LA30_0 = input.LA(1);
                                if ( (LA30_0==INSERT) ) {
                                    alt30=1;
                                }
                                switch (alt30) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2691);
                            	    onSelectInsertExpr97=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr97.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt30 >= 1 ) break loop30;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(30, input);
                                        throw eee;
                                }
                                cnt30++;
                            } while (true);
                            int alt31=2;
                            int LA31_0 = input.LA(1);
                            if ( (LA31_0==OUTPUT) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2694);
                                    outputClauseInsert98=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert98.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2701);
                    onSetExpr99=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr99.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2705);
                    onUpdateExpr100=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr100.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2709);
                    onMergeExpr101=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr101.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS104=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression102 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression103 = null;
        CommonTree i_tree=null;
        CommonTree AS104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==IDENT||LA34_0==TICKED_STRING_LITERAL) ) {
                alt34=1;
            }
            else if ( (LA34_0==PATTERN) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);
                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2754);
                    eventFilterExpression102=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression102.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2758);
                    patternInclusionExpression103=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression103.getTree());
                    }
                    break;
            }
            int alt35=3;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==AS) ) {
                alt35=1;
            }
            else if ( (LA35_0==IDENT) ) {
                alt35=2;
            }
            switch (alt35) {
                case 1 :
                    {
                    AS104=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS104);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE105=null;
        Token ISTREAM106=null;
        Token AS108=null;
        Token SET109=null;
        Token COMMA111=null;
        Token WHERE113=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier107 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment110 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment112 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause114 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE105_tree=null;
        CommonTree ISTREAM106_tree=null;
        CommonTree AS108_tree=null;
        CommonTree SET109_tree=null;
        CommonTree COMMA111_tree=null;
        CommonTree WHERE113_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE105=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE105);
            ISTREAM106=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM106);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2807);
            classIdentifier107=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier107.getTree());
            int alt36=3;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==AS) ) {
                alt36=1;
            }
            else if ( (LA36_0==IDENT) ) {
                alt36=2;
            }
            switch (alt36) {
                case 1 :
                    {
                    AS108=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS108);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET109=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET109);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2828);
            onSetAssignment110=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment110.getTree());
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);
                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }
                switch (alt37) {
            	case 1 :
            	    {
            	    COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2831); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA111);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2833);
            	    onSetAssignment112=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment112.getTree());
            	    }
            	    break;
            	default :
            	    break loop37;
                }
            } while (true);
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE113=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE113);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2843);
                    whereClause114=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause114.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE115=null;
        Token INTO116=null;
        Token AS117=null;
        Token WHERE118=null;
        EsperEPL2GrammarParser.whereClause_return whereClause119 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem120 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE115_tree=null;
        CommonTree INTO116_tree=null;
        CommonTree AS117_tree=null;
        CommonTree WHERE118_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE115=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE115);
            int alt39=2;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==INTO) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    {
                    INTO116=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO116);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt40=3;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==AS) ) {
                alt40=1;
            }
            else if ( (LA40_0==IDENT) ) {
                alt40=2;
            }
            switch (alt40) {
                case 1 :
                    {
                    AS117=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS117);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    WHERE118=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE118);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2907);
                    whereClause119=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause119.getTree());
                    }
                    break;
            }
            int cnt42=0;
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);
                if ( (LA42_0==WHEN) ) {
                    alt42=1;
                }
                switch (alt42) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2915);
            	    mergeItem120=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem120.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched121 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched122 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==WHEN) ) {
                int LA43_1 = input.LA(2);
                if ( (LA43_1==MATCHED) ) {
                    alt43=1;
                }
                else if ( (LA43_1==NOT_EXPR) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2949);
                    mergeMatched121=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched121.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2953);
                    mergeUnmatched122=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched122.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN123=null;
        Token MATCHED124=null;
        Token AND_EXPR125=null;
        EsperEPL2GrammarParser.expression_return expression126 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem127 = null;
        CommonTree WHEN123_tree=null;
        CommonTree MATCHED124_tree=null;
        CommonTree AND_EXPR125_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN123=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN123);
            MATCHED124=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED124);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==AND_EXPR) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    AND_EXPR125=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR125);
                    pushFollow(FOLLOW_expression_in_mergeMatched2973);
                    expression126=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression126.getTree());
                    }
                    break;
            }
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);
                if ( (LA45_0==THEN) ) {
                    alt45=1;
                }
                switch (alt45) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2977);
            	    mergeMatchedItem127=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem127.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN128=null;
        Token SET129=null;
        Token COMMA131=null;
        Token WHERE133=null;
        Token WHERE135=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment130 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment132 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause134 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert137 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN128_tree=null;
        CommonTree SET129_tree=null;
        CommonTree COMMA131_tree=null;
        CommonTree WHERE133_tree=null;
        CommonTree WHERE135_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN128=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN128);
            int alt49=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt49=1;
                }
                break;
            case DELETE:
                {
                alt49=2;
                }
                break;
            case INSERT:
                {
                alt49=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET129=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET129);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3022);
                    onSetAssignment130=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment130.getTree());
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);
                        if ( (LA46_0==COMMA) ) {
                            alt46=1;
                        }
                        switch (alt46) {
                    	case 1 :
                    	    {
                    	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3025); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA131);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3027);
                    	    onSetAssignment132=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment132.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop46;
                        }
                    } while (true);
                    }
                    int alt47=2;
                    int LA47_0 = input.LA(1);
                    if ( (LA47_0==WHERE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            WHERE133=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3033); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE133);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3035);
                            whereClause134=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause134.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt48=2;
                    int LA48_0 = input.LA(1);
                    if ( (LA48_0==WHERE) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            {
                            WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3050); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3052);
                            whereClause136=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3063);
                    mergeInsert137=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert137.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN138=null;
        Token NOT_EXPR139=null;
        Token MATCHED140=null;
        Token AND_EXPR141=null;
        EsperEPL2GrammarParser.expression_return expression142 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem143 = null;
        CommonTree WHEN138_tree=null;
        CommonTree NOT_EXPR139_tree=null;
        CommonTree MATCHED140_tree=null;
        CommonTree AND_EXPR141_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN138=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN138);
            NOT_EXPR139=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR139);
            MATCHED140=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED140);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR141=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR141);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3129);
                    expression142=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression142.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3133);
            	    mergeUnmatchedItem143=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem143.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN144=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert145 = null;
        CommonTree THEN144_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN144=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3160); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3163);
            mergeInsert145=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert145.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT146=null;
        Token INTO147=null;
        Token LPAREN149=null;
        Token RPAREN151=null;
        Token SELECT152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier148 = null;
        EsperEPL2GrammarParser.columnList_return columnList150 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree INSERT146_tree=null;
        CommonTree INTO147_tree=null;
        CommonTree LPAREN149_tree=null;
        CommonTree RPAREN151_tree=null;
        CommonTree SELECT152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT146=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT146);
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==INTO) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    INTO147=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO147);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3183);
                    classIdentifier148=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier148.getTree());
                    }
                    break;
            }
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==LPAREN) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    LPAREN149=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN149);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3190);
                    columnList150=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList150.getTree());
                    RPAREN151=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN151);
                    }
                    break;
            }
            SELECT152=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT152);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3198);
            selectionList153=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList153.getTree());
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==WHERE) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3203);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token DISTINCT159=null;
        Token WHERE162=null;
        Token GROUP164=null;
        Token BY165=null;
        Token HAVING167=null;
        Token ORDER169=null;
        Token BY170=null;
        Token ROW_LIMIT_EXPR172=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList160 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom161 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause163 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr166 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause168 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr171 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit173 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree DISTINCT159_tree=null;
        CommonTree WHERE162_tree=null;
        CommonTree GROUP164_tree=null;
        CommonTree BY165_tree=null;
        CommonTree HAVING167_tree=null;
        CommonTree ORDER169_tree=null;
        CommonTree BY170_tree=null;
        CommonTree ROW_LIMIT_EXPR172_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==INSERT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3251);
                    insertIntoExpr157=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
                    }
                    break;
            }
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==DISTINCT) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    DISTINCT159=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT159);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3262);
            selectionList160=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList160.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==FROM) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3266);
                    onExprFrom161=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom161.getTree());
                    }
                    break;
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==WHERE) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    WHERE162=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE162);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3274);
                    whereClause163=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause163.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==GROUP) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    GROUP164=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP164);
                    BY165=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY165);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3287);
                    groupByListExpr166=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr166.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==HAVING) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    HAVING167=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING167);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3296);
                    havingClause168=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause168.getTree());
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==ORDER) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    ORDER169=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER169);
                    BY170=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY170);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3307);
                    orderByListExpr171=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr171.getTree());
                    }
                    break;
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==ROW_LIMIT_EXPR) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR172=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR172);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3316);
                    rowLimit173=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE174=null;
        Token AS175=null;
        Token SET176=null;
        Token COMMA178=null;
        Token WHERE180=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment177 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment179 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause181 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE174_tree=null;
        CommonTree AS175_tree=null;
        CommonTree SET176_tree=null;
        CommonTree COMMA178_tree=null;
        CommonTree WHERE180_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE174=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt63=3;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==AS) ) {
                alt63=1;
            }
            else if ( (LA63_0==IDENT) ) {
                alt63=2;
            }
            switch (alt63) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET176=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET176);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3404);
            onSetAssignment177=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment177.getTree());
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);
                if ( (LA64_0==COMMA) ) {
                    alt64=1;
                }
                switch (alt64) {
            	case 1 :
            	    {
            	    COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA178);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3409);
            	    onSetAssignment179=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment179.getTree());
            	    }
            	    break;
            	default :
            	    break loop64;
                }
            } while (true);
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==WHERE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    WHERE180=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE180);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3418);
                    whereClause181=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause181.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT182=null;
        Token SELECT184=null;
        Token WHERE186=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr183 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList185 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause187 = null;
        CommonTree INSERT182_tree=null;
        CommonTree SELECT184_tree=null;
        CommonTree WHERE186_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT182=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT182);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3471);
            insertIntoExpr183=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr183.getTree());
            SELECT184=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT184);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3477);
            selectionList185=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList185.getTree());
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==WHERE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    WHERE186=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE186);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3484);
                    whereClause187=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause187.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT188=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT188_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT188=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT188);
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==FIRST) ) {
                alt67=1;
            }
            else if ( (LA67_0==ALL) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);
                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE189=null;
        Token WHERE191=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom190 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause192 = null;
        CommonTree DELETE189_tree=null;
        CommonTree WHERE191_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE189=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE189);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3572);
            onExprFrom190=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom190.getTree());
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==WHERE) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    WHERE191=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE191);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3579);
                    whereClause192=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET193=null;
        Token COMMA195=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment194 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment196 = null;
        CommonTree SET193_tree=null;
        CommonTree COMMA195_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET193=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET193);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3621);
            onSetAssignment194=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment194.getTree());
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);
                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }
                switch (alt69) {
            	case 1 :
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3624); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3626);
            	    onSetAssignment196=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment196.getTree());
            	    }
            	    break;
            	default :
            	    break loop69;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS198=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty197 = null;
        EsperEPL2GrammarParser.expression_return expression199 = null;
        CommonTree EQUALS198_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3651);
            eventProperty197=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty197.getTree());
            EQUALS198=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS198);
            pushFollow(FOLLOW_expression_in_onSetAssignment3655);
            expression199=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression199.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM200=null;
        Token AS201=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM200_tree=null;
        CommonTree AS201_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM200=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM200);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt70=3;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==AS) ) {
                alt70=1;
            }
            else if ( (LA70_0==IDENT) ) {
                alt70=2;
            }
            switch (alt70) {
                case 1 :
                    {
                    AS201=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS201);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE202=null;
        Token WINDOW203=null;
        Token DOT204=null;
        Token DOT206=null;
        Token AS208=null;
        Token LPAREN210=null;
        Token RPAREN212=null;
        Token WHERE213=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression205 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression207 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter209 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList211 = null;
        EsperEPL2GrammarParser.expression_return expression214 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE202_tree=null;
        CommonTree WINDOW203_tree=null;
        CommonTree DOT204_tree=null;
        CommonTree DOT206_tree=null;
        CommonTree AS208_tree=null;
        CommonTree LPAREN210_tree=null;
        CommonTree RPAREN212_tree=null;
        CommonTree WHERE213_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE202=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE202);
            WINDOW203=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW203);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==DOT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    DOT204=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT204);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3736);
                    viewExpression205=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression205.getTree());
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);
                        if ( (LA71_0==DOT) ) {
                            alt71=1;
                        }
                        switch (alt71) {
                    	case 1 :
                    	    {
                    	    DOT206=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3739); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT206);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3741);
                    	    viewExpression207=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression207.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop71;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt73=3;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==RETAINUNION) ) {
                alt73=1;
            }
            else if ( (LA73_0==RETAININTERSECTION) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==AS) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    AS208=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS208);
                    }
                    break;
            }
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==SELECT||LA75_0==IDENT||LA75_0==TICKED_STRING_LITERAL) ) {
                alt75=1;
            }
            else if ( (LA75_0==LPAREN) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3773);
                    createWindowExprModelAfter209=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter209.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN210);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3790);
                    createColumnList211=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList211.getTree());
                    RPAREN212=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN212);
                    }
                    break;
            }
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==INSERT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt76=2;
                    int LA76_0 = input.LA(1);
                    if ( (LA76_0==WHERE) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            WHERE213=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE213);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3814);
                            expression214=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression214.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT215=null;
        Token FROM217=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList216 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier218 = null;
        CommonTree SELECT215_tree=null;
        CommonTree FROM217_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==SELECT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    SELECT215=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3901); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3904);
                    createSelectionList216=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList216.getTree());
                    FROM217=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3906); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3911);
            classIdentifier218=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier218.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE219=null;
        Token INDEX220=null;
        Token ON221=null;
        Token LPAREN222=null;
        Token RPAREN224=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList223 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE219_tree=null;
        CommonTree INDEX220_tree=null;
        CommonTree ON221_tree=null;
        CommonTree LPAREN222_tree=null;
        CommonTree RPAREN224_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE219=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE219);
            INDEX220=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX220);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON221=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON221);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN222=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN222);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3940);
            createIndexColumnList223=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList223.getTree());
            RPAREN224=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN224);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA226=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn225 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn227 = null;
        CommonTree COMMA226_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3971);
            createIndexColumn225=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn225.getTree());
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);
                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }
                switch (alt79) {
            	case 1 :
            	    {
            	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3974); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA226);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3976);
            	    createIndexColumn227=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn227.getTree());
            	    }
            	    break;
            	default :
            	    break loop79;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT228=null;
        Token IDENT229=null;
        CommonTree IDENT228_tree=null;
        CommonTree IDENT229_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT228=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT228);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==IDENT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    IDENT229=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT229);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE230=null;
        Token VARIABLE231=null;
        Token EQUALS233=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier232 = null;
        EsperEPL2GrammarParser.expression_return expression234 = null;
        CommonTree n_tree=null;
        CommonTree CREATE230_tree=null;
        CommonTree VARIABLE231_tree=null;
        CommonTree EQUALS233_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE230=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE230);
            VARIABLE231=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE231);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4034);
            classIdentifier232=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier232.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==EQUALS) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    EQUALS233=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS233);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4043);
                    expression234=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression234.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA236=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement235 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement237 = null;
        CommonTree COMMA236_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4085);
            createColumnListElement235=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement235.getTree());
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);
                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }
                switch (alt82) {
            	case 1 :
            	    {
            	    COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4088); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA236);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4090);
            	    createColumnListElement237=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement237.getTree());
            	    }
            	    break;
            	default :
            	    break loop82;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK240=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy238 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier239 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK240_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4118);
            classIdentifierNonGreedy238=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy238.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4121);
            classIdentifier239=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier239.getTree());
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==LBRACK) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK240=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK240);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA242=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement241 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement243 = null;
        CommonTree COMMA242_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4171);
            createSelectionListElement241=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement241.getTree());
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);
                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }
                switch (alt84) {
            	case 1 :
            	    {
            	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4174); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4176);
            	    createSelectionListElement243=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement243.getTree());
            	    }
            	    break;
            	default :
            	    break loop84;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS245=null;
        Token AS247=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty244 = null;
        EsperEPL2GrammarParser.constant_return constant246 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS245_tree=null;
        CommonTree AS247_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt86=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt86=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt86=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt86=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4217);
                    eventProperty244=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty244.getTree());
                    int alt85=2;
                    int LA85_0 = input.LA(1);
                    if ( (LA85_0==AS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            AS245=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4220); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS245);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4245);
                    constant246=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant246.getTree());
                    AS247=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS247);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token CREATE248=null;
        Token SCHEMA249=null;
        Token AS250=null;
        Token LPAREN252=null;
        Token RPAREN254=null;
        EsperEPL2GrammarParser.variantList_return variantList251 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList253 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual255 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree CREATE248_tree=null;
        CommonTree SCHEMA249_tree=null;
        CommonTree AS250_tree=null;
        CommonTree LPAREN252_tree=null;
        CommonTree RPAREN254_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            CREATE248=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE248);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA249=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA249);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    AS250=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS250);
                    }
                    break;
            }
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT||LA90_0==STAR||LA90_0==TICKED_STRING_LITERAL) ) {
                alt90=1;
            }
            else if ( (LA90_0==LPAREN) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);
                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4302);
                    variantList251=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList251.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN252=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN252);
                    int alt89=2;
                    int LA89_0 = input.LA(1);
                    if ( (LA89_0==IDENT||LA89_0==TICKED_STRING_LITERAL) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4315);
                            createColumnList253=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList253.getTree());
                            }
                            break;
                    }
                    RPAREN254=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN254);
                    }
                    break;
            }
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==IDENT) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaExpr4327);
            	    createSchemaQual255=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual255.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_VAR, "CREATE_SCHEMA_EXPR_VAR"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE256=null;
        Token CONTEXT257=null;
        Token AS258=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail259 = null;
        CommonTree name_tree=null;
        CommonTree CREATE256_tree=null;
        CommonTree CONTEXT257_tree=null;
        CommonTree AS258_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE256=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr4389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE256);
            CONTEXT257=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr4391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT257);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr4395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    AS258=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr4397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS258);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr4400);
            createContextDetail259=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail259.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token START260=null;
        Token END262=null;
        Token PARTITION264=null;
        Token BY265=null;
        Token COMMA267=null;
        Token COMMA270=null;
        Token FROM272=null;
        Token INITIATED274=null;
        Token BY275=null;
        Token TERMINATED278=null;
        Token AFTER279=null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet261 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet263 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem266 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem268 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem269 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem271 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression273 = null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter276 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression277 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod280 = null;
        CommonTree START260_tree=null;
        CommonTree END262_tree=null;
        CommonTree PARTITION264_tree=null;
        CommonTree BY265_tree=null;
        CommonTree COMMA267_tree=null;
        CommonTree COMMA270_tree=null;
        CommonTree FROM272_tree=null;
        CommonTree INITIATED274_tree=null;
        CommonTree BY275_tree=null;
        CommonTree TERMINATED278_tree=null;
        CommonTree AFTER279_tree=null;
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextFilter=new RewriteRuleSubtreeStream(adaptor,"rule createContextFilter");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt98=4;
            switch ( input.LA(1) ) {
            case START:
                {
                alt98=1;
                }
                break;
            case PARTITION:
                {
                alt98=2;
                }
                break;
            case GROUP:
                {
                alt98=3;
                }
                break;
            case INITIATED:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);
                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    {
                    START260=(Token)match(input,START,FOLLOW_START_in_createContextDetail4424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START260);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextDetail4426);
                    crontabLimitParameterSet261=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet261.getTree());
                    END262=(Token)match(input,END,FOLLOW_END_in_createContextDetail4428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END262);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextDetail4430);
                    crontabLimitParameterSet263=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet263.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                        adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    PARTITION264=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextDetail4447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION264);
                    int alt93=2;
                    int LA93_0 = input.LA(1);
                    if ( (LA93_0==BY) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            BY265=(Token)match(input,BY,FOLLOW_BY_in_createContextDetail4450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY265);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextDetail4454);
                    createContextPartitionItem266=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem266.getTree());
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);
                        if ( (LA94_0==COMMA) ) {
                            alt94=1;
                        }
                        switch (alt94) {
                    	case 1 :
                    	    {
                    	    COMMA267=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4457); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA267);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextDetail4459);
                    	    createContextPartitionItem268=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem268.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop94;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextDetail4478);
                    createContextGroupItem269=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem269.getTree());
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);
                        if ( (LA95_0==COMMA) ) {
                            alt95=1;
                        }
                        switch (alt95) {
                    	case 1 :
                    	    {
                    	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4481); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA270);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextDetail4483);
                    	    createContextGroupItem271=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem271.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop95;
                        }
                    } while (true);
                    FROM272=(Token)match(input,FROM,FOLLOW_FROM_in_createContextDetail4487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM272);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextDetail4489);
                    eventFilterExpression273=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression273.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    INITIATED274=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextDetail4507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED274);
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==BY) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            BY275=(Token)match(input,BY,FOLLOW_BY_in_createContextDetail4510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY275);
                            }
                            break;
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==IDENT||LA97_0==TICKED_STRING_LITERAL) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==PATTERN) ) {
                        alt97=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 0, input);
                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createContextFilter_in_createContextDetail4515);
                            createContextFilter276=createContextFilter();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createContextFilter.add(createContextFilter276.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_patternInclusionExpression_in_createContextDetail4519);
                            patternInclusionExpression277=patternInclusionExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression277.getTree());
                            }
                            break;
                    }
                    TERMINATED278=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextDetail4522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED278);
                    AFTER279=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextDetail4524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER279);
                    pushFollow(FOLLOW_timePeriod_in_createContextDetail4526);
                    timePeriod280=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod280.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        if ( stream_createContextFilter.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextFilter.nextTree());
                        }
                        stream_createContextFilter.reset();
                        if ( stream_patternInclusionExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        }
                        stream_patternInclusionExpression.reset();
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS282=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression281 = null;
        CommonTree i_tree=null;
        CommonTree AS282_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter4554);
            eventFilterExpression281=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression281.getTree());
            AS282=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter4556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS282);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR284=null;
        Token COMMA285=null;
        Token FROM287=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty283 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty286 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression288 = null;
        CommonTree AND_EXPR284_tree=null;
        CommonTree COMMA285_tree=null;
        CommonTree FROM287_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4584);
            eventProperty283=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty283.getTree());
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);
                if ( (LA100_0==AND_EXPR||LA100_0==COMMA) ) {
                    alt100=1;
                }
                switch (alt100) {
            	case 1 :
            	    {
            	    int alt99=2;
            	    int LA99_0 = input.LA(1);
            	    if ( (LA99_0==AND_EXPR) ) {
            	        alt99=1;
            	    }
            	    else if ( (LA99_0==COMMA) ) {
            	        alt99=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 99, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt99) {
            	        case 1 :
            	            {
            	            AND_EXPR284=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem4588); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR284);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA285=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem4590); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA285);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4593);
            	    eventProperty286=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty286.getTree());
            	    }
            	    break;
            	default :
            	    break loop100;
                }
            } while (true);
            FROM287=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem4597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM287);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem4599);
            eventFilterExpression288=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression288.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP289=null;
        Token AS291=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;
        CommonTree i_tree=null;
        CommonTree GROUP289_tree=null;
        CommonTree AS291_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP289=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem4625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP289);
            pushFollow(FOLLOW_expression_in_createContextGroupItem4627);
            expression290=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());
            AS291=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem4629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS291);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem4633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList292 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual4663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual4665);
            columnList292=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList292.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA294=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement293 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement295 = null;
        CommonTree COMMA294_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4691);
            variantListElement293=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement293.getTree());
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);
                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }
                switch (alt101) {
            	case 1 :
            	    {
            	    COMMA294=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4694); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA294);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4696);
            	    variantListElement295=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement295.getTree());
            	    }
            	    break;
            	default :
            	    break loop101;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR296=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier297 = null;
        CommonTree STAR296_tree=null;
        try {
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==STAR) ) {
                alt102=1;
            }
            else if ( (LA102_0==IDENT||LA102_0==TICKED_STRING_LITERAL) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);
                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR296=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR296_tree = (CommonTree)adaptor.create(STAR296);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR296_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4729);
                    classIdentifier297=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier297.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO298=null;
        Token LPAREN300=null;
        Token RPAREN302=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier299 = null;
        EsperEPL2GrammarParser.columnList_return columnList301 = null;
        CommonTree s_tree=null;
        CommonTree INTO298_tree=null;
        CommonTree LPAREN300_tree=null;
        CommonTree RPAREN302_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt103=3;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==ISTREAM) ) {
                alt103=1;
            }
            else if ( (LA103_0==RSTREAM) ) {
                alt103=2;
            }
            switch (alt103) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO298=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO298);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4766);
            classIdentifier299=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier299.getTree());
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==LPAREN) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    LPAREN300=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN300);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4771);
                    columnList301=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList301.getTree());
                    RPAREN302=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN302);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT303=null;
        Token COMMA304=null;
        Token IDENT305=null;
        CommonTree IDENT303_tree=null;
        CommonTree COMMA304_tree=null;
        CommonTree IDENT305_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT303=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT303);
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    COMMA304=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4809); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA304);
            	    IDENT305=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4811); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT305);
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression306 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin307 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList308 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4849);
            streamExpression306=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression306.getTree());
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==EOF||LA106_0==WHERE||(LA106_0>=GROUP && LA106_0<=HAVING)||LA106_0==OUTPUT||LA106_0==ORDER||LA106_0==ROW_LIMIT_EXPR||LA106_0==MATCH_RECOGNIZE||LA106_0==FOR||LA106_0==COMMA) ) {
                alt106=1;
            }
            else if ( ((LA106_0>=INNER && LA106_0<=FULL)) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);
                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4852);
                    regularJoin307=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin307.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4856);
                    outerJoinList308=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList308.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA309=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression310 = null;
        CommonTree COMMA309_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);
                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }
                switch (alt107) {
            	case 1 :
            	    {
            	    COMMA309=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4870); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4873);
            	    streamExpression310=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression310.getTree());
            	    }
            	    break;
            	default :
            	    break loop107;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin311 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin312 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4887);
            outerJoin311=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin311.getTree());
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);
                if ( ((LA108_0>=INNER && LA108_0<=FULL)) ) {
                    alt108=1;
                }
                switch (alt108) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4890);
            	    outerJoin312=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin312.getTree());
            	    }
            	    break;
            	default :
            	    break loop108;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER313=null;
        Token JOIN314=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression315 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent316 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER313_tree=null;
        CommonTree JOIN314_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( ((LA111_0>=JOIN && LA111_0<=FULL)) ) {
                alt111=1;
            }
            else if ( (LA111_0==INNER) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);
                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    {
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( ((LA110_0>=LEFT && LA110_0<=FULL)) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            int alt109=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt109=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt109=2;
                                }
                                break;
                            case FULL:
                                {
                                alt109=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 109, 0, input);
                                throw nvae;
                            }
                            switch (alt109) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4933); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4937); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4941); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER313=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4944); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER313);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN314=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN314);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4981);
            streamExpression315=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression315.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4983);
            outerJoinIdent316=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent316.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON317=null;
        Token AND_EXPR319=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair318 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair320 = null;
        CommonTree ON317_tree=null;
        CommonTree AND_EXPR319_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON317=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent5048); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5051);
            outerJoinIdentPair318=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair318.getTree());
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);
                if ( (LA112_0==AND_EXPR) ) {
                    alt112=1;
                }
                switch (alt112) {
            	case 1 :
            	    {
            	    AND_EXPR319=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent5054); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5057);
            	    outerJoinIdentPair320=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair320.getTree());
            	    }
            	    break;
            	default :
            	    break loop112;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS322=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty321 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty323 = null;
        CommonTree EQUALS322_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5072);
            eventProperty321=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty321.getTree());
            EQUALS322=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair5074); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5077);
            eventProperty323=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty323.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression324 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause5099);
            evalOrExpression324=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression324.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList325 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt113=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt113=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt113=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt113=3;
                    }
                    break;
            }
            switch (alt113) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause5135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause5141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause5147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==DISTINCT) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause5153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause5156);
            selectionList325=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList325.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA327=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement326 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement328 = null;
        CommonTree COMMA327_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList5187);
            selectionListElement326=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement326.getTree());
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);
                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }
                switch (alt115) {
            	case 1 :
            	    {
            	    COMMA327=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList5190); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList5193);
            	    selectionListElement328=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement328.getTree());
            	    }
            	    break;
            	default :
            	    break loop115;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS331=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector329 = null;
        EsperEPL2GrammarParser.expression_return expression330 = null;
        CommonTree s_tree=null;
        CommonTree AS331_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt117=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt117=1;
                }
                break;
            case IDENT:
                {
                int LA117_2 = input.LA(2);
                if ( (LA117_2==DOT) ) {
                    int LA117_75 = input.LA(3);
                    if ( (LA117_75==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt117=2;
                    }
                    else if ( (LA117_75==WINDOW||LA117_75==BETWEEN||LA117_75==ESCAPE||LA117_75==EVERY_EXPR||LA117_75==WHERE||(LA117_75>=SUM && LA117_75<=COUNT)||LA117_75==OUTER||(LA117_75>=JOIN && LA117_75<=FULL)||(LA117_75>=EVENTS && LA117_75<=LAST)||(LA117_75>=UNIDIRECTIONAL && LA117_75<=PREVIOUSTAIL)||LA117_75==PRIOR||(LA117_75>=WEEKDAY && LA117_75<=CAST)||(LA117_75>=SNAPSHOT && LA117_75<=INDEX)||(LA117_75>=DEFINE && LA117_75<=AFTER)||LA117_75==WHILE||(LA117_75>=MERGE && LA117_75<=MATCHED)||LA117_75==CONTEXT||LA117_75==IDENT||LA117_75==TICKED_STRING_LITERAL) ) {
                        alt117=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 75, input);
                        throw nvae;
                    }
                }
                else if ( (LA117_2==EOF||(LA117_2>=IN_SET && LA117_2<=REGEXP)||(LA117_2>=OR_EXPR && LA117_2<=NOT_EXPR)||(LA117_2>=WHERE && LA117_2<=AS)||(LA117_2>=WHEN && LA117_2<=THEN)||LA117_2==FROM||LA117_2==IS||(LA117_2>=GROUP && LA117_2<=HAVING)||LA117_2==OUTPUT||LA117_2==INSERT||LA117_2==ORDER||LA117_2==ROW_LIMIT_EXPR||LA117_2==FOR||LA117_2==LPAREN||(LA117_2>=COMMA && LA117_2<=EQUALS)||LA117_2==LBRACK||(LA117_2>=STAR && LA117_2<=QUESTION)||(LA117_2>=BAND && LA117_2<=MOD)||LA117_2==ESCAPECHAR) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt117=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement5219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement5237);
                    streamSelector329=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector329.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement5242);
                    expression330=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());
                    int alt116=2;
                    int LA116_0 = input.LA(1);
                    if ( (LA116_0==AS) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            AS331=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement5245); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS331);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement5249);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT332=null;
        Token STAR333=null;
        Token AS334=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT332_tree=null;
        CommonTree STAR333_tree=null;
        CommonTree AS334_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT332=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector5307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT332);
            STAR333=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector5309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR333);
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==AS) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    AS334=(Token)match(input,AS,FOLLOW_AS_in_streamSelector5312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS334);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT339=null;
        Token DOT341=null;
        Token AS343=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression335 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression336 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression337 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression338 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression340 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression342 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT339_tree=null;
        CommonTree DOT341_tree=null;
        CommonTree AS343_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt119=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA119_1 = input.LA(2);
                if ( (LA119_1==EOF||(LA119_1>=WHERE && LA119_1<=AS)||(LA119_1>=INNER && LA119_1<=ON)||(LA119_1>=GROUP && LA119_1<=HAVING)||LA119_1==OUTPUT||LA119_1==ORDER||(LA119_1>=UNIDIRECTIONAL && LA119_1<=RETAININTERSECTION)||LA119_1==ROW_LIMIT_EXPR||LA119_1==MATCH_RECOGNIZE||LA119_1==FOR||LA119_1==IDENT||LA119_1==LPAREN||(LA119_1>=COMMA && LA119_1<=LBRACK)) ) {
                    alt119=1;
                }
                else if ( (LA119_1==COLON) ) {
                    alt119=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 119, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt119=1;
                }
                break;
            case PATTERN:
                {
                alt119=2;
                }
                break;
            case SQL:
                {
                alt119=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);
                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression5347);
                    eventFilterExpression335=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression335.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression5351);
                    patternInclusionExpression336=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression336.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression5355);
                    databaseJoinExpression337=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression337.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression5359);
                    methodJoinExpression338=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression338.getTree());
                    }
                    break;
            }
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==DOT) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    DOT339=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT339);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression5368);
                    viewExpression340=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression340.getTree());
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);
                        if ( (LA120_0==DOT) ) {
                            alt120=1;
                        }
                        switch (alt120) {
                    	case 1 :
                    	    {
                    	    DOT341=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5371); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT341);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression5373);
                    	    viewExpression342=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression342.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop120;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt122=3;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==AS) ) {
                alt122=1;
            }
            else if ( (LA122_0==IDENT) ) {
                alt122=2;
            }
            switch (alt122) {
                case 1 :
                    {
                    AS343=(Token)match(input,AS,FOLLOW_AS_in_streamExpression5380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS343);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==UNIDIRECTIONAL) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression5397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt124=3;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==RETAINUNION) ) {
                alt124=1;
            }
            else if ( (LA124_0==RETAININTERSECTION) ) {
                alt124=2;
            }
            switch (alt124) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR344=null;
        Token LPAREN345=null;
        Token RPAREN347=null;
        EsperEPL2GrammarParser.expressionList_return expressionList346 = null;
        CommonTree i_tree=null;
        CommonTree FOR344_tree=null;
        CommonTree LPAREN345_tree=null;
        CommonTree RPAREN347_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR344=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR344);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==LPAREN) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    LPAREN345=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN345);
                    int alt125=2;
                    int LA125_0 = input.LA(1);
                    if ( (LA125_0==WINDOW||LA125_0==BETWEEN||LA125_0==ESCAPE||(LA125_0>=NOT_EXPR && LA125_0<=EVERY_EXPR)||LA125_0==WHERE||(LA125_0>=SUM && LA125_0<=COUNT)||LA125_0==CASE||LA125_0==OUTER||(LA125_0>=JOIN && LA125_0<=FULL)||(LA125_0>=EVENTS && LA125_0<=LAST)||(LA125_0>=UNIDIRECTIONAL && LA125_0<=CURRENT_TIMESTAMP)||(LA125_0>=SNAPSHOT && LA125_0<=INDEX)||(LA125_0>=BOOLEAN_TRUE && LA125_0<=VALUE_NULL)||(LA125_0>=DEFINE && LA125_0<=AFTER)||LA125_0==WHILE||(LA125_0>=MERGE && LA125_0<=MATCHED)||LA125_0==NEWKW||LA125_0==CONTEXT||LA125_0==NUM_DOUBLE||(LA125_0>=IDENT && LA125_0<=LCURLY)||LA125_0==LPAREN||(LA125_0>=PLUS && LA125_0<=QUESTION)||(LA125_0>=STRING_LITERAL && LA125_0<=QUOTED_STRING_LITERAL)||LA125_0==MINUS||LA125_0==NUM_INT||(LA125_0>=TICKED_STRING_LITERAL && LA125_0<=NUM_FLOAT)) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5473);
                            expressionList346=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList346.getTree());
                            }
                            break;
                    }
                    RPAREN347=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN347);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE348=null;
        Token LPAREN349=null;
        Token RPAREN357=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy350 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures351 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection352 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip353 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern354 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval355 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine356 = null;
        CommonTree MATCH_RECOGNIZE348_tree=null;
        CommonTree LPAREN349_tree=null;
        CommonTree RPAREN357_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE348=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE348);
            LPAREN349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN349);
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==PARTITION) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5532);
                    matchRecogPartitionBy350=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy350.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5539);
            matchRecogMeasures351=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures351.getTree());
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==ALL) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5544);
                    matchRecogMatchesSelection352=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection352.getTree());
                    }
                    break;
            }
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==AFTER) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5550);
                    matchRecogMatchesAfterSkip353=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip353.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5556);
            matchRecogPattern354=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern354.getTree());
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==IDENT) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5562);
                    matchRecogMatchesInterval355=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval355.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5568);
            matchRecogDefine356=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine356.getTree());
            RPAREN357=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN357);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION358=null;
        Token BY359=null;
        Token COMMA361=null;
        EsperEPL2GrammarParser.expression_return expression360 = null;
        EsperEPL2GrammarParser.expression_return expression362 = null;
        CommonTree PARTITION358_tree=null;
        CommonTree BY359_tree=null;
        CommonTree COMMA361_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION358=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION358);
            BY359=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY359);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5616);
            expression360=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression360.getTree());
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);
                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }
                switch (alt131) {
            	case 1 :
            	    {
            	    COMMA361=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5619); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA361);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5621);
            	    expression362=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression362.getTree());
            	    }
            	    break;
            	default :
            	    break loop131;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES363=null;
        Token COMMA365=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem364 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem366 = null;
        CommonTree MEASURES363_tree=null;
        CommonTree COMMA365_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES363=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES363);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5652);
            matchRecogMeasureItem364=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem364.getTree());
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);
                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }
                switch (alt132) {
            	case 1 :
            	    {
            	    COMMA365=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5655); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA365);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5657);
            	    matchRecogMeasureItem366=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem366.getTree());
            	    }
            	    break;
            	default :
            	    break loop132;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS368=null;
        EsperEPL2GrammarParser.expression_return expression367 = null;
        CommonTree i_tree=null;
        CommonTree AS368_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5682);
            expression367=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression367.getTree());
            int alt134=2;
            int LA134_0 = input.LA(1);
            if ( (LA134_0==AS) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    {
                    AS368=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS368);
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==IDENT) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL369=null;
        Token MATCHES370=null;
        CommonTree ALL369_tree=null;
        CommonTree MATCHES370_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL369=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL369_tree = (CommonTree)adaptor.create(ALL369);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL369_tree, root_0);
            }
            MATCHES370=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5724); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN371=null;
        Token LPAREN372=null;
        Token RPAREN374=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration373 = null;
        CommonTree PATTERN371_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree RPAREN374_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN371=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN371);
            LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN372);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5743);
            matchRecogPatternAlteration373=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration373.getTree());
            RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN374);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER375=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER375_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER375=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER375);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5771);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5775);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5779);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5783);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5787);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod376 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5825);
            timePeriod376=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod376.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat377 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat378 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5851);
            matchRecogPatternConcat377=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat377.getTree());
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);
                if ( (LA135_0==BOR) ) {
                    alt135=1;
                }
                switch (alt135) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5856); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5858);
            	    matchRecogPatternConcat378=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat378.getTree());
            	    }
            	    break;
            	default :
            	    break loop135;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary379 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);
                if ( (LA136_0==IDENT||LA136_0==LPAREN) ) {
                    alt136=1;
                }
                switch (alt136) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5891);
            	    matchRecogPatternUnary379=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary379.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested380 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom381 = null;
        try {
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==LPAREN) ) {
                alt137=1;
            }
            else if ( (LA137_0==IDENT) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);
                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5916);
                    matchRecogPatternNested380=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested380.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5922);
                    matchRecogPatternAtom381=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom381.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN382=null;
        Token RPAREN384=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration383 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN382_tree=null;
        CommonTree RPAREN384_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN382=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN382);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5936);
            matchRecogPatternAlteration383=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration383.getTree());
            RPAREN384=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN384);
            int alt138=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt138=1;
                    }
                    break;
                case PLUS:
                    {
                    alt138=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt138=3;
                    }
                    break;
            }
            switch (alt138) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==STAR||(LA141_0>=PLUS && LA141_0<=QUESTION)) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    int alt139=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt139=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt139=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt139=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);
                        throw nvae;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom6000); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom6006); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6012); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt140=2;
                    int LA140_0 = input.LA(1);
                    if ( (LA140_0==QUESTION) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6018); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE385=null;
        Token COMMA387=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem386 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem388 = null;
        CommonTree DEFINE385_tree=null;
        CommonTree COMMA387_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE385=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine6062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE385);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6064);
            matchRecogDefineItem386=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem386.getTree());
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);
                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }
                switch (alt142) {
            	case 1 :
            	    {
            	    COMMA387=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine6067); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA387);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6069);
            	    matchRecogDefineItem388=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem388.getTree());
            	    }
            	    break;
            	default :
            	    break loop142;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS389=null;
        EsperEPL2GrammarParser.expression_return expression390 = null;
        CommonTree i_tree=null;
        CommonTree AS389_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem6096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS389=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem6098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS389);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem6100);
            expression390=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN391=null;
        Token LBRACK392=null;
        Token RBRACK394=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression393 = null;
        CommonTree PATTERN391_tree=null;
        CommonTree LBRACK392_tree=null;
        CommonTree RBRACK394_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN391=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression6125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN391);
            LBRACK392=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression6127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK392);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression6129);
            patternExpression393=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression393.getTree());
            RBRACK394=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression6131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK394);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL395=null;
        Token COLON396=null;
        Token LBRACK397=null;
        Token METADATASQL398=null;
        Token RBRACK399=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL395_tree=null;
        CommonTree COLON396_tree=null;
        CommonTree LBRACK397_tree=null;
        CommonTree METADATASQL398_tree=null;
        CommonTree RBRACK399_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL395=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression6164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL395);
            COLON396=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression6166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON396);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression6170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK397=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression6172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK397);
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==STRING_LITERAL) ) {
                alt143=1;
            }
            else if ( (LA143_0==QUOTED_STRING_LITERAL) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);
                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==METADATASQL) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    METADATASQL398=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression6187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL398);
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==STRING_LITERAL) ) {
                        alt144=1;
                    }
                    else if ( (LA144_0==QUOTED_STRING_LITERAL) ) {
                        alt144=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);
                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6192); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6198); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK399=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression6203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK399);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON400=null;
        Token LPAREN402=null;
        Token RPAREN404=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier401 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList403 = null;
        CommonTree i_tree=null;
        CommonTree COLON400_tree=null;
        CommonTree LPAREN402_tree=null;
        CommonTree RPAREN404_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression6254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON400=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression6256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON400);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression6258);
            classIdentifier401=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier401.getTree());
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==LPAREN) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    LPAREN402=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression6261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN402);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==WINDOW||LA146_0==BETWEEN||LA146_0==ESCAPE||(LA146_0>=NOT_EXPR && LA146_0<=EVERY_EXPR)||LA146_0==WHERE||(LA146_0>=SUM && LA146_0<=COUNT)||LA146_0==CASE||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||(LA146_0>=EVENTS && LA146_0<=LAST)||(LA146_0>=UNIDIRECTIONAL && LA146_0<=CURRENT_TIMESTAMP)||(LA146_0>=SNAPSHOT && LA146_0<=INDEX)||(LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||(LA146_0>=DEFINE && LA146_0<=AFTER)||LA146_0==WHILE||(LA146_0>=MERGE && LA146_0<=MATCHED)||LA146_0==NEWKW||LA146_0==CONTEXT||LA146_0==NUM_DOUBLE||(LA146_0>=IDENT && LA146_0<=LCURLY)||LA146_0==LPAREN||(LA146_0>=PLUS && LA146_0<=QUESTION)||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==MINUS||LA146_0==NUM_INT||(LA146_0>=TICKED_STRING_LITERAL && LA146_0<=NUM_FLOAT)) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression6263);
                            expressionList403=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList403.getTree());
                            }
                            break;
                    }
                    RPAREN404=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression6266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN404);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON405=null;
        Token LPAREN406=null;
        Token RPAREN408=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList407 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON405_tree=null;
        CommonTree LPAREN406_tree=null;
        CommonTree RPAREN408_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON405=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression6321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON405);
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==IDENT) ) {
                alt148=1;
            }
            else if ( (LA148_0==MERGE) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression6330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN406=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression6333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN406);
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==WINDOW||LA149_0==BETWEEN||LA149_0==ESCAPE||(LA149_0>=NOT_EXPR && LA149_0<=EVERY_EXPR)||LA149_0==WHERE||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==CASE||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||(LA149_0>=SNAPSHOT && LA149_0<=INDEX)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||(LA149_0>=DEFINE && LA149_0<=AFTER)||LA149_0==WHILE||(LA149_0>=MERGE && LA149_0<=MATCHED)||LA149_0==NEWKW||LA149_0==CONTEXT||LA149_0==NUM_DOUBLE||(LA149_0>=IDENT && LA149_0<=LCURLY)||LA149_0==LPAREN||LA149_0==LBRACK||LA149_0==STAR||(LA149_0>=PLUS && LA149_0<=QUESTION)||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||LA149_0==MINUS||LA149_0==NUM_INT||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression6335);
                    expressionWithTimeList407=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList407.getTree());
                    }
                    break;
            }
            RPAREN408=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression6338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN408);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA410=null;
        EsperEPL2GrammarParser.expression_return expression409 = null;
        EsperEPL2GrammarParser.expression_return expression411 = null;
        CommonTree COMMA410_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr6398);
            expression409=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression409.getTree());
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);
                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }
                switch (alt150) {
            	case 1 :
            	    {
            	    COMMA410=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6401); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA410);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6403);
            	    expression411=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression411.getTree());
            	    }
            	    break;
            	default :
            	    break loop150;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA413=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement412 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement414 = null;
        CommonTree COMMA413_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6438);
            orderByListElement412=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement412.getTree());
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    COMMA413=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6441); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA413);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6443);
            	    orderByListElement414=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement414.getTree());
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression415 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6468);
            expression415=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression415.getTree());
            int alt152=3;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==ASC) ) {
                alt152=1;
            }
            else if ( (LA152_0==DESC) ) {
                alt152=2;
            }
            switch (alt152) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression416 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6515);
            evalOrExpression416=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression416.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token t1=null;
        Token THEN422=null;
        Token TERMINATED424=null;
        Token AND_EXPR425=null;
        Token WHEN426=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter417 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod418 = null;
        EsperEPL2GrammarParser.number_return number419 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet420 = null;
        EsperEPL2GrammarParser.expression_return expression421 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr423 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree t1_tree=null;
        CommonTree THEN422_tree=null;
        CommonTree TERMINATED424_tree=null;
        CommonTree AND_EXPR425_tree=null;
        CommonTree WHEN426_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==AFTER) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6553);
                    outputLimitAfter417=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter417.getTree());
                    }
                    break;
            }
            int alt154=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt154=1;
                    }
                    break;
                case FIRST:
                    {
                    alt154=2;
                    }
                    break;
                case LAST:
                    {
                    alt154=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt154=4;
                    }
                    break;
            }
            switch (alt154) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt158=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt158=1;
                }
                break;
            case AT:
                {
                alt158=2;
                }
                break;
            case WHEN:
                {
                int LA158_3 = input.LA(2);
                if ( (LA158_3==TERMINATED) ) {
                    alt158=4;
                }
                else if ( (LA158_3==WINDOW||LA158_3==BETWEEN||LA158_3==ESCAPE||(LA158_3>=NOT_EXPR && LA158_3<=EVERY_EXPR)||LA158_3==WHERE||(LA158_3>=SUM && LA158_3<=COUNT)||LA158_3==CASE||LA158_3==OUTER||(LA158_3>=JOIN && LA158_3<=FULL)||(LA158_3>=EVENTS && LA158_3<=LAST)||(LA158_3>=UNIDIRECTIONAL && LA158_3<=CURRENT_TIMESTAMP)||(LA158_3>=SNAPSHOT && LA158_3<=INDEX)||(LA158_3>=BOOLEAN_TRUE && LA158_3<=VALUE_NULL)||(LA158_3>=DEFINE && LA158_3<=AFTER)||LA158_3==WHILE||(LA158_3>=MERGE && LA158_3<=MATCHED)||LA158_3==NEWKW||LA158_3==CONTEXT||LA158_3==NUM_DOUBLE||(LA158_3>=IDENT && LA158_3<=LCURLY)||LA158_3==LPAREN||(LA158_3>=PLUS && LA158_3<=QUESTION)||(LA158_3>=STRING_LITERAL && LA158_3<=QUOTED_STRING_LITERAL)||LA158_3==MINUS||LA158_3==NUM_INT||(LA158_3>=TICKED_STRING_LITERAL && LA158_3<=NUM_FLOAT)) ) {
                    alt158=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt158=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);
                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt156=2;
                    int LA156_0 = input.LA(1);
                    if ( (LA156_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt156=1;
                    }
                    else if ( (LA156_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt156=1;
                    }
                    else if ( (LA156_0==NUM_INT) ) {
                        int LA156_3 = input.LA(2);
                        if ( (LA156_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==EVENTS) ) {
                            alt156=2;
                        }
                        else if ( (LA156_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 156, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA156_0==NUM_LONG) ) {
                        int LA156_4 = input.LA(2);
                        if ( (LA156_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==EVENTS) ) {
                            alt156=2;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 156, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA156_0==NUM_FLOAT) ) {
                        int LA156_5 = input.LA(2);
                        if ( (LA156_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==EVENTS) ) {
                            alt156=2;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 156, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA156_0==NUM_DOUBLE) ) {
                        int LA156_6 = input.LA(2);
                        if ( (LA156_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==EVENTS) ) {
                            alt156=2;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 156, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA156_0==IDENT) ) {
                        int LA156_7 = input.LA(2);
                        if ( (LA156_7==EVENTS) ) {
                            alt156=2;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else if ( (LA156_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt156=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 156, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA156_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt156=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 0, input);
                        throw nvae;
                    }
                    switch (alt156) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6637);
                            timePeriod418=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod418.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt155=2;
                            int LA155_0 = input.LA(1);
                            if ( (LA155_0==NUM_DOUBLE||LA155_0==NUM_INT||(LA155_0>=NUM_LONG && LA155_0<=NUM_FLOAT)) ) {
                                alt155=1;
                            }
                            else if ( (LA155_0==IDENT) ) {
                                alt155=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 155, 0, input);
                                throw nvae;
                            }
                            switch (alt155) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6648);
                                    number419=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number419.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6654); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6660); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6693);
                    crontabLimitParameterSet420=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet420.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6712);
                    expression421=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression421.getTree());
                    int alt157=2;
                    int LA157_0 = input.LA(1);
                    if ( (LA157_0==THEN) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            {
                            THEN422=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6715); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN422);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6717);
                            onSetExpr423=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr423.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED424=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit6739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED424);
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt159=2;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==AND_EXPR) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    AND_EXPR425=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit6770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR425);
                    WHEN426=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(WHEN426);
                    t1=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit6776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(t1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS429=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod427 = null;
        EsperEPL2GrammarParser.number_return number428 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS429_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt160=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case PLUS:
            case QUESTION:
            case MINUS:
                {
                alt160=1;
                }
                break;
            case NUM_INT:
                {
                int LA160_3 = input.LA(2);
                if ( (LA160_3==MIN||(LA160_3>=TIMEPERIOD_YEAR && LA160_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt160=1;
                }
                else if ( (LA160_3==EVENTS) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA160_4 = input.LA(2);
                if ( (LA160_4==MIN||(LA160_4>=TIMEPERIOD_YEAR && LA160_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt160=1;
                }
                else if ( (LA160_4==EVENTS) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA160_5 = input.LA(2);
                if ( (LA160_5==MIN||(LA160_5>=TIMEPERIOD_YEAR && LA160_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt160=1;
                }
                else if ( (LA160_5==EVENTS) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA160_6 = input.LA(2);
                if ( (LA160_6==EVENTS) ) {
                    alt160=2;
                }
                else if ( (LA160_6==MIN||(LA160_6>=TIMEPERIOD_YEAR && LA160_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);
                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6954);
                    timePeriod427=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod427.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6958);
                    number428=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number428.getTree());
                    EVENTS429=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS429);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==NUM_DOUBLE||LA161_0==PLUS||LA161_0==MINUS||LA161_0==NUM_INT||(LA161_0>=NUM_LONG && LA161_0<=NUM_FLOAT)) ) {
                alt161=1;
            }
            else if ( (LA161_0==IDENT) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);
                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit7006);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==OFFSET||LA164_0==COMMA) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    int alt162=2;
                    int LA162_0 = input.LA(1);
                    if ( (LA162_0==COMMA) ) {
                        alt162=1;
                    }
                    else if ( (LA162_0==OFFSET) ) {
                        alt162=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);
                        throw nvae;
                    }
                    switch (alt162) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit7019); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit7025); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt163=2;
                    int LA163_0 = input.LA(1);
                    if ( (LA163_0==NUM_DOUBLE||LA163_0==PLUS||LA163_0==MINUS||LA163_0==NUM_INT||(LA163_0>=NUM_LONG && LA163_0<=NUM_FLOAT)) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==IDENT) ) {
                        alt163=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);
                        throw nvae;
                    }
                    switch (alt163) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit7031);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7037); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN430=null;
        Token COMMA432=null;
        Token COMMA434=null;
        Token COMMA436=null;
        Token COMMA438=null;
        Token COMMA440=null;
        Token RPAREN442=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime431 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime433 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime435 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime437 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime439 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime441 = null;
        CommonTree LPAREN430_tree=null;
        CommonTree COMMA432_tree=null;
        CommonTree COMMA434_tree=null;
        CommonTree COMMA436_tree=null;
        CommonTree COMMA438_tree=null;
        CommonTree COMMA440_tree=null;
        CommonTree RPAREN442_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN430=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet7089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN430);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7091);
            expressionWithTime431=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime431.getTree());
            COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA432);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7095);
            expressionWithTime433=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime433.getTree());
            COMMA434=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA434);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7099);
            expressionWithTime435=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime435.getTree());
            COMMA436=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA436);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7103);
            expressionWithTime437=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime437.getTree());
            COMMA438=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA438);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7107);
            expressionWithTime439=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime439.getTree());
            int alt165=2;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==COMMA) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    COMMA440=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA440);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7112);
                    expressionWithTime441=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime441.getTree());
                    }
                    break;
            }
            RPAREN442=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet7116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN442);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN443=null;
        Token THEN445=null;
        EsperEPL2GrammarParser.expression_return expression444 = null;
        EsperEPL2GrammarParser.expression_return expression446 = null;
        CommonTree WHEN443_tree=null;
        CommonTree THEN445_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN443=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause7146); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7149);
            expression444=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression444.getTree());
            THEN445=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause7151); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7154);
            expression446=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression446.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE447=null;
        EsperEPL2GrammarParser.expression_return expression448 = null;
        CommonTree ELSE447_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE447=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause7167); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause7170);
            expression448=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression448.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression449 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression7183);
            caseExpression449=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression449.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE450=null;
        Token END453=null;
        Token CASE454=null;
        Token END458=null;
        EsperEPL2GrammarParser.whenClause_return whenClause451 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause452 = null;
        EsperEPL2GrammarParser.expression_return expression455 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause456 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause457 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression459 = null;
        CommonTree CASE450_tree=null;
        CommonTree END453_tree=null;
        CommonTree CASE454_tree=null;
        CommonTree END458_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt170=3;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==CASE) ) {
                int LA170_1 = input.LA(2);
                if ( (LA170_1==WHEN) ) {
                    alt170=1;
                }
                else if ( (LA170_1==WINDOW||LA170_1==BETWEEN||LA170_1==ESCAPE||(LA170_1>=NOT_EXPR && LA170_1<=EVERY_EXPR)||LA170_1==WHERE||(LA170_1>=SUM && LA170_1<=COUNT)||LA170_1==CASE||LA170_1==OUTER||(LA170_1>=JOIN && LA170_1<=FULL)||(LA170_1>=EVENTS && LA170_1<=LAST)||(LA170_1>=UNIDIRECTIONAL && LA170_1<=CURRENT_TIMESTAMP)||(LA170_1>=SNAPSHOT && LA170_1<=INDEX)||(LA170_1>=BOOLEAN_TRUE && LA170_1<=VALUE_NULL)||(LA170_1>=DEFINE && LA170_1<=AFTER)||LA170_1==WHILE||(LA170_1>=MERGE && LA170_1<=MATCHED)||LA170_1==NEWKW||LA170_1==CONTEXT||LA170_1==NUM_DOUBLE||(LA170_1>=IDENT && LA170_1<=LCURLY)||LA170_1==LPAREN||(LA170_1>=PLUS && LA170_1<=QUESTION)||(LA170_1>=STRING_LITERAL && LA170_1<=QUOTED_STRING_LITERAL)||LA170_1==MINUS||LA170_1==NUM_INT||(LA170_1>=TICKED_STRING_LITERAL && LA170_1<=NUM_FLOAT)) ) {
                    alt170=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA170_0==WINDOW||LA170_0==BETWEEN||LA170_0==ESCAPE||(LA170_0>=NOT_EXPR && LA170_0<=EVERY_EXPR)||LA170_0==WHERE||(LA170_0>=SUM && LA170_0<=COUNT)||LA170_0==OUTER||(LA170_0>=JOIN && LA170_0<=FULL)||(LA170_0>=EVENTS && LA170_0<=LAST)||(LA170_0>=UNIDIRECTIONAL && LA170_0<=CURRENT_TIMESTAMP)||(LA170_0>=SNAPSHOT && LA170_0<=INDEX)||(LA170_0>=BOOLEAN_TRUE && LA170_0<=VALUE_NULL)||(LA170_0>=DEFINE && LA170_0<=AFTER)||LA170_0==WHILE||(LA170_0>=MERGE && LA170_0<=MATCHED)||LA170_0==NEWKW||LA170_0==CONTEXT||LA170_0==NUM_DOUBLE||(LA170_0>=IDENT && LA170_0<=LCURLY)||LA170_0==LPAREN||(LA170_0>=PLUS && LA170_0<=QUESTION)||(LA170_0>=STRING_LITERAL && LA170_0<=QUOTED_STRING_LITERAL)||LA170_0==MINUS||LA170_0==NUM_INT||(LA170_0>=TICKED_STRING_LITERAL && LA170_0<=NUM_FLOAT)) ) {
                alt170=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);
                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE450=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE450_tree = (CommonTree)adaptor.create(CASE450);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE450_tree, root_0);
                    }
                    int cnt166=0;
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);
                        if ( (LA166_0==WHEN) ) {
                            alt166=1;
                        }
                        switch (alt166) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7200);
                    	    whenClause451=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause451.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt166 >= 1 ) break loop166;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(166, input);
                                throw eee;
                        }
                        cnt166++;
                    } while (true);
                    int alt167=2;
                    int LA167_0 = input.LA(1);
                    if ( (LA167_0==ELSE) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7203);
                            elseClause452=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause452.getTree());
                            }
                            break;
                    }
                    END453=(Token)match(input,END,FOLLOW_END_in_caseExpression7206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE454=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE454);
                    pushFollow(FOLLOW_expression_in_caseExpression7219);
                    expression455=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression455.getTree());
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);
                        if ( (LA168_0==WHEN) ) {
                            alt168=1;
                        }
                        switch (alt168) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7221);
                    	    whenClause456=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause456.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);
                    int alt169=2;
                    int LA169_0 = input.LA(1);
                    if ( (LA169_0==ELSE) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7224);
                            elseClause457=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause457.getTree());
                            }
                            break;
                    }
                    END458=(Token)match(input,END,FOLLOW_END_in_caseExpression7227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END458);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression7251);
                    evalOrExpression459=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression459.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression460 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression461 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7262);
            evalAndExpression460=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression460.getTree());
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);
                if ( (LA171_0==OR_EXPR) ) {
                    alt171=1;
                }
                switch (alt171) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression7267); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7269);
            	    evalAndExpression461=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression461.getTree());
            	    }
            	    break;
            	default :
            	    break loop171;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression462 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression463 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7301);
            bitWiseExpression462=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression462.getTree());
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);
                if ( (LA172_0==AND_EXPR) ) {
                    int LA172_16 = input.LA(2);
                    if ( (LA172_16==WINDOW||LA172_16==BETWEEN||LA172_16==ESCAPE||(LA172_16>=NOT_EXPR && LA172_16<=EVERY_EXPR)||LA172_16==WHERE||(LA172_16>=SUM && LA172_16<=COUNT)||LA172_16==OUTER||(LA172_16>=JOIN && LA172_16<=FULL)||(LA172_16>=EVENTS && LA172_16<=LAST)||(LA172_16>=UNIDIRECTIONAL && LA172_16<=CURRENT_TIMESTAMP)||(LA172_16>=SNAPSHOT && LA172_16<=INDEX)||(LA172_16>=BOOLEAN_TRUE && LA172_16<=VALUE_NULL)||(LA172_16>=DEFINE && LA172_16<=AFTER)||LA172_16==WHILE||(LA172_16>=MERGE && LA172_16<=MATCHED)||LA172_16==NEWKW||LA172_16==CONTEXT||LA172_16==NUM_DOUBLE||(LA172_16>=IDENT && LA172_16<=LCURLY)||LA172_16==LPAREN||(LA172_16>=PLUS && LA172_16<=QUESTION)||(LA172_16>=STRING_LITERAL && LA172_16<=QUOTED_STRING_LITERAL)||LA172_16==MINUS||LA172_16==NUM_INT||(LA172_16>=TICKED_STRING_LITERAL && LA172_16<=NUM_FLOAT)) ) {
                        alt172=1;
                    }
                }
                switch (alt172) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression7306); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7308);
            	    bitWiseExpression463=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression463.getTree());
            	    }
            	    break;
            	default :
            	    break loop172;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND465=null;
        Token BOR466=null;
        Token BXOR467=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression464 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression468 = null;
        CommonTree BAND465_tree=null;
        CommonTree BOR466_tree=null;
        CommonTree BXOR467_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7340);
            negatedExpression464=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression464.getTree());
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);
                if ( (LA174_0==BOR||(LA174_0>=BAND && LA174_0<=BXOR)) ) {
                    alt174=1;
                }
                switch (alt174) {
            	case 1 :
            	    {
            	    int alt173=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt173=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt173=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt173=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 173, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt173) {
            	        case 1 :
            	            {
            	            BAND465=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression7345); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND465_tree = (CommonTree)adaptor.create(BAND465);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND465_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR466=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression7348); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR466_tree = (CommonTree)adaptor.create(BOR466);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR466_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR467=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression7351); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR467_tree = (CommonTree)adaptor.create(BXOR467);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR467_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7355);
            	    negatedExpression468=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression468.getTree());
            	    }
            	    break;
            	default :
            	    break loop174;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR470=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression469 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression471 = null;
        CommonTree NOT_EXPR470_tree=null;
        try {
            int alt175=2;
            int LA175_0 = input.LA(1);
            if ( (LA175_0==WINDOW||LA175_0==BETWEEN||LA175_0==ESCAPE||LA175_0==EVERY_EXPR||LA175_0==WHERE||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||(LA175_0>=SNAPSHOT && LA175_0<=INDEX)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||(LA175_0>=DEFINE && LA175_0<=AFTER)||LA175_0==WHILE||(LA175_0>=MERGE && LA175_0<=MATCHED)||LA175_0==NEWKW||LA175_0==CONTEXT||LA175_0==NUM_DOUBLE||(LA175_0>=IDENT && LA175_0<=LCURLY)||LA175_0==LPAREN||(LA175_0>=PLUS && LA175_0<=QUESTION)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||LA175_0==MINUS||LA175_0==NUM_INT||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                alt175=1;
            }
            else if ( (LA175_0==NOT_EXPR) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);
                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7370);
                    evalEqualsExpression469=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression469.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR470=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression7376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR470_tree = (CommonTree)adaptor.create(NOT_EXPR470);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR470_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7379);
                    evalEqualsExpression471=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression471.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR473=null;
        Token LPAREN475=null;
        Token RPAREN477=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression472 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression474 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList476 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression478 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR473_tree=null;
        CommonTree LPAREN475_tree=null;
        CommonTree RPAREN477_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7392);
            evalRelationalExpression472=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression472.getTree());
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);
                if ( (LA181_0==IS||LA181_0==EQUALS||(LA181_0>=SQL_NE && LA181_0<=NOT_EQUAL)) ) {
                    alt181=1;
                }
                switch (alt181) {
            	case 1 :
            	    {
            	    int alt176=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt176=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA176_2 = input.LA(2);
            	        if ( (LA176_2==NOT_EXPR) ) {
            	            alt176=3;
            	        }
            	        else if ( (LA176_2==WINDOW||LA176_2==BETWEEN||LA176_2==ESCAPE||LA176_2==EVERY_EXPR||LA176_2==WHERE||(LA176_2>=SUM && LA176_2<=COUNT)||LA176_2==OUTER||(LA176_2>=JOIN && LA176_2<=FULL)||(LA176_2>=ALL && LA176_2<=SOME)||(LA176_2>=EVENTS && LA176_2<=LAST)||(LA176_2>=UNIDIRECTIONAL && LA176_2<=CURRENT_TIMESTAMP)||(LA176_2>=SNAPSHOT && LA176_2<=INDEX)||(LA176_2>=BOOLEAN_TRUE && LA176_2<=VALUE_NULL)||(LA176_2>=DEFINE && LA176_2<=AFTER)||LA176_2==WHILE||(LA176_2>=MERGE && LA176_2<=MATCHED)||LA176_2==NEWKW||LA176_2==CONTEXT||LA176_2==NUM_DOUBLE||(LA176_2>=IDENT && LA176_2<=LCURLY)||LA176_2==LPAREN||(LA176_2>=PLUS && LA176_2<=QUESTION)||(LA176_2>=STRING_LITERAL && LA176_2<=QUOTED_STRING_LITERAL)||LA176_2==MINUS||LA176_2==NUM_INT||(LA176_2>=TICKED_STRING_LITERAL && LA176_2<=NUM_FLOAT)) ) {
            	            alt176=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 176, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt176=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt176=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 176, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt176) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression7405); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7423); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7437); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR473=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression7439); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR473);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression7453); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression7467); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt180=2;
            	    int LA180_0 = input.LA(1);
            	    if ( (LA180_0==WINDOW||LA180_0==BETWEEN||LA180_0==ESCAPE||LA180_0==EVERY_EXPR||LA180_0==WHERE||(LA180_0>=SUM && LA180_0<=COUNT)||LA180_0==OUTER||(LA180_0>=JOIN && LA180_0<=FULL)||(LA180_0>=EVENTS && LA180_0<=LAST)||(LA180_0>=UNIDIRECTIONAL && LA180_0<=CURRENT_TIMESTAMP)||(LA180_0>=SNAPSHOT && LA180_0<=INDEX)||(LA180_0>=BOOLEAN_TRUE && LA180_0<=VALUE_NULL)||(LA180_0>=DEFINE && LA180_0<=AFTER)||LA180_0==WHILE||(LA180_0>=MERGE && LA180_0<=MATCHED)||LA180_0==NEWKW||LA180_0==CONTEXT||LA180_0==NUM_DOUBLE||(LA180_0>=IDENT && LA180_0<=LCURLY)||LA180_0==LPAREN||(LA180_0>=PLUS && LA180_0<=QUESTION)||(LA180_0>=STRING_LITERAL && LA180_0<=QUOTED_STRING_LITERAL)||LA180_0==MINUS||LA180_0==NUM_INT||(LA180_0>=TICKED_STRING_LITERAL && LA180_0<=NUM_FLOAT)) ) {
            	        alt180=1;
            	    }
            	    else if ( ((LA180_0>=ALL && LA180_0<=SOME)) ) {
            	        alt180=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 180, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt180) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7497);
            	            evalRelationalExpression474=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression474.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt177=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt177=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt177=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt177=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 177, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt177) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7514); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7520); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7526); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt179=2;
            	            int LA179_0 = input.LA(1);
            	            if ( (LA179_0==LPAREN) ) {
            	                int LA179_1 = input.LA(2);
            	                if ( (LA179_1==SELECT) ) {
            	                    alt179=2;
            	                }
            	                else if ( (LA179_1==WINDOW||LA179_1==BETWEEN||LA179_1==ESCAPE||(LA179_1>=NOT_EXPR && LA179_1<=EVERY_EXPR)||LA179_1==WHERE||(LA179_1>=SUM && LA179_1<=COUNT)||LA179_1==CASE||LA179_1==OUTER||(LA179_1>=JOIN && LA179_1<=FULL)||(LA179_1>=EVENTS && LA179_1<=LAST)||(LA179_1>=UNIDIRECTIONAL && LA179_1<=CURRENT_TIMESTAMP)||(LA179_1>=SNAPSHOT && LA179_1<=INDEX)||(LA179_1>=BOOLEAN_TRUE && LA179_1<=VALUE_NULL)||(LA179_1>=DEFINE && LA179_1<=AFTER)||LA179_1==WHILE||(LA179_1>=MERGE && LA179_1<=MATCHED)||LA179_1==NEWKW||LA179_1==CONTEXT||LA179_1==NUM_DOUBLE||(LA179_1>=IDENT && LA179_1<=LCURLY)||(LA179_1>=LPAREN && LA179_1<=RPAREN)||(LA179_1>=PLUS && LA179_1<=QUESTION)||(LA179_1>=STRING_LITERAL && LA179_1<=QUOTED_STRING_LITERAL)||LA179_1==MINUS||LA179_1==NUM_INT||(LA179_1>=TICKED_STRING_LITERAL && LA179_1<=NUM_FLOAT)) ) {
            	                    alt179=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 179, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 179, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt179) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7532); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN475);
            	                    int alt178=2;
            	                    int LA178_0 = input.LA(1);
            	                    if ( (LA178_0==WINDOW||LA178_0==BETWEEN||LA178_0==ESCAPE||(LA178_0>=NOT_EXPR && LA178_0<=EVERY_EXPR)||LA178_0==WHERE||(LA178_0>=SUM && LA178_0<=COUNT)||LA178_0==CASE||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||(LA178_0>=EVENTS && LA178_0<=LAST)||(LA178_0>=UNIDIRECTIONAL && LA178_0<=CURRENT_TIMESTAMP)||(LA178_0>=SNAPSHOT && LA178_0<=INDEX)||(LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||(LA178_0>=DEFINE && LA178_0<=AFTER)||LA178_0==WHILE||(LA178_0>=MERGE && LA178_0<=MATCHED)||LA178_0==NEWKW||LA178_0==CONTEXT||LA178_0==NUM_DOUBLE||(LA178_0>=IDENT && LA178_0<=LCURLY)||LA178_0==LPAREN||(LA178_0>=PLUS && LA178_0<=QUESTION)||(LA178_0>=STRING_LITERAL && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==MINUS||LA178_0==NUM_INT||(LA178_0>=TICKED_STRING_LITERAL && LA178_0<=NUM_FLOAT)) ) {
            	                        alt178=1;
            	                    }
            	                    switch (alt178) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7534);
            	                            expressionList476=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList476.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7537); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN477);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7542);
            	                    subSelectGroupExpression478=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression478.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop181;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN481=null;
        Token RPAREN483=null;
        Token COMMA487=null;
        Token IN_SET489=null;
        Token BETWEEN491=null;
        Token LIKE493=null;
        Token ESCAPE495=null;
        Token REGEXP497=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr479 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr480 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList482 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression484 = null;
        EsperEPL2GrammarParser.expression_return expression485 = null;
        EsperEPL2GrammarParser.expression_return expression486 = null;
        EsperEPL2GrammarParser.expression_return expression488 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery490 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList492 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr494 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant496 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr498 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree RPAREN483_tree=null;
        CommonTree COMMA487_tree=null;
        CommonTree IN_SET489_tree=null;
        CommonTree BETWEEN491_tree=null;
        CommonTree LIKE493_tree=null;
        CommonTree ESCAPE495_tree=null;
        CommonTree REGEXP497_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7702);
            concatenationExpr479=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr479.getTree());
            int alt195=2;
            int LA195_0 = input.LA(1);
            if ( (LA195_0==EOF||(LA195_0>=OR_EXPR && LA195_0<=AND_EXPR)||(LA195_0>=WHERE && LA195_0<=AS)||(LA195_0>=ELSE && LA195_0<=FROM)||LA195_0==IS||(LA195_0>=GROUP && LA195_0<=HAVING)||LA195_0==ALL||LA195_0==OUTPUT||LA195_0==INSERT||(LA195_0>=ORDER && LA195_0<=DESC)||LA195_0==PATTERN||(LA195_0>=TIMEPERIOD_SEC && LA195_0<=TIMEPERIOD_SECONDS)||LA195_0==ROW_LIMIT_EXPR||LA195_0==MEASURES||(LA195_0>=AFTER && LA195_0<=FOR)||LA195_0==RCURLY||LA195_0==RPAREN||(LA195_0>=COMMA && LA195_0<=EQUALS)||LA195_0==RBRACK||LA195_0==BOR||LA195_0==COLON||(LA195_0>=BAND && LA195_0<=GE)||LA195_0==FOLLOWMAX_END) ) {
                alt195=1;
            }
            else if ( ((LA195_0>=IN_SET && LA195_0<=REGEXP)||LA195_0==NOT_EXPR) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);
                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    {
                    {
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);
                        if ( ((LA187_0>=LT && LA187_0<=GE)) ) {
                            alt187=1;
                        }
                        switch (alt187) {
                    	case 1 :
                    	    {
                    	    int alt182=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt182=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt182=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt182=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt182=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 182, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt182) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7734); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7738); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7742); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7746); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt186=2;
                    	    int LA186_0 = input.LA(1);
                    	    if ( (LA186_0==WINDOW||LA186_0==BETWEEN||LA186_0==ESCAPE||LA186_0==EVERY_EXPR||LA186_0==WHERE||(LA186_0>=SUM && LA186_0<=COUNT)||LA186_0==OUTER||(LA186_0>=JOIN && LA186_0<=FULL)||(LA186_0>=EVENTS && LA186_0<=LAST)||(LA186_0>=UNIDIRECTIONAL && LA186_0<=CURRENT_TIMESTAMP)||(LA186_0>=SNAPSHOT && LA186_0<=INDEX)||(LA186_0>=BOOLEAN_TRUE && LA186_0<=VALUE_NULL)||(LA186_0>=DEFINE && LA186_0<=AFTER)||LA186_0==WHILE||(LA186_0>=MERGE && LA186_0<=MATCHED)||LA186_0==NEWKW||LA186_0==CONTEXT||LA186_0==NUM_DOUBLE||(LA186_0>=IDENT && LA186_0<=LCURLY)||LA186_0==LPAREN||(LA186_0>=PLUS && LA186_0<=QUESTION)||(LA186_0>=STRING_LITERAL && LA186_0<=QUOTED_STRING_LITERAL)||LA186_0==MINUS||LA186_0==NUM_INT||(LA186_0>=TICKED_STRING_LITERAL && LA186_0<=NUM_FLOAT)) ) {
                    	        alt186=1;
                    	    }
                    	    else if ( ((LA186_0>=ALL && LA186_0<=SOME)) ) {
                    	        alt186=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 186, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt186) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7770);
                    	            concatenationExpr480=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr480.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt183=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt183=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt183=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt183=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 183, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt183) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7787); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7793); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7799); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt185=2;
                    	            int LA185_0 = input.LA(1);
                    	            if ( (LA185_0==LPAREN) ) {
                    	                int LA185_1 = input.LA(2);
                    	                if ( (LA185_1==SELECT) ) {
                    	                    alt185=2;
                    	                }
                    	                else if ( (LA185_1==WINDOW||LA185_1==BETWEEN||LA185_1==ESCAPE||(LA185_1>=NOT_EXPR && LA185_1<=EVERY_EXPR)||LA185_1==WHERE||(LA185_1>=SUM && LA185_1<=COUNT)||LA185_1==CASE||LA185_1==OUTER||(LA185_1>=JOIN && LA185_1<=FULL)||(LA185_1>=EVENTS && LA185_1<=LAST)||(LA185_1>=UNIDIRECTIONAL && LA185_1<=CURRENT_TIMESTAMP)||(LA185_1>=SNAPSHOT && LA185_1<=INDEX)||(LA185_1>=BOOLEAN_TRUE && LA185_1<=VALUE_NULL)||(LA185_1>=DEFINE && LA185_1<=AFTER)||LA185_1==WHILE||(LA185_1>=MERGE && LA185_1<=MATCHED)||LA185_1==NEWKW||LA185_1==CONTEXT||LA185_1==NUM_DOUBLE||(LA185_1>=IDENT && LA185_1<=LCURLY)||(LA185_1>=LPAREN && LA185_1<=RPAREN)||(LA185_1>=PLUS && LA185_1<=QUESTION)||(LA185_1>=STRING_LITERAL && LA185_1<=QUOTED_STRING_LITERAL)||LA185_1==MINUS||LA185_1==NUM_INT||(LA185_1>=TICKED_STRING_LITERAL && LA185_1<=NUM_FLOAT)) ) {
                    	                    alt185=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 185, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 185, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt185) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7805); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN481);
                    	                    int alt184=2;
                    	                    int LA184_0 = input.LA(1);
                    	                    if ( (LA184_0==WINDOW||LA184_0==BETWEEN||LA184_0==ESCAPE||(LA184_0>=NOT_EXPR && LA184_0<=EVERY_EXPR)||LA184_0==WHERE||(LA184_0>=SUM && LA184_0<=COUNT)||LA184_0==CASE||LA184_0==OUTER||(LA184_0>=JOIN && LA184_0<=FULL)||(LA184_0>=EVENTS && LA184_0<=LAST)||(LA184_0>=UNIDIRECTIONAL && LA184_0<=CURRENT_TIMESTAMP)||(LA184_0>=SNAPSHOT && LA184_0<=INDEX)||(LA184_0>=BOOLEAN_TRUE && LA184_0<=VALUE_NULL)||(LA184_0>=DEFINE && LA184_0<=AFTER)||LA184_0==WHILE||(LA184_0>=MERGE && LA184_0<=MATCHED)||LA184_0==NEWKW||LA184_0==CONTEXT||LA184_0==NUM_DOUBLE||(LA184_0>=IDENT && LA184_0<=LCURLY)||LA184_0==LPAREN||(LA184_0>=PLUS && LA184_0<=QUESTION)||(LA184_0>=STRING_LITERAL && LA184_0<=QUOTED_STRING_LITERAL)||LA184_0==MINUS||LA184_0==NUM_INT||(LA184_0>=TICKED_STRING_LITERAL && LA184_0<=NUM_FLOAT)) ) {
                    	                        alt184=1;
                    	                    }
                    	                    switch (alt184) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7807);
                    	                            expressionList482=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList482.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7810); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN483);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7815);
                    	                    subSelectGroupExpression484=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression484.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop187;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt188=2;
                    int LA188_0 = input.LA(1);
                    if ( (LA188_0==NOT_EXPR) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7911); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt194=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA194_1 = input.LA(2);
                        if ( (LA194_1==LPAREN) ) {
                            int LA194_5 = input.LA(3);
                            if ( (LA194_5==SELECT) ) {
                                alt194=2;
                            }
                            else if ( (LA194_5==WINDOW||LA194_5==BETWEEN||LA194_5==ESCAPE||(LA194_5>=NOT_EXPR && LA194_5<=EVERY_EXPR)||LA194_5==WHERE||(LA194_5>=SUM && LA194_5<=COUNT)||LA194_5==CASE||LA194_5==OUTER||(LA194_5>=JOIN && LA194_5<=FULL)||(LA194_5>=EVENTS && LA194_5<=LAST)||(LA194_5>=UNIDIRECTIONAL && LA194_5<=CURRENT_TIMESTAMP)||(LA194_5>=SNAPSHOT && LA194_5<=INDEX)||(LA194_5>=BOOLEAN_TRUE && LA194_5<=VALUE_NULL)||(LA194_5>=DEFINE && LA194_5<=AFTER)||LA194_5==WHILE||(LA194_5>=MERGE && LA194_5<=MATCHED)||LA194_5==NEWKW||LA194_5==CONTEXT||LA194_5==NUM_DOUBLE||(LA194_5>=IDENT && LA194_5<=LCURLY)||LA194_5==LPAREN||(LA194_5>=PLUS && LA194_5<=QUESTION)||(LA194_5>=STRING_LITERAL && LA194_5<=QUOTED_STRING_LITERAL)||LA194_5==MINUS||LA194_5==NUM_INT||(LA194_5>=TICKED_STRING_LITERAL && LA194_5<=NUM_FLOAT)) ) {
                                alt194=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 194, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA194_1==LBRACK) ) {
                            alt194=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 194, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt194=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt194=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt194=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);
                        throw nvae;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7938); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt189=2;
                            int LA189_0 = input.LA(1);
                            if ( (LA189_0==LPAREN) ) {
                                alt189=1;
                            }
                            else if ( (LA189_0==LBRACK) ) {
                                alt189=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 189, 0, input);
                                throw nvae;
                            }
                            switch (alt189) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7950); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7956); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7959);
                            expression485=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression485.getTree());
                            int alt191=2;
                            int LA191_0 = input.LA(1);
                            if ( (LA191_0==COLON) ) {
                                alt191=1;
                            }
                            else if ( (LA191_0==RPAREN||LA191_0==COMMA||LA191_0==RBRACK) ) {
                                alt191=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 191, 0, input);
                                throw nvae;
                            }
                            switch (alt191) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7981); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7984);
                                    expression486=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression486.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop190:
                                    do {
                                        int alt190=2;
                                        int LA190_0 = input.LA(1);
                                        if ( (LA190_0==COMMA) ) {
                                            alt190=1;
                                        }
                                        switch (alt190) {
                                    	case 1 :
                                    	    {
                                    	    COMMA487=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression8010); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA487);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression8012);
                                    	    expression488=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression488.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop190;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt192=2;
                            int LA192_0 = input.LA(1);
                            if ( (LA192_0==RPAREN) ) {
                                alt192=1;
                            }
                            else if ( (LA192_0==RBRACK) ) {
                                alt192=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 192, 0, input);
                                throw nvae;
                            }
                            switch (alt192) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8038); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression8044); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET489=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET489);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression8169);
                            inSubSelectQuery490=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery490.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN491=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression8215); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN491);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression8217);
                            betweenList492=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList492.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE493=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression8267); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE493);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8269);
                            concatenationExpr494=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr494.getTree());
                            int alt193=2;
                            int LA193_0 = input.LA(1);
                            if ( (LA193_0==ESCAPE) ) {
                                alt193=1;
                            }
                            switch (alt193) {
                                case 1 :
                                    {
                                    ESCAPE495=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression8272); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE495);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression8274);
                                    stringconstant496=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant496.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP497=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression8326); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP497);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8328);
                            concatenationExpr498=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr498.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr499 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery8390);
            subQueryExpr499=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr499.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR502=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression500 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression501 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression503 = null;
        CommonTree c_tree=null;
        CommonTree LOR502_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8415);
            additiveExpression500=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression500.getTree());
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==LOR) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8423);
                    additiveExpression501=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression501.getTree());
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);
                        if ( (LA196_0==LOR) ) {
                            alt196=1;
                        }
                        switch (alt196) {
                    	case 1 :
                    	    {
                    	    LOR502=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8427); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR502);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8429);
                    	    additiveExpression503=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression503.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop196;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS505=null;
        Token MINUS506=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression504 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression507 = null;
        CommonTree PLUS505_tree=null;
        CommonTree MINUS506_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8470);
            multiplyExpression504=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression504.getTree());
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);
                if ( (LA199_0==PLUS||LA199_0==MINUS) ) {
                    alt199=1;
                }
                switch (alt199) {
            	case 1 :
            	    {
            	    int alt198=2;
            	    int LA198_0 = input.LA(1);
            	    if ( (LA198_0==PLUS) ) {
            	        alt198=1;
            	    }
            	    else if ( (LA198_0==MINUS) ) {
            	        alt198=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 198, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt198) {
            	        case 1 :
            	            {
            	            PLUS505=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression8475); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS505_tree = (CommonTree)adaptor.create(PLUS505);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS505_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS506=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression8478); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS506_tree = (CommonTree)adaptor.create(MINUS506);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS506_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8482);
            	    multiplyExpression507=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression507.getTree());
            	    }
            	    break;
            	default :
            	    break loop199;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR509=null;
        Token DIV510=null;
        Token MOD511=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression508 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression512 = null;
        CommonTree STAR509_tree=null;
        CommonTree DIV510_tree=null;
        CommonTree MOD511_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8496);
            unaryExpression508=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression508.getTree());
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);
                if ( (LA201_0==STAR||(LA201_0>=DIV && LA201_0<=MOD)) ) {
                    alt201=1;
                }
                switch (alt201) {
            	case 1 :
            	    {
            	    int alt200=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt200=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt200=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt200=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 200, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt200) {
            	        case 1 :
            	            {
            	            STAR509=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression8501); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR509_tree = (CommonTree)adaptor.create(STAR509);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR509_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV510=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression8504); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV510_tree = (CommonTree)adaptor.create(DIV510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV510_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD511=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression8507); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD511_tree = (CommonTree)adaptor.create(MOD511);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD511_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8511);
            	    unaryExpression512=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression512.getTree());
            	    }
            	    break;
            	default :
            	    break loop201;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS513=null;
        Token LPAREN517=null;
        Token RPAREN519=null;
        Token NEWKW529=null;
        Token LCURLY530=null;
        Token COMMA532=null;
        Token RCURLY534=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty514 = null;
        EsperEPL2GrammarParser.constant_return constant515 = null;
        EsperEPL2GrammarParser.substitution_return substitution516 = null;
        EsperEPL2GrammarParser.expression_return expression518 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass520 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass521 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction522 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc523 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression524 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression525 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass526 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass527 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression528 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign531 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign533 = null;
        CommonTree d_tree=null;
        CommonTree MINUS513_tree=null;
        CommonTree LPAREN517_tree=null;
        CommonTree RPAREN519_tree=null;
        CommonTree NEWKW529_tree=null;
        CommonTree LCURLY530_tree=null;
        CommonTree COMMA532_tree=null;
        CommonTree RCURLY534_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt207=10;
            alt207 = dfa207.predict(input);
            switch (alt207) {
                case 1 :
                    {
                    MINUS513=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS513);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8528);
                    eventProperty514=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty514.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8541);
                    constant515=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant515.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8546);
                    substitution516=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution516.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN517=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN517);
                    pushFollow(FOLLOW_expression_in_unaryExpression8553);
                    expression518=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression518.getTree());
                    RPAREN519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN519);
                    int alt203=2;
                    int LA203_0 = input.LA(1);
                    if ( (LA203_0==DOT) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8560); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8562);
                            libFunctionNoClass520=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass520.getTree());
                            loop202:
                            do {
                                int alt202=2;
                                int LA202_0 = input.LA(1);
                                if ( (LA202_0==DOT) ) {
                                    alt202=1;
                                }
                                switch (alt202) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8567); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8569);
                            	    libFunctionNoClass521=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass521.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop202;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8606);
                    eventPropertyOrLibFunction522=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction522.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression8618);
                    builtinFunc523=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc523.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression8624);
                    arrayExpression524=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression524.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression8629);
                    subSelectExpression525=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression525.getTree());
                    int alt205=2;
                    int LA205_0 = input.LA(1);
                    if ( (LA205_0==DOT) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8634); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8636);
                            libFunctionNoClass526=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass526.getTree());
                            loop204:
                            do {
                                int alt204=2;
                                int LA204_0 = input.LA(1);
                                if ( (LA204_0==DOT) ) {
                                    alt204=1;
                                }
                                switch (alt204) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8641); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8643);
                            	    libFunctionNoClass527=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass527.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop204;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression8680);
                    existsSubSelectExpression528=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression528.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW529=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression8685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW529);
                    LCURLY530=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression8687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY530);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression8689);
                    newAssign531=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign531.getTree());
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);
                        if ( (LA206_0==COMMA) ) {
                            alt206=1;
                        }
                        switch (alt206) {
                    	case 1 :
                    	    {
                    	    COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression8692); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA532);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression8694);
                    	    newAssign533=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign533.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop206;
                        }
                    } while (true);
                    RCURLY534=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression8698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY534);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS536=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty535 = null;
        EsperEPL2GrammarParser.expression_return expression537 = null;
        CommonTree EQUALS536_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign8720);
            eventProperty535=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty535.getTree());
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( (LA208_0==EQUALS) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    EQUALS536=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign8723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS536);
                    pushFollow(FOLLOW_expression_in_newAssign8725);
                    expression537=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression537.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr538 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8753);
            subQueryExpr538=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr538.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr539 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8775);
            subQueryExpr539=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr539.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS540=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr541 = null;
        CommonTree EXISTS540_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS540=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS540);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8799);
            subQueryExpr541=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr541.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN542=null;
        Token SELECT543=null;
        Token DISTINCT544=null;
        Token FROM546=null;
        Token WHERE548=null;
        Token RPAREN550=null;
        EsperEPL2GrammarParser.selectionList_return selectionList545 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr547 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause549 = null;
        CommonTree LPAREN542_tree=null;
        CommonTree SELECT543_tree=null;
        CommonTree DISTINCT544_tree=null;
        CommonTree FROM546_tree=null;
        CommonTree WHERE548_tree=null;
        CommonTree RPAREN550_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN542=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8832); if (state.failed) return retval;
            SELECT543=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8838); if (state.failed) return retval;
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==DISTINCT) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    DISTINCT544=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT544_tree = (CommonTree)adaptor.create(DISTINCT544);
                    adaptor.addChild(root_0, DISTINCT544_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8844);
            selectionList545=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList545.getTree());
            FROM546=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8851); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8854);
            subSelectFilterExpr547=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr547.getTree());
            int alt210=2;
            int LA210_0 = input.LA(1);
            if ( (LA210_0==WHERE) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    WHERE548=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8862); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8865);
                    whereClause549=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause549.getTree());
                    }
                    break;
            }
            RPAREN550=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8874); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT552=null;
        Token DOT554=null;
        Token AS556=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression551 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression553 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression555 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT552_tree=null;
        CommonTree DOT554_tree=null;
        CommonTree AS556_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8898);
            eventFilterExpression551=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression551.getTree());
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==DOT) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    DOT552=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT552);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8905);
                    viewExpression553=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression553.getTree());
                    loop211:
                    do {
                        int alt211=2;
                        int LA211_0 = input.LA(1);
                        if ( (LA211_0==DOT) ) {
                            alt211=1;
                        }
                        switch (alt211) {
                    	case 1 :
                    	    {
                    	    DOT554=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8908); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT554);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8910);
                    	    viewExpression555=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression555.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop211;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt213=3;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==AS) ) {
                alt213=1;
            }
            else if ( (LA213_0==IDENT) ) {
                alt213=2;
            }
            switch (alt213) {
                case 1 :
                    {
                    AS556=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS556);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt214=3;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==RETAINUNION) ) {
                alt214=1;
            }
            else if ( (LA214_0==RETAININTERSECTION) ) {
                alt214=2;
            }
            switch (alt214) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY557=null;
        Token COMMA559=null;
        Token RCURLY561=null;
        EsperEPL2GrammarParser.expression_return expression558 = null;
        EsperEPL2GrammarParser.expression_return expression560 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass562 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass563 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY557_tree=null;
        CommonTree COMMA559_tree=null;
        CommonTree RCURLY561_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY557=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY557);
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==WINDOW||LA216_0==BETWEEN||LA216_0==ESCAPE||(LA216_0>=NOT_EXPR && LA216_0<=EVERY_EXPR)||LA216_0==WHERE||(LA216_0>=SUM && LA216_0<=COUNT)||LA216_0==CASE||LA216_0==OUTER||(LA216_0>=JOIN && LA216_0<=FULL)||(LA216_0>=EVENTS && LA216_0<=LAST)||(LA216_0>=UNIDIRECTIONAL && LA216_0<=CURRENT_TIMESTAMP)||(LA216_0>=SNAPSHOT && LA216_0<=INDEX)||(LA216_0>=BOOLEAN_TRUE && LA216_0<=VALUE_NULL)||(LA216_0>=DEFINE && LA216_0<=AFTER)||LA216_0==WHILE||(LA216_0>=MERGE && LA216_0<=MATCHED)||LA216_0==NEWKW||LA216_0==CONTEXT||LA216_0==NUM_DOUBLE||(LA216_0>=IDENT && LA216_0<=LCURLY)||LA216_0==LPAREN||(LA216_0>=PLUS && LA216_0<=QUESTION)||(LA216_0>=STRING_LITERAL && LA216_0<=QUOTED_STRING_LITERAL)||LA216_0==MINUS||LA216_0==NUM_INT||(LA216_0>=TICKED_STRING_LITERAL && LA216_0<=NUM_FLOAT)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8981);
                    expression558=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression558.getTree());
                    loop215:
                    do {
                        int alt215=2;
                        int LA215_0 = input.LA(1);
                        if ( (LA215_0==COMMA) ) {
                            alt215=1;
                        }
                        switch (alt215) {
                    	case 1 :
                    	    {
                    	    COMMA559=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8984); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA559);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8986);
                    	    expression560=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression560.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop215;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY561=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY561);
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==DOT) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression8998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9000);
                    libFunctionNoClass562=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass562.getTree());
                    loop217:
                    do {
                        int alt217=2;
                        int LA217_0 = input.LA(1);
                        if ( (LA217_0==DOT) ) {
                            alt217=1;
                        }
                        switch (alt217) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9005); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9007);
                    	    libFunctionNoClass563=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass563.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop217;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM564=null;
        Token LPAREN565=null;
        Token ALL566=null;
        Token DISTINCT567=null;
        Token RPAREN570=null;
        Token AVG571=null;
        Token LPAREN572=null;
        Token ALL573=null;
        Token DISTINCT574=null;
        Token RPAREN577=null;
        Token COUNT578=null;
        Token LPAREN579=null;
        Token ALL580=null;
        Token DISTINCT581=null;
        Token STAR583=null;
        Token RPAREN585=null;
        Token MEDIAN586=null;
        Token LPAREN587=null;
        Token ALL588=null;
        Token DISTINCT589=null;
        Token RPAREN592=null;
        Token STDDEV593=null;
        Token LPAREN594=null;
        Token ALL595=null;
        Token DISTINCT596=null;
        Token RPAREN599=null;
        Token AVEDEV600=null;
        Token LPAREN601=null;
        Token ALL602=null;
        Token DISTINCT603=null;
        Token RPAREN606=null;
        Token COALESCE610=null;
        Token LPAREN611=null;
        Token COMMA613=null;
        Token COMMA615=null;
        Token RPAREN617=null;
        Token PREVIOUS618=null;
        Token LPAREN619=null;
        Token COMMA621=null;
        Token RPAREN623=null;
        Token PREVIOUSTAIL626=null;
        Token LPAREN627=null;
        Token COMMA629=null;
        Token RPAREN631=null;
        Token PREVIOUSCOUNT634=null;
        Token LPAREN635=null;
        Token RPAREN637=null;
        Token PREVIOUSWINDOW638=null;
        Token LPAREN639=null;
        Token RPAREN641=null;
        Token PRIOR644=null;
        Token LPAREN645=null;
        Token NUM_INT646=null;
        Token COMMA647=null;
        Token RPAREN649=null;
        Token INSTANCEOF650=null;
        Token LPAREN651=null;
        Token COMMA653=null;
        Token COMMA655=null;
        Token RPAREN657=null;
        Token TYPEOF658=null;
        Token LPAREN659=null;
        Token RPAREN661=null;
        Token CAST662=null;
        Token LPAREN663=null;
        Token COMMA665=null;
        Token AS666=null;
        Token RPAREN668=null;
        Token EXISTS671=null;
        Token LPAREN672=null;
        Token RPAREN674=null;
        Token CURRENT_TIMESTAMP675=null;
        Token LPAREN676=null;
        Token RPAREN677=null;
        EsperEPL2GrammarParser.expression_return expression568 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr569 = null;
        EsperEPL2GrammarParser.expression_return expression575 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr576 = null;
        EsperEPL2GrammarParser.expression_return expression582 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr584 = null;
        EsperEPL2GrammarParser.expression_return expression590 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr591 = null;
        EsperEPL2GrammarParser.expression_return expression597 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr598 = null;
        EsperEPL2GrammarParser.expression_return expression604 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr605 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation607 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation608 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation609 = null;
        EsperEPL2GrammarParser.expression_return expression612 = null;
        EsperEPL2GrammarParser.expression_return expression614 = null;
        EsperEPL2GrammarParser.expression_return expression616 = null;
        EsperEPL2GrammarParser.expression_return expression620 = null;
        EsperEPL2GrammarParser.expression_return expression622 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass624 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass625 = null;
        EsperEPL2GrammarParser.expression_return expression628 = null;
        EsperEPL2GrammarParser.expression_return expression630 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass632 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass633 = null;
        EsperEPL2GrammarParser.expression_return expression636 = null;
        EsperEPL2GrammarParser.expression_return expression640 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass642 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass643 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty648 = null;
        EsperEPL2GrammarParser.expression_return expression652 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier654 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier656 = null;
        EsperEPL2GrammarParser.expression_return expression660 = null;
        EsperEPL2GrammarParser.expression_return expression664 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier667 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass669 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass670 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty673 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass678 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass679 = null;
        CommonTree d_tree=null;
        CommonTree SUM564_tree=null;
        CommonTree LPAREN565_tree=null;
        CommonTree ALL566_tree=null;
        CommonTree DISTINCT567_tree=null;
        CommonTree RPAREN570_tree=null;
        CommonTree AVG571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree ALL573_tree=null;
        CommonTree DISTINCT574_tree=null;
        CommonTree RPAREN577_tree=null;
        CommonTree COUNT578_tree=null;
        CommonTree LPAREN579_tree=null;
        CommonTree ALL580_tree=null;
        CommonTree DISTINCT581_tree=null;
        CommonTree STAR583_tree=null;
        CommonTree RPAREN585_tree=null;
        CommonTree MEDIAN586_tree=null;
        CommonTree LPAREN587_tree=null;
        CommonTree ALL588_tree=null;
        CommonTree DISTINCT589_tree=null;
        CommonTree RPAREN592_tree=null;
        CommonTree STDDEV593_tree=null;
        CommonTree LPAREN594_tree=null;
        CommonTree ALL595_tree=null;
        CommonTree DISTINCT596_tree=null;
        CommonTree RPAREN599_tree=null;
        CommonTree AVEDEV600_tree=null;
        CommonTree LPAREN601_tree=null;
        CommonTree ALL602_tree=null;
        CommonTree DISTINCT603_tree=null;
        CommonTree RPAREN606_tree=null;
        CommonTree COALESCE610_tree=null;
        CommonTree LPAREN611_tree=null;
        CommonTree COMMA613_tree=null;
        CommonTree COMMA615_tree=null;
        CommonTree RPAREN617_tree=null;
        CommonTree PREVIOUS618_tree=null;
        CommonTree LPAREN619_tree=null;
        CommonTree COMMA621_tree=null;
        CommonTree RPAREN623_tree=null;
        CommonTree PREVIOUSTAIL626_tree=null;
        CommonTree LPAREN627_tree=null;
        CommonTree COMMA629_tree=null;
        CommonTree RPAREN631_tree=null;
        CommonTree PREVIOUSCOUNT634_tree=null;
        CommonTree LPAREN635_tree=null;
        CommonTree RPAREN637_tree=null;
        CommonTree PREVIOUSWINDOW638_tree=null;
        CommonTree LPAREN639_tree=null;
        CommonTree RPAREN641_tree=null;
        CommonTree PRIOR644_tree=null;
        CommonTree LPAREN645_tree=null;
        CommonTree NUM_INT646_tree=null;
        CommonTree COMMA647_tree=null;
        CommonTree RPAREN649_tree=null;
        CommonTree INSTANCEOF650_tree=null;
        CommonTree LPAREN651_tree=null;
        CommonTree COMMA653_tree=null;
        CommonTree COMMA655_tree=null;
        CommonTree RPAREN657_tree=null;
        CommonTree TYPEOF658_tree=null;
        CommonTree LPAREN659_tree=null;
        CommonTree RPAREN661_tree=null;
        CommonTree CAST662_tree=null;
        CommonTree LPAREN663_tree=null;
        CommonTree COMMA665_tree=null;
        CommonTree AS666_tree=null;
        CommonTree RPAREN668_tree=null;
        CommonTree EXISTS671_tree=null;
        CommonTree LPAREN672_tree=null;
        CommonTree RPAREN674_tree=null;
        CommonTree CURRENT_TIMESTAMP675_tree=null;
        CommonTree LPAREN676_tree=null;
        CommonTree RPAREN677_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt248=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt248=1;
                }
                break;
            case AVG:
                {
                alt248=2;
                }
                break;
            case COUNT:
                {
                alt248=3;
                }
                break;
            case MEDIAN:
                {
                alt248=4;
                }
                break;
            case STDDEV:
                {
                alt248=5;
                }
                break;
            case AVEDEV:
                {
                alt248=6;
                }
                break;
            case FIRST:
                {
                alt248=7;
                }
                break;
            case LAST:
                {
                alt248=8;
                }
                break;
            case WINDOW:
                {
                alt248=9;
                }
                break;
            case COALESCE:
                {
                alt248=10;
                }
                break;
            case PREVIOUS:
                {
                alt248=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt248=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt248=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt248=14;
                }
                break;
            case PRIOR:
                {
                alt248=15;
                }
                break;
            case INSTANCEOF:
                {
                alt248=16;
                }
                break;
            case TYPEOF:
                {
                alt248=17;
                }
                break;
            case CAST:
                {
                alt248=18;
                }
                break;
            case EXISTS:
                {
                alt248=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt248=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);
                throw nvae;
            }
            switch (alt248) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM564=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc9056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM564_tree = (CommonTree)adaptor.create(SUM564);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM564_tree, root_0);
                    }
                    LPAREN565=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9059); if (state.failed) return retval;
                    int alt219=3;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==ALL) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==DISTINCT) ) {
                        alt219=2;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            ALL566=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9063); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT567=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9068); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT567_tree = (CommonTree)adaptor.create(DISTINCT567);
                            adaptor.addChild(root_0, DISTINCT567_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9072);
                    expression568=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());
                    int alt220=2;
                    int LA220_0 = input.LA(1);
                    if ( (LA220_0==COMMA) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9074);
                            aggregationFilterExpr569=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr569.getTree());
                            }
                            break;
                    }
                    RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9077); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG571=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc9083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG571_tree = (CommonTree)adaptor.create(AVG571);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG571_tree, root_0);
                    }
                    LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9086); if (state.failed) return retval;
                    int alt221=3;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==ALL) ) {
                        alt221=1;
                    }
                    else if ( (LA221_0==DISTINCT) ) {
                        alt221=2;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            ALL573=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9090); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT574=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9095); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT574_tree = (CommonTree)adaptor.create(DISTINCT574);
                            adaptor.addChild(root_0, DISTINCT574_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9099);
                    expression575=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression575.getTree());
                    int alt222=2;
                    int LA222_0 = input.LA(1);
                    if ( (LA222_0==COMMA) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9101);
                            aggregationFilterExpr576=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr576.getTree());
                            }
                            break;
                    }
                    RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9104); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT578=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc9110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT578_tree = (CommonTree)adaptor.create(COUNT578);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT578_tree, root_0);
                    }
                    LPAREN579=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9113); if (state.failed) return retval;
                    int alt224=2;
                    int LA224_0 = input.LA(1);
                    if ( (LA224_0==WINDOW||LA224_0==BETWEEN||LA224_0==ESCAPE||(LA224_0>=NOT_EXPR && LA224_0<=EVERY_EXPR)||LA224_0==WHERE||(LA224_0>=SUM && LA224_0<=COUNT)||LA224_0==CASE||LA224_0==OUTER||(LA224_0>=JOIN && LA224_0<=FULL)||(LA224_0>=DISTINCT && LA224_0<=ALL)||(LA224_0>=EVENTS && LA224_0<=LAST)||(LA224_0>=UNIDIRECTIONAL && LA224_0<=CURRENT_TIMESTAMP)||(LA224_0>=SNAPSHOT && LA224_0<=INDEX)||(LA224_0>=BOOLEAN_TRUE && LA224_0<=VALUE_NULL)||(LA224_0>=DEFINE && LA224_0<=AFTER)||LA224_0==WHILE||(LA224_0>=MERGE && LA224_0<=MATCHED)||LA224_0==NEWKW||LA224_0==CONTEXT||LA224_0==NUM_DOUBLE||(LA224_0>=IDENT && LA224_0<=LCURLY)||LA224_0==LPAREN||(LA224_0>=PLUS && LA224_0<=QUESTION)||(LA224_0>=STRING_LITERAL && LA224_0<=QUOTED_STRING_LITERAL)||LA224_0==MINUS||LA224_0==NUM_INT||(LA224_0>=TICKED_STRING_LITERAL && LA224_0<=NUM_FLOAT)) ) {
                        alt224=1;
                    }
                    else if ( (LA224_0==STAR) ) {
                        alt224=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 224, 0, input);
                        throw nvae;
                    }
                    switch (alt224) {
                        case 1 :
                            {
                            {
                            int alt223=3;
                            int LA223_0 = input.LA(1);
                            if ( (LA223_0==ALL) ) {
                                alt223=1;
                            }
                            else if ( (LA223_0==DISTINCT) ) {
                                alt223=2;
                            }
                            switch (alt223) {
                                case 1 :
                                    {
                                    ALL580=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9125); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT581=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9130); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT581_tree = (CommonTree)adaptor.create(DISTINCT581);
                                    adaptor.addChild(root_0, DISTINCT581_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc9134);
                            expression582=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression582.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR583=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc9145); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt225=2;
                    int LA225_0 = input.LA(1);
                    if ( (LA225_0==COMMA) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9156);
                            aggregationFilterExpr584=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr584.getTree());
                            }
                            break;
                    }
                    RPAREN585=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9159); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN586=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc9165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN586_tree = (CommonTree)adaptor.create(MEDIAN586);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN586_tree, root_0);
                    }
                    LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9168); if (state.failed) return retval;
                    int alt226=3;
                    int LA226_0 = input.LA(1);
                    if ( (LA226_0==ALL) ) {
                        alt226=1;
                    }
                    else if ( (LA226_0==DISTINCT) ) {
                        alt226=2;
                    }
                    switch (alt226) {
                        case 1 :
                            {
                            ALL588=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9172); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT589=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9177); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT589_tree = (CommonTree)adaptor.create(DISTINCT589);
                            adaptor.addChild(root_0, DISTINCT589_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9181);
                    expression590=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression590.getTree());
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==COMMA) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9183);
                            aggregationFilterExpr591=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr591.getTree());
                            }
                            break;
                    }
                    RPAREN592=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9186); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV593=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc9192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV593_tree = (CommonTree)adaptor.create(STDDEV593);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV593_tree, root_0);
                    }
                    LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9195); if (state.failed) return retval;
                    int alt228=3;
                    int LA228_0 = input.LA(1);
                    if ( (LA228_0==ALL) ) {
                        alt228=1;
                    }
                    else if ( (LA228_0==DISTINCT) ) {
                        alt228=2;
                    }
                    switch (alt228) {
                        case 1 :
                            {
                            ALL595=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9199); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT596=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9204); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT596_tree = (CommonTree)adaptor.create(DISTINCT596);
                            adaptor.addChild(root_0, DISTINCT596_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9208);
                    expression597=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression597.getTree());
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==COMMA) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9210);
                            aggregationFilterExpr598=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr598.getTree());
                            }
                            break;
                    }
                    RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9213); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV600=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc9219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV600_tree = (CommonTree)adaptor.create(AVEDEV600);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV600_tree, root_0);
                    }
                    LPAREN601=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9222); if (state.failed) return retval;
                    int alt230=3;
                    int LA230_0 = input.LA(1);
                    if ( (LA230_0==ALL) ) {
                        alt230=1;
                    }
                    else if ( (LA230_0==DISTINCT) ) {
                        alt230=2;
                    }
                    switch (alt230) {
                        case 1 :
                            {
                            ALL602=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9226); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT603=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9231); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT603_tree = (CommonTree)adaptor.create(DISTINCT603);
                            adaptor.addChild(root_0, DISTINCT603_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9235);
                    expression604=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression604.getTree());
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==COMMA) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9237);
                            aggregationFilterExpr605=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr605.getTree());
                            }
                            break;
                    }
                    RPAREN606=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9240); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc9246);
                    firstAggregation607=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation607.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc9251);
                    lastAggregation608=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation608.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc9256);
                    windowAggregation609=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation609.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE610=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc9261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE610_tree = (CommonTree)adaptor.create(COALESCE610);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE610_tree, root_0);
                    }
                    LPAREN611=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9264); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9267);
                    expression612=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression612.getTree());
                    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9269); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9272);
                    expression614=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression614.getTree());
                    loop232:
                    do {
                        int alt232=2;
                        int LA232_0 = input.LA(1);
                        if ( (LA232_0==COMMA) ) {
                            alt232=1;
                        }
                        switch (alt232) {
                    	case 1 :
                    	    {
                    	    COMMA615=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9275); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc9278);
                    	    expression616=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression616.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop232;
                        }
                    } while (true);
                    RPAREN617=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9282); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS618=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc9288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS618);
                    LPAREN619=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN619);
                    pushFollow(FOLLOW_expression_in_builtinFunc9292);
                    expression620=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression620.getTree());
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==COMMA) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            COMMA621=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9295); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA621);
                            pushFollow(FOLLOW_expression_in_builtinFunc9297);
                            expression622=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression622.getTree());
                            }
                            break;
                    }
                    RPAREN623=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN623);
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==DOT) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9306); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9308);
                            libFunctionNoClass624=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass624.getTree());
                            loop234:
                            do {
                                int alt234=2;
                                int LA234_0 = input.LA(1);
                                if ( (LA234_0==DOT) ) {
                                    alt234=1;
                                }
                                switch (alt234) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9313); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9315);
                            	    libFunctionNoClass625=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass625.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop234;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL626=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc9362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL626);
                    LPAREN627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN627);
                    pushFollow(FOLLOW_expression_in_builtinFunc9366);
                    expression628=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression628.getTree());
                    int alt236=2;
                    int LA236_0 = input.LA(1);
                    if ( (LA236_0==COMMA) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            COMMA629=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9369); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA629);
                            pushFollow(FOLLOW_expression_in_builtinFunc9371);
                            expression630=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression630.getTree());
                            }
                            break;
                    }
                    RPAREN631=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN631);
                    int alt238=2;
                    int LA238_0 = input.LA(1);
                    if ( (LA238_0==DOT) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9382);
                            libFunctionNoClass632=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass632.getTree());
                            loop237:
                            do {
                                int alt237=2;
                                int LA237_0 = input.LA(1);
                                if ( (LA237_0==DOT) ) {
                                    alt237=1;
                                }
                                switch (alt237) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9387); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9389);
                            	    libFunctionNoClass633=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass633.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop237;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT634=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc9436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT634_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT634);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT634_tree, root_0);
                    }
                    LPAREN635=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9439); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9442);
                    expression636=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression636.getTree());
                    RPAREN637=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9444); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW638=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc9450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW638);
                    LPAREN639=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN639);
                    pushFollow(FOLLOW_expression_in_builtinFunc9454);
                    expression640=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression640.getTree());
                    RPAREN641=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN641);
                    int alt240=2;
                    int LA240_0 = input.LA(1);
                    if ( (LA240_0==DOT) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9461); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9463);
                            libFunctionNoClass642=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass642.getTree());
                            loop239:
                            do {
                                int alt239=2;
                                int LA239_0 = input.LA(1);
                                if ( (LA239_0==DOT) ) {
                                    alt239=1;
                                }
                                switch (alt239) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9468); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9470);
                            	    libFunctionNoClass643=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass643.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop239;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR644=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR644_tree = (CommonTree)adaptor.create(PRIOR644);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR644_tree, root_0);
                    }
                    LPAREN645=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9518); if (state.failed) return retval;
                    NUM_INT646=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT646_tree = (CommonTree)adaptor.create(NUM_INT646);
                    adaptor.addChild(root_0, NUM_INT646_tree);
                    }
                    COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9523); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9526);
                    eventProperty648=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty648.getTree());
                    RPAREN649=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9528); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF650=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF650_tree = (CommonTree)adaptor.create(INSTANCEOF650);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF650_tree, root_0);
                    }
                    LPAREN651=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9541); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9544);
                    expression652=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression652.getTree());
                    COMMA653=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9546); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9549);
                    classIdentifier654=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier654.getTree());
                    loop241:
                    do {
                        int alt241=2;
                        int LA241_0 = input.LA(1);
                        if ( (LA241_0==COMMA) ) {
                            alt241=1;
                        }
                        switch (alt241) {
                    	case 1 :
                    	    {
                    	    COMMA655=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9552); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9555);
                    	    classIdentifier656=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier656.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop241;
                        }
                    } while (true);
                    RPAREN657=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9559); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF658=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF658_tree = (CommonTree)adaptor.create(TYPEOF658);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF658_tree, root_0);
                    }
                    LPAREN659=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9568); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9571);
                    expression660=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression660.getTree());
                    RPAREN661=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9573); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST662=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST662);
                    LPAREN663=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN663);
                    pushFollow(FOLLOW_expression_in_builtinFunc9583);
                    expression664=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression664.getTree());
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==COMMA) ) {
                        alt242=1;
                    }
                    else if ( (LA242_0==AS) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 0, input);
                        throw nvae;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            COMMA665=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9586); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA665);
                            }
                            break;
                        case 2 :
                            {
                            AS666=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc9590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS666);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9593);
                    classIdentifier667=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier667.getTree());
                    RPAREN668=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN668);
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==DOT) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9600); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9602);
                            libFunctionNoClass669=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass669.getTree());
                            loop243:
                            do {
                                int alt243=2;
                                int LA243_0 = input.LA(1);
                                if ( (LA243_0==DOT) ) {
                                    alt243=1;
                                }
                                switch (alt243) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9607); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9609);
                            	    libFunctionNoClass670=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass670.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop243;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS671=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc9654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS671_tree = (CommonTree)adaptor.create(EXISTS671);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS671_tree, root_0);
                    }
                    LPAREN672=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9657); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9660);
                    eventProperty673=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty673.getTree());
                    RPAREN674=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9662); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP675=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP675);
                    int alt245=2;
                    int LA245_0 = input.LA(1);
                    if ( (LA245_0==LPAREN) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            {
                            LPAREN676=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9671); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN676);
                            RPAREN677=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9673); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN677);
                            }
                            break;
                    }
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==DOT) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9680); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9682);
                            libFunctionNoClass678=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass678.getTree());
                            loop246:
                            do {
                                int alt246=2;
                                int LA246_0 = input.LA(1);
                                if ( (LA246_0==DOT) ) {
                                    alt246=1;
                                }
                                switch (alt246) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9687); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9689);
                            	    libFunctionNoClass679=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass679.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop246;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST680=null;
        Token LPAREN681=null;
        Token COMMA683=null;
        Token RPAREN685=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr682 = null;
        EsperEPL2GrammarParser.expression_return expression684 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass686 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass687 = null;
        CommonTree d_tree=null;
        CommonTree FIRST680_tree=null;
        CommonTree LPAREN681_tree=null;
        CommonTree COMMA683_tree=null;
        CommonTree RPAREN685_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST680=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation9733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST680);
            LPAREN681=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation9735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN681);
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==WINDOW||LA250_0==BETWEEN||LA250_0==ESCAPE||(LA250_0>=NOT_EXPR && LA250_0<=EVERY_EXPR)||LA250_0==WHERE||(LA250_0>=SUM && LA250_0<=COUNT)||LA250_0==CASE||LA250_0==OUTER||(LA250_0>=JOIN && LA250_0<=FULL)||(LA250_0>=EVENTS && LA250_0<=LAST)||(LA250_0>=UNIDIRECTIONAL && LA250_0<=CURRENT_TIMESTAMP)||(LA250_0>=SNAPSHOT && LA250_0<=INDEX)||(LA250_0>=BOOLEAN_TRUE && LA250_0<=VALUE_NULL)||(LA250_0>=DEFINE && LA250_0<=AFTER)||LA250_0==WHILE||(LA250_0>=MERGE && LA250_0<=MATCHED)||LA250_0==NEWKW||LA250_0==CONTEXT||LA250_0==NUM_DOUBLE||(LA250_0>=IDENT && LA250_0<=LCURLY)||LA250_0==LPAREN||LA250_0==STAR||(LA250_0>=PLUS && LA250_0<=QUESTION)||(LA250_0>=STRING_LITERAL && LA250_0<=QUOTED_STRING_LITERAL)||LA250_0==MINUS||LA250_0==NUM_INT||(LA250_0>=TICKED_STRING_LITERAL && LA250_0<=NUM_FLOAT)) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation9738);
                    accessAggExpr682=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr682.getTree());
                    int alt249=2;
                    int LA249_0 = input.LA(1);
                    if ( (LA249_0==COMMA) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            COMMA683=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation9741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA683);
                            pushFollow(FOLLOW_expression_in_firstAggregation9743);
                            expression684=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression684.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN685=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation9749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN685);
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==DOT) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9756);
                    libFunctionNoClass686=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass686.getTree());
                    loop251:
                    do {
                        int alt251=2;
                        int LA251_0 = input.LA(1);
                        if ( (LA251_0==DOT) ) {
                            alt251=1;
                        }
                        switch (alt251) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9761); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9763);
                    	    libFunctionNoClass687=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass687.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST688=null;
        Token LPAREN689=null;
        Token COMMA691=null;
        Token RPAREN693=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr690 = null;
        EsperEPL2GrammarParser.expression_return expression692 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass694 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass695 = null;
        CommonTree d_tree=null;
        CommonTree LAST688_tree=null;
        CommonTree LPAREN689_tree=null;
        CommonTree COMMA691_tree=null;
        CommonTree RPAREN693_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST688=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation9818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST688);
            LPAREN689=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation9820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN689);
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( (LA254_0==WINDOW||LA254_0==BETWEEN||LA254_0==ESCAPE||(LA254_0>=NOT_EXPR && LA254_0<=EVERY_EXPR)||LA254_0==WHERE||(LA254_0>=SUM && LA254_0<=COUNT)||LA254_0==CASE||LA254_0==OUTER||(LA254_0>=JOIN && LA254_0<=FULL)||(LA254_0>=EVENTS && LA254_0<=LAST)||(LA254_0>=UNIDIRECTIONAL && LA254_0<=CURRENT_TIMESTAMP)||(LA254_0>=SNAPSHOT && LA254_0<=INDEX)||(LA254_0>=BOOLEAN_TRUE && LA254_0<=VALUE_NULL)||(LA254_0>=DEFINE && LA254_0<=AFTER)||LA254_0==WHILE||(LA254_0>=MERGE && LA254_0<=MATCHED)||LA254_0==NEWKW||LA254_0==CONTEXT||LA254_0==NUM_DOUBLE||(LA254_0>=IDENT && LA254_0<=LCURLY)||LA254_0==LPAREN||LA254_0==STAR||(LA254_0>=PLUS && LA254_0<=QUESTION)||(LA254_0>=STRING_LITERAL && LA254_0<=QUOTED_STRING_LITERAL)||LA254_0==MINUS||LA254_0==NUM_INT||(LA254_0>=TICKED_STRING_LITERAL && LA254_0<=NUM_FLOAT)) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation9823);
                    accessAggExpr690=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr690.getTree());
                    int alt253=2;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==COMMA) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            COMMA691=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation9826); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA691);
                            pushFollow(FOLLOW_expression_in_lastAggregation9828);
                            expression692=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression692.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN693=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation9834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN693);
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==DOT) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9841);
                    libFunctionNoClass694=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass694.getTree());
                    loop255:
                    do {
                        int alt255=2;
                        int LA255_0 = input.LA(1);
                        if ( (LA255_0==DOT) ) {
                            alt255=1;
                        }
                        switch (alt255) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9846); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9848);
                    	    libFunctionNoClass695=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass695.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop255;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW696=null;
        Token LPAREN697=null;
        Token RPAREN699=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr698 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass700 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass701 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW696_tree=null;
        CommonTree LPAREN697_tree=null;
        CommonTree RPAREN699_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW696=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation9904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW696);
            LPAREN697=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation9906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN697);
            int alt257=2;
            int LA257_0 = input.LA(1);
            if ( (LA257_0==WINDOW||LA257_0==BETWEEN||LA257_0==ESCAPE||(LA257_0>=NOT_EXPR && LA257_0<=EVERY_EXPR)||LA257_0==WHERE||(LA257_0>=SUM && LA257_0<=COUNT)||LA257_0==CASE||LA257_0==OUTER||(LA257_0>=JOIN && LA257_0<=FULL)||(LA257_0>=EVENTS && LA257_0<=LAST)||(LA257_0>=UNIDIRECTIONAL && LA257_0<=CURRENT_TIMESTAMP)||(LA257_0>=SNAPSHOT && LA257_0<=INDEX)||(LA257_0>=BOOLEAN_TRUE && LA257_0<=VALUE_NULL)||(LA257_0>=DEFINE && LA257_0<=AFTER)||LA257_0==WHILE||(LA257_0>=MERGE && LA257_0<=MATCHED)||LA257_0==NEWKW||LA257_0==CONTEXT||LA257_0==NUM_DOUBLE||(LA257_0>=IDENT && LA257_0<=LCURLY)||LA257_0==LPAREN||LA257_0==STAR||(LA257_0>=PLUS && LA257_0<=QUESTION)||(LA257_0>=STRING_LITERAL && LA257_0<=QUOTED_STRING_LITERAL)||LA257_0==MINUS||LA257_0==NUM_INT||(LA257_0>=TICKED_STRING_LITERAL && LA257_0<=NUM_FLOAT)) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation9908);
                    accessAggExpr698=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr698.getTree());
                    }
                    break;
            }
            RPAREN699=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation9911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN699);
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==DOT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9918);
                    libFunctionNoClass700=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass700.getTree());
                    loop258:
                    do {
                        int alt258=2;
                        int LA258_0 = input.LA(1);
                        if ( (LA258_0==DOT) ) {
                            alt258=1;
                        }
                        switch (alt258) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9923); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9925);
                    	    libFunctionNoClass701=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass701.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop258;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector702 = null;
        EsperEPL2GrammarParser.expression_return expression703 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt260=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt260=1;
                }
                break;
            case IDENT:
                {
                int LA260_2 = input.LA(2);
                if ( (LA260_2==DOT) ) {
                    int LA260_75 = input.LA(3);
                    if ( (LA260_75==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt260=2;
                    }
                    else if ( (LA260_75==WINDOW||LA260_75==BETWEEN||LA260_75==ESCAPE||LA260_75==EVERY_EXPR||LA260_75==WHERE||(LA260_75>=SUM && LA260_75<=COUNT)||LA260_75==OUTER||(LA260_75>=JOIN && LA260_75<=FULL)||(LA260_75>=EVENTS && LA260_75<=LAST)||(LA260_75>=UNIDIRECTIONAL && LA260_75<=PREVIOUSTAIL)||LA260_75==PRIOR||(LA260_75>=WEEKDAY && LA260_75<=CAST)||(LA260_75>=SNAPSHOT && LA260_75<=INDEX)||(LA260_75>=DEFINE && LA260_75<=AFTER)||LA260_75==WHILE||(LA260_75>=MERGE && LA260_75<=MATCHED)||LA260_75==CONTEXT||LA260_75==IDENT||LA260_75==TICKED_STRING_LITERAL) ) {
                        alt260=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 260, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA260_2>=IN_SET && LA260_2<=REGEXP)||(LA260_2>=OR_EXPR && LA260_2<=NOT_EXPR)||LA260_2==IS||(LA260_2>=LPAREN && LA260_2<=RPAREN)||(LA260_2>=COMMA && LA260_2<=EQUALS)||LA260_2==LBRACK||(LA260_2>=STAR && LA260_2<=QUESTION)||(LA260_2>=BAND && LA260_2<=MOD)||LA260_2==ESCAPECHAR) ) {
                    alt260=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 260, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt260=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);
                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr9982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr10002);
                    propertyStreamSelector702=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector702.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr10015);
                    expression703=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression703.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA704=null;
        EsperEPL2GrammarParser.expression_return expression705 = null;
        CommonTree COMMA704_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA704=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr10034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA704);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr10036);
            expression705=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression705.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty706 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction707 = null;
        try {
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==IDENT) ) {
                int LA261_1 = input.LA(2);
                if ( (LA261_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt261=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA261_306 = input.LA(4);
                        if ( (LA261_306==RPAREN) ) {
                            int LA261_709 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 709, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA261_306>=IN_SET && LA261_306<=REGEXP)||(LA261_306>=OR_EXPR && LA261_306<=NOT_EXPR)||LA261_306==IS||(LA261_306>=ASC && LA261_306<=DESC)||(LA261_306>=TIMEPERIOD_SEC && LA261_306<=TIMEPERIOD_SECONDS)||(LA261_306>=COMMA && LA261_306<=EQUALS)||(LA261_306>=STAR && LA261_306<=PLUS)||(LA261_306>=BAND && LA261_306<=MOD)) ) {
                            alt261=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 306, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA261_307 = input.LA(4);
                        if ( ((LA261_307>=IN_SET && LA261_307<=REGEXP)||(LA261_307>=OR_EXPR && LA261_307<=NOT_EXPR)||LA261_307==IS||(LA261_307>=ASC && LA261_307<=DESC)||(LA261_307>=TIMEPERIOD_SEC && LA261_307<=TIMEPERIOD_SECONDS)||(LA261_307>=COMMA && LA261_307<=EQUALS)||(LA261_307>=STAR && LA261_307<=PLUS)||(LA261_307>=BAND && LA261_307<=MOD)) ) {
                            alt261=2;
                        }
                        else if ( (LA261_307==RPAREN) ) {
                            int LA261_765 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 765, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 307, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 53, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_1==DOT) ) {
                    int LA261_54 = input.LA(3);
                    if ( (LA261_54==IDENT) ) {
                        int LA261_371 = input.LA(4);
                        if ( (LA261_371==DOT) ) {
                            int LA261_771 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 771, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_371==LPAREN) ) {
                            int LA261_772 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 772, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_371==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_371==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 371, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_54==TICKED_STRING_LITERAL) ) {
                        int LA261_372 = input.LA(4);
                        if ( (LA261_372==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LPAREN) ) {
                            int LA261_833 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 833, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_372==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_372==DOT) ) {
                            int LA261_890 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 890, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 372, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_54==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==MAX) ) {
                        int LA261_379 = input.LA(4);
                        if ( (LA261_379==LPAREN) ) {
                            int LA261_891 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 891, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_379==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_379==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 379, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_54==MIN) ) {
                        int LA261_380 = input.LA(4);
                        if ( (LA261_380==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LPAREN) ) {
                            int LA261_953 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 953, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_380==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_380==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 380, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_54==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_54==BETWEEN||LA261_54==WHERE||LA261_54==SET||LA261_54==AFTER) ) {
                        alt261=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 54, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==TICKED_STRING_LITERAL) ) {
                int LA261_2 = input.LA(2);
                if ( (LA261_2==DOT) ) {
                    int LA261_113 = input.LA(3);
                    if ( (LA261_113==IDENT) ) {
                        int LA261_423 = input.LA(4);
                        if ( (LA261_423==DOT) ) {
                            int LA261_1011 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1011, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_423==LPAREN) ) {
                            int LA261_1012 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1012, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_423==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_423==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 423, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_113==TICKED_STRING_LITERAL) ) {
                        int LA261_424 = input.LA(4);
                        if ( (LA261_424==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LPAREN) ) {
                            int LA261_1073 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1073, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_424==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_424==DOT) ) {
                            int LA261_1130 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1130, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 424, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_113==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==MAX) ) {
                        int LA261_431 = input.LA(4);
                        if ( (LA261_431==LPAREN) ) {
                            int LA261_1131 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1131, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_431==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_431==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 431, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_113==MIN) ) {
                        int LA261_432 = input.LA(4);
                        if ( (LA261_432==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LPAREN) ) {
                            int LA261_1193 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1193, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA261_432==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else if ( (LA261_432==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt261=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 432, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA261_113==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt261=1;
                    }
                    else if ( (LA261_113==BETWEEN||LA261_113==WHERE||LA261_113==SET||LA261_113==AFTER) ) {
                        alt261=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt261=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA261_488 = input.LA(4);
                        if ( (LA261_488==RPAREN) ) {
                            int LA261_1251 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1251, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA261_488>=IN_SET && LA261_488<=REGEXP)||(LA261_488>=OR_EXPR && LA261_488<=NOT_EXPR)||LA261_488==IS||(LA261_488>=ASC && LA261_488<=DESC)||(LA261_488>=TIMEPERIOD_SEC && LA261_488<=TIMEPERIOD_SECONDS)||(LA261_488>=COMMA && LA261_488<=EQUALS)||(LA261_488>=STAR && LA261_488<=PLUS)||(LA261_488>=BAND && LA261_488<=MOD)) ) {
                            alt261=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 488, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA261_489 = input.LA(4);
                        if ( ((LA261_489>=IN_SET && LA261_489<=REGEXP)||(LA261_489>=OR_EXPR && LA261_489<=NOT_EXPR)||LA261_489==IS||(LA261_489>=ASC && LA261_489<=DESC)||(LA261_489>=TIMEPERIOD_SEC && LA261_489<=TIMEPERIOD_SECONDS)||(LA261_489>=COMMA && LA261_489<=EQUALS)||(LA261_489>=STAR && LA261_489<=PLUS)||(LA261_489>=BAND && LA261_489<=MOD)) ) {
                            alt261=2;
                        }
                        else if ( (LA261_489==RPAREN) ) {
                            int LA261_1307 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1307, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 489, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 114, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==MAX) ) {
                int LA261_9 = input.LA(2);
                if ( (LA261_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt261=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA261_566 = input.LA(4);
                        if ( (LA261_566==RPAREN) ) {
                            int LA261_1313 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1313, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA261_566>=IN_SET && LA261_566<=REGEXP)||(LA261_566>=OR_EXPR && LA261_566<=NOT_EXPR)||LA261_566==IS||(LA261_566>=ASC && LA261_566<=DESC)||(LA261_566>=TIMEPERIOD_SEC && LA261_566<=TIMEPERIOD_SECONDS)||(LA261_566>=COMMA && LA261_566<=EQUALS)||(LA261_566>=STAR && LA261_566<=PLUS)||(LA261_566>=BAND && LA261_566<=MOD)) ) {
                            alt261=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 566, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA261_567 = input.LA(4);
                        if ( ((LA261_567>=IN_SET && LA261_567<=REGEXP)||(LA261_567>=OR_EXPR && LA261_567<=NOT_EXPR)||LA261_567==IS||(LA261_567>=ASC && LA261_567<=DESC)||(LA261_567>=TIMEPERIOD_SEC && LA261_567<=TIMEPERIOD_SECONDS)||(LA261_567>=COMMA && LA261_567<=EQUALS)||(LA261_567>=STAR && LA261_567<=PLUS)||(LA261_567>=BAND && LA261_567<=MOD)) ) {
                            alt261=2;
                        }
                        else if ( (LA261_567==RPAREN) ) {
                            int LA261_1369 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1369, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 567, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 173, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==MIN) ) {
                int LA261_10 = input.LA(2);
                if ( (LA261_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt261=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA261_644 = input.LA(4);
                        if ( (LA261_644==RPAREN) ) {
                            int LA261_1375 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1375, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA261_644>=IN_SET && LA261_644<=REGEXP)||(LA261_644>=OR_EXPR && LA261_644<=NOT_EXPR)||LA261_644==IS||(LA261_644>=ASC && LA261_644<=DESC)||(LA261_644>=TIMEPERIOD_SEC && LA261_644<=TIMEPERIOD_SECONDS)||(LA261_644>=COMMA && LA261_644<=EQUALS)||(LA261_644>=STAR && LA261_644<=PLUS)||(LA261_644>=BAND && LA261_644<=MOD)) ) {
                            alt261=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 644, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA261_645 = input.LA(4);
                        if ( ((LA261_645>=IN_SET && LA261_645<=REGEXP)||(LA261_645>=OR_EXPR && LA261_645<=NOT_EXPR)||LA261_645==IS||(LA261_645>=ASC && LA261_645<=DESC)||(LA261_645>=TIMEPERIOD_SEC && LA261_645<=TIMEPERIOD_SECONDS)||(LA261_645>=COMMA && LA261_645<=EQUALS)||(LA261_645>=STAR && LA261_645<=PLUS)||(LA261_645>=BAND && LA261_645<=MOD)) ) {
                            alt261=2;
                        }
                        else if ( (LA261_645==RPAREN) ) {
                            int LA261_1431 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt261=1;
                            }
                            else if ( (true) ) {
                                alt261=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 261, 1431, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 261, 645, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 233, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else if ( (LA261_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt261=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                alt261=1;
            }
            else if ( (LA261_0==BETWEEN||LA261_0==WHERE||LA261_0==SET||LA261_0==AFTER) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction10064);
                    eventProperty706=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty706.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction10069);
                    libFunction707=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction707.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT709=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass708 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass710 = null;
        CommonTree DOT709_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction10081);
            libFunctionWithClass708=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass708.getTree());
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);
                if ( (LA262_0==DOT) ) {
                    alt262=1;
                }
                switch (alt262) {
            	case 1 :
            	    {
            	    DOT709=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction10084); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT709);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction10086);
            	    libFunctionNoClass710=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass710.getTree());
            	    }
            	    break;
            	default :
            	    break loop262;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT712=null;
        Token RPAREN715=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy711 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent713 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs714 = null;
        CommonTree l_tree=null;
        CommonTree DOT712_tree=null;
        CommonTree RPAREN715_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( (LA263_0==IDENT) ) {
                int LA263_1 = input.LA(2);
                if ( (LA263_1==DOT) ) {
                    alt263=1;
                }
            }
            else if ( (LA263_0==TICKED_STRING_LITERAL) ) {
                int LA263_2 = input.LA(2);
                if ( (LA263_2==DOT) ) {
                    alt263=1;
                }
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10116);
                    classIdentifierNonGreedy711=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy711.getTree());
                    DOT712=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass10118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT712);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass10122);
            funcIdent713=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent713.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass10126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt264=2;
            int LA264_0 = input.LA(1);
            if ( (LA264_0==WINDOW||LA264_0==BETWEEN||LA264_0==ESCAPE||(LA264_0>=NOT_EXPR && LA264_0<=EVERY_EXPR)||LA264_0==WHERE||(LA264_0>=SUM && LA264_0<=COUNT)||LA264_0==CASE||LA264_0==OUTER||(LA264_0>=JOIN && LA264_0<=FULL)||(LA264_0>=DISTINCT && LA264_0<=ALL)||(LA264_0>=EVENTS && LA264_0<=LAST)||(LA264_0>=UNIDIRECTIONAL && LA264_0<=CURRENT_TIMESTAMP)||(LA264_0>=SNAPSHOT && LA264_0<=INDEX)||(LA264_0>=BOOLEAN_TRUE && LA264_0<=VALUE_NULL)||(LA264_0>=DEFINE && LA264_0<=AFTER)||LA264_0==WHILE||(LA264_0>=MERGE && LA264_0<=MATCHED)||LA264_0==NEWKW||LA264_0==CONTEXT||LA264_0==NUM_DOUBLE||(LA264_0>=IDENT && LA264_0<=LCURLY)||LA264_0==LPAREN||LA264_0==LBRACK||LA264_0==STAR||(LA264_0>=PLUS && LA264_0<=QUESTION)||(LA264_0>=STRING_LITERAL && LA264_0<=QUOTED_STRING_LITERAL)||LA264_0==MINUS||LA264_0==NUM_INT||(LA264_0>=TICKED_STRING_LITERAL && LA264_0<=NUM_FLOAT)) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass10129);
                    libFunctionArgs714=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs714.getTree());
                    }
                    break;
            }
            RPAREN715=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass10133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN715);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN718=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent716 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs717 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN718_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass10166);
            funcIdent716=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent716.getTree());
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==LPAREN) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass10171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==WINDOW||LA265_0==BETWEEN||LA265_0==ESCAPE||(LA265_0>=NOT_EXPR && LA265_0<=EVERY_EXPR)||LA265_0==WHERE||(LA265_0>=SUM && LA265_0<=COUNT)||LA265_0==CASE||LA265_0==OUTER||(LA265_0>=JOIN && LA265_0<=FULL)||(LA265_0>=DISTINCT && LA265_0<=ALL)||(LA265_0>=EVENTS && LA265_0<=LAST)||(LA265_0>=UNIDIRECTIONAL && LA265_0<=CURRENT_TIMESTAMP)||(LA265_0>=SNAPSHOT && LA265_0<=INDEX)||(LA265_0>=BOOLEAN_TRUE && LA265_0<=VALUE_NULL)||(LA265_0>=DEFINE && LA265_0<=AFTER)||LA265_0==WHILE||(LA265_0>=MERGE && LA265_0<=MATCHED)||LA265_0==NEWKW||LA265_0==CONTEXT||LA265_0==NUM_DOUBLE||(LA265_0>=IDENT && LA265_0<=LCURLY)||LA265_0==LPAREN||LA265_0==LBRACK||LA265_0==STAR||(LA265_0>=PLUS && LA265_0<=QUESTION)||(LA265_0>=STRING_LITERAL && LA265_0<=QUOTED_STRING_LITERAL)||LA265_0==MINUS||LA265_0==NUM_INT||(LA265_0>=TICKED_STRING_LITERAL && LA265_0<=NUM_FLOAT)) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass10174);
                            libFunctionArgs717=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs717.getTree());
                            }
                            break;
                    }
                    RPAREN718=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass10178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN718);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent719 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt267=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt267=1;
                }
                break;
            case MAX:
                {
                alt267=2;
                }
                break;
            case MIN:
                {
                alt267=3;
                }
                break;
            case WHERE:
                {
                alt267=4;
                }
                break;
            case SET:
                {
                alt267=5;
                }
                break;
            case AFTER:
                {
                alt267=6;
                }
                break;
            case BETWEEN:
                {
                alt267=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);
                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent10210);
                    escapableIdent719=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent719.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent10217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent10229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent10241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent10253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent10265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent10276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL720=null;
        Token DISTINCT721=null;
        Token COMMA723=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem722 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem724 = null;
        CommonTree ALL720_tree=null;
        CommonTree DISTINCT721_tree=null;
        CommonTree COMMA723_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt268=3;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==ALL) ) {
                alt268=1;
            }
            else if ( (LA268_0==DISTINCT) ) {
                alt268=2;
            }
            switch (alt268) {
                case 1 :
                    {
                    ALL720=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs10293); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT721=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs10298); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT721_tree = (CommonTree)adaptor.create(DISTINCT721);
                    adaptor.addChild(root_0, DISTINCT721_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10302);
            libFunctionArgItem722=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem722.getTree());
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);
                if ( (LA269_0==COMMA) ) {
                    alt269=1;
                }
                switch (alt269) {
            	case 1 :
            	    {
            	    COMMA723=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs10305); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10308);
            	    libFunctionArgItem724=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem724.getTree());
            	    }
            	    break;
            	default :
            	    break loop269;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl725 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime726 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt270=2;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==IDENT) ) {
                int LA270_1 = input.LA(2);
                if ( (LA270_1==GOES) ) {
                    alt270=1;
                }
            }
            else if ( (LA270_0==LPAREN) ) {
                int LA270_2 = input.LA(2);
                if ( (LA270_2==IDENT) ) {
                    int LA270_147 = input.LA(3);
                    if ( (LA270_147==COMMA) ) {
                        alt270=1;
                    }
                    else if ( (LA270_147==RPAREN) ) {
                        int LA270_207 = input.LA(4);
                        if ( (LA270_207==GOES) ) {
                            alt270=1;
                        }
                    }
                }
            }
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10322);
                    expressionLambdaDecl725=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl725.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem10325);
            expressionWithTime726=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime726.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR728=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr727 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr729 = null;
        CommonTree AND_EXPR728_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10336);
            concatenationExpr727=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr727.getTree());
            AND_EXPR728=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList10338); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10341);
            concatenationExpr729=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr729.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression730 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression10369);
            followedByExpression730=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression730.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression731 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat732 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression10388);
            orExpression731=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression731.getTree());
            loop271:
            do {
                int alt271=2;
                int LA271_0 = input.LA(1);
                if ( ((LA271_0>=FOLLOWED_BY && LA271_0<=FOLLOWMAX_BEGIN)) ) {
                    alt271=1;
                }
                switch (alt271) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression10391);
            	    followedByRepeat732=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat732.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop271;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END734=null;
        EsperEPL2GrammarParser.expression_return expression733 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression735 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END734_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==FOLLOWED_BY) ) {
                alt272=1;
            }
            else if ( (LA272_0==FOLLOWMAX_BEGIN) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);
                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat10444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat10453);
                    expression733=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression733.getTree());
                    FOLLOWMAX_END734=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat10455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END734);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat10459);
            orExpression735=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression735.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression736 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression737 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression10488);
            andExpression736=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression736.getTree());
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);
                if ( (LA273_0==OR_EXPR) ) {
                    alt273=1;
                }
                switch (alt273) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression10493); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression10495);
            	    andExpression737=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression737.getTree());
            	    }
            	    break;
            	default :
            	    break loop273;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression738 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression739 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression10527);
            matchUntilExpression738=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression738.getTree());
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);
                if ( (LA274_0==AND_EXPR) ) {
                    alt274=1;
                }
                switch (alt274) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression10532); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression10534);
            	    matchUntilExpression739=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression739.getTree());
            	    }
            	    break;
            	default :
            	    break loop274;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression740 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression741 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==LBRACK) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10569);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10573);
            qualifyExpression740=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression740.getTree());
            int alt276=2;
            int LA276_0 = input.LA(1);
            if ( (LA276_0==UNTIL) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10580);
                    qualifyExpression741=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression741.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList742 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix743 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( ((LA279_0>=NOT_EXPR && LA279_0<=EVERY_DISTINCT_EXPR)) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    {
                    int alt277=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt277=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt277=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt277=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);
                        throw nvae;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression10645); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression10651); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10657); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression10659);
                            distinctExpressionList742=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList742.getTree());
                            }
                            break;
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==LBRACK) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression10665);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression10674);
            guardPostFix743=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix743.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN744=null;
        Token COMMA746=null;
        Token RPAREN748=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom745 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom747 = null;
        CommonTree LPAREN744_tree=null;
        CommonTree COMMA746_tree=null;
        CommonTree RPAREN748_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN744=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList10789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN744);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10791);
            distinctExpressionAtom745=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom745.getTree());
            loop280:
            do {
                int alt280=2;
                int LA280_0 = input.LA(1);
                if ( (LA280_0==COMMA) ) {
                    alt280=1;
                }
                switch (alt280) {
            	case 1 :
            	    {
            	    COMMA746=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList10794); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA746);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10796);
            	    distinctExpressionAtom747=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom747.getTree());
            	    }
            	    break;
            	default :
            	    break loop280;
                }
            } while (true);
            RPAREN748=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList10800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN748);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime749 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom10823);
            expressionWithTime749=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime749.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN752=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression750 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression751 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression753 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression754 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN752_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==IDENT||LA281_0==TICKED_STRING_LITERAL) ) {
                alt281=1;
            }
            else if ( (LA281_0==LPAREN) ) {
                alt281=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);
                throw nvae;
            }
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix10838);
                    atomicExpression750=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression750.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix10844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix10846);
                    patternExpression751=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression751.getTree());
                    RPAREN752=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix10848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN752);
                    }
                    break;
            }
            int alt282=3;
            int LA282_0 = input.LA(1);
            if ( (LA282_0==WHERE) ) {
                alt282=1;
            }
            else if ( (LA282_0==WHILE) ) {
                alt282=2;
            }
            switch (alt282) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix10855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix10857);
                    guardWhereExpression753=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression753.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix10865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix10867);
                    guardWhileExpression754=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression754.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression755 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression756 = null;
        try {
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==IDENT) ) {
                int LA283_1 = input.LA(2);
                if ( (LA283_1==COLON) ) {
                    alt283=1;
                }
                else if ( (LA283_1==EOF||(LA283_1>=OR_EXPR && LA283_1<=AND_EXPR)||LA283_1==WHERE||LA283_1==UNTIL||LA283_1==WHILE||(LA283_1>=LPAREN && LA283_1<=RPAREN)||(LA283_1>=EQUALS && LA283_1<=RBRACK)||(LA283_1>=FOLLOWED_BY && LA283_1<=FOLLOWMAX_BEGIN)||LA283_1==ATCHAR) ) {
                    alt283=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA283_0==TICKED_STRING_LITERAL) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression10929);
                    observerExpression755=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression755.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression10933);
                    patternFilterExpression756=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression756.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON757=null;
        Token LPAREN758=null;
        Token RPAREN760=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList759 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON757_tree=null;
        CommonTree LPAREN758_tree=null;
        CommonTree RPAREN760_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON757=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression10950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON757);
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==IDENT) ) {
                alt284=1;
            }
            else if ( (LA284_0==AT) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression10961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN758=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression10964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN758);
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==WINDOW||LA285_0==BETWEEN||LA285_0==ESCAPE||(LA285_0>=NOT_EXPR && LA285_0<=EVERY_EXPR)||LA285_0==WHERE||(LA285_0>=SUM && LA285_0<=COUNT)||LA285_0==CASE||LA285_0==OUTER||(LA285_0>=JOIN && LA285_0<=FULL)||(LA285_0>=EVENTS && LA285_0<=LAST)||(LA285_0>=UNIDIRECTIONAL && LA285_0<=CURRENT_TIMESTAMP)||(LA285_0>=SNAPSHOT && LA285_0<=INDEX)||(LA285_0>=BOOLEAN_TRUE && LA285_0<=VALUE_NULL)||(LA285_0>=DEFINE && LA285_0<=AFTER)||LA285_0==WHILE||(LA285_0>=MERGE && LA285_0<=MATCHED)||LA285_0==NEWKW||LA285_0==CONTEXT||LA285_0==NUM_DOUBLE||(LA285_0>=IDENT && LA285_0<=LCURLY)||LA285_0==LPAREN||LA285_0==LBRACK||LA285_0==STAR||(LA285_0>=PLUS && LA285_0<=QUESTION)||(LA285_0>=STRING_LITERAL && LA285_0<=QUOTED_STRING_LITERAL)||LA285_0==MINUS||LA285_0==NUM_INT||(LA285_0>=TICKED_STRING_LITERAL && LA285_0<=NUM_FLOAT)) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression10966);
                    expressionWithTimeList759=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList759.getTree());
                    }
                    break;
            }
            RPAREN760=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression10969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN760);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT761=null;
        Token COLON762=null;
        Token IDENT763=null;
        Token LPAREN764=null;
        Token RPAREN766=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList765 = null;
        CommonTree IDENT761_tree=null;
        CommonTree COLON762_tree=null;
        CommonTree IDENT763_tree=null;
        CommonTree LPAREN764_tree=null;
        CommonTree RPAREN766_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT761=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT761_tree = (CommonTree)adaptor.create(IDENT761);
            adaptor.addChild(root_0, IDENT761_tree);
            }
            COLON762=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression11020); if (state.failed) return retval;
            IDENT763=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT763_tree = (CommonTree)adaptor.create(IDENT763);
            adaptor.addChild(root_0, IDENT763_tree);
            }
            LPAREN764=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression11025); if (state.failed) return retval;
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==WINDOW||LA286_0==BETWEEN||LA286_0==ESCAPE||(LA286_0>=NOT_EXPR && LA286_0<=EVERY_EXPR)||LA286_0==WHERE||(LA286_0>=SUM && LA286_0<=COUNT)||LA286_0==CASE||LA286_0==OUTER||(LA286_0>=JOIN && LA286_0<=FULL)||(LA286_0>=EVENTS && LA286_0<=LAST)||(LA286_0>=UNIDIRECTIONAL && LA286_0<=CURRENT_TIMESTAMP)||(LA286_0>=SNAPSHOT && LA286_0<=INDEX)||(LA286_0>=BOOLEAN_TRUE && LA286_0<=VALUE_NULL)||(LA286_0>=DEFINE && LA286_0<=AFTER)||LA286_0==WHILE||(LA286_0>=MERGE && LA286_0<=MATCHED)||LA286_0==NEWKW||LA286_0==CONTEXT||LA286_0==NUM_DOUBLE||(LA286_0>=IDENT && LA286_0<=LCURLY)||LA286_0==LPAREN||LA286_0==LBRACK||LA286_0==STAR||(LA286_0>=PLUS && LA286_0<=QUESTION)||(LA286_0>=STRING_LITERAL && LA286_0<=QUOTED_STRING_LITERAL)||LA286_0==MINUS||LA286_0==NUM_INT||(LA286_0>=TICKED_STRING_LITERAL && LA286_0<=NUM_FLOAT)) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression11029);
                    expressionWithTimeList765=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList765.getTree());
                    }
                    break;
            }
            RPAREN766=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression11033); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN767=null;
        Token RPAREN769=null;
        EsperEPL2GrammarParser.expression_return expression768 = null;
        CommonTree LPAREN767_tree=null;
        CommonTree RPAREN769_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN767=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression11046); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression11049);
            expression768=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression768.getTree());
            RPAREN769=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression11051); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK770=null;
        Token RBRACK774=null;
        EsperEPL2GrammarParser.expression_return expression771 = null;
        EsperEPL2GrammarParser.expression_return expression772 = null;
        EsperEPL2GrammarParser.expression_return expression773 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK770_tree=null;
        CommonTree RBRACK774_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK770=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange11072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK770);
            int alt289=2;
            int LA289_0 = input.LA(1);
            if ( (LA289_0==WINDOW||LA289_0==BETWEEN||LA289_0==ESCAPE||(LA289_0>=NOT_EXPR && LA289_0<=EVERY_EXPR)||LA289_0==WHERE||(LA289_0>=SUM && LA289_0<=COUNT)||LA289_0==CASE||LA289_0==OUTER||(LA289_0>=JOIN && LA289_0<=FULL)||(LA289_0>=EVENTS && LA289_0<=LAST)||(LA289_0>=UNIDIRECTIONAL && LA289_0<=CURRENT_TIMESTAMP)||(LA289_0>=SNAPSHOT && LA289_0<=INDEX)||(LA289_0>=BOOLEAN_TRUE && LA289_0<=VALUE_NULL)||(LA289_0>=DEFINE && LA289_0<=AFTER)||LA289_0==WHILE||(LA289_0>=MERGE && LA289_0<=MATCHED)||LA289_0==NEWKW||LA289_0==CONTEXT||LA289_0==NUM_DOUBLE||(LA289_0>=IDENT && LA289_0<=LCURLY)||LA289_0==LPAREN||(LA289_0>=PLUS && LA289_0<=QUESTION)||(LA289_0>=STRING_LITERAL && LA289_0<=QUOTED_STRING_LITERAL)||LA289_0==MINUS||LA289_0==NUM_INT||(LA289_0>=TICKED_STRING_LITERAL && LA289_0<=NUM_FLOAT)) ) {
                alt289=1;
            }
            else if ( (LA289_0==COLON) ) {
                alt289=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange11079);
                    expression771=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression771.getTree());
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==COLON) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11084); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt287=2;
                            int LA287_0 = input.LA(1);
                            if ( (LA287_0==WINDOW||LA287_0==BETWEEN||LA287_0==ESCAPE||(LA287_0>=NOT_EXPR && LA287_0<=EVERY_EXPR)||LA287_0==WHERE||(LA287_0>=SUM && LA287_0<=COUNT)||LA287_0==CASE||LA287_0==OUTER||(LA287_0>=JOIN && LA287_0<=FULL)||(LA287_0>=EVENTS && LA287_0<=LAST)||(LA287_0>=UNIDIRECTIONAL && LA287_0<=CURRENT_TIMESTAMP)||(LA287_0>=SNAPSHOT && LA287_0<=INDEX)||(LA287_0>=BOOLEAN_TRUE && LA287_0<=VALUE_NULL)||(LA287_0>=DEFINE && LA287_0<=AFTER)||LA287_0==WHILE||(LA287_0>=MERGE && LA287_0<=MATCHED)||LA287_0==NEWKW||LA287_0==CONTEXT||LA287_0==NUM_DOUBLE||(LA287_0>=IDENT && LA287_0<=LCURLY)||LA287_0==LPAREN||(LA287_0>=PLUS && LA287_0<=QUESTION)||(LA287_0>=STRING_LITERAL && LA287_0<=QUOTED_STRING_LITERAL)||LA287_0==MINUS||LA287_0==NUM_INT||(LA287_0>=TICKED_STRING_LITERAL && LA287_0<=NUM_FLOAT)) ) {
                                alt287=1;
                            }
                            switch (alt287) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange11087);
                                    expression772=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression772.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange11109);
                    expression773=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression773.getTree());
                    }
                    break;
            }
            RBRACK774=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange11120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK774);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS775=null;
        Token LPAREN777=null;
        Token RPAREN779=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier776 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList778 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression780 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS775_tree=null;
        CommonTree LPAREN777_tree=null;
        CommonTree RPAREN779_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt290=2;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==IDENT) ) {
                int LA290_1 = input.LA(2);
                if ( (LA290_1==EQUALS) ) {
                    alt290=1;
                }
            }
            switch (alt290) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression11207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS775=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression11209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS775);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression11218);
            classIdentifier776=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier776.getTree());
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==LPAREN) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    LPAREN777=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression11229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN777);
                    int alt291=2;
                    int LA291_0 = input.LA(1);
                    if ( (LA291_0==WINDOW||LA291_0==BETWEEN||LA291_0==ESCAPE||(LA291_0>=NOT_EXPR && LA291_0<=EVERY_EXPR)||LA291_0==WHERE||(LA291_0>=SUM && LA291_0<=COUNT)||LA291_0==CASE||LA291_0==OUTER||(LA291_0>=JOIN && LA291_0<=FULL)||(LA291_0>=EVENTS && LA291_0<=LAST)||(LA291_0>=UNIDIRECTIONAL && LA291_0<=CURRENT_TIMESTAMP)||(LA291_0>=SNAPSHOT && LA291_0<=INDEX)||(LA291_0>=BOOLEAN_TRUE && LA291_0<=VALUE_NULL)||(LA291_0>=DEFINE && LA291_0<=AFTER)||LA291_0==WHILE||(LA291_0>=MERGE && LA291_0<=MATCHED)||LA291_0==NEWKW||LA291_0==CONTEXT||LA291_0==NUM_DOUBLE||(LA291_0>=IDENT && LA291_0<=LCURLY)||LA291_0==LPAREN||(LA291_0>=PLUS && LA291_0<=QUESTION)||(LA291_0>=STRING_LITERAL && LA291_0<=QUOTED_STRING_LITERAL)||LA291_0==MINUS||LA291_0==NUM_INT||(LA291_0>=TICKED_STRING_LITERAL && LA291_0<=NUM_FLOAT)) ) {
                        alt291=1;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression11231);
                            expressionList778=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList778.getTree());
                            }
                            break;
                    }
                    RPAREN779=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression11234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN779);
                    }
                    break;
            }
            int alt293=2;
            int LA293_0 = input.LA(1);
            if ( (LA293_0==LBRACK) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression11246);
                    propertyExpression780=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression780.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic781 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic782 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11291);
            propertyExpressionAtomic781=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic781.getTree());
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);
                if ( (LA294_0==LBRACK) ) {
                    alt294=1;
                }
                switch (alt294) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11294);
            	    propertyExpressionAtomic782=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic782.getTree());
            	    }
            	    break;
            	default :
            	    break loop294;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK783=null;
        Token SELECT784=null;
        Token FROM786=null;
        Token AS788=null;
        Token IDENT789=null;
        Token WHERE790=null;
        Token RBRACK792=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList785 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty787 = null;
        EsperEPL2GrammarParser.expression_return expression791 = null;
        CommonTree LBRACK783_tree=null;
        CommonTree SELECT784_tree=null;
        CommonTree FROM786_tree=null;
        CommonTree AS788_tree=null;
        CommonTree IDENT789_tree=null;
        CommonTree WHERE790_tree=null;
        CommonTree RBRACK792_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK783=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic11324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK783);
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==SELECT) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    SELECT784=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic11327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT784);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic11329);
                    propertySelectionList785=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList785.getTree());
                    FROM786=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic11331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM786);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic11335);
            eventProperty787=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty787.getTree());
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==AS) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    AS788=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic11338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS788);
                    IDENT789=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic11340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT789);
                    }
                    break;
            }
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==WHERE) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    WHERE790=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic11345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE790);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11347);
                    expression791=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression791.getTree());
                    }
                    break;
            }
            RBRACK792=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic11351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK792);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA794=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement793 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement795 = null;
        CommonTree COMMA794_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11401);
            propertySelectionListElement793=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement793.getTree());
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);
                if ( (LA298_0==COMMA) ) {
                    alt298=1;
                }
                switch (alt298) {
            	case 1 :
            	    {
            	    COMMA794=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList11404); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11407);
            	    propertySelectionListElement795=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement795.getTree());
            	    }
            	    break;
            	default :
            	    break loop298;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS798=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector796 = null;
        EsperEPL2GrammarParser.expression_return expression797 = null;
        CommonTree s_tree=null;
        CommonTree AS798_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt300=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt300=1;
                }
                break;
            case IDENT:
                {
                int LA300_2 = input.LA(2);
                if ( (LA300_2==DOT) ) {
                    int LA300_75 = input.LA(3);
                    if ( (LA300_75==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt300=2;
                    }
                    else if ( (LA300_75==WINDOW||LA300_75==BETWEEN||LA300_75==ESCAPE||LA300_75==EVERY_EXPR||LA300_75==WHERE||(LA300_75>=SUM && LA300_75<=COUNT)||LA300_75==OUTER||(LA300_75>=JOIN && LA300_75<=FULL)||(LA300_75>=EVENTS && LA300_75<=LAST)||(LA300_75>=UNIDIRECTIONAL && LA300_75<=PREVIOUSTAIL)||LA300_75==PRIOR||(LA300_75>=WEEKDAY && LA300_75<=CAST)||(LA300_75>=SNAPSHOT && LA300_75<=INDEX)||(LA300_75>=DEFINE && LA300_75<=AFTER)||LA300_75==WHILE||(LA300_75>=MERGE && LA300_75<=MATCHED)||LA300_75==CONTEXT||LA300_75==IDENT||LA300_75==TICKED_STRING_LITERAL) ) {
                        alt300=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA300_2>=IN_SET && LA300_2<=REGEXP)||(LA300_2>=OR_EXPR && LA300_2<=NOT_EXPR)||LA300_2==AS||LA300_2==FROM||LA300_2==IS||LA300_2==LPAREN||(LA300_2>=COMMA && LA300_2<=EQUALS)||LA300_2==LBRACK||(LA300_2>=STAR && LA300_2<=QUESTION)||(LA300_2>=BAND && LA300_2<=MOD)||LA300_2==ESCAPECHAR) ) {
                    alt300=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 300, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt300=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 300, 0, input);
                throw nvae;
            }
            switch (alt300) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement11433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement11449);
                    propertyStreamSelector796=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector796.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement11454);
                    expression797=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression797.getTree());
                    int alt299=2;
                    int LA299_0 = input.LA(1);
                    if ( (LA299_0==AS) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            AS798=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement11457); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS798);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11461);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT799=null;
        Token STAR800=null;
        Token AS801=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT799_tree=null;
        CommonTree STAR800_tree=null;
        CommonTree AS801_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT799=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector11507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT799);
            STAR800=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector11509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR800);
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==AS) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    AS801=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector11512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS801);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS802=null;
        Token LPAREN804=null;
        Token RPAREN806=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier803 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList805 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression807 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation808 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS802_tree=null;
        CommonTree LPAREN804_tree=null;
        CommonTree RPAREN806_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( (LA302_0==IDENT) ) {
                int LA302_1 = input.LA(2);
                if ( (LA302_1==EQUALS) ) {
                    alt302=1;
                }
            }
            switch (alt302) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression11563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS802=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression11565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS802);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression11574);
            classIdentifier803=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier803.getTree());
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==LPAREN) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    LPAREN804=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression11585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN804);
                    int alt303=2;
                    int LA303_0 = input.LA(1);
                    if ( (LA303_0==WINDOW||LA303_0==BETWEEN||LA303_0==ESCAPE||(LA303_0>=NOT_EXPR && LA303_0<=EVERY_EXPR)||LA303_0==WHERE||(LA303_0>=SUM && LA303_0<=COUNT)||LA303_0==CASE||LA303_0==OUTER||(LA303_0>=JOIN && LA303_0<=FULL)||(LA303_0>=EVENTS && LA303_0<=LAST)||(LA303_0>=UNIDIRECTIONAL && LA303_0<=CURRENT_TIMESTAMP)||(LA303_0>=SNAPSHOT && LA303_0<=INDEX)||(LA303_0>=BOOLEAN_TRUE && LA303_0<=VALUE_NULL)||(LA303_0>=DEFINE && LA303_0<=AFTER)||LA303_0==WHILE||(LA303_0>=MERGE && LA303_0<=MATCHED)||LA303_0==NEWKW||LA303_0==CONTEXT||LA303_0==NUM_DOUBLE||(LA303_0>=IDENT && LA303_0<=LCURLY)||LA303_0==LPAREN||(LA303_0>=PLUS && LA303_0<=QUESTION)||(LA303_0>=STRING_LITERAL && LA303_0<=QUOTED_STRING_LITERAL)||LA303_0==MINUS||LA303_0==NUM_INT||(LA303_0>=TICKED_STRING_LITERAL && LA303_0<=NUM_FLOAT)) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression11587);
                            expressionList805=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList805.getTree());
                            }
                            break;
                    }
                    RPAREN806=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression11590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN806);
                    }
                    break;
            }
            int alt305=2;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==LBRACK) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression11602);
                    propertyExpression807=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression807.getTree());
                    }
                    break;
            }
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==ATCHAR) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression11613);
                    patternFilterAnnotation808=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation808.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR809=null;
        Token LPAREN810=null;
        Token RPAREN812=null;
        EsperEPL2GrammarParser.number_return number811 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR809_tree=null;
        CommonTree LPAREN810_tree=null;
        CommonTree RPAREN812_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR809=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation11665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR809);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation11669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt307=2;
            int LA307_0 = input.LA(1);
            if ( (LA307_0==LPAREN) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    LPAREN810=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation11672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN810);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation11674);
                    number811=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number811.getTree());
                    RPAREN812=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation11676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN812);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT813=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT813_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier11712);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);
                if ( (LA308_0==DOT) ) {
                    int LA308_23 = input.LA(2);
                    if ( (LA308_23==IDENT) ) {
                        int LA308_48 = input.LA(3);
                        if ( (LA308_48==EOF||LA308_48==CREATE||(LA308_48>=OR_EXPR && LA308_48<=AS)||LA308_48==SELECT||(LA308_48>=INNER && LA308_48<=ON)||(LA308_48>=GROUP && LA308_48<=HAVING)||LA308_48==OUTPUT||LA308_48==INSERT||LA308_48==ORDER||(LA308_48>=UNIDIRECTIONAL && LA308_48<=RETAININTERSECTION)||LA308_48==DELETE||LA308_48==SET||LA308_48==UNTIL||LA308_48==ROW_LIMIT_EXPR||(LA308_48>=UPDATE && LA308_48<=MATCH_RECOGNIZE)||(LA308_48>=FOR && LA308_48<=WHILE)||LA308_48==MERGE||LA308_48==EXPRESSIONDECL||LA308_48==CONTEXT||LA308_48==IDENT||(LA308_48>=RCURLY && LA308_48<=RPAREN)||LA308_48==COMMA||(LA308_48>=DOT && LA308_48<=RBRACK)||(LA308_48>=FOLLOWED_BY && LA308_48<=FOLLOWMAX_BEGIN)||LA308_48==ATCHAR||LA308_48==TICKED_STRING_LITERAL) ) {
                            alt308=1;
                        }
                    }
                    else if ( (LA308_23==TICKED_STRING_LITERAL) ) {
                        alt308=1;
                    }
                }
                switch (alt308) {
            	case 1 :
            	    {
            	    DOT813=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier11731); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT813);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier11735);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop308;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT814=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT814_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11780);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop309:
            do {
                int alt309=2;
                int LA309_0 = input.LA(1);
                if ( (LA309_0==IDENT||LA309_0==TICKED_STRING_LITERAL) ) {
                    alt309=2;
                }
                else if ( (LA309_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA309_4 = input.LA(3);
                        if ( (LA309_4==IDENT||LA309_4==DOT||LA309_4==TICKED_STRING_LITERAL) ) {
                            alt309=1;
                        }
                        else if ( (LA309_4==LPAREN) ) {
                            alt309=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA309_5 = input.LA(3);
                        if ( (LA309_5==LPAREN) ) {
                            alt309=2;
                        }
                        else if ( (LA309_5==IDENT||LA309_5==DOT||LA309_5==TICKED_STRING_LITERAL) ) {
                            alt309=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt309=2;
                        }
                        break;
                    }
                }
                switch (alt309) {
            	case 1 :
            	    {
            	    DOT814=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy11815); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT814);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11819);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop309;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA816=null;
        EsperEPL2GrammarParser.expression_return expression815 = null;
        EsperEPL2GrammarParser.expression_return expression817 = null;
        CommonTree COMMA816_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList11861);
            expression815=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression815.getTree());
            loop310:
            do {
                int alt310=2;
                int LA310_0 = input.LA(1);
                if ( (LA310_0==COMMA) ) {
                    alt310=1;
                }
                switch (alt310) {
            	case 1 :
            	    {
            	    COMMA816=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11864); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11867);
            	    expression817=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression817.getTree());
            	    }
            	    break;
            	default :
            	    break loop310;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA819=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast818 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast820 = null;
        CommonTree COMMA819_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11895);
            expressionWithTimeInclLast818=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast818.getTree());
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);
                if ( (LA311_0==COMMA) ) {
                    alt311=1;
                }
                switch (alt311) {
            	case 1 :
            	    {
            	    COMMA819=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList11898); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11901);
            	    expressionWithTimeInclLast820=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast820.getTree());
            	    }
            	    break;
            	default :
            	    break loop311;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand821 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod822 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable823 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand824 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand825 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator826 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator827 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList828 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar829 = null;
        try {
            int alt312=9;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==LW) ) {
                int LA312_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt312=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt312=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==MINUS) ) {
                int LA312_2 = input.LA(2);
                if ( (LA312_2==NUM_INT) ) {
                    int LA312_113 = input.LA(3);
                    if ( (LA312_113==TIMEPERIOD_SECONDS) ) {
                        int LA312_477 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 477, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_113==TIMEPERIOD_SECOND) ) {
                        int LA312_478 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 478, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_113==TIMEPERIOD_SEC) ) {
                        int LA312_479 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 479, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_113==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_113==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_113==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_2==NUM_LONG) ) {
                    int LA312_114 = input.LA(3);
                    if ( (LA312_114==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_SECONDS) ) {
                        int LA312_526 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 526, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_114==TIMEPERIOD_SECOND) ) {
                        int LA312_527 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 527, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_114==TIMEPERIOD_SEC) ) {
                        int LA312_528 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 528, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_114==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_114==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_114==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 114, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_2==NUM_FLOAT) ) {
                    int LA312_115 = input.LA(3);
                    if ( (LA312_115==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==TIMEPERIOD_SECONDS) ) {
                        int LA312_602 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 602, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_115==TIMEPERIOD_SECOND) ) {
                        int LA312_603 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 603, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_115==TIMEPERIOD_SEC) ) {
                        int LA312_604 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 604, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_115==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_115==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_115==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_2==NUM_DOUBLE) ) {
                    int LA312_116 = input.LA(3);
                    if ( (LA312_116==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==TIMEPERIOD_SECONDS) ) {
                        int LA312_653 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 653, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_116==TIMEPERIOD_SECOND) ) {
                        int LA312_654 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 654, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_116==TIMEPERIOD_SEC) ) {
                        int LA312_655 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 655, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_116==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_116==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_116==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 116, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA312_165 = input.LA(3);
                    if ( (LA312_165==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==TIMEPERIOD_SECONDS) ) {
                        int LA312_686 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 686, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_165==TIMEPERIOD_SECOND) ) {
                        int LA312_687 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 687, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_165==TIMEPERIOD_SEC) ) {
                        int LA312_688 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 688, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_165==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_165==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_165==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 165, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA312_166 = input.LA(3);
                    if ( (LA312_166==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==TIMEPERIOD_SECONDS) ) {
                        int LA312_735 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 735, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_166==TIMEPERIOD_SECOND) ) {
                        int LA312_736 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 736, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_166==TIMEPERIOD_SEC) ) {
                        int LA312_737 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 737, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_166==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_166==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_166==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 166, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA312_167 = input.LA(3);
                    if ( (LA312_167==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==TIMEPERIOD_SECONDS) ) {
                        int LA312_790 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 790, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_167==TIMEPERIOD_SECOND) ) {
                        int LA312_791 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 791, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_167==TIMEPERIOD_SEC) ) {
                        int LA312_792 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 792, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_167==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_167==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_167==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 167, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA312_168 = input.LA(3);
                    if ( (LA312_168==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==TIMEPERIOD_SECONDS) ) {
                        int LA312_841 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 841, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_168==TIMEPERIOD_SECOND) ) {
                        int LA312_842 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 842, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_168==TIMEPERIOD_SEC) ) {
                        int LA312_843 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt312=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt312=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 843, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA312_168==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt312=3;
                    }
                    else if ( (LA312_168==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else if ( (LA312_168==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt312=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 168, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==NUM_INT) ) {
                int LA312_4 = input.LA(2);
                if ( (LA312_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==TIMEPERIOD_SECONDS) ) {
                    int LA312_190 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 190, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_4==TIMEPERIOD_SECOND) ) {
                    int LA312_191 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 191, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_4==TIMEPERIOD_SEC) ) {
                    int LA312_192 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 192, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else if ( (LA312_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else if ( (LA312_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==NUM_LONG) ) {
                int LA312_5 = input.LA(2);
                if ( (LA312_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else if ( (LA312_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==TIMEPERIOD_SECONDS) ) {
                    int LA312_243 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 243, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_5==TIMEPERIOD_SECOND) ) {
                    int LA312_244 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 244, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_5==TIMEPERIOD_SEC) ) {
                    int LA312_245 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 245, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else if ( (LA312_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==NUM_FLOAT) ) {
                int LA312_6 = input.LA(2);
                if ( (LA312_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else if ( (LA312_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==TIMEPERIOD_SECONDS) ) {
                    int LA312_299 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 299, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_6==TIMEPERIOD_SECOND) ) {
                    int LA312_300 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 300, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_6==TIMEPERIOD_SEC) ) {
                    int LA312_301 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 301, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else if ( (LA312_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==NUM_DOUBLE) ) {
                int LA312_7 = input.LA(2);
                if ( (LA312_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else if ( (LA312_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==TIMEPERIOD_SECONDS) ) {
                    int LA312_356 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 356, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_7==TIMEPERIOD_SECOND) ) {
                    int LA312_357 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 357, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_7==TIMEPERIOD_SEC) ) {
                    int LA312_358 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 358, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==IDENT) ) {
                int LA312_8 = input.LA(2);
                if ( (LA312_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_SECONDS) ) {
                    int LA312_373 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 373, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_8==TIMEPERIOD_SECOND) ) {
                    int LA312_374 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 374, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_8==TIMEPERIOD_SEC) ) {
                    int LA312_375 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 375, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else if ( (LA312_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==QUESTION) ) {
                int LA312_9 = input.LA(2);
                if ( (LA312_9==TIMEPERIOD_SECONDS) ) {
                    int LA312_424 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 424, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_9==TIMEPERIOD_SECOND) ) {
                    int LA312_425 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 425, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_9==TIMEPERIOD_SEC) ) {
                    int LA312_426 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt312=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt312=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 426, input);
                        throw nvae;
                    }
                }
                else if ( (LA312_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt312=7;
                }
                else if ( (LA312_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt312=6;
                }
                else if ( (LA312_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt312=4;
                }
                else if ( (LA312_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt312=3;
                }
                else if ( (LA312_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else if ( (LA312_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt312=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt312=3;
            }
            else if ( (LA312_0==STAR) ) {
                int LA312_74 = input.LA(2);
                if ( (LA312_74==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt312=5;
                }
                else if ( (LA312_74==RPAREN||LA312_74==COMMA) ) {
                    alt312=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 312, 74, input);
                    throw nvae;
                }
            }
            else if ( (LA312_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt312=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);
                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime11930);
                    lastWeekdayOperand821=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand821.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime11941);
                    timePeriod822=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod822.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime11952);
                    expressionQualifyable823=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable823.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime11963);
                    rangeOperand824=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand824.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime11975);
                    frequencyOperand825=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand825.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime11986);
                    lastOperator826=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator826.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime11998);
                    weekDayOperator827=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator827.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime12010);
                    numericParameterList828=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList828.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime12015);
                    numberSetStar829=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar829.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand830 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime831 = null;
        try {
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==LAST) ) {
                int LA313_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt313=1;
                }
                else if ( (true) ) {
                    alt313=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 313, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA313_0==WINDOW||LA313_0==BETWEEN||LA313_0==ESCAPE||(LA313_0>=NOT_EXPR && LA313_0<=EVERY_EXPR)||LA313_0==WHERE||(LA313_0>=SUM && LA313_0<=COUNT)||LA313_0==CASE||LA313_0==OUTER||(LA313_0>=JOIN && LA313_0<=FULL)||(LA313_0>=EVENTS && LA313_0<=FIRST)||(LA313_0>=UNIDIRECTIONAL && LA313_0<=CURRENT_TIMESTAMP)||(LA313_0>=SNAPSHOT && LA313_0<=INDEX)||(LA313_0>=BOOLEAN_TRUE && LA313_0<=VALUE_NULL)||(LA313_0>=DEFINE && LA313_0<=AFTER)||LA313_0==WHILE||(LA313_0>=MERGE && LA313_0<=MATCHED)||LA313_0==NEWKW||LA313_0==CONTEXT||LA313_0==NUM_DOUBLE||(LA313_0>=IDENT && LA313_0<=LCURLY)||LA313_0==LPAREN||LA313_0==LBRACK||LA313_0==STAR||(LA313_0>=PLUS && LA313_0<=QUESTION)||(LA313_0>=STRING_LITERAL && LA313_0<=QUOTED_STRING_LITERAL)||LA313_0==MINUS||LA313_0==NUM_INT||(LA313_0>=TICKED_STRING_LITERAL && LA313_0<=NUM_FLOAT)) ) {
                alt313=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);
                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast12035);
                    lastOperand830=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand830.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12040);
                    expressionWithTime831=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime831.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression832 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable12051);
            expression832=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression832.getTree());
            int alt314=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt314=1;
                    }
                    break;
                case DESC:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt314=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt314=5;
                    }
                    break;
            }
            switch (alt314) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable12056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable12060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR833=null;
        CommonTree STAR833_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR833=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar12129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR833);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW834=null;
        CommonTree LW834_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW834=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand12149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW834_tree = (CommonTree)adaptor.create(LW834);
            root_0 = (CommonTree)adaptor.becomeRoot(LW834_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST835=null;
        CommonTree LAST835_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST835=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand12162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST835_tree = (CommonTree)adaptor.create(LAST835);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST835_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR836=null;
        Token DIV837=null;
        EsperEPL2GrammarParser.number_return number838 = null;
        EsperEPL2GrammarParser.substitution_return substitution839 = null;
        CommonTree i_tree=null;
        CommonTree STAR836_tree=null;
        CommonTree DIV837_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR836=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand12174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR836);
            DIV837=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand12176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV837);
            int alt315=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt315=1;
                }
                break;
            case IDENT:
                {
                alt315=2;
                }
                break;
            case QUESTION:
                {
                alt315=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);
                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand12179);
                    number838=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number838.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand12183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand12185);
                    substitution839=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution839.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON842=null;
        EsperEPL2GrammarParser.number_return number840 = null;
        EsperEPL2GrammarParser.substitution_return substitution841 = null;
        EsperEPL2GrammarParser.number_return number843 = null;
        EsperEPL2GrammarParser.substitution_return substitution844 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON842_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt316=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt316=1;
                }
                break;
            case IDENT:
                {
                alt316=2;
                }
                break;
            case QUESTION:
                {
                alt316=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);
                throw nvae;
            }
            switch (alt316) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12234);
                    number840=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number840.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12240);
                    substitution841=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution841.getTree());
                    }
                    break;
            }
            COLON842=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand12243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON842);
            int alt317=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt317=1;
                }
                break;
            case IDENT:
                {
                alt317=2;
                }
                break;
            case QUESTION:
                {
                alt317=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);
                throw nvae;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12246);
                    number843=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number843.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12252);
                    substitution844=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution844.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST847=null;
        EsperEPL2GrammarParser.number_return number845 = null;
        EsperEPL2GrammarParser.substitution_return substitution846 = null;
        CommonTree i_tree=null;
        CommonTree LAST847_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt318=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt318=1;
                }
                break;
            case IDENT:
                {
                alt318=2;
                }
                break;
            case QUESTION:
                {
                alt318=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator12366);
                    number845=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number845.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator12370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator12372);
                    substitution846=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution846.getTree());
                    }
                    break;
            }
            LAST847=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator12375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST847);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY850=null;
        EsperEPL2GrammarParser.number_return number848 = null;
        EsperEPL2GrammarParser.substitution_return substitution849 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY850_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt319=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt319=1;
                }
                break;
            case IDENT:
                {
                alt319=2;
                }
                break;
            case QUESTION:
                {
                alt319=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator12423);
                    number848=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number848.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator12427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator12429);
                    substitution849=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution849.getTree());
                    }
                    break;
            }
            WEEKDAY850=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator12432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY850);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK851=null;
        Token COMMA853=null;
        Token RBRACK855=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter852 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter854 = null;
        CommonTree LBRACK851_tree=null;
        CommonTree COMMA853_tree=null;
        CommonTree RBRACK855_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK851=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList12479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK851);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList12481);
            numericListParameter852=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter852.getTree());
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);
                if ( (LA320_0==COMMA) ) {
                    alt320=1;
                }
                switch (alt320) {
            	case 1 :
            	    {
            	    COMMA853=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList12484); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA853);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList12486);
            	    numericListParameter854=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter854.getTree());
            	    }
            	    break;
            	default :
            	    break loop320;
                }
            } while (true);
            RBRACK855=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList12490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK855);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand856 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand857 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant858 = null;
        try {
            int alt321=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA321_1 = input.LA(2);
                if ( (LA321_1==COMMA||LA321_1==RBRACK) ) {
                    alt321=3;
                }
                else if ( (LA321_1==COLON) ) {
                    alt321=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 321, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA321_2 = input.LA(2);
                if ( (LA321_2==COMMA||LA321_2==RBRACK) ) {
                    alt321=3;
                }
                else if ( (LA321_2==COLON) ) {
                    alt321=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 321, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA321_3 = input.LA(2);
                if ( (LA321_3==COLON) ) {
                    alt321=1;
                }
                else if ( (LA321_3==COMMA||LA321_3==RBRACK) ) {
                    alt321=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 321, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA321_4 = input.LA(2);
                if ( (LA321_4==COLON) ) {
                    alt321=1;
                }
                else if ( (LA321_4==COMMA||LA321_4==RBRACK) ) {
                    alt321=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 321, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt321=1;
                }
                break;
            case STAR:
                {
                alt321=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt321=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter12512);
                    rangeOperand856=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand856.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter12518);
                    frequencyOperand857=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand857.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter12523);
                    numberconstant858=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant858.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT860=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic859 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic861 = null;
        CommonTree DOT860_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12539);
            eventPropertyAtomic859=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic859.getTree());
            loop322:
            do {
                int alt322=2;
                int LA322_0 = input.LA(1);
                if ( (LA322_0==DOT) ) {
                    alt322=1;
                }
                switch (alt322) {
            	case 1 :
            	    {
            	    DOT860=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty12542); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT860);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12544);
            	    eventPropertyAtomic861=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic861.getTree());
            	    }
            	    break;
            	default :
            	    break loop322;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK863=null;
        Token RPAREN864=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent862 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK863_tree=null;
        CommonTree RPAREN864_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12570);
            eventPropertyIdent862=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent862.getTree());
            int alt326=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt326=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt326=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt326=3;
                    }
                    break;
            }
            switch (alt326) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic12579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic12583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK863=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic12585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK863);
                    int alt323=2;
                    int LA323_0 = input.LA(1);
                    if ( (LA323_0==QUESTION) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic12604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt324=2;
                    int LA324_0 = input.LA(1);
                    if ( (LA324_0==STRING_LITERAL) ) {
                        alt324=1;
                    }
                    else if ( (LA324_0==QUOTED_STRING_LITERAL) ) {
                        alt324=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 324, 0, input);
                        throw nvae;
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12609); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12615); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN864=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic12618); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN864);
                    int alt325=2;
                    int LA325_0 = input.LA(1);
                    if ( (LA325_0==QUESTION) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12623); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR865=null;
        Token DOT866=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR865_tree=null;
        CommonTree DOT866_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12760);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);
                if ( (LA328_0==ESCAPECHAR) ) {
                    alt328=1;
                }
                switch (alt328) {
            	case 1 :
            	    {
            	    ESCAPECHAR865=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent12772); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR865);
            	    DOT866=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent12774); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT866);
            	    int alt327=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt327=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA327_5 = input.LA(2);
            	            if ( (LA327_5==EOF||(LA327_5>=IN_SET && LA327_5<=NOT_EXPR)||(LA327_5>=WHERE && LA327_5<=AS)||(LA327_5>=ELSE && LA327_5<=FROM)||(LA327_5>=INNER && LA327_5<=FULL)||LA327_5==IS||(LA327_5>=GROUP && LA327_5<=HAVING)||LA327_5==ALL||LA327_5==OUTPUT||LA327_5==INSERT||(LA327_5>=ORDER && LA327_5<=DESC)||LA327_5==PATTERN||(LA327_5>=TIMEPERIOD_SEC && LA327_5<=TIMEPERIOD_SECONDS)||LA327_5==ROW_LIMIT_EXPR||(LA327_5>=MATCH_RECOGNIZE && LA327_5<=MEASURES)||(LA327_5>=AFTER && LA327_5<=FOR)||(LA327_5>=RCURLY && LA327_5<=RPAREN)||(LA327_5>=COMMA && LA327_5<=COLON)||(LA327_5>=BAND && LA327_5<=MOD)||LA327_5==FOLLOWMAX_END||LA327_5==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA327_25 = input.LA(2);
            	            if ( (LA327_25==LPAREN) ) {
            	                int LA327_177 = input.LA(3);
            	                if ( ((LA327_177>=STRING_LITERAL && LA327_177<=QUOTED_STRING_LITERAL)) ) {
            	                    alt327=1;
            	                }
            	            }
            	            else if ( (LA327_25==EOF||(LA327_25>=IN_SET && LA327_25<=NOT_EXPR)||(LA327_25>=WHERE && LA327_25<=AS)||(LA327_25>=ELSE && LA327_25<=FROM)||(LA327_25>=INNER && LA327_25<=FULL)||LA327_25==IS||(LA327_25>=GROUP && LA327_25<=HAVING)||LA327_25==ALL||LA327_25==OUTPUT||LA327_25==INSERT||(LA327_25>=ORDER && LA327_25<=DESC)||LA327_25==PATTERN||(LA327_25>=TIMEPERIOD_SEC && LA327_25<=TIMEPERIOD_SECONDS)||LA327_25==ROW_LIMIT_EXPR||(LA327_25>=MATCH_RECOGNIZE && LA327_25<=MEASURES)||(LA327_25>=AFTER && LA327_25<=FOR)||LA327_25==RCURLY||LA327_25==RPAREN||(LA327_25>=COMMA && LA327_25<=COLON)||(LA327_25>=BAND && LA327_25<=MOD)||LA327_25==FOLLOWMAX_END||LA327_25==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA327_40 = input.LA(2);
            	            if ( (LA327_40==EOF||(LA327_40>=IN_SET && LA327_40<=NOT_EXPR)||(LA327_40>=WHERE && LA327_40<=AS)||(LA327_40>=ELSE && LA327_40<=FROM)||(LA327_40>=INNER && LA327_40<=FULL)||LA327_40==IS||(LA327_40>=GROUP && LA327_40<=HAVING)||LA327_40==ALL||LA327_40==OUTPUT||LA327_40==INSERT||(LA327_40>=ORDER && LA327_40<=DESC)||LA327_40==PATTERN||(LA327_40>=TIMEPERIOD_SEC && LA327_40<=TIMEPERIOD_SECONDS)||LA327_40==ROW_LIMIT_EXPR||(LA327_40>=MATCH_RECOGNIZE && LA327_40<=MEASURES)||(LA327_40>=AFTER && LA327_40<=FOR)||(LA327_40>=RCURLY && LA327_40<=RPAREN)||(LA327_40>=COMMA && LA327_40<=COLON)||(LA327_40>=BAND && LA327_40<=MOD)||LA327_40==FOLLOWMAX_END||LA327_40==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA327_41 = input.LA(2);
            	            if ( (LA327_41==EOF||(LA327_41>=IN_SET && LA327_41<=NOT_EXPR)||(LA327_41>=WHERE && LA327_41<=AS)||(LA327_41>=ELSE && LA327_41<=FROM)||(LA327_41>=INNER && LA327_41<=FULL)||LA327_41==IS||(LA327_41>=GROUP && LA327_41<=HAVING)||LA327_41==ALL||LA327_41==OUTPUT||LA327_41==INSERT||(LA327_41>=ORDER && LA327_41<=DESC)||LA327_41==PATTERN||(LA327_41>=TIMEPERIOD_SEC && LA327_41<=TIMEPERIOD_SECONDS)||LA327_41==ROW_LIMIT_EXPR||(LA327_41>=MATCH_RECOGNIZE && LA327_41<=MEASURES)||(LA327_41>=AFTER && LA327_41<=FOR)||(LA327_41>=RCURLY && LA327_41<=RPAREN)||(LA327_41>=COMMA && LA327_41<=COLON)||(LA327_41>=BAND && LA327_41<=MOD)||LA327_41==FOLLOWMAX_END||LA327_41==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA327_43 = input.LA(2);
            	            if ( (LA327_43==EOF||(LA327_43>=IN_SET && LA327_43<=NOT_EXPR)||(LA327_43>=WHERE && LA327_43<=AS)||(LA327_43>=ELSE && LA327_43<=FROM)||(LA327_43>=INNER && LA327_43<=FULL)||LA327_43==IS||(LA327_43>=GROUP && LA327_43<=HAVING)||LA327_43==ALL||LA327_43==OUTPUT||LA327_43==INSERT||(LA327_43>=ORDER && LA327_43<=DESC)||LA327_43==PATTERN||(LA327_43>=TIMEPERIOD_SEC && LA327_43<=TIMEPERIOD_SECONDS)||LA327_43==ROW_LIMIT_EXPR||(LA327_43>=MATCH_RECOGNIZE && LA327_43<=MEASURES)||(LA327_43>=AFTER && LA327_43<=FOR)||(LA327_43>=RCURLY && LA327_43<=RPAREN)||(LA327_43>=COMMA && LA327_43<=COLON)||(LA327_43>=BAND && LA327_43<=MOD)||LA327_43==FOLLOWMAX_END||LA327_43==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA327_44 = input.LA(2);
            	            if ( (LA327_44==EOF||(LA327_44>=IN_SET && LA327_44<=NOT_EXPR)||(LA327_44>=WHERE && LA327_44<=AS)||(LA327_44>=ELSE && LA327_44<=FROM)||(LA327_44>=INNER && LA327_44<=FULL)||LA327_44==IS||(LA327_44>=GROUP && LA327_44<=HAVING)||LA327_44==ALL||LA327_44==OUTPUT||LA327_44==INSERT||(LA327_44>=ORDER && LA327_44<=DESC)||(LA327_44>=TIMEPERIOD_SEC && LA327_44<=TIMEPERIOD_SECONDS)||LA327_44==ROW_LIMIT_EXPR||(LA327_44>=MATCH_RECOGNIZE && LA327_44<=MEASURES)||(LA327_44>=AFTER && LA327_44<=FOR)||(LA327_44>=RCURLY && LA327_44<=RPAREN)||(LA327_44>=COMMA && LA327_44<=COLON)||(LA327_44>=BAND && LA327_44<=MOD)||LA327_44==FOLLOWMAX_END||LA327_44==ESCAPECHAR) ) {
            	                alt327=1;
            	            }
            	            else if ( (LA327_44==PATTERN) ) {
            	                int LA327_492 = input.LA(3);
            	                if ( (LA327_492==LPAREN) ) {
            	                    alt327=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt327) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12778);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop328;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT867=null;
        Token COUNT868=null;
        Token ESCAPE869=null;
        Token EVERY_EXPR870=null;
        Token SUM871=null;
        Token AVG872=null;
        Token MAX873=null;
        Token MIN874=null;
        Token COALESCE875=null;
        Token MEDIAN876=null;
        Token STDDEV877=null;
        Token AVEDEV878=null;
        Token EVENTS879=null;
        Token FIRST880=null;
        Token LAST881=null;
        Token WHILE882=null;
        Token MERGE883=null;
        Token MATCHED884=null;
        Token UNIDIRECTIONAL885=null;
        Token RETAINUNION886=null;
        Token RETAININTERSECTION887=null;
        Token UNTIL888=null;
        Token PATTERN889=null;
        Token SQL890=null;
        Token METADATASQL891=null;
        Token PREVIOUS892=null;
        Token PREVIOUSTAIL893=null;
        Token PRIOR894=null;
        Token WEEKDAY895=null;
        Token LW896=null;
        Token INSTANCEOF897=null;
        Token TYPEOF898=null;
        Token CAST899=null;
        Token SNAPSHOT900=null;
        Token VARIABLE901=null;
        Token INDEX902=null;
        Token WINDOW903=null;
        Token LEFT904=null;
        Token RIGHT905=null;
        Token OUTER906=null;
        Token FULL907=null;
        Token JOIN908=null;
        Token DEFINE909=null;
        Token PARTITION910=null;
        Token MATCHES911=null;
        Token CONTEXT912=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT867_tree=null;
        CommonTree COUNT868_tree=null;
        CommonTree ESCAPE869_tree=null;
        CommonTree EVERY_EXPR870_tree=null;
        CommonTree SUM871_tree=null;
        CommonTree AVG872_tree=null;
        CommonTree MAX873_tree=null;
        CommonTree MIN874_tree=null;
        CommonTree COALESCE875_tree=null;
        CommonTree MEDIAN876_tree=null;
        CommonTree STDDEV877_tree=null;
        CommonTree AVEDEV878_tree=null;
        CommonTree EVENTS879_tree=null;
        CommonTree FIRST880_tree=null;
        CommonTree LAST881_tree=null;
        CommonTree WHILE882_tree=null;
        CommonTree MERGE883_tree=null;
        CommonTree MATCHED884_tree=null;
        CommonTree UNIDIRECTIONAL885_tree=null;
        CommonTree RETAINUNION886_tree=null;
        CommonTree RETAININTERSECTION887_tree=null;
        CommonTree UNTIL888_tree=null;
        CommonTree PATTERN889_tree=null;
        CommonTree SQL890_tree=null;
        CommonTree METADATASQL891_tree=null;
        CommonTree PREVIOUS892_tree=null;
        CommonTree PREVIOUSTAIL893_tree=null;
        CommonTree PRIOR894_tree=null;
        CommonTree WEEKDAY895_tree=null;
        CommonTree LW896_tree=null;
        CommonTree INSTANCEOF897_tree=null;
        CommonTree TYPEOF898_tree=null;
        CommonTree CAST899_tree=null;
        CommonTree SNAPSHOT900_tree=null;
        CommonTree VARIABLE901_tree=null;
        CommonTree INDEX902_tree=null;
        CommonTree WINDOW903_tree=null;
        CommonTree LEFT904_tree=null;
        CommonTree RIGHT905_tree=null;
        CommonTree OUTER906_tree=null;
        CommonTree FULL907_tree=null;
        CommonTree JOIN908_tree=null;
        CommonTree DEFINE909_tree=null;
        CommonTree PARTITION910_tree=null;
        CommonTree MATCHES911_tree=null;
        CommonTree CONTEXT912_tree=null;
        try {
            int alt329=48;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt329=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt329=2;
                }
                break;
            case AT:
                {
                alt329=3;
                }
                break;
            case COUNT:
                {
                alt329=4;
                }
                break;
            case ESCAPE:
                {
                alt329=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt329=6;
                }
                break;
            case SUM:
                {
                alt329=7;
                }
                break;
            case AVG:
                {
                alt329=8;
                }
                break;
            case MAX:
                {
                alt329=9;
                }
                break;
            case MIN:
                {
                alt329=10;
                }
                break;
            case COALESCE:
                {
                alt329=11;
                }
                break;
            case MEDIAN:
                {
                alt329=12;
                }
                break;
            case STDDEV:
                {
                alt329=13;
                }
                break;
            case AVEDEV:
                {
                alt329=14;
                }
                break;
            case EVENTS:
                {
                alt329=15;
                }
                break;
            case FIRST:
                {
                alt329=16;
                }
                break;
            case LAST:
                {
                alt329=17;
                }
                break;
            case WHILE:
                {
                alt329=18;
                }
                break;
            case MERGE:
                {
                alt329=19;
                }
                break;
            case MATCHED:
                {
                alt329=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt329=21;
                }
                break;
            case RETAINUNION:
                {
                alt329=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt329=23;
                }
                break;
            case UNTIL:
                {
                alt329=24;
                }
                break;
            case PATTERN:
                {
                alt329=25;
                }
                break;
            case SQL:
                {
                alt329=26;
                }
                break;
            case METADATASQL:
                {
                alt329=27;
                }
                break;
            case PREVIOUS:
                {
                alt329=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt329=29;
                }
                break;
            case PRIOR:
                {
                alt329=30;
                }
                break;
            case WEEKDAY:
                {
                alt329=31;
                }
                break;
            case LW:
                {
                alt329=32;
                }
                break;
            case INSTANCEOF:
                {
                alt329=33;
                }
                break;
            case TYPEOF:
                {
                alt329=34;
                }
                break;
            case CAST:
                {
                alt329=35;
                }
                break;
            case SNAPSHOT:
                {
                alt329=36;
                }
                break;
            case VARIABLE:
                {
                alt329=37;
                }
                break;
            case INDEX:
                {
                alt329=38;
                }
                break;
            case WINDOW:
                {
                alt329=39;
                }
                break;
            case LEFT:
                {
                alt329=40;
                }
                break;
            case RIGHT:
                {
                alt329=41;
                }
                break;
            case OUTER:
                {
                alt329=42;
                }
                break;
            case FULL:
                {
                alt329=43;
                }
                break;
            case JOIN:
                {
                alt329=44;
                }
                break;
            case DEFINE:
                {
                alt329=45;
                }
                break;
            case PARTITION:
                {
                alt329=46;
                }
                break;
            case MATCHES:
                {
                alt329=47;
                }
                break;
            case CONTEXT:
                {
                alt329=48;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 0, input);
                throw nvae;
            }
            switch (alt329) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent12817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT867=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent12833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT867_tree = (CommonTree)adaptor.create(AT867);
                    adaptor.addChild(root_0, AT867_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT868=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent12840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT868_tree = (CommonTree)adaptor.create(COUNT868);
                    adaptor.addChild(root_0, COUNT868_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE869=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent12847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE869_tree = (CommonTree)adaptor.create(ESCAPE869);
                    adaptor.addChild(root_0, ESCAPE869_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR870=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR870_tree = (CommonTree)adaptor.create(EVERY_EXPR870);
                    adaptor.addChild(root_0, EVERY_EXPR870_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM871=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent12865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM871_tree = (CommonTree)adaptor.create(SUM871);
                    adaptor.addChild(root_0, SUM871_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG872=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent12872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG872_tree = (CommonTree)adaptor.create(AVG872);
                    adaptor.addChild(root_0, AVG872_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX873=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent12879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX873_tree = (CommonTree)adaptor.create(MAX873);
                    adaptor.addChild(root_0, MAX873_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN874=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent12886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN874_tree = (CommonTree)adaptor.create(MIN874);
                    adaptor.addChild(root_0, MIN874_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE875=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent12893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE875_tree = (CommonTree)adaptor.create(COALESCE875);
                    adaptor.addChild(root_0, COALESCE875_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN876=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent12900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN876_tree = (CommonTree)adaptor.create(MEDIAN876);
                    adaptor.addChild(root_0, MEDIAN876_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV877=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent12907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV877_tree = (CommonTree)adaptor.create(STDDEV877);
                    adaptor.addChild(root_0, STDDEV877_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV878=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent12914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV878_tree = (CommonTree)adaptor.create(AVEDEV878);
                    adaptor.addChild(root_0, AVEDEV878_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS879=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent12921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS879_tree = (CommonTree)adaptor.create(EVENTS879);
                    adaptor.addChild(root_0, EVENTS879_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST880=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent12928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST880_tree = (CommonTree)adaptor.create(FIRST880);
                    adaptor.addChild(root_0, FIRST880_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST881=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent12935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST881_tree = (CommonTree)adaptor.create(LAST881);
                    adaptor.addChild(root_0, LAST881_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE882=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent12942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE882_tree = (CommonTree)adaptor.create(WHILE882);
                    adaptor.addChild(root_0, WHILE882_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE883=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent12949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE883_tree = (CommonTree)adaptor.create(MERGE883);
                    adaptor.addChild(root_0, MERGE883_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED884=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent12956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED884_tree = (CommonTree)adaptor.create(MATCHED884);
                    adaptor.addChild(root_0, MATCHED884_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL885=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL885_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL885);
                    adaptor.addChild(root_0, UNIDIRECTIONAL885_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION886=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent12970); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION886_tree = (CommonTree)adaptor.create(RETAINUNION886);
                    adaptor.addChild(root_0, RETAINUNION886_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION887=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION887_tree = (CommonTree)adaptor.create(RETAININTERSECTION887);
                    adaptor.addChild(root_0, RETAININTERSECTION887_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL888=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent12984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL888_tree = (CommonTree)adaptor.create(UNTIL888);
                    adaptor.addChild(root_0, UNTIL888_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN889=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent12991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN889_tree = (CommonTree)adaptor.create(PATTERN889);
                    adaptor.addChild(root_0, PATTERN889_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL890=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent12998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL890_tree = (CommonTree)adaptor.create(SQL890);
                    adaptor.addChild(root_0, SQL890_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL891=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent13005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL891_tree = (CommonTree)adaptor.create(METADATASQL891);
                    adaptor.addChild(root_0, METADATASQL891_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS892=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent13012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS892_tree = (CommonTree)adaptor.create(PREVIOUS892);
                    adaptor.addChild(root_0, PREVIOUS892_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL893=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL893_tree = (CommonTree)adaptor.create(PREVIOUSTAIL893);
                    adaptor.addChild(root_0, PREVIOUSTAIL893_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR894=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent13026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR894_tree = (CommonTree)adaptor.create(PRIOR894);
                    adaptor.addChild(root_0, PRIOR894_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY895=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent13033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY895_tree = (CommonTree)adaptor.create(WEEKDAY895);
                    adaptor.addChild(root_0, WEEKDAY895_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW896=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent13040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW896_tree = (CommonTree)adaptor.create(LW896);
                    adaptor.addChild(root_0, LW896_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF897=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent13047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF897_tree = (CommonTree)adaptor.create(INSTANCEOF897);
                    adaptor.addChild(root_0, INSTANCEOF897_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF898=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent13054); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF898_tree = (CommonTree)adaptor.create(TYPEOF898);
                    adaptor.addChild(root_0, TYPEOF898_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST899=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent13061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST899_tree = (CommonTree)adaptor.create(CAST899);
                    adaptor.addChild(root_0, CAST899_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT900=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent13068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT900_tree = (CommonTree)adaptor.create(SNAPSHOT900);
                    adaptor.addChild(root_0, SNAPSHOT900_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE901=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent13075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE901_tree = (CommonTree)adaptor.create(VARIABLE901);
                    adaptor.addChild(root_0, VARIABLE901_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX902=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent13084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX902_tree = (CommonTree)adaptor.create(INDEX902);
                    adaptor.addChild(root_0, INDEX902_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW903=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent13093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW903_tree = (CommonTree)adaptor.create(WINDOW903);
                    adaptor.addChild(root_0, WINDOW903_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT904=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent13100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT904_tree = (CommonTree)adaptor.create(LEFT904);
                    adaptor.addChild(root_0, LEFT904_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT905=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent13107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT905_tree = (CommonTree)adaptor.create(RIGHT905);
                    adaptor.addChild(root_0, RIGHT905_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER906=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent13114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER906_tree = (CommonTree)adaptor.create(OUTER906);
                    adaptor.addChild(root_0, OUTER906_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL907=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent13121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL907_tree = (CommonTree)adaptor.create(FULL907);
                    adaptor.addChild(root_0, FULL907_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN908=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent13128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN908_tree = (CommonTree)adaptor.create(JOIN908);
                    adaptor.addChild(root_0, JOIN908_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE909=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent13135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE909_tree = (CommonTree)adaptor.create(DEFINE909);
                    adaptor.addChild(root_0, DEFINE909_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION910=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent13142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION910_tree = (CommonTree)adaptor.create(PARTITION910);
                    adaptor.addChild(root_0, PARTITION910_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES911=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent13149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES911_tree = (CommonTree)adaptor.create(MATCHES911);
                    adaptor.addChild(root_0, MATCHES911_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT912=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent13156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT912_tree = (CommonTree)adaptor.create(CONTEXT912);
                    adaptor.addChild(root_0, CONTEXT912_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( (LA330_0==IDENT) ) {
                alt330=1;
            }
            else if ( (LA330_0==TICKED_STRING_LITERAL) ) {
                alt330=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);
                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr13177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT913=null;
        CommonTree t_tree=null;
        CommonTree IDENT913_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( (LA331_0==IDENT) ) {
                alt331=1;
            }
            else if ( (LA331_0==TICKED_STRING_LITERAL) ) {
                alt331=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);
                throw nvae;
            }
            switch (alt331) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT913=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent13200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT913_tree = (CommonTree)adaptor.create(IDENT913);
                    adaptor.addChild(root_0, IDENT913_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart914 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart915 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart916 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart917 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart918 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart919 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart920 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart921 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart922 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart923 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart924 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart925 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart926 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart927 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart928 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart929 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart930 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart931 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart932 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart933 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart934 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart935 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart936 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart937 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart938 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart939 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart940 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart941 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart942 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart943 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart944 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart945 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart946 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart947 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart948 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart949 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt360=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt360=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt360=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt360=2;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt360=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt360=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt360=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt360=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt360=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 360, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt360=8;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt360=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt360=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt360=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt360=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt360=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt360=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt360=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 360, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);
                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod13233);
                    yearPart914=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart914.getTree());
                    int alt332=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA332_24 = input.LA(3);
                                    if ( ((LA332_24>=TIMEPERIOD_MONTH && LA332_24<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA332_25 = input.LA(3);
                                    if ( ((LA332_25>=TIMEPERIOD_MONTH && LA332_25<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA332_26 = input.LA(3);
                                    if ( ((LA332_26>=TIMEPERIOD_MONTH && LA332_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA332_27 = input.LA(3);
                                    if ( ((LA332_27>=TIMEPERIOD_MONTH && LA332_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA332_28 = input.LA(3);
                                    if ( ((LA332_28>=TIMEPERIOD_MONTH && LA332_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA332_29 = input.LA(3);
                                    if ( ((LA332_29>=TIMEPERIOD_MONTH && LA332_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA332_30 = input.LA(3);
                                    if ( ((LA332_30>=TIMEPERIOD_MONTH && LA332_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA332_31 = input.LA(3);
                                    if ( ((LA332_31>=TIMEPERIOD_MONTH && LA332_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA332_3 = input.LA(2);
                            if ( ((LA332_3>=TIMEPERIOD_MONTH && LA332_3<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA332_4 = input.LA(2);
                            if ( ((LA332_4>=TIMEPERIOD_MONTH && LA332_4<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA332_5 = input.LA(2);
                            if ( ((LA332_5>=TIMEPERIOD_MONTH && LA332_5<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA332_6 = input.LA(2);
                            if ( ((LA332_6>=TIMEPERIOD_MONTH && LA332_6<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA332_7 = input.LA(2);
                            if ( ((LA332_7>=TIMEPERIOD_MONTH && LA332_7<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA332_8 = input.LA(2);
                            if ( ((LA332_8>=TIMEPERIOD_MONTH && LA332_8<=TIMEPERIOD_MONTHS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod13235);
                            monthPart915=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart915.getTree());
                            }
                            break;
                    }
                    int alt333=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA333_24 = input.LA(3);
                                    if ( ((LA333_24>=TIMEPERIOD_WEEK && LA333_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA333_25 = input.LA(3);
                                    if ( ((LA333_25>=TIMEPERIOD_WEEK && LA333_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA333_26 = input.LA(3);
                                    if ( ((LA333_26>=TIMEPERIOD_WEEK && LA333_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA333_27 = input.LA(3);
                                    if ( ((LA333_27>=TIMEPERIOD_WEEK && LA333_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA333_28 = input.LA(3);
                                    if ( ((LA333_28>=TIMEPERIOD_WEEK && LA333_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA333_29 = input.LA(3);
                                    if ( ((LA333_29>=TIMEPERIOD_WEEK && LA333_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA333_30 = input.LA(3);
                                    if ( ((LA333_30>=TIMEPERIOD_WEEK && LA333_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA333_31 = input.LA(3);
                                    if ( ((LA333_31>=TIMEPERIOD_WEEK && LA333_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt333=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA333_3 = input.LA(2);
                            if ( ((LA333_3>=TIMEPERIOD_WEEK && LA333_3<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA333_4 = input.LA(2);
                            if ( ((LA333_4>=TIMEPERIOD_WEEK && LA333_4<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA333_5 = input.LA(2);
                            if ( ((LA333_5>=TIMEPERIOD_WEEK && LA333_5<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA333_6 = input.LA(2);
                            if ( ((LA333_6>=TIMEPERIOD_WEEK && LA333_6<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA333_7 = input.LA(2);
                            if ( ((LA333_7>=TIMEPERIOD_WEEK && LA333_7<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA333_8 = input.LA(2);
                            if ( ((LA333_8>=TIMEPERIOD_WEEK && LA333_8<=TIMEPERIOD_WEEKS)) ) {
                                alt333=1;
                            }
                            }
                            break;
                    }
                    switch (alt333) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13238);
                            weekPart916=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart916.getTree());
                            }
                            break;
                    }
                    int alt334=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_24 = input.LA(3);
                                    if ( ((LA334_24>=TIMEPERIOD_DAY && LA334_24<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_25 = input.LA(3);
                                    if ( ((LA334_25>=TIMEPERIOD_DAY && LA334_25<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_26 = input.LA(3);
                                    if ( ((LA334_26>=TIMEPERIOD_DAY && LA334_26<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_27 = input.LA(3);
                                    if ( ((LA334_27>=TIMEPERIOD_DAY && LA334_27<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_28 = input.LA(3);
                                    if ( ((LA334_28>=TIMEPERIOD_DAY && LA334_28<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_29 = input.LA(3);
                                    if ( ((LA334_29>=TIMEPERIOD_DAY && LA334_29<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_30 = input.LA(3);
                                    if ( ((LA334_30>=TIMEPERIOD_DAY && LA334_30<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_31 = input.LA(3);
                                    if ( ((LA334_31>=TIMEPERIOD_DAY && LA334_31<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA334_3 = input.LA(2);
                            if ( ((LA334_3>=TIMEPERIOD_DAY && LA334_3<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA334_4 = input.LA(2);
                            if ( ((LA334_4>=TIMEPERIOD_DAY && LA334_4<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA334_5 = input.LA(2);
                            if ( ((LA334_5>=TIMEPERIOD_DAY && LA334_5<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA334_6 = input.LA(2);
                            if ( ((LA334_6>=TIMEPERIOD_DAY && LA334_6<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA334_7 = input.LA(2);
                            if ( ((LA334_7>=TIMEPERIOD_DAY && LA334_7<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA334_8 = input.LA(2);
                            if ( ((LA334_8>=TIMEPERIOD_DAY && LA334_8<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13241);
                            dayPart917=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart917.getTree());
                            }
                            break;
                    }
                    int alt335=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_24 = input.LA(3);
                                    if ( ((LA335_24>=TIMEPERIOD_HOUR && LA335_24<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_25 = input.LA(3);
                                    if ( ((LA335_25>=TIMEPERIOD_HOUR && LA335_25<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_26 = input.LA(3);
                                    if ( ((LA335_26>=TIMEPERIOD_HOUR && LA335_26<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_27 = input.LA(3);
                                    if ( ((LA335_27>=TIMEPERIOD_HOUR && LA335_27<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_28 = input.LA(3);
                                    if ( ((LA335_28>=TIMEPERIOD_HOUR && LA335_28<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_29 = input.LA(3);
                                    if ( ((LA335_29>=TIMEPERIOD_HOUR && LA335_29<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_30 = input.LA(3);
                                    if ( ((LA335_30>=TIMEPERIOD_HOUR && LA335_30<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_31 = input.LA(3);
                                    if ( ((LA335_31>=TIMEPERIOD_HOUR && LA335_31<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA335_3 = input.LA(2);
                            if ( ((LA335_3>=TIMEPERIOD_HOUR && LA335_3<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA335_4 = input.LA(2);
                            if ( ((LA335_4>=TIMEPERIOD_HOUR && LA335_4<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA335_5 = input.LA(2);
                            if ( ((LA335_5>=TIMEPERIOD_HOUR && LA335_5<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA335_6 = input.LA(2);
                            if ( ((LA335_6>=TIMEPERIOD_HOUR && LA335_6<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA335_7 = input.LA(2);
                            if ( ((LA335_7>=TIMEPERIOD_HOUR && LA335_7<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA335_8 = input.LA(2);
                            if ( ((LA335_8>=TIMEPERIOD_HOUR && LA335_8<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13244);
                            hourPart918=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart918.getTree());
                            }
                            break;
                    }
                    int alt336=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_24 = input.LA(3);
                                    if ( (LA336_24==MIN||(LA336_24>=TIMEPERIOD_MINUTE && LA336_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_25 = input.LA(3);
                                    if ( (LA336_25==MIN||(LA336_25>=TIMEPERIOD_MINUTE && LA336_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_26 = input.LA(3);
                                    if ( (LA336_26==MIN||(LA336_26>=TIMEPERIOD_MINUTE && LA336_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_27 = input.LA(3);
                                    if ( (LA336_27==MIN||(LA336_27>=TIMEPERIOD_MINUTE && LA336_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_28 = input.LA(3);
                                    if ( (LA336_28==MIN||(LA336_28>=TIMEPERIOD_MINUTE && LA336_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_29 = input.LA(3);
                                    if ( (LA336_29==MIN||(LA336_29>=TIMEPERIOD_MINUTE && LA336_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_30 = input.LA(3);
                                    if ( (LA336_30==MIN||(LA336_30>=TIMEPERIOD_MINUTE && LA336_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_31 = input.LA(3);
                                    if ( (LA336_31==MIN||(LA336_31>=TIMEPERIOD_MINUTE && LA336_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA336_3 = input.LA(2);
                            if ( (LA336_3==MIN||(LA336_3>=TIMEPERIOD_MINUTE && LA336_3<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA336_4 = input.LA(2);
                            if ( (LA336_4==MIN||(LA336_4>=TIMEPERIOD_MINUTE && LA336_4<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA336_5 = input.LA(2);
                            if ( (LA336_5==MIN||(LA336_5>=TIMEPERIOD_MINUTE && LA336_5<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA336_6 = input.LA(2);
                            if ( (LA336_6==MIN||(LA336_6>=TIMEPERIOD_MINUTE && LA336_6<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA336_7 = input.LA(2);
                            if ( (LA336_7==MIN||(LA336_7>=TIMEPERIOD_MINUTE && LA336_7<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA336_8 = input.LA(2);
                            if ( (LA336_8==MIN||(LA336_8>=TIMEPERIOD_MINUTE && LA336_8<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                    }
                    switch (alt336) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13247);
                            minutePart919=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart919.getTree());
                            }
                            break;
                    }
                    int alt337=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_24 = input.LA(3);
                                    if ( ((LA337_24>=TIMEPERIOD_SEC && LA337_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_25 = input.LA(3);
                                    if ( ((LA337_25>=TIMEPERIOD_SEC && LA337_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_26 = input.LA(3);
                                    if ( ((LA337_26>=TIMEPERIOD_SEC && LA337_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_27 = input.LA(3);
                                    if ( ((LA337_27>=TIMEPERIOD_SEC && LA337_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_28 = input.LA(3);
                                    if ( ((LA337_28>=TIMEPERIOD_SEC && LA337_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_29 = input.LA(3);
                                    if ( ((LA337_29>=TIMEPERIOD_SEC && LA337_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_30 = input.LA(3);
                                    if ( ((LA337_30>=TIMEPERIOD_SEC && LA337_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_31 = input.LA(3);
                                    if ( ((LA337_31>=TIMEPERIOD_SEC && LA337_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA337_3 = input.LA(2);
                            if ( ((LA337_3>=TIMEPERIOD_SEC && LA337_3<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA337_4 = input.LA(2);
                            if ( ((LA337_4>=TIMEPERIOD_SEC && LA337_4<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA337_5 = input.LA(2);
                            if ( ((LA337_5>=TIMEPERIOD_SEC && LA337_5<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA337_6 = input.LA(2);
                            if ( ((LA337_6>=TIMEPERIOD_SEC && LA337_6<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA337_7 = input.LA(2);
                            if ( ((LA337_7>=TIMEPERIOD_SEC && LA337_7<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA337_8 = input.LA(2);
                            if ( ((LA337_8>=TIMEPERIOD_SEC && LA337_8<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                    }
                    switch (alt337) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13250);
                            secondPart920=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart920.getTree());
                            }
                            break;
                    }
                    int alt338=2;
                    int LA338_0 = input.LA(1);
                    if ( (LA338_0==NUM_DOUBLE||LA338_0==IDENT||(LA338_0>=PLUS && LA338_0<=QUESTION)||LA338_0==MINUS||LA338_0==NUM_INT||(LA338_0>=NUM_LONG && LA338_0<=NUM_FLOAT)) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13253);
                            millisecondPart921=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart921.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod13259);
                    monthPart922=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart922.getTree());
                    int alt339=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_24 = input.LA(3);
                                    if ( ((LA339_24>=TIMEPERIOD_WEEK && LA339_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_25 = input.LA(3);
                                    if ( ((LA339_25>=TIMEPERIOD_WEEK && LA339_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_26 = input.LA(3);
                                    if ( ((LA339_26>=TIMEPERIOD_WEEK && LA339_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_27 = input.LA(3);
                                    if ( ((LA339_27>=TIMEPERIOD_WEEK && LA339_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_28 = input.LA(3);
                                    if ( ((LA339_28>=TIMEPERIOD_WEEK && LA339_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_29 = input.LA(3);
                                    if ( ((LA339_29>=TIMEPERIOD_WEEK && LA339_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_30 = input.LA(3);
                                    if ( ((LA339_30>=TIMEPERIOD_WEEK && LA339_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_31 = input.LA(3);
                                    if ( ((LA339_31>=TIMEPERIOD_WEEK && LA339_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA339_3 = input.LA(2);
                            if ( ((LA339_3>=TIMEPERIOD_WEEK && LA339_3<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA339_4 = input.LA(2);
                            if ( ((LA339_4>=TIMEPERIOD_WEEK && LA339_4<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA339_5 = input.LA(2);
                            if ( ((LA339_5>=TIMEPERIOD_WEEK && LA339_5<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA339_6 = input.LA(2);
                            if ( ((LA339_6>=TIMEPERIOD_WEEK && LA339_6<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA339_7 = input.LA(2);
                            if ( ((LA339_7>=TIMEPERIOD_WEEK && LA339_7<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA339_8 = input.LA(2);
                            if ( ((LA339_8>=TIMEPERIOD_WEEK && LA339_8<=TIMEPERIOD_WEEKS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                    }
                    switch (alt339) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13261);
                            weekPart923=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart923.getTree());
                            }
                            break;
                    }
                    int alt340=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA340_24 = input.LA(3);
                                    if ( ((LA340_24>=TIMEPERIOD_DAY && LA340_24<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA340_25 = input.LA(3);
                                    if ( ((LA340_25>=TIMEPERIOD_DAY && LA340_25<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA340_26 = input.LA(3);
                                    if ( ((LA340_26>=TIMEPERIOD_DAY && LA340_26<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA340_27 = input.LA(3);
                                    if ( ((LA340_27>=TIMEPERIOD_DAY && LA340_27<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA340_28 = input.LA(3);
                                    if ( ((LA340_28>=TIMEPERIOD_DAY && LA340_28<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA340_29 = input.LA(3);
                                    if ( ((LA340_29>=TIMEPERIOD_DAY && LA340_29<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA340_30 = input.LA(3);
                                    if ( ((LA340_30>=TIMEPERIOD_DAY && LA340_30<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA340_31 = input.LA(3);
                                    if ( ((LA340_31>=TIMEPERIOD_DAY && LA340_31<=TIMEPERIOD_DAYS)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA340_3 = input.LA(2);
                            if ( ((LA340_3>=TIMEPERIOD_DAY && LA340_3<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA340_4 = input.LA(2);
                            if ( ((LA340_4>=TIMEPERIOD_DAY && LA340_4<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA340_5 = input.LA(2);
                            if ( ((LA340_5>=TIMEPERIOD_DAY && LA340_5<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA340_6 = input.LA(2);
                            if ( ((LA340_6>=TIMEPERIOD_DAY && LA340_6<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA340_7 = input.LA(2);
                            if ( ((LA340_7>=TIMEPERIOD_DAY && LA340_7<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA340_8 = input.LA(2);
                            if ( ((LA340_8>=TIMEPERIOD_DAY && LA340_8<=TIMEPERIOD_DAYS)) ) {
                                alt340=1;
                            }
                            }
                            break;
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13264);
                            dayPart924=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart924.getTree());
                            }
                            break;
                    }
                    int alt341=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_24 = input.LA(3);
                                    if ( ((LA341_24>=TIMEPERIOD_HOUR && LA341_24<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_25 = input.LA(3);
                                    if ( ((LA341_25>=TIMEPERIOD_HOUR && LA341_25<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_26 = input.LA(3);
                                    if ( ((LA341_26>=TIMEPERIOD_HOUR && LA341_26<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_27 = input.LA(3);
                                    if ( ((LA341_27>=TIMEPERIOD_HOUR && LA341_27<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_28 = input.LA(3);
                                    if ( ((LA341_28>=TIMEPERIOD_HOUR && LA341_28<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_29 = input.LA(3);
                                    if ( ((LA341_29>=TIMEPERIOD_HOUR && LA341_29<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_30 = input.LA(3);
                                    if ( ((LA341_30>=TIMEPERIOD_HOUR && LA341_30<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_31 = input.LA(3);
                                    if ( ((LA341_31>=TIMEPERIOD_HOUR && LA341_31<=TIMEPERIOD_HOURS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA341_3 = input.LA(2);
                            if ( ((LA341_3>=TIMEPERIOD_HOUR && LA341_3<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA341_4 = input.LA(2);
                            if ( ((LA341_4>=TIMEPERIOD_HOUR && LA341_4<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA341_5 = input.LA(2);
                            if ( ((LA341_5>=TIMEPERIOD_HOUR && LA341_5<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA341_6 = input.LA(2);
                            if ( ((LA341_6>=TIMEPERIOD_HOUR && LA341_6<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA341_7 = input.LA(2);
                            if ( ((LA341_7>=TIMEPERIOD_HOUR && LA341_7<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA341_8 = input.LA(2);
                            if ( ((LA341_8>=TIMEPERIOD_HOUR && LA341_8<=TIMEPERIOD_HOURS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                    }
                    switch (alt341) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13267);
                            hourPart925=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart925.getTree());
                            }
                            break;
                    }
                    int alt342=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA342_24 = input.LA(3);
                                    if ( (LA342_24==MIN||(LA342_24>=TIMEPERIOD_MINUTE && LA342_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA342_25 = input.LA(3);
                                    if ( (LA342_25==MIN||(LA342_25>=TIMEPERIOD_MINUTE && LA342_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA342_26 = input.LA(3);
                                    if ( (LA342_26==MIN||(LA342_26>=TIMEPERIOD_MINUTE && LA342_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA342_27 = input.LA(3);
                                    if ( (LA342_27==MIN||(LA342_27>=TIMEPERIOD_MINUTE && LA342_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA342_28 = input.LA(3);
                                    if ( (LA342_28==MIN||(LA342_28>=TIMEPERIOD_MINUTE && LA342_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA342_29 = input.LA(3);
                                    if ( (LA342_29==MIN||(LA342_29>=TIMEPERIOD_MINUTE && LA342_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA342_30 = input.LA(3);
                                    if ( (LA342_30==MIN||(LA342_30>=TIMEPERIOD_MINUTE && LA342_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA342_31 = input.LA(3);
                                    if ( (LA342_31==MIN||(LA342_31>=TIMEPERIOD_MINUTE && LA342_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA342_3 = input.LA(2);
                            if ( (LA342_3==MIN||(LA342_3>=TIMEPERIOD_MINUTE && LA342_3<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA342_4 = input.LA(2);
                            if ( (LA342_4==MIN||(LA342_4>=TIMEPERIOD_MINUTE && LA342_4<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA342_5 = input.LA(2);
                            if ( (LA342_5==MIN||(LA342_5>=TIMEPERIOD_MINUTE && LA342_5<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA342_6 = input.LA(2);
                            if ( (LA342_6==MIN||(LA342_6>=TIMEPERIOD_MINUTE && LA342_6<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA342_7 = input.LA(2);
                            if ( (LA342_7==MIN||(LA342_7>=TIMEPERIOD_MINUTE && LA342_7<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA342_8 = input.LA(2);
                            if ( (LA342_8==MIN||(LA342_8>=TIMEPERIOD_MINUTE && LA342_8<=TIMEPERIOD_MINUTES)) ) {
                                alt342=1;
                            }
                            }
                            break;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13270);
                            minutePart926=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart926.getTree());
                            }
                            break;
                    }
                    int alt343=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_24 = input.LA(3);
                                    if ( ((LA343_24>=TIMEPERIOD_SEC && LA343_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_25 = input.LA(3);
                                    if ( ((LA343_25>=TIMEPERIOD_SEC && LA343_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_26 = input.LA(3);
                                    if ( ((LA343_26>=TIMEPERIOD_SEC && LA343_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_27 = input.LA(3);
                                    if ( ((LA343_27>=TIMEPERIOD_SEC && LA343_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_28 = input.LA(3);
                                    if ( ((LA343_28>=TIMEPERIOD_SEC && LA343_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_29 = input.LA(3);
                                    if ( ((LA343_29>=TIMEPERIOD_SEC && LA343_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_30 = input.LA(3);
                                    if ( ((LA343_30>=TIMEPERIOD_SEC && LA343_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_31 = input.LA(3);
                                    if ( ((LA343_31>=TIMEPERIOD_SEC && LA343_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA343_3 = input.LA(2);
                            if ( ((LA343_3>=TIMEPERIOD_SEC && LA343_3<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA343_4 = input.LA(2);
                            if ( ((LA343_4>=TIMEPERIOD_SEC && LA343_4<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA343_5 = input.LA(2);
                            if ( ((LA343_5>=TIMEPERIOD_SEC && LA343_5<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA343_6 = input.LA(2);
                            if ( ((LA343_6>=TIMEPERIOD_SEC && LA343_6<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA343_7 = input.LA(2);
                            if ( ((LA343_7>=TIMEPERIOD_SEC && LA343_7<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA343_8 = input.LA(2);
                            if ( ((LA343_8>=TIMEPERIOD_SEC && LA343_8<=TIMEPERIOD_SECONDS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                    }
                    switch (alt343) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13273);
                            secondPart927=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart927.getTree());
                            }
                            break;
                    }
                    int alt344=2;
                    int LA344_0 = input.LA(1);
                    if ( (LA344_0==NUM_DOUBLE||LA344_0==IDENT||(LA344_0>=PLUS && LA344_0<=QUESTION)||LA344_0==MINUS||LA344_0==NUM_INT||(LA344_0>=NUM_LONG && LA344_0<=NUM_FLOAT)) ) {
                        alt344=1;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13276);
                            millisecondPart928=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart928.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod13282);
                    weekPart929=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart929.getTree());
                    int alt345=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA345_24 = input.LA(3);
                                    if ( ((LA345_24>=TIMEPERIOD_DAY && LA345_24<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA345_25 = input.LA(3);
                                    if ( ((LA345_25>=TIMEPERIOD_DAY && LA345_25<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA345_26 = input.LA(3);
                                    if ( ((LA345_26>=TIMEPERIOD_DAY && LA345_26<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA345_27 = input.LA(3);
                                    if ( ((LA345_27>=TIMEPERIOD_DAY && LA345_27<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA345_28 = input.LA(3);
                                    if ( ((LA345_28>=TIMEPERIOD_DAY && LA345_28<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA345_29 = input.LA(3);
                                    if ( ((LA345_29>=TIMEPERIOD_DAY && LA345_29<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA345_30 = input.LA(3);
                                    if ( ((LA345_30>=TIMEPERIOD_DAY && LA345_30<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA345_31 = input.LA(3);
                                    if ( ((LA345_31>=TIMEPERIOD_DAY && LA345_31<=TIMEPERIOD_DAYS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA345_3 = input.LA(2);
                            if ( ((LA345_3>=TIMEPERIOD_DAY && LA345_3<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA345_4 = input.LA(2);
                            if ( ((LA345_4>=TIMEPERIOD_DAY && LA345_4<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA345_5 = input.LA(2);
                            if ( ((LA345_5>=TIMEPERIOD_DAY && LA345_5<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA345_6 = input.LA(2);
                            if ( ((LA345_6>=TIMEPERIOD_DAY && LA345_6<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA345_7 = input.LA(2);
                            if ( ((LA345_7>=TIMEPERIOD_DAY && LA345_7<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA345_8 = input.LA(2);
                            if ( ((LA345_8>=TIMEPERIOD_DAY && LA345_8<=TIMEPERIOD_DAYS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                    }
                    switch (alt345) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13284);
                            dayPart930=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart930.getTree());
                            }
                            break;
                    }
                    int alt346=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA346_24 = input.LA(3);
                                    if ( ((LA346_24>=TIMEPERIOD_HOUR && LA346_24<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA346_25 = input.LA(3);
                                    if ( ((LA346_25>=TIMEPERIOD_HOUR && LA346_25<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA346_26 = input.LA(3);
                                    if ( ((LA346_26>=TIMEPERIOD_HOUR && LA346_26<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA346_27 = input.LA(3);
                                    if ( ((LA346_27>=TIMEPERIOD_HOUR && LA346_27<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA346_28 = input.LA(3);
                                    if ( ((LA346_28>=TIMEPERIOD_HOUR && LA346_28<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA346_29 = input.LA(3);
                                    if ( ((LA346_29>=TIMEPERIOD_HOUR && LA346_29<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA346_30 = input.LA(3);
                                    if ( ((LA346_30>=TIMEPERIOD_HOUR && LA346_30<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA346_31 = input.LA(3);
                                    if ( ((LA346_31>=TIMEPERIOD_HOUR && LA346_31<=TIMEPERIOD_HOURS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA346_3 = input.LA(2);
                            if ( ((LA346_3>=TIMEPERIOD_HOUR && LA346_3<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA346_4 = input.LA(2);
                            if ( ((LA346_4>=TIMEPERIOD_HOUR && LA346_4<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA346_5 = input.LA(2);
                            if ( ((LA346_5>=TIMEPERIOD_HOUR && LA346_5<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA346_6 = input.LA(2);
                            if ( ((LA346_6>=TIMEPERIOD_HOUR && LA346_6<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA346_7 = input.LA(2);
                            if ( ((LA346_7>=TIMEPERIOD_HOUR && LA346_7<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA346_8 = input.LA(2);
                            if ( ((LA346_8>=TIMEPERIOD_HOUR && LA346_8<=TIMEPERIOD_HOURS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13287);
                            hourPart931=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart931.getTree());
                            }
                            break;
                    }
                    int alt347=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA347_24 = input.LA(3);
                                    if ( (LA347_24==MIN||(LA347_24>=TIMEPERIOD_MINUTE && LA347_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA347_25 = input.LA(3);
                                    if ( (LA347_25==MIN||(LA347_25>=TIMEPERIOD_MINUTE && LA347_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA347_26 = input.LA(3);
                                    if ( (LA347_26==MIN||(LA347_26>=TIMEPERIOD_MINUTE && LA347_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA347_27 = input.LA(3);
                                    if ( (LA347_27==MIN||(LA347_27>=TIMEPERIOD_MINUTE && LA347_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA347_28 = input.LA(3);
                                    if ( (LA347_28==MIN||(LA347_28>=TIMEPERIOD_MINUTE && LA347_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA347_29 = input.LA(3);
                                    if ( (LA347_29==MIN||(LA347_29>=TIMEPERIOD_MINUTE && LA347_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA347_30 = input.LA(3);
                                    if ( (LA347_30==MIN||(LA347_30>=TIMEPERIOD_MINUTE && LA347_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA347_31 = input.LA(3);
                                    if ( (LA347_31==MIN||(LA347_31>=TIMEPERIOD_MINUTE && LA347_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA347_3 = input.LA(2);
                            if ( (LA347_3==MIN||(LA347_3>=TIMEPERIOD_MINUTE && LA347_3<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA347_4 = input.LA(2);
                            if ( (LA347_4==MIN||(LA347_4>=TIMEPERIOD_MINUTE && LA347_4<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA347_5 = input.LA(2);
                            if ( (LA347_5==MIN||(LA347_5>=TIMEPERIOD_MINUTE && LA347_5<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA347_6 = input.LA(2);
                            if ( (LA347_6==MIN||(LA347_6>=TIMEPERIOD_MINUTE && LA347_6<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA347_7 = input.LA(2);
                            if ( (LA347_7==MIN||(LA347_7>=TIMEPERIOD_MINUTE && LA347_7<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA347_8 = input.LA(2);
                            if ( (LA347_8==MIN||(LA347_8>=TIMEPERIOD_MINUTE && LA347_8<=TIMEPERIOD_MINUTES)) ) {
                                alt347=1;
                            }
                            }
                            break;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13290);
                            minutePart932=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart932.getTree());
                            }
                            break;
                    }
                    int alt348=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA348_24 = input.LA(3);
                                    if ( ((LA348_24>=TIMEPERIOD_SEC && LA348_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA348_25 = input.LA(3);
                                    if ( ((LA348_25>=TIMEPERIOD_SEC && LA348_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA348_26 = input.LA(3);
                                    if ( ((LA348_26>=TIMEPERIOD_SEC && LA348_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA348_27 = input.LA(3);
                                    if ( ((LA348_27>=TIMEPERIOD_SEC && LA348_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA348_28 = input.LA(3);
                                    if ( ((LA348_28>=TIMEPERIOD_SEC && LA348_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA348_29 = input.LA(3);
                                    if ( ((LA348_29>=TIMEPERIOD_SEC && LA348_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA348_30 = input.LA(3);
                                    if ( ((LA348_30>=TIMEPERIOD_SEC && LA348_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA348_31 = input.LA(3);
                                    if ( ((LA348_31>=TIMEPERIOD_SEC && LA348_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA348_3 = input.LA(2);
                            if ( ((LA348_3>=TIMEPERIOD_SEC && LA348_3<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA348_4 = input.LA(2);
                            if ( ((LA348_4>=TIMEPERIOD_SEC && LA348_4<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA348_5 = input.LA(2);
                            if ( ((LA348_5>=TIMEPERIOD_SEC && LA348_5<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA348_6 = input.LA(2);
                            if ( ((LA348_6>=TIMEPERIOD_SEC && LA348_6<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA348_7 = input.LA(2);
                            if ( ((LA348_7>=TIMEPERIOD_SEC && LA348_7<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA348_8 = input.LA(2);
                            if ( ((LA348_8>=TIMEPERIOD_SEC && LA348_8<=TIMEPERIOD_SECONDS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13293);
                            secondPart933=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart933.getTree());
                            }
                            break;
                    }
                    int alt349=2;
                    int LA349_0 = input.LA(1);
                    if ( (LA349_0==NUM_DOUBLE||LA349_0==IDENT||(LA349_0>=PLUS && LA349_0<=QUESTION)||LA349_0==MINUS||LA349_0==NUM_INT||(LA349_0>=NUM_LONG && LA349_0<=NUM_FLOAT)) ) {
                        alt349=1;
                    }
                    switch (alt349) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13296);
                            millisecondPart934=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart934.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod13302);
                    dayPart935=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart935.getTree());
                    int alt350=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA350_24 = input.LA(3);
                                    if ( ((LA350_24>=TIMEPERIOD_HOUR && LA350_24<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA350_25 = input.LA(3);
                                    if ( ((LA350_25>=TIMEPERIOD_HOUR && LA350_25<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA350_26 = input.LA(3);
                                    if ( ((LA350_26>=TIMEPERIOD_HOUR && LA350_26<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA350_27 = input.LA(3);
                                    if ( ((LA350_27>=TIMEPERIOD_HOUR && LA350_27<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA350_28 = input.LA(3);
                                    if ( ((LA350_28>=TIMEPERIOD_HOUR && LA350_28<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA350_29 = input.LA(3);
                                    if ( ((LA350_29>=TIMEPERIOD_HOUR && LA350_29<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA350_30 = input.LA(3);
                                    if ( ((LA350_30>=TIMEPERIOD_HOUR && LA350_30<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA350_31 = input.LA(3);
                                    if ( ((LA350_31>=TIMEPERIOD_HOUR && LA350_31<=TIMEPERIOD_HOURS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA350_3 = input.LA(2);
                            if ( ((LA350_3>=TIMEPERIOD_HOUR && LA350_3<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA350_4 = input.LA(2);
                            if ( ((LA350_4>=TIMEPERIOD_HOUR && LA350_4<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA350_5 = input.LA(2);
                            if ( ((LA350_5>=TIMEPERIOD_HOUR && LA350_5<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA350_6 = input.LA(2);
                            if ( ((LA350_6>=TIMEPERIOD_HOUR && LA350_6<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA350_7 = input.LA(2);
                            if ( ((LA350_7>=TIMEPERIOD_HOUR && LA350_7<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA350_8 = input.LA(2);
                            if ( ((LA350_8>=TIMEPERIOD_HOUR && LA350_8<=TIMEPERIOD_HOURS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                    }
                    switch (alt350) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13304);
                            hourPart936=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart936.getTree());
                            }
                            break;
                    }
                    int alt351=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA351_24 = input.LA(3);
                                    if ( (LA351_24==MIN||(LA351_24>=TIMEPERIOD_MINUTE && LA351_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA351_25 = input.LA(3);
                                    if ( (LA351_25==MIN||(LA351_25>=TIMEPERIOD_MINUTE && LA351_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA351_26 = input.LA(3);
                                    if ( (LA351_26==MIN||(LA351_26>=TIMEPERIOD_MINUTE && LA351_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA351_27 = input.LA(3);
                                    if ( (LA351_27==MIN||(LA351_27>=TIMEPERIOD_MINUTE && LA351_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA351_28 = input.LA(3);
                                    if ( (LA351_28==MIN||(LA351_28>=TIMEPERIOD_MINUTE && LA351_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA351_29 = input.LA(3);
                                    if ( (LA351_29==MIN||(LA351_29>=TIMEPERIOD_MINUTE && LA351_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA351_30 = input.LA(3);
                                    if ( (LA351_30==MIN||(LA351_30>=TIMEPERIOD_MINUTE && LA351_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA351_31 = input.LA(3);
                                    if ( (LA351_31==MIN||(LA351_31>=TIMEPERIOD_MINUTE && LA351_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt351=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA351_3 = input.LA(2);
                            if ( (LA351_3==MIN||(LA351_3>=TIMEPERIOD_MINUTE && LA351_3<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA351_4 = input.LA(2);
                            if ( (LA351_4==MIN||(LA351_4>=TIMEPERIOD_MINUTE && LA351_4<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA351_5 = input.LA(2);
                            if ( (LA351_5==MIN||(LA351_5>=TIMEPERIOD_MINUTE && LA351_5<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA351_6 = input.LA(2);
                            if ( (LA351_6==MIN||(LA351_6>=TIMEPERIOD_MINUTE && LA351_6<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA351_7 = input.LA(2);
                            if ( (LA351_7==MIN||(LA351_7>=TIMEPERIOD_MINUTE && LA351_7<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA351_8 = input.LA(2);
                            if ( (LA351_8==MIN||(LA351_8>=TIMEPERIOD_MINUTE && LA351_8<=TIMEPERIOD_MINUTES)) ) {
                                alt351=1;
                            }
                            }
                            break;
                    }
                    switch (alt351) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13307);
                            minutePart937=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart937.getTree());
                            }
                            break;
                    }
                    int alt352=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA352_24 = input.LA(3);
                                    if ( ((LA352_24>=TIMEPERIOD_SEC && LA352_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA352_25 = input.LA(3);
                                    if ( ((LA352_25>=TIMEPERIOD_SEC && LA352_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA352_26 = input.LA(3);
                                    if ( ((LA352_26>=TIMEPERIOD_SEC && LA352_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA352_27 = input.LA(3);
                                    if ( ((LA352_27>=TIMEPERIOD_SEC && LA352_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA352_28 = input.LA(3);
                                    if ( ((LA352_28>=TIMEPERIOD_SEC && LA352_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA352_29 = input.LA(3);
                                    if ( ((LA352_29>=TIMEPERIOD_SEC && LA352_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA352_30 = input.LA(3);
                                    if ( ((LA352_30>=TIMEPERIOD_SEC && LA352_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA352_31 = input.LA(3);
                                    if ( ((LA352_31>=TIMEPERIOD_SEC && LA352_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA352_3 = input.LA(2);
                            if ( ((LA352_3>=TIMEPERIOD_SEC && LA352_3<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA352_4 = input.LA(2);
                            if ( ((LA352_4>=TIMEPERIOD_SEC && LA352_4<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA352_5 = input.LA(2);
                            if ( ((LA352_5>=TIMEPERIOD_SEC && LA352_5<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA352_6 = input.LA(2);
                            if ( ((LA352_6>=TIMEPERIOD_SEC && LA352_6<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA352_7 = input.LA(2);
                            if ( ((LA352_7>=TIMEPERIOD_SEC && LA352_7<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA352_8 = input.LA(2);
                            if ( ((LA352_8>=TIMEPERIOD_SEC && LA352_8<=TIMEPERIOD_SECONDS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                    }
                    switch (alt352) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13310);
                            secondPart938=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart938.getTree());
                            }
                            break;
                    }
                    int alt353=2;
                    int LA353_0 = input.LA(1);
                    if ( (LA353_0==NUM_DOUBLE||LA353_0==IDENT||(LA353_0>=PLUS && LA353_0<=QUESTION)||LA353_0==MINUS||LA353_0==NUM_INT||(LA353_0>=NUM_LONG && LA353_0<=NUM_FLOAT)) ) {
                        alt353=1;
                    }
                    switch (alt353) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13313);
                            millisecondPart939=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart939.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod13319);
                    hourPart940=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart940.getTree());
                    int alt354=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA354_24 = input.LA(3);
                                    if ( (LA354_24==MIN||(LA354_24>=TIMEPERIOD_MINUTE && LA354_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA354_25 = input.LA(3);
                                    if ( (LA354_25==MIN||(LA354_25>=TIMEPERIOD_MINUTE && LA354_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA354_26 = input.LA(3);
                                    if ( (LA354_26==MIN||(LA354_26>=TIMEPERIOD_MINUTE && LA354_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA354_27 = input.LA(3);
                                    if ( (LA354_27==MIN||(LA354_27>=TIMEPERIOD_MINUTE && LA354_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA354_28 = input.LA(3);
                                    if ( (LA354_28==MIN||(LA354_28>=TIMEPERIOD_MINUTE && LA354_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA354_29 = input.LA(3);
                                    if ( (LA354_29==MIN||(LA354_29>=TIMEPERIOD_MINUTE && LA354_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA354_30 = input.LA(3);
                                    if ( (LA354_30==MIN||(LA354_30>=TIMEPERIOD_MINUTE && LA354_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA354_31 = input.LA(3);
                                    if ( (LA354_31==MIN||(LA354_31>=TIMEPERIOD_MINUTE && LA354_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA354_3 = input.LA(2);
                            if ( (LA354_3==MIN||(LA354_3>=TIMEPERIOD_MINUTE && LA354_3<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA354_4 = input.LA(2);
                            if ( (LA354_4==MIN||(LA354_4>=TIMEPERIOD_MINUTE && LA354_4<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA354_5 = input.LA(2);
                            if ( (LA354_5==MIN||(LA354_5>=TIMEPERIOD_MINUTE && LA354_5<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA354_6 = input.LA(2);
                            if ( (LA354_6==MIN||(LA354_6>=TIMEPERIOD_MINUTE && LA354_6<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA354_7 = input.LA(2);
                            if ( (LA354_7==MIN||(LA354_7>=TIMEPERIOD_MINUTE && LA354_7<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA354_8 = input.LA(2);
                            if ( (LA354_8==MIN||(LA354_8>=TIMEPERIOD_MINUTE && LA354_8<=TIMEPERIOD_MINUTES)) ) {
                                alt354=1;
                            }
                            }
                            break;
                    }
                    switch (alt354) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13321);
                            minutePart941=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart941.getTree());
                            }
                            break;
                    }
                    int alt355=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA355_24 = input.LA(3);
                                    if ( ((LA355_24>=TIMEPERIOD_SEC && LA355_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA355_25 = input.LA(3);
                                    if ( ((LA355_25>=TIMEPERIOD_SEC && LA355_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA355_26 = input.LA(3);
                                    if ( ((LA355_26>=TIMEPERIOD_SEC && LA355_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA355_27 = input.LA(3);
                                    if ( ((LA355_27>=TIMEPERIOD_SEC && LA355_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA355_28 = input.LA(3);
                                    if ( ((LA355_28>=TIMEPERIOD_SEC && LA355_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA355_29 = input.LA(3);
                                    if ( ((LA355_29>=TIMEPERIOD_SEC && LA355_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA355_30 = input.LA(3);
                                    if ( ((LA355_30>=TIMEPERIOD_SEC && LA355_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA355_31 = input.LA(3);
                                    if ( ((LA355_31>=TIMEPERIOD_SEC && LA355_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt355=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA355_3 = input.LA(2);
                            if ( ((LA355_3>=TIMEPERIOD_SEC && LA355_3<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA355_4 = input.LA(2);
                            if ( ((LA355_4>=TIMEPERIOD_SEC && LA355_4<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA355_5 = input.LA(2);
                            if ( ((LA355_5>=TIMEPERIOD_SEC && LA355_5<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA355_6 = input.LA(2);
                            if ( ((LA355_6>=TIMEPERIOD_SEC && LA355_6<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA355_7 = input.LA(2);
                            if ( ((LA355_7>=TIMEPERIOD_SEC && LA355_7<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA355_8 = input.LA(2);
                            if ( ((LA355_8>=TIMEPERIOD_SEC && LA355_8<=TIMEPERIOD_SECONDS)) ) {
                                alt355=1;
                            }
                            }
                            break;
                    }
                    switch (alt355) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13324);
                            secondPart942=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart942.getTree());
                            }
                            break;
                    }
                    int alt356=2;
                    int LA356_0 = input.LA(1);
                    if ( (LA356_0==NUM_DOUBLE||LA356_0==IDENT||(LA356_0>=PLUS && LA356_0<=QUESTION)||LA356_0==MINUS||LA356_0==NUM_INT||(LA356_0>=NUM_LONG && LA356_0<=NUM_FLOAT)) ) {
                        alt356=1;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13327);
                            millisecondPart943=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart943.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod13333);
                    minutePart944=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart944.getTree());
                    int alt357=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_24 = input.LA(3);
                                    if ( ((LA357_24>=TIMEPERIOD_SEC && LA357_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_25 = input.LA(3);
                                    if ( ((LA357_25>=TIMEPERIOD_SEC && LA357_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_26 = input.LA(3);
                                    if ( ((LA357_26>=TIMEPERIOD_SEC && LA357_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_27 = input.LA(3);
                                    if ( ((LA357_27>=TIMEPERIOD_SEC && LA357_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_28 = input.LA(3);
                                    if ( ((LA357_28>=TIMEPERIOD_SEC && LA357_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_29 = input.LA(3);
                                    if ( ((LA357_29>=TIMEPERIOD_SEC && LA357_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_30 = input.LA(3);
                                    if ( ((LA357_30>=TIMEPERIOD_SEC && LA357_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_31 = input.LA(3);
                                    if ( ((LA357_31>=TIMEPERIOD_SEC && LA357_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA357_3 = input.LA(2);
                            if ( ((LA357_3>=TIMEPERIOD_SEC && LA357_3<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA357_4 = input.LA(2);
                            if ( ((LA357_4>=TIMEPERIOD_SEC && LA357_4<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA357_5 = input.LA(2);
                            if ( ((LA357_5>=TIMEPERIOD_SEC && LA357_5<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA357_6 = input.LA(2);
                            if ( ((LA357_6>=TIMEPERIOD_SEC && LA357_6<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA357_7 = input.LA(2);
                            if ( ((LA357_7>=TIMEPERIOD_SEC && LA357_7<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA357_8 = input.LA(2);
                            if ( ((LA357_8>=TIMEPERIOD_SEC && LA357_8<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                    }
                    switch (alt357) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13335);
                            secondPart945=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart945.getTree());
                            }
                            break;
                    }
                    int alt358=2;
                    int LA358_0 = input.LA(1);
                    if ( (LA358_0==NUM_DOUBLE||LA358_0==IDENT||(LA358_0>=PLUS && LA358_0<=QUESTION)||LA358_0==MINUS||LA358_0==NUM_INT||(LA358_0>=NUM_LONG && LA358_0<=NUM_FLOAT)) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13338);
                            millisecondPart946=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart946.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod13344);
                    secondPart947=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart947.getTree());
                    int alt359=2;
                    int LA359_0 = input.LA(1);
                    if ( (LA359_0==NUM_DOUBLE||LA359_0==IDENT||(LA359_0>=PLUS && LA359_0<=QUESTION)||LA359_0==MINUS||LA359_0==NUM_INT||(LA359_0>=NUM_LONG && LA359_0<=NUM_FLOAT)) ) {
                        alt359=1;
                    }
                    switch (alt359) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13346);
                            millisecondPart948=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart948.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod13352);
                    millisecondPart949=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart949.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS952=null;
        Token TIMEPERIOD_YEAR953=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant950 = null;
        EsperEPL2GrammarParser.substitution_return substitution951 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS952_tree=null;
        CommonTree TIMEPERIOD_YEAR953_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt361=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt361=1;
                }
                break;
            case IDENT:
                {
                alt361=2;
                }
                break;
            case QUESTION:
                {
                alt361=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart13399);
                    numberconstant950=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant950.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart13403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart13405);
                    substitution951=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution951.getTree());
                    }
                    break;
            }
            int alt362=2;
            int LA362_0 = input.LA(1);
            if ( (LA362_0==TIMEPERIOD_YEARS) ) {
                alt362=1;
            }
            else if ( (LA362_0==TIMEPERIOD_YEAR) ) {
                alt362=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);
                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS952=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart13409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS952);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR953=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart13413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR953);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS956=null;
        Token TIMEPERIOD_MONTH957=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant954 = null;
        EsperEPL2GrammarParser.substitution_return substitution955 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS956_tree=null;
        CommonTree TIMEPERIOD_MONTH957_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt363=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt363=1;
                }
                break;
            case IDENT:
                {
                alt363=2;
                }
                break;
            case QUESTION:
                {
                alt363=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart13461);
                    numberconstant954=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant954.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart13465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart13467);
                    substitution955=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution955.getTree());
                    }
                    break;
            }
            int alt364=2;
            int LA364_0 = input.LA(1);
            if ( (LA364_0==TIMEPERIOD_MONTHS) ) {
                alt364=1;
            }
            else if ( (LA364_0==TIMEPERIOD_MONTH) ) {
                alt364=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);
                throw nvae;
            }
            switch (alt364) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS956=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS956);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH957=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart13475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH957);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS960=null;
        Token TIMEPERIOD_WEEK961=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant958 = null;
        EsperEPL2GrammarParser.substitution_return substitution959 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS960_tree=null;
        CommonTree TIMEPERIOD_WEEK961_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt365=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt365=1;
                }
                break;
            case IDENT:
                {
                alt365=2;
                }
                break;
            case QUESTION:
                {
                alt365=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart13523);
                    numberconstant958=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant958.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart13527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart13529);
                    substitution959=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution959.getTree());
                    }
                    break;
            }
            int alt366=2;
            int LA366_0 = input.LA(1);
            if ( (LA366_0==TIMEPERIOD_WEEKS) ) {
                alt366=1;
            }
            else if ( (LA366_0==TIMEPERIOD_WEEK) ) {
                alt366=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS960=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS960);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK961=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart13537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK961);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS964=null;
        Token TIMEPERIOD_DAY965=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant962 = null;
        EsperEPL2GrammarParser.substitution_return substitution963 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS964_tree=null;
        CommonTree TIMEPERIOD_DAY965_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt367=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt367=1;
                }
                break;
            case IDENT:
                {
                alt367=2;
                }
                break;
            case QUESTION:
                {
                alt367=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart13585);
                    numberconstant962=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant962.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart13589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart13591);
                    substitution963=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution963.getTree());
                    }
                    break;
            }
            int alt368=2;
            int LA368_0 = input.LA(1);
            if ( (LA368_0==TIMEPERIOD_DAYS) ) {
                alt368=1;
            }
            else if ( (LA368_0==TIMEPERIOD_DAY) ) {
                alt368=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 368, 0, input);
                throw nvae;
            }
            switch (alt368) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS964=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart13595); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS964);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY965=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart13599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY965);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS968=null;
        Token TIMEPERIOD_HOUR969=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant966 = null;
        EsperEPL2GrammarParser.substitution_return substitution967 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS968_tree=null;
        CommonTree TIMEPERIOD_HOUR969_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt369=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt369=1;
                }
                break;
            case IDENT:
                {
                alt369=2;
                }
                break;
            case QUESTION:
                {
                alt369=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart13648);
                    numberconstant966=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant966.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart13652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart13654);
                    substitution967=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution967.getTree());
                    }
                    break;
            }
            int alt370=2;
            int LA370_0 = input.LA(1);
            if ( (LA370_0==TIMEPERIOD_HOURS) ) {
                alt370=1;
            }
            else if ( (LA370_0==TIMEPERIOD_HOUR) ) {
                alt370=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 0, input);
                throw nvae;
            }
            switch (alt370) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS968=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart13658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS968);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR969=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart13662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR969);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES972=null;
        Token TIMEPERIOD_MINUTE973=null;
        Token MIN974=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant970 = null;
        EsperEPL2GrammarParser.substitution_return substitution971 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES972_tree=null;
        CommonTree TIMEPERIOD_MINUTE973_tree=null;
        CommonTree MIN974_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt371=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt371=1;
                }
                break;
            case IDENT:
                {
                alt371=2;
                }
                break;
            case QUESTION:
                {
                alt371=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 371, 0, input);
                throw nvae;
            }
            switch (alt371) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart13711);
                    numberconstant970=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant970.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart13715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart13717);
                    substitution971=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution971.getTree());
                    }
                    break;
            }
            int alt372=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt372=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt372=2;
                }
                break;
            case MIN:
                {
                alt372=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);
                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES972=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES972);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE973=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE973);
                    }
                    break;
                case 3 :
                    {
                    MIN974=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart13729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN974);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS977=null;
        Token TIMEPERIOD_SECOND978=null;
        Token TIMEPERIOD_SEC979=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant975 = null;
        EsperEPL2GrammarParser.substitution_return substitution976 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS977_tree=null;
        CommonTree TIMEPERIOD_SECOND978_tree=null;
        CommonTree TIMEPERIOD_SEC979_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt373=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt373=1;
                }
                break;
            case IDENT:
                {
                alt373=2;
                }
                break;
            case QUESTION:
                {
                alt373=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);
                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart13779);
                    numberconstant975=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant975.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart13783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart13785);
                    substitution976=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution976.getTree());
                    }
                    break;
            }
            int alt374=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt374=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt374=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt374=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);
                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS977=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS977);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND978=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart13793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND978);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC979=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart13797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC979);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS982=null;
        Token TIMEPERIOD_MILLISECOND983=null;
        Token TIMEPERIOD_MILLISEC984=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant980 = null;
        EsperEPL2GrammarParser.substitution_return substitution981 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS982_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND983_tree=null;
        CommonTree TIMEPERIOD_MILLISEC984_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt375=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt375=1;
                }
                break;
            case IDENT:
                {
                alt375=2;
                }
                break;
            case QUESTION:
                {
                alt375=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);
                throw nvae;
            }
            switch (alt375) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart13847);
                    numberconstant980=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant980.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart13851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart13853);
                    substitution981=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution981.getTree());
                    }
                    break;
            }
            int alt376=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt376=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt376=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt376=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);
                throw nvae;
            }
            switch (alt376) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS982=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS982);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND983=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND983);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC984=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC984);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt377=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt377=1;
                }
                break;
            case NUM_LONG:
                {
                alt377=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt377=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt377=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);
                throw nvae;
            }
            switch (alt377) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number13920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number13937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number13954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number13971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution13992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant985 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant986 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt378=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt378=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt378=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt378=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt378=4;
                }
                break;
            case VALUE_NULL:
                {
                alt378=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);
                throw nvae;
            }
            switch (alt378) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant14011);
                    numberconstant985=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant985.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant14018);
                    stringconstant986=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant986.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant14031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant14051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant14071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number987 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt379=3;
            int LA379_0 = input.LA(1);
            if ( (LA379_0==MINUS) ) {
                alt379=1;
            }
            else if ( (LA379_0==PLUS) ) {
                alt379=2;
            }
            switch (alt379) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant14093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant14099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant14103);
            number987=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number987.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number987!=null?((CommonTree)number987.tree):null).getType(), "-" + (number987!=null?input.toString(number987.start,number987.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt380=2;
            int LA380_0 = input.LA(1);
            if ( (LA380_0==STRING_LITERAL) ) {
                alt380=1;
            }
            else if ( (LA380_0==QUOTED_STRING_LITERAL) ) {
                alt380=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 380, 0, input);
                throw nvae;
            }
            switch (alt380) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant14132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5232);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6632);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8612);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9997);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10059);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11444);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11925);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11936);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11947);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11958);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11970);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11981);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11992);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12005);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12030);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA207 dfa207 = new DFA207(this);
    static final String DFA207_eotS =
        "\u0c1f\uffff";
    static final String DFA207_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bea\uffff";
    static final String DFA207_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\17\uffff\1\u0134\u0081\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0141\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\112\uffff\2\6\122\uffff\2\6\100\uffff"+
        "\2\6\120\uffff\2\6\100\uffff\2\6\122\uffff\2\6\111\uffff\2\6\100"+
        "\uffff\2\6\120\uffff\2\6\107\uffff\2\6\112\uffff\2\6\107\uffff\2"+
        "\6\100\uffff\2\6\120\uffff\2\6\u0085\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\114\uffff\1\0\30\uffff\1\0\73\uffff"+
        "\1\0\30\uffff\1\0\30\uffff";
    static final String DFA207_maxS =
        "\2\u0157\13\uffff\1\u0157\3\uffff\1\u0154\2\uffff\2\u0154\2\uffff"+
        "\4\u0154\1\uffff\2\u0154\12\uffff\3\u0154\2\uffff\3\u0154\3\uffff"+
        "\1\u0154\17\uffff\1\u0134\u0081\uffff\1\u0157\73\uffff\1\u0157\73"+
        "\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u014f\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0155\2\u014e\112"+
        "\uffff\2\u014e\122\uffff\2\u014e\100\uffff\2\u014e\120\uffff\2\u014e"+
        "\100\uffff\2\u014e\122\uffff\2\u014e\111\uffff\2\u014e\100\uffff"+
        "\2\u014e\120\uffff\2\u014e\107\uffff\2\u014e\112\uffff\2\u014e\107"+
        "\uffff\2\u014e\100\uffff\2\u014e\120\uffff\2\u014e\u0085\uffff\1"+
        "\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1"+
        "\0\115\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\73\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA207_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\63\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\4\uffff\1\1\57\uffff\1\10\1\4\u040b\uffff\112\6\2\uffff"+
        "\122\6\2\uffff\100\6\2\uffff\120\6\2\uffff\100\6\2\uffff\122\6\2"+
        "\uffff\111\6\2\uffff\100\6\2\uffff\120\6\2\uffff\107\6\2\uffff\101"+
        "\6\2\uffff\7\6\2\uffff\107\6\2\uffff\100\6\2\uffff\120\6\2\uffff"+
        "\100\6\1\11\104\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\5\6\1\uffff\55\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\55\6\1\uffff\36\6\2\uffff\54\6\1\uffff"+
        "\30\6\1\uffff\37\6\1\uffff\32\6\2\uffff\30\6\1\uffff\30\6";
    static final String DFA207_specialS =
        "\1\0\u00c5\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\112\uffff"+
        "\1\24\1\25\122\uffff\1\26\1\27\100\uffff\1\30\1\31\120\uffff\1\32"+
        "\1\33\100\uffff\1\34\1\35\122\uffff\1\36\1\37\111\uffff\1\40\1\41"+
        "\100\uffff\1\42\1\43\120\uffff\1\44\1\45\107\uffff\1\46\1\47\112"+
        "\uffff\1\50\1\51\107\uffff\1\52\1\53\100\uffff\1\54\1\55\120\uffff"+
        "\1\56\1\57\u0085\uffff\1\60\31\uffff\1\61\5\uffff\1\62\55\uffff"+
        "\1\63\31\uffff\1\64\31\uffff\1\65\115\uffff\1\66\31\uffff\1\67\31"+
        "\uffff\1\70\31\uffff\1\71\31\uffff\1\72\31\uffff\1\73\5\uffff\1"+
        "\74\55\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1\100\31"+
        "\uffff\1\101\5\uffff\1\102\55\uffff\1\103\114\uffff\1\104\30\uffff"+
        "\1\105\73\uffff\1\106\30\uffff\1\107\30\uffff}>";
    static final short[] DFA207_eot = DFA.unpackEncodedString(DFA207_eotS);
    static final short[] DFA207_eof = DFA.unpackEncodedString(DFA207_eofS);
    static final char[] DFA207_min = DFA.unpackEncodedStringToUnsignedChars(DFA207_minS);
    static final char[] DFA207_max = DFA.unpackEncodedStringToUnsignedChars(DFA207_maxS);
    static final short[] DFA207_accept = DFA.unpackEncodedString(DFA207_acceptS);
    static final short[] DFA207_special = DFA.unpackEncodedString(DFA207_specialS);
    static final short[][] DFA207_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA207_transitionS.length;
        DFA207_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA207_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA207_transitionS[i]);
        }
    }
    class DFA207 extends DFA {
        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = DFA207_eot;
            this.eof = DFA207_eof;
            this.min = DFA207_min;
            this.max = DFA207_max;
            this.accept = DFA207_accept;
            this.special = DFA207_special;
            this.transition = DFA207_transition;
        }
        public String getDescription() {
            return "1362:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA207_0 = input.LA(1);
                        int index207_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_0==MINUS) ) {s = 1;}
                        else if ( ((LA207_0>=BOOLEAN_TRUE && LA207_0<=VALUE_NULL)||LA207_0==NUM_DOUBLE||LA207_0==PLUS||(LA207_0>=STRING_LITERAL && LA207_0<=QUOTED_STRING_LITERAL)||LA207_0==NUM_INT||(LA207_0>=NUM_LONG && LA207_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA207_0==QUESTION) ) {s = 12;}
                        else if ( (LA207_0==LPAREN) ) {s = 13;}
                        else if ( (LA207_0==BETWEEN||LA207_0==ESCAPE||LA207_0==EVERY_EXPR||LA207_0==WHERE||(LA207_0>=MAX && LA207_0<=MIN)||LA207_0==OUTER||(LA207_0>=JOIN && LA207_0<=FULL)||LA207_0==EVENTS||(LA207_0>=UNIDIRECTIONAL && LA207_0<=METADATASQL)||(LA207_0>=WEEKDAY && LA207_0<=LW)||(LA207_0>=SNAPSHOT && LA207_0<=INDEX)||(LA207_0>=DEFINE && LA207_0<=AFTER)||LA207_0==WHILE||(LA207_0>=MERGE && LA207_0<=MATCHED)||LA207_0==CONTEXT||LA207_0==IDENT||LA207_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA207_0==COUNT) ) {s = 17;}
                        else if ( (LA207_0==SUM) ) {s = 20;}
                        else if ( (LA207_0==AVG) ) {s = 21;}
                        else if ( (LA207_0==COALESCE) ) {s = 24;}
                        else if ( (LA207_0==MEDIAN) ) {s = 25;}
                        else if ( (LA207_0==STDDEV) ) {s = 26;}
                        else if ( (LA207_0==AVEDEV) ) {s = 27;}
                        else if ( (LA207_0==FIRST) ) {s = 29;}
                        else if ( (LA207_0==LAST) ) {s = 30;}
                        else if ( (LA207_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA207_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA207_0==PRIOR) ) {s = 43;}
                        else if ( (LA207_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA207_0==TYPEOF) ) {s = 47;}
                        else if ( (LA207_0==CAST) ) {s = 48;}
                        else if ( (LA207_0==WINDOW) ) {s = 52;}
                        else if ( (LA207_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA207_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA207_0==EXISTS) ) {s = 68;}
                        else if ( (LA207_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA207_0==LCURLY) ) {s = 70;}
                        else if ( (LA207_0==NEWKW) ) {s = 71;}
                        input.seek(index207_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA207_198 = input.LA(1);
                        int index207_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_198==STRING_LITERAL) ) {s = 1159;}
                        else if ( (LA207_198==QUOTED_STRING_LITERAL) ) {s = 1160;}
                        else if ( (LA207_198==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA207_198==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA207_198==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA207_198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA207_198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA207_198==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA207_198==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA207_198==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA207_198==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA207_198==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA207_198==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA207_198==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA207_198==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA207_198==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA207_198==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA207_198==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA207_198==AT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA207_198==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA207_198==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA207_198==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA207_198==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA207_198==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA207_198==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA207_198==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA207_198==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA207_198==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA207_198==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA207_198==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA207_198==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA207_198==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA207_198==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA207_198==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA207_198==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA207_198==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA207_198==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA207_198==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA207_198==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA207_198==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA207_198==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA207_198==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA207_198==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA207_198==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA207_198==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA207_198==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA207_198==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA207_198==LW) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA207_198==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA207_198==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA207_198==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA207_198==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA207_198==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA207_198==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA207_198==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA207_198==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA207_198==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA207_198==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA207_198==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA207_198==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA207_198==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA207_198==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA207_198==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA207_198==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA207_198==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA207_198==SET) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA207_198==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA207_198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA207_198==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA207_198==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA207_198==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA207_198==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA207_198==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA207_198==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA207_198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA207_198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        input.seek(index207_198);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA207_258 = input.LA(1);
                        int index207_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_258==STRING_LITERAL) ) {s = 1235;}
                        else if ( (LA207_258==QUOTED_STRING_LITERAL) ) {s = 1236;}
                        else if ( (LA207_258==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA207_258==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA207_258==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA207_258==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA207_258==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA207_258==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA207_258==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA207_258==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA207_258==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA207_258==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA207_258==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA207_258==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA207_258==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA207_258==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA207_258==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA207_258==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA207_258==AT) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA207_258==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA207_258==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA207_258==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA207_258==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA207_258==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA207_258==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA207_258==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA207_258==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA207_258==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA207_258==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA207_258==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA207_258==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA207_258==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA207_258==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA207_258==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA207_258==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA207_258==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA207_258==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA207_258==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA207_258==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA207_258==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA207_258==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA207_258==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA207_258==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA207_258==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA207_258==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA207_258==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA207_258==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA207_258==LW) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA207_258==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA207_258==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA207_258==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA207_258==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA207_258==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA207_258==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA207_258==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA207_258==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA207_258==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA207_258==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA207_258==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA207_258==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA207_258==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA207_258==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA207_258==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA207_258==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA207_258==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA207_258==SET) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA207_258==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA207_258==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA207_258==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA207_258==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA207_258==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA207_258==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA207_258==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA207_258==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA207_258==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        input.seek(index207_258);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA207_318 = input.LA(1);
                        int index207_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_318==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA207_318==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA207_318==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA207_318==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA207_318==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA207_318==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA207_318==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA207_318==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA207_318==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA207_318==STRING_LITERAL) ) {s = 1319;}
                        else if ( (LA207_318==QUOTED_STRING_LITERAL) ) {s = 1320;}
                        else if ( (LA207_318==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA207_318==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA207_318==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA207_318==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA207_318==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA207_318==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA207_318==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA207_318==AT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA207_318==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA207_318==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA207_318==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA207_318==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA207_318==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA207_318==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA207_318==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA207_318==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA207_318==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA207_318==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA207_318==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA207_318==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA207_318==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA207_318==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA207_318==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA207_318==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA207_318==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA207_318==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA207_318==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA207_318==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA207_318==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA207_318==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA207_318==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA207_318==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA207_318==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA207_318==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA207_318==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA207_318==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA207_318==LW) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA207_318==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA207_318==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA207_318==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA207_318==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA207_318==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA207_318==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA207_318==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA207_318==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA207_318==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA207_318==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA207_318==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA207_318==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA207_318==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA207_318==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA207_318==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA207_318==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA207_318==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA207_318==SET) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA207_318==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA207_318==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA207_318==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA207_318==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA207_318==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA207_318==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA207_318==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA207_318==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA207_318==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        input.seek(index207_318);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA207_378 = input.LA(1);
                        int index207_378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_378==STRING_LITERAL) ) {s = 1385;}
                        else if ( (LA207_378==QUOTED_STRING_LITERAL) ) {s = 1386;}
                        else if ( (LA207_378==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA207_378==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA207_378==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA207_378==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA207_378==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA207_378==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA207_378==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA207_378==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA207_378==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA207_378==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA207_378==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA207_378==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA207_378==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA207_378==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA207_378==AT) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA207_378==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA207_378==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA207_378==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA207_378==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA207_378==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA207_378==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA207_378==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA207_378==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA207_378==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA207_378==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA207_378==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA207_378==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA207_378==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA207_378==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA207_378==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA207_378==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA207_378==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA207_378==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA207_378==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA207_378==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA207_378==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA207_378==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA207_378==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA207_378==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA207_378==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA207_378==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA207_378==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA207_378==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA207_378==LW) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA207_378==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA207_378==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA207_378==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA207_378==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA207_378==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA207_378==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA207_378==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA207_378==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA207_378==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA207_378==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA207_378==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA207_378==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA207_378==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA207_378==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA207_378==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA207_378==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA207_378==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA207_378==SET) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA207_378==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA207_378==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA207_378==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA207_378==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA207_378==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA207_378==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA207_378==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA207_378==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA207_378==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        input.seek(index207_378);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA207_438 = input.LA(1);
                        int index207_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_438==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA207_438==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA207_438==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA207_438==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA207_438==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA207_438==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA207_438==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA207_438==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA207_438==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA207_438==STRING_LITERAL) ) {s = 1467;}
                        else if ( (LA207_438==QUOTED_STRING_LITERAL) ) {s = 1468;}
                        else if ( (LA207_438==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA207_438==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA207_438==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA207_438==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA207_438==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA207_438==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA207_438==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA207_438==AT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA207_438==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA207_438==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA207_438==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA207_438==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA207_438==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA207_438==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA207_438==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA207_438==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA207_438==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA207_438==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA207_438==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA207_438==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA207_438==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA207_438==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA207_438==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA207_438==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA207_438==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA207_438==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA207_438==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA207_438==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA207_438==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA207_438==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA207_438==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA207_438==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA207_438==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA207_438==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA207_438==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA207_438==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA207_438==LW) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA207_438==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA207_438==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA207_438==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA207_438==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA207_438==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA207_438==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA207_438==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA207_438==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA207_438==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA207_438==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA207_438==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA207_438==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA207_438==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA207_438==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA207_438==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA207_438==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA207_438==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA207_438==SET) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA207_438==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA207_438==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA207_438==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA207_438==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA207_438==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA207_438==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA207_438==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA207_438==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA207_438==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        input.seek(index207_438);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA207_498 = input.LA(1);
                        int index207_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_498==STRING_LITERAL) ) {s = 1533;}
                        else if ( (LA207_498==QUOTED_STRING_LITERAL) ) {s = 1534;}
                        else if ( (LA207_498==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA207_498==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA207_498==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA207_498==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA207_498==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA207_498==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA207_498==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA207_498==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA207_498==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA207_498==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA207_498==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA207_498==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA207_498==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA207_498==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA207_498==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA207_498==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA207_498==AT) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA207_498==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA207_498==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA207_498==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA207_498==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA207_498==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA207_498==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA207_498==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA207_498==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA207_498==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA207_498==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA207_498==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA207_498==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA207_498==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA207_498==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA207_498==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA207_498==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA207_498==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA207_498==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA207_498==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA207_498==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA207_498==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA207_498==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA207_498==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA207_498==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA207_498==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA207_498==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA207_498==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA207_498==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA207_498==LW) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA207_498==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA207_498==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA207_498==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA207_498==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA207_498==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA207_498==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA207_498==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA207_498==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA207_498==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA207_498==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA207_498==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA207_498==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA207_498==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA207_498==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA207_498==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA207_498==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA207_498==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA207_498==SET) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA207_498==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA207_498==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA207_498==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA207_498==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA207_498==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA207_498==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA207_498==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA207_498==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA207_498==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        input.seek(index207_498);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA207_558 = input.LA(1);
                        int index207_558 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_558==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA207_558==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA207_558==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA207_558==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA207_558==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA207_558==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA207_558==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA207_558==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA207_558==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA207_558==STRING_LITERAL) ) {s = 1617;}
                        else if ( (LA207_558==QUOTED_STRING_LITERAL) ) {s = 1618;}
                        else if ( (LA207_558==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA207_558==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA207_558==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA207_558==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA207_558==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA207_558==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA207_558==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA207_558==AT) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA207_558==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA207_558==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA207_558==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA207_558==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA207_558==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA207_558==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA207_558==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA207_558==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA207_558==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA207_558==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA207_558==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA207_558==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA207_558==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA207_558==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA207_558==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA207_558==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA207_558==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA207_558==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA207_558==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA207_558==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA207_558==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA207_558==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA207_558==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA207_558==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA207_558==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA207_558==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA207_558==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA207_558==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA207_558==LW) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA207_558==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA207_558==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA207_558==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA207_558==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA207_558==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA207_558==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA207_558==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA207_558==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA207_558==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA207_558==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA207_558==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA207_558==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA207_558==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA207_558==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA207_558==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA207_558==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA207_558==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA207_558==SET) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA207_558==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA207_558==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA207_558==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA207_558==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA207_558==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA207_558==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA207_558==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA207_558==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA207_558==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        input.seek(index207_558);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA207_618 = input.LA(1);
                        int index207_618 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_618==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA207_618==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA207_618==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA207_618==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA207_618==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA207_618==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA207_618==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA207_618==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA207_618==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA207_618==STRING_LITERAL) ) {s = 1692;}
                        else if ( (LA207_618==QUOTED_STRING_LITERAL) ) {s = 1693;}
                        else if ( (LA207_618==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA207_618==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA207_618==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA207_618==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA207_618==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA207_618==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA207_618==AT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA207_618==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA207_618==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA207_618==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA207_618==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA207_618==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA207_618==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA207_618==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA207_618==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA207_618==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA207_618==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA207_618==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA207_618==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA207_618==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA207_618==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA207_618==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA207_618==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA207_618==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA207_618==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA207_618==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA207_618==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA207_618==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA207_618==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA207_618==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA207_618==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA207_618==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA207_618==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA207_618==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA207_618==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA207_618==LW) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA207_618==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA207_618==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA207_618==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA207_618==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA207_618==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA207_618==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA207_618==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA207_618==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA207_618==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA207_618==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA207_618==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA207_618==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA207_618==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA207_618==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA207_618==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA207_618==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA207_618==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA207_618==SET) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA207_618==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA207_618==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA207_618==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA207_618==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA207_618==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA207_618==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA207_618==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA207_618==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA207_618==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA207_618==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        input.seek(index207_618);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA207_678 = input.LA(1);
                        int index207_678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_678==STRING_LITERAL) ) {s = 1758;}
                        else if ( (LA207_678==QUOTED_STRING_LITERAL) ) {s = 1759;}
                        else if ( (LA207_678==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA207_678==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA207_678==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA207_678==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA207_678==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA207_678==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA207_678==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA207_678==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA207_678==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA207_678==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA207_678==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA207_678==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA207_678==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA207_678==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA207_678==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA207_678==AT) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA207_678==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA207_678==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA207_678==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA207_678==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA207_678==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA207_678==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA207_678==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA207_678==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA207_678==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA207_678==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA207_678==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA207_678==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA207_678==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA207_678==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA207_678==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA207_678==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA207_678==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA207_678==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA207_678==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA207_678==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA207_678==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA207_678==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA207_678==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA207_678==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA207_678==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA207_678==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA207_678==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA207_678==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA207_678==LW) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA207_678==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA207_678==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA207_678==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA207_678==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA207_678==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA207_678==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA207_678==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA207_678==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA207_678==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA207_678==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA207_678==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA207_678==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA207_678==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA207_678==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA207_678==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA207_678==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA207_678==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA207_678==SET) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA207_678==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA207_678==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA207_678==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA207_678==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA207_678==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA207_678==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA207_678==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA207_678==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA207_678==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA207_678==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        input.seek(index207_678);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA207_738 = input.LA(1);
                        int index207_738 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_738==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA207_738==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA207_738==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA207_738==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA207_738==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA207_738==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA207_738==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA207_738==STRING_LITERAL) ) {s = 1840;}
                        else if ( (LA207_738==QUOTED_STRING_LITERAL) ) {s = 1841;}
                        else if ( (LA207_738==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA207_738==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA207_738==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA207_738==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA207_738==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA207_738==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA207_738==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA207_738==AT) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA207_738==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA207_738==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA207_738==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA207_738==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA207_738==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA207_738==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA207_738==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA207_738==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA207_738==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA207_738==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA207_738==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA207_738==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA207_738==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA207_738==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA207_738==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA207_738==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA207_738==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA207_738==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA207_738==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA207_738==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA207_738==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA207_738==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA207_738==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA207_738==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA207_738==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA207_738==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA207_738==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA207_738==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA207_738==LW) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA207_738==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA207_738==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA207_738==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA207_738==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA207_738==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA207_738==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA207_738==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA207_738==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA207_738==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA207_738==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA207_738==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA207_738==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA207_738==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA207_738==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA207_738==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA207_738==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA207_738==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA207_738==SET) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA207_738==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA207_738==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA207_738==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA207_738==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA207_738==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA207_738==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA207_738==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA207_738==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA207_738==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        input.seek(index207_738);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA207_798 = input.LA(1);
                        int index207_798 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_798==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA207_798==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA207_798==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA207_798==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA207_798==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA207_798==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA207_798==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA207_798==STRING_LITERAL) ) {s = 1913;}
                        else if ( (LA207_798==QUOTED_STRING_LITERAL) ) {s = 1914;}
                        else if ( (LA207_798==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA207_798==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA207_798==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA207_798==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA207_798==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA207_798==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA207_798==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA207_798==AT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA207_798==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA207_798==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA207_798==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA207_798==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA207_798==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA207_798==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA207_798==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA207_798==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA207_798==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA207_798==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA207_798==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA207_798==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA207_798==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA207_798==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA207_798==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA207_798==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA207_798==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA207_798==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA207_798==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA207_798==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA207_798==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA207_798==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA207_798==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA207_798==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA207_798==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA207_798==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA207_798==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA207_798==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA207_798==LW) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA207_798==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA207_798==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA207_798==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA207_798==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA207_798==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA207_798==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA207_798==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA207_798==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA207_798==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA207_798==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA207_798==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA207_798==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA207_798==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA207_798==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA207_798==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA207_798==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA207_798==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA207_798==SET) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA207_798==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA207_798==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA207_798==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA207_798==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA207_798==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA207_798==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA207_798==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA207_798==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA207_798==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        input.seek(index207_798);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA207_858 = input.LA(1);
                        int index207_858 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_858==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( ((LA207_858>=STRING_LITERAL && LA207_858<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index207_858);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA207_918 = input.LA(1);
                        int index207_918 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_918==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA207_918==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA207_918==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA207_918==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA207_918==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA207_918==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA207_918==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA207_918==STRING_LITERAL) ) {s = 1989;}
                        else if ( (LA207_918==QUOTED_STRING_LITERAL) ) {s = 1990;}
                        else if ( (LA207_918==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA207_918==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA207_918==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA207_918==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA207_918==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA207_918==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA207_918==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA207_918==AT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA207_918==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA207_918==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA207_918==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA207_918==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA207_918==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA207_918==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA207_918==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA207_918==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA207_918==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA207_918==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA207_918==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA207_918==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA207_918==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA207_918==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA207_918==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA207_918==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA207_918==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA207_918==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA207_918==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA207_918==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA207_918==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA207_918==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA207_918==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA207_918==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA207_918==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA207_918==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA207_918==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA207_918==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA207_918==LW) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA207_918==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA207_918==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA207_918==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA207_918==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA207_918==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA207_918==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA207_918==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA207_918==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA207_918==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA207_918==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA207_918==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA207_918==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA207_918==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA207_918==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA207_918==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA207_918==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA207_918==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA207_918==SET) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA207_918==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA207_918==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA207_918==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA207_918==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA207_918==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA207_918==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA207_918==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA207_918==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA207_918==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        input.seek(index207_918);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA207_978 = input.LA(1);
                        int index207_978 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_978==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA207_978==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA207_978==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA207_978==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA207_978==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA207_978==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA207_978==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA207_978==STRING_LITERAL) ) {s = 2062;}
                        else if ( (LA207_978==QUOTED_STRING_LITERAL) ) {s = 2063;}
                        else if ( (LA207_978==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA207_978==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA207_978==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA207_978==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA207_978==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA207_978==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA207_978==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA207_978==AT) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA207_978==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA207_978==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA207_978==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA207_978==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA207_978==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA207_978==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA207_978==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA207_978==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA207_978==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA207_978==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA207_978==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA207_978==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA207_978==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA207_978==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA207_978==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA207_978==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA207_978==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA207_978==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA207_978==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA207_978==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA207_978==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA207_978==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA207_978==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA207_978==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA207_978==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA207_978==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA207_978==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA207_978==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA207_978==LW) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA207_978==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA207_978==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA207_978==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA207_978==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA207_978==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA207_978==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA207_978==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA207_978==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA207_978==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA207_978==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA207_978==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA207_978==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA207_978==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA207_978==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA207_978==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA207_978==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA207_978==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA207_978==SET) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA207_978==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA207_978==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA207_978==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA207_978==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA207_978==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA207_978==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA207_978==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA207_978==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA207_978==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        input.seek(index207_978);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA207_1038 = input.LA(1);
                        int index207_1038 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1038==STRING_LITERAL) ) {s = 2128;}
                        else if ( (LA207_1038==QUOTED_STRING_LITERAL) ) {s = 2129;}
                        else if ( (LA207_1038==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA207_1038==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA207_1038==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA207_1038==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA207_1038==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA207_1038==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA207_1038==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA207_1038==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA207_1038==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA207_1038==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA207_1038==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA207_1038==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA207_1038==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA207_1038==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA207_1038==AT) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA207_1038==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA207_1038==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA207_1038==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA207_1038==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA207_1038==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA207_1038==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA207_1038==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA207_1038==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA207_1038==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA207_1038==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA207_1038==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA207_1038==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA207_1038==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA207_1038==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA207_1038==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA207_1038==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA207_1038==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA207_1038==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA207_1038==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA207_1038==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA207_1038==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA207_1038==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA207_1038==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA207_1038==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA207_1038==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA207_1038==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA207_1038==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA207_1038==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA207_1038==LW) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA207_1038==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA207_1038==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA207_1038==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA207_1038==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA207_1038==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA207_1038==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA207_1038==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA207_1038==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA207_1038==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA207_1038==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA207_1038==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA207_1038==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA207_1038==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA207_1038==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA207_1038==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA207_1038==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA207_1038==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA207_1038==SET) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA207_1038==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA207_1038==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA207_1038==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA207_1038==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA207_1038==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA207_1038==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA207_1038==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA207_1038==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA207_1038==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        input.seek(index207_1038);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA207_1098 = input.LA(1);
                        int index207_1098 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1098==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA207_1098==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA207_1098==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA207_1098==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA207_1098==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA207_1098==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA207_1098==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA207_1098==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA207_1098==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA207_1098==STRING_LITERAL) ) {s = 2210;}
                        else if ( (LA207_1098==QUOTED_STRING_LITERAL) ) {s = 2211;}
                        else if ( (LA207_1098==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA207_1098==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA207_1098==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA207_1098==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA207_1098==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA207_1098==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA207_1098==AT) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA207_1098==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA207_1098==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA207_1098==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA207_1098==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA207_1098==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA207_1098==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA207_1098==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA207_1098==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA207_1098==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA207_1098==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA207_1098==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA207_1098==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA207_1098==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA207_1098==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA207_1098==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA207_1098==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA207_1098==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA207_1098==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA207_1098==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA207_1098==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA207_1098==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA207_1098==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA207_1098==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA207_1098==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA207_1098==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA207_1098==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA207_1098==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA207_1098==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA207_1098==LW) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA207_1098==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA207_1098==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA207_1098==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA207_1098==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA207_1098==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA207_1098==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA207_1098==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA207_1098==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA207_1098==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA207_1098==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA207_1098==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA207_1098==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA207_1098==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA207_1098==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA207_1098==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA207_1098==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA207_1098==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA207_1098==SET) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA207_1098==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA207_1098==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA207_1098==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA207_1098==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA207_1098==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA207_1098==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA207_1098==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA207_1098==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA207_1098==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA207_1098==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        input.seek(index207_1098);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA207_1158 = input.LA(1);
                        int index207_1158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1158==SELECT) ) {s = 2276;}
                        else if ( (LA207_1158==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA207_1158==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA207_1158==AT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA207_1158==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA207_1158==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA207_1158==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA207_1158==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA207_1158==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA207_1158==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA207_1158==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA207_1158==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA207_1158==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA207_1158==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA207_1158==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA207_1158==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA207_1158==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA207_1158==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA207_1158==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA207_1158==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA207_1158==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA207_1158==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA207_1158==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA207_1158==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA207_1158==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA207_1158==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA207_1158==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA207_1158==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA207_1158==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA207_1158==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA207_1158==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA207_1158==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA207_1158==LW) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA207_1158==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA207_1158==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA207_1158==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA207_1158==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA207_1158==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA207_1158==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA207_1158==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA207_1158==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA207_1158==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA207_1158==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA207_1158==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA207_1158==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA207_1158==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA207_1158==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA207_1158==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA207_1158==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        input.seek(index207_1158);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA207_1159 = input.LA(1);
                        int index207_1159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1159==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA207_1159==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA207_1159==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA207_1159==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA207_1159==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA207_1159==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA207_1159==LT) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA207_1159==GT) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA207_1159==LE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA207_1159==GE) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA207_1159==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA207_1159==IS) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA207_1159==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA207_1159==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA207_1159==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA207_1159==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA207_1159==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA207_1159==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA207_1159==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA207_1159==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA207_1159==RPAREN) ) {s = 2345;}
                        else if ( (LA207_1159==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA207_1159==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA207_1159==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA207_1159==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA207_1159==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        input.seek(index207_1159);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA207_1160 = input.LA(1);
                        int index207_1160 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1160==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA207_1160==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA207_1160==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA207_1160==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA207_1160==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA207_1160==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA207_1160==LT) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA207_1160==GT) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA207_1160==LE) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA207_1160==GE) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA207_1160==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA207_1160==IS) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA207_1160==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA207_1160==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA207_1160==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA207_1160==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA207_1160==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA207_1160==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA207_1160==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA207_1160==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA207_1160==RPAREN) ) {s = 2371;}
                        else if ( (LA207_1160==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA207_1160==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA207_1160==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA207_1160==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA207_1160==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        input.seek(index207_1160);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA207_1235 = input.LA(1);
                        int index207_1235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1235==RPAREN) ) {s = 2377;}
                        else if ( (LA207_1235==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA207_1235==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA207_1235==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA207_1235==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA207_1235==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA207_1235==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA207_1235==LT) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA207_1235==GT) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA207_1235==LE) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA207_1235==GE) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA207_1235==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA207_1235==IS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA207_1235==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA207_1235==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA207_1235==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA207_1235==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA207_1235==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA207_1235==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA207_1235==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA207_1235==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA207_1235==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA207_1235==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA207_1235==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA207_1235==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA207_1235==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        input.seek(index207_1235);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA207_1236 = input.LA(1);
                        int index207_1236 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1236==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA207_1236==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA207_1236==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA207_1236==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA207_1236==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA207_1236==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA207_1236==LT) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA207_1236==GT) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA207_1236==LE) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA207_1236==GE) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA207_1236==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA207_1236==IS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA207_1236==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA207_1236==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA207_1236==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA207_1236==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA207_1236==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA207_1236==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA207_1236==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA207_1236==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA207_1236==RPAREN) ) {s = 2423;}
                        else if ( (LA207_1236==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA207_1236==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA207_1236==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA207_1236==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA207_1236==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        input.seek(index207_1236);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA207_1319 = input.LA(1);
                        int index207_1319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1319==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA207_1319==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA207_1319==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA207_1319==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA207_1319==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA207_1319==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA207_1319==LT) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA207_1319==GT) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA207_1319==LE) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA207_1319==GE) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA207_1319==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA207_1319==IS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA207_1319==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA207_1319==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA207_1319==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA207_1319==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA207_1319==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA207_1319==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA207_1319==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA207_1319==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA207_1319==RPAREN) ) {s = 2449;}
                        else if ( (LA207_1319==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA207_1319==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA207_1319==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA207_1319==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA207_1319==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        input.seek(index207_1319);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA207_1320 = input.LA(1);
                        int index207_1320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1320==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA207_1320==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA207_1320==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA207_1320==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA207_1320==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA207_1320==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA207_1320==LT) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA207_1320==GT) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA207_1320==LE) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA207_1320==GE) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA207_1320==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA207_1320==IS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA207_1320==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA207_1320==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA207_1320==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA207_1320==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA207_1320==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA207_1320==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA207_1320==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA207_1320==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA207_1320==RPAREN) ) {s = 2475;}
                        else if ( (LA207_1320==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA207_1320==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA207_1320==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA207_1320==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA207_1320==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        input.seek(index207_1320);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA207_1385 = input.LA(1);
                        int index207_1385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1385==RPAREN) ) {s = 14;}
                        else if ( (LA207_1385==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA207_1385==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA207_1385==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA207_1385==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA207_1385==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA207_1385==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA207_1385==LT) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA207_1385==GT) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA207_1385==LE) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA207_1385==GE) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA207_1385==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA207_1385==IS) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA207_1385==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA207_1385==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA207_1385==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA207_1385==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA207_1385==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA207_1385==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA207_1385==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA207_1385==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA207_1385==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA207_1385==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA207_1385==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA207_1385==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA207_1385==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        input.seek(index207_1385);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA207_1386 = input.LA(1);
                        int index207_1386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1386==RPAREN) ) {s = 14;}
                        else if ( (LA207_1386==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA207_1386==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA207_1386==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA207_1386==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA207_1386==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA207_1386==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA207_1386==LT) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA207_1386==GT) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA207_1386==LE) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA207_1386==GE) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA207_1386==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA207_1386==IS) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA207_1386==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA207_1386==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA207_1386==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA207_1386==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA207_1386==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA207_1386==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA207_1386==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA207_1386==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA207_1386==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA207_1386==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA207_1386==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA207_1386==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA207_1386==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        input.seek(index207_1386);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA207_1467 = input.LA(1);
                        int index207_1467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1467==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA207_1467==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA207_1467==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA207_1467==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA207_1467==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA207_1467==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA207_1467==LT) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA207_1467==GT) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA207_1467==LE) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA207_1467==GE) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA207_1467==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA207_1467==IS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA207_1467==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA207_1467==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA207_1467==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA207_1467==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA207_1467==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA207_1467==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA207_1467==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA207_1467==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA207_1467==RPAREN) ) {s = 2553;}
                        else if ( (LA207_1467==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA207_1467==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA207_1467==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA207_1467==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA207_1467==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        input.seek(index207_1467);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA207_1468 = input.LA(1);
                        int index207_1468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1468==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA207_1468==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA207_1468==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA207_1468==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA207_1468==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA207_1468==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA207_1468==LT) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA207_1468==GT) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA207_1468==LE) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA207_1468==GE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA207_1468==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA207_1468==IS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA207_1468==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA207_1468==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA207_1468==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA207_1468==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA207_1468==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA207_1468==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA207_1468==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA207_1468==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA207_1468==RPAREN) ) {s = 2579;}
                        else if ( (LA207_1468==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA207_1468==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA207_1468==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA207_1468==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA207_1468==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        input.seek(index207_1468);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA207_1533 = input.LA(1);
                        int index207_1533 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1533==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA207_1533==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA207_1533==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA207_1533==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA207_1533==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA207_1533==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA207_1533==LT) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA207_1533==GT) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA207_1533==LE) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA207_1533==GE) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA207_1533==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA207_1533==IS) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA207_1533==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA207_1533==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA207_1533==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA207_1533==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA207_1533==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA207_1533==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA207_1533==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA207_1533==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA207_1533==RPAREN) ) {s = 2605;}
                        else if ( (LA207_1533==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA207_1533==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA207_1533==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA207_1533==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA207_1533==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        input.seek(index207_1533);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA207_1534 = input.LA(1);
                        int index207_1534 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1534==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA207_1534==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA207_1534==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA207_1534==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA207_1534==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA207_1534==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA207_1534==LT) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA207_1534==GT) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA207_1534==LE) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA207_1534==GE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA207_1534==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA207_1534==IS) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA207_1534==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA207_1534==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA207_1534==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA207_1534==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA207_1534==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA207_1534==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA207_1534==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA207_1534==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA207_1534==RPAREN) ) {s = 2631;}
                        else if ( (LA207_1534==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA207_1534==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA207_1534==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA207_1534==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA207_1534==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        input.seek(index207_1534);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA207_1617 = input.LA(1);
                        int index207_1617 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1617==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA207_1617==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA207_1617==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA207_1617==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA207_1617==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA207_1617==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA207_1617==LT) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA207_1617==GT) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA207_1617==LE) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA207_1617==GE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA207_1617==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA207_1617==IS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA207_1617==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA207_1617==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA207_1617==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA207_1617==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA207_1617==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA207_1617==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA207_1617==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA207_1617==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA207_1617==RPAREN) ) {s = 2657;}
                        else if ( (LA207_1617==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA207_1617==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA207_1617==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA207_1617==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA207_1617==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        input.seek(index207_1617);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA207_1618 = input.LA(1);
                        int index207_1618 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1618==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA207_1618==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA207_1618==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA207_1618==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA207_1618==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA207_1618==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA207_1618==LT) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA207_1618==GT) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA207_1618==LE) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA207_1618==GE) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA207_1618==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA207_1618==IS) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA207_1618==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA207_1618==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA207_1618==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA207_1618==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA207_1618==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA207_1618==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA207_1618==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA207_1618==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA207_1618==RPAREN) ) {s = 2683;}
                        else if ( (LA207_1618==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA207_1618==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA207_1618==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA207_1618==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA207_1618==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        input.seek(index207_1618);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA207_1692 = input.LA(1);
                        int index207_1692 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1692==RPAREN) ) {s = 2689;}
                        else if ( (LA207_1692==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA207_1692==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA207_1692==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA207_1692==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA207_1692==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA207_1692==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA207_1692==LT) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA207_1692==GT) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA207_1692==LE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA207_1692==GE) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA207_1692==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA207_1692==IS) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA207_1692==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA207_1692==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA207_1692==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA207_1692==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA207_1692==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA207_1692==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA207_1692==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA207_1692==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA207_1692==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA207_1692==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA207_1692==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA207_1692==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA207_1692==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        input.seek(index207_1692);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA207_1693 = input.LA(1);
                        int index207_1693 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1693==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA207_1693==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA207_1693==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA207_1693==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA207_1693==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA207_1693==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA207_1693==LT) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA207_1693==GT) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA207_1693==LE) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA207_1693==GE) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA207_1693==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA207_1693==IS) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA207_1693==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA207_1693==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA207_1693==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA207_1693==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA207_1693==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA207_1693==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA207_1693==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA207_1693==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA207_1693==RPAREN) ) {s = 2735;}
                        else if ( (LA207_1693==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA207_1693==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA207_1693==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA207_1693==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA207_1693==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        input.seek(index207_1693);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA207_1758 = input.LA(1);
                        int index207_1758 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1758==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA207_1758==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA207_1758==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA207_1758==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA207_1758==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA207_1758==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA207_1758==LT) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA207_1758==GT) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA207_1758==LE) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA207_1758==GE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA207_1758==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA207_1758==IS) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA207_1758==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA207_1758==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA207_1758==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA207_1758==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA207_1758==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA207_1758==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA207_1758==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA207_1758==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA207_1758==RPAREN) ) {s = 2761;}
                        else if ( (LA207_1758==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA207_1758==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA207_1758==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA207_1758==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA207_1758==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        input.seek(index207_1758);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA207_1759 = input.LA(1);
                        int index207_1759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1759==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA207_1759==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA207_1759==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA207_1759==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA207_1759==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA207_1759==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA207_1759==LT) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA207_1759==GT) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA207_1759==LE) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA207_1759==GE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA207_1759==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA207_1759==IS) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA207_1759==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA207_1759==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA207_1759==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA207_1759==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA207_1759==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA207_1759==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA207_1759==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA207_1759==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA207_1759==RPAREN) ) {s = 2787;}
                        else if ( (LA207_1759==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA207_1759==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA207_1759==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA207_1759==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA207_1759==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        input.seek(index207_1759);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA207_1840 = input.LA(1);
                        int index207_1840 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1840==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA207_1840==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA207_1840==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA207_1840==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA207_1840==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA207_1840==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA207_1840==LT) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA207_1840==GT) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA207_1840==LE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA207_1840==GE) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA207_1840==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA207_1840==IS) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA207_1840==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA207_1840==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA207_1840==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA207_1840==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA207_1840==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA207_1840==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA207_1840==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA207_1840==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA207_1840==RPAREN) ) {s = 2813;}
                        else if ( (LA207_1840==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA207_1840==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA207_1840==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA207_1840==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA207_1840==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        input.seek(index207_1840);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA207_1841 = input.LA(1);
                        int index207_1841 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1841==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA207_1841==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA207_1841==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA207_1841==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA207_1841==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA207_1841==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA207_1841==LT) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA207_1841==GT) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA207_1841==LE) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA207_1841==GE) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA207_1841==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA207_1841==IS) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA207_1841==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA207_1841==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA207_1841==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA207_1841==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA207_1841==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA207_1841==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA207_1841==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA207_1841==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA207_1841==RPAREN) ) {s = 2839;}
                        else if ( (LA207_1841==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA207_1841==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA207_1841==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA207_1841==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA207_1841==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        input.seek(index207_1841);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA207_1913 = input.LA(1);
                        int index207_1913 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1913==RPAREN) ) {s = 2845;}
                        else if ( (LA207_1913==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA207_1913==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA207_1913==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA207_1913==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA207_1913==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA207_1913==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA207_1913==LT) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA207_1913==GT) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA207_1913==LE) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA207_1913==GE) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA207_1913==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA207_1913==IS) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA207_1913==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA207_1913==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA207_1913==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA207_1913==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA207_1913==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA207_1913==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA207_1913==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA207_1913==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA207_1913==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA207_1913==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA207_1913==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA207_1913==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA207_1913==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        input.seek(index207_1913);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA207_1914 = input.LA(1);
                        int index207_1914 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1914==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA207_1914==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA207_1914==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA207_1914==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA207_1914==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA207_1914==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA207_1914==LT) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA207_1914==GT) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA207_1914==LE) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA207_1914==GE) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA207_1914==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA207_1914==IS) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA207_1914==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA207_1914==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA207_1914==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA207_1914==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA207_1914==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA207_1914==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA207_1914==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA207_1914==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA207_1914==RPAREN) ) {s = 2891;}
                        else if ( (LA207_1914==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA207_1914==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA207_1914==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA207_1914==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA207_1914==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        input.seek(index207_1914);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA207_1989 = input.LA(1);
                        int index207_1989 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1989==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA207_1989==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA207_1989==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA207_1989==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA207_1989==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA207_1989==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA207_1989==LT) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA207_1989==GT) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA207_1989==LE) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA207_1989==GE) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA207_1989==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA207_1989==IS) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA207_1989==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA207_1989==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA207_1989==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA207_1989==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA207_1989==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA207_1989==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA207_1989==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA207_1989==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA207_1989==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA207_1989==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA207_1989==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA207_1989==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA207_1989==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA207_1989==RPAREN) ) {s = 14;}
                        input.seek(index207_1989);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA207_1990 = input.LA(1);
                        int index207_1990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_1990==RPAREN) ) {s = 14;}
                        else if ( (LA207_1990==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA207_1990==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA207_1990==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA207_1990==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA207_1990==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA207_1990==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA207_1990==LT) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA207_1990==GT) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA207_1990==LE) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA207_1990==GE) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA207_1990==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA207_1990==IS) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA207_1990==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA207_1990==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA207_1990==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA207_1990==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA207_1990==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA207_1990==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA207_1990==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA207_1990==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA207_1990==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA207_1990==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA207_1990==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA207_1990==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA207_1990==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        input.seek(index207_1990);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA207_2062 = input.LA(1);
                        int index207_2062 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2062==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA207_2062==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA207_2062==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA207_2062==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA207_2062==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA207_2062==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA207_2062==LT) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA207_2062==GT) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA207_2062==LE) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA207_2062==GE) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA207_2062==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA207_2062==IS) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA207_2062==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA207_2062==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA207_2062==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA207_2062==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA207_2062==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA207_2062==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA207_2062==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA207_2062==RPAREN) ) {s = 2968;}
                        else if ( (LA207_2062==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA207_2062==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA207_2062==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA207_2062==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA207_2062==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        input.seek(index207_2062);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA207_2063 = input.LA(1);
                        int index207_2063 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2063==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA207_2063==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA207_2063==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA207_2063==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA207_2063==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA207_2063==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA207_2063==LT) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA207_2063==GT) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA207_2063==LE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA207_2063==GE) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA207_2063==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA207_2063==IS) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA207_2063==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA207_2063==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA207_2063==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA207_2063==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA207_2063==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA207_2063==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA207_2063==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA207_2063==RPAREN) ) {s = 2993;}
                        else if ( (LA207_2063==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA207_2063==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA207_2063==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA207_2063==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA207_2063==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        input.seek(index207_2063);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA207_2128 = input.LA(1);
                        int index207_2128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2128==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA207_2128==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA207_2128==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA207_2128==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA207_2128==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA207_2128==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA207_2128==LT) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA207_2128==GT) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA207_2128==LE) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA207_2128==GE) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA207_2128==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA207_2128==IS) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA207_2128==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA207_2128==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA207_2128==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA207_2128==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA207_2128==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA207_2128==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA207_2128==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA207_2128==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA207_2128==AS) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA207_2128==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA207_2128==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA207_2128==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA207_2128==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA207_2128==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA207_2128==RPAREN) ) {s = 14;}
                        input.seek(index207_2128);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA207_2129 = input.LA(1);
                        int index207_2129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2129==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA207_2129==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA207_2129==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA207_2129==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA207_2129==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA207_2129==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA207_2129==LT) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA207_2129==GT) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA207_2129==LE) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA207_2129==GE) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA207_2129==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA207_2129==IS) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA207_2129==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA207_2129==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA207_2129==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA207_2129==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA207_2129==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA207_2129==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA207_2129==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA207_2129==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA207_2129==AS) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA207_2129==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA207_2129==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA207_2129==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA207_2129==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA207_2129==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA207_2129==RPAREN) ) {s = 14;}
                        input.seek(index207_2129);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA207_2210 = input.LA(1);
                        int index207_2210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2210==RPAREN) ) {s = 3053;}
                        else if ( (LA207_2210==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA207_2210==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA207_2210==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA207_2210==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA207_2210==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA207_2210==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA207_2210==LT) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA207_2210==GT) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA207_2210==LE) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA207_2210==GE) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA207_2210==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA207_2210==IS) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA207_2210==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA207_2210==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA207_2210==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA207_2210==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        else if ( (LA207_2210==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA207_2210==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA207_2210==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3072;}
                        else if ( (LA207_2210==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA207_2210==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA207_2210==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA207_2210==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA207_2210==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        input.seek(index207_2210);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA207_2211 = input.LA(1);
                        int index207_2211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA207_2211==RPAREN) ) {s = 3078;}
                        else if ( (LA207_2211==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA207_2211==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA207_2211==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA207_2211==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA207_2211==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA207_2211==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA207_2211==LT) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA207_2211==GT) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA207_2211==LE) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA207_2211==GE) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA207_2211==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA207_2211==IS) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA207_2211==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA207_2211==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA207_2211==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA207_2211==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA207_2211==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA207_2211==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA207_2211==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3097;}
                        else if ( (LA207_2211==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA207_2211==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA207_2211==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA207_2211==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA207_2211==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        input.seek(index207_2211);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA207_2345 = input.LA(1);
                        int index207_2345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2345);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA207_2371 = input.LA(1);
                        int index207_2371 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2371);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA207_2377 = input.LA(1);
                        int index207_2377 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2377);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA207_2423 = input.LA(1);
                        int index207_2423 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2423);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA207_2449 = input.LA(1);
                        int index207_2449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2449);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA207_2475 = input.LA(1);
                        int index207_2475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2475);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA207_2553 = input.LA(1);
                        int index207_2553 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2553);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA207_2579 = input.LA(1);
                        int index207_2579 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2579);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA207_2605 = input.LA(1);
                        int index207_2605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2605);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA207_2631 = input.LA(1);
                        int index207_2631 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2631);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA207_2657 = input.LA(1);
                        int index207_2657 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2657);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA207_2683 = input.LA(1);
                        int index207_2683 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2683);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA207_2689 = input.LA(1);
                        int index207_2689 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2689);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA207_2735 = input.LA(1);
                        int index207_2735 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2735);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA207_2761 = input.LA(1);
                        int index207_2761 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2761);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA207_2787 = input.LA(1);
                        int index207_2787 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2787);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA207_2813 = input.LA(1);
                        int index207_2813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2813);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA207_2839 = input.LA(1);
                        int index207_2839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2839);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA207_2845 = input.LA(1);
                        int index207_2845 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2845);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA207_2891 = input.LA(1);
                        int index207_2891 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2891);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA207_2968 = input.LA(1);
                        int index207_2968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2968);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA207_2993 = input.LA(1);
                        int index207_2993 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_2993);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA207_3053 = input.LA(1);
                        int index207_3053 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_3053);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA207_3078 = input.LA(1);
                        int index207_3078 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index207_3078);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1848 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1852 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1858 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1877 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1881 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1887 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1920 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDecl1949 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDecl1951 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_expressionDecl1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDecl1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl1995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl1997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum2040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum2044 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4026001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum2052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum2057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2104 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4026001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2216 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4004001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2257 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4006001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2389 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x408C001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2395 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4004001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2437 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x408E001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2443 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4006001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextExpr_in_eplExpression2488 = new BitSet(new long[]{0x0040020008000010L,0x4000800000000000L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2495 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2500 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2505 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2510 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2515 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createContextExpr_in_eplExpression2520 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2525 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2530 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_contextExpr2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextExpr2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2574 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2577 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2583 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2586 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2590 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2593 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2597 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2603 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2606 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2613 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2616 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2619 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2626 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2629 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2636 = new BitSet(new long[]{0x0130800080005000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2639 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2646 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2649 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2652 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2679 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2688 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2691 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2754 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2758 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2803 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2807 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2826 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2828 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2831 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2833 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2841 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2878 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2885 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2892 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2898 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2905 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2907 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2915 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2966 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2968 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2971 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2973 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2977 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem3003 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem3018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem3020 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3022 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem3025 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3027 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3033 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem3047 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3050 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3120 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3122 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3124 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3127 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3129 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3133 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3160 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3178 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3183 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3192 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3196 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3198 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3201 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3249 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3251 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3257 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3259 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3262 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3266 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3272 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3274 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3283 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3285 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3287 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3294 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3296 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3303 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3305 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3307 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3383 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3402 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3404 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3407 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3409 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3416 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3469 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3471 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3475 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3477 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3482 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3515 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3568 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3572 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3577 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3619 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3624 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3653 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3684 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3725 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3731 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3736 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3741 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3750 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3754 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3758 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3773 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3792 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3809 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3812 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3901 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x5002001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3904 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3930 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr4032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr4041 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList4088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4174 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x5002001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4217 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4245 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4276 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4280 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4287 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0022000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaExpr4327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CREATE_in_createContextExpr4389 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_createContextExpr4391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextExpr4395 = new BitSet(new long[]{0x0000100000020000L,0xA008000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextExpr4397 = new BitSet(new long[]{0x0000100000020000L,0xA008000000000000L});
    public static final BitSet FOLLOW_createContextDetail_in_createContextExpr4400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_createContextDetail4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextDetail4426 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_createContextDetail4428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextDetail4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_createContextDetail4447 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_createContextDetail4450 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextDetail4454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4457 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextDetail4459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextDetail4478 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4481 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextDetail4483 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextDetail4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextDetail4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIATED_in_createContextDetail4507 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_createContextDetail4510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextFilter_in_createContextDetail4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_createContextDetail4519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_createContextDetail4522 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AFTER_in_createContextDetail4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_createContextDetail4526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextFilter4554 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextFilter4556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextFilter4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4584 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_AND_EXPR_in_createContextPartitionItem4588 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_createContextPartitionItem4590 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4593 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextPartitionItem4597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextPartitionItem4599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_createContextGroupItem4625 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createContextGroupItem4627 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextGroupItem4629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextGroupItem4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual4663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4754 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4760 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4849 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4870 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4887 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4890 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4933 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4937 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4941 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4944 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4965 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4979 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4981 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent5048 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5051 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent5054 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5057 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair5074 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause5135 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause5141 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause5147 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause5153 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_selectClause5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList5190 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement5237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement5242 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement5245 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector5307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector5309 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector5312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression5347 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression5351 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression5355 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression5359 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5368 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5373 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression5380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5384 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5390 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression5397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5471 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5526 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5532 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5539 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5544 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5550 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5556 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5562 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5612 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5614 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5619 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5650 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5655 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5682 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5721 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5767 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5771 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5775 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5779 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5783 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5938 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom6000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom6006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine6062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine6067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem6096 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem6098 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem6100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression6125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression6127 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression6129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression6164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression6166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression6170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression6172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression6187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression6203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression6256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression6258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression6261 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression6263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_viewExpression6321 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression6333 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression6335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6401 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6441 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6443 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6468 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6553 = new BitSet(new long[]{0x0030800080005002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6568 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6572 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6576 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6580 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6637 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_number_in_outputLimit6648 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6654 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6660 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6693 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6710 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_outputLimit6712 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6717 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit6739 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimit6770 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6958 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7006 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7012 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit7019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet7089 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7093 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7097 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7101 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7105 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7110 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet7116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause7146 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_whenClause7149 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause7151 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_whenClause7154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause7167 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_elseClause7170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7197 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7200 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7203 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7217 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_caseExpression7219 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7221 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7224 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression7251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7262 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression7267 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7269 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7301 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression7306 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7308 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression7345 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression7348 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression7351 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression7376 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7392 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression7405 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7423 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7437 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression7439 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression7453 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression7467 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7497 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7532 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7537 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7542 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7702 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7734 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7738 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7742 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7746 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7805 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7911 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7950 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7956 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x08A0000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7981 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression8010 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x08A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression8044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression8169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression8215 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression8267 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8269 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression8272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression8274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression8326 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery8390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8421 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8427 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression8475 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression8478 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression8501 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression8504 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression8507 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8526 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8551 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8560 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8567 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression8618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression8624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression8629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8634 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8641 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression8680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression8687 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression8692 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression8698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign8720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign8723 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_newAssign8725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8832 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8838 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8841 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8844 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8854 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8862 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8898 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8905 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8910 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8978 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC01E001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8984 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression8998 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9005 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc9056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9059 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9063 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9068 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc9083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9086 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9090 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9095 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc9110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9113 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9125 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9130 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc9145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc9165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9168 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9172 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9177 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc9192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9195 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9199 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9204 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc9219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9222 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9226 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9231 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc9246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc9251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc9256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc9261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9264 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9269 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9275 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc9288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9290 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9295 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9306 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9313 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc9362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9364 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9369 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9380 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9387 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc9436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9439 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc9450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9452 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9461 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9468 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9523 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9541 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9568 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9581 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9583 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc9590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9600 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9607 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc9654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9657 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9680 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9687 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation9733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation9735 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation9738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation9741 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_firstAggregation9743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation9749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9754 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9761 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation9818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation9820 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation9823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation9826 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_lastAggregation9828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation9834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9839 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9846 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation9904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation9906 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation9908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation9911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9916 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9923 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr9982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr10002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr10015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr10034 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr10036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction10064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction10069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction10081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction10084 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction10086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass10118 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass10126 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass10129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass10133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass10166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass10171 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass10174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass10178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent10210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent10217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent10241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent10253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent10265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_funcIdent10276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs10293 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs10298 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs10305 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10322 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem10325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10336 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList10338 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression10369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression10388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression10391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat10444 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10451 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat10453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat10455 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat10459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10488 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression10493 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10495 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10527 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression10532 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10534 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10569 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10578 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression10645 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression10651 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression10659 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression10665 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression10674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList10789 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList10794 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom10823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix10838 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix10844 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix10846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix10848 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix10855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix10857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix10865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix10867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression10929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression10933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_observerExpression10950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression10961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression10964 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression10966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression10969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression11020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression11025 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression11029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression11033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression11046 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression11049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression11051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange11072 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09007L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11084 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC816001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11107 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange11120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression11207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression11209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression11218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression11229 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression11231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression11234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression11246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic11324 = new BitSet(new long[]{0x803801E80FFC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic11327 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic11329 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic11331 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic11335 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic11338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic11340 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic11345 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic11351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList11404 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement11433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement11449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement11454 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement11457 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector11507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector11509 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector11512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression11563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression11565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression11574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression11585 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression11587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression11590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression11602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression11613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation11665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation11669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation11672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation11674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation11676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier11731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy11815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11864 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_expressionList11867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList11898 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime11941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime11952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime11963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime11975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime11986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime12010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime12015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast12035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable12051 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable12056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable12060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar12129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand12149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand12162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand12174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand12176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_frequencyOperand12179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand12183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand12185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand12234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand12243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_rangeOperand12246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator12366 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator12370 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator12372 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator12375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator12423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator12427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator12429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator12432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList12479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList12484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList12490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter12512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter12518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter12523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty12542 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8410000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic12579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic12583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic12585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic12604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic12618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent12772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent12774 = new BitSet(new long[]{0x803801E807FC4422L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent12817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent12833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent12840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent12847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent12865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent12872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent12879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent12886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent12893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent12900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent12907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent12914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent12921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent12928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent12935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent12942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent12949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent12956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent12970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent12984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent12991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent12998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent13005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent13012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent13026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent13033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent13040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent13047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent13054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent13061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent13068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent13075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent13084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent13093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent13100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent13107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent13114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent13121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent13128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent13135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent13142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent13149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_keywordAllowedIdent13156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr13177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent13200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod13233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart13399 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart13403 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart13405 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart13409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart13413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart13461 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart13465 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart13467 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart13475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart13523 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart13527 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart13529 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart13537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart13585 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart13589 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart13591 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart13595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart13599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart13648 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart13652 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart13654 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart13658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart13662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart13711 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart13715 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart13717 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart13729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart13779 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart13783 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart13785 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart13793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart13797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart13847 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart13851 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart13853 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number13920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number13937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number13954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number13971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution13992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant14011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant14018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant14031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant14051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant14071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant14093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant14099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_numberconstant14103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant14132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12030 = new BitSet(new long[]{0x0000000000000002L});
}
