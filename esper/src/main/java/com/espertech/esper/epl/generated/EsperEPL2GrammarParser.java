  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "START", "CONTEXT", "INITIATED", "TERMINATED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "TERM_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_VAR", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "CREATE_CTX", "CREATE_CTX_FIXED", "CREATE_CTX_PART", "CREATE_CTX_CAT", "CREATE_CTX_INIT", "CREATE_CTX_CATITEM", "PARTITIONITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "IDENT", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "GOES", "COMMA", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ATCHAR", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=192;
    public static final int FLOAT_SUFFIX=373;
    public static final int STAR=316;
    public static final int DOT_EXPR=202;
    public static final int NUMERIC_PARAM_LIST=130;
    public static final int MOD=334;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=201;
    public static final int OUTERJOIN_EXPR=174;
    public static final int CREATE_COL_TYPE_LIST=255;
    public static final int BSR=356;
    public static final int MERGE_INS=274;
    public static final int MONTH_PART=207;
    public static final int LIB_FUNCTION=200;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=178;
    public static final int CREATE_CTX_FIXED=279;
    public static final int MATCHREC_PATTERN_CONCAT=296;
    public static final int INC=349;
    public static final int LNOT=345;
    public static final int RPAREN=309;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=321;
    public static final int BSR_ASSIGN=357;
    public static final int CAST_EXPR=234;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=173;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=326;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=139;
    public static final int LAST_AGGREG=262;
    public static final int GOES=310;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int INITIATED=127;
    public static final int FOLLOWED_BY_EXPR=133;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=336;
    public static final int HOUR_PART=210;
    public static final int RBRACK=315;
    public static final int MATCHREC_PATTERN_NESTED=298;
    public static final int MATCH_UNTIL_RANGE_CLOSED=253;
    public static final int GE=330;
    public static final int METHOD_JOIN_EXPR=249;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int CREATE_CTX_PART=280;
    public static final int EVENT_FILTER_EXPR=138;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=137;
    public static final int MINUS_ASSIGN=350;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=149;
    public static final int NUM_DOUBLE=292;
    public static final int INSERTINTO_STREAM_NAME=222;
    public static final int LCURLY=306;
    public static final int UNARY_MINUS=203;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=220;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=147;
    public static final int WS=365;
    public static final int SUBSELECT_GROUP_EXPR=226;
    public static final int ON_SELECT_INSERT_EXPR=244;
    public static final int YEAR_PART=206;
    public static final int FOLLOWED_BY_ITEM=134;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=340;
    public static final int EXPRCOL=197;
    public static final int SL_COMMENT=366;
    public static final int NULL_TYPE=291;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=251;
    public static final int GT=328;
    public static final int BNOT=346;
    public static final int WHERE_EXPR=158;
    public static final int EVAL_IS_EXPR=165;
    public static final int END=33;
    public static final int LAND=363;
    public static final int INNERJOIN_EXPR=175;
    public static final int TERM_LIMIT_EXPR=195;
    public static final int NOT_REGEXP=217;
    public static final int MATCH_UNTIL_EXPR=250;
    public static final int EVENT_PROP_EXPR=182;
    public static final int LBRACK=314;
    public static final int MERGE_UPD=273;
    public static final int VIEW_EXPR=155;
    public static final int ANNOTATION=258;
    public static final int LONG_TYPE=286;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=140;
    public static final int MATCHREC_PATTERN=294;
    public static final int ON_MERGE_EXPR=243;
    public static final int ATCHAR=339;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=341;
    public static final int ON_SELECT_EXPR=241;
    public static final int MINUTE_PART=211;
    public static final int PATTERN_NOT_EXPR=136;
    public static final int SQL_NE=325;
    public static final int SUM=18;
    public static final int HexDigit=371;
    public static final int UPDATE_EXPR=265;
    public static final int LPAREN=308;
    public static final int IN_SUBSELECT_EXPR=228;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=300;
    public static final int NOT_IN_RANGE=224;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=212;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int PARTITIONITEM=284;
    public static final int IDENT=305;
    public static final int DATABASE_JOIN_EXPR=157;
    public static final int BXOR=324;
    public static final int PLUS=318;
    public static final int CASE2=29;
    public static final int MERGE_MAT=272;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=267;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=185;
    public static final int CREATE_INDEX_EXPR=235;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=264;
    public static final int CREATE_CTX_CATITEM=283;
    public static final int EVAL_NOTEQUALS_EXPR=164;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=252;
    public static final int CREATE_VARIABLE_EXPR=248;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=301;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=177;
    public static final int NUMBERSETSTAR=257;
    public static final int LAST_OPERATOR=231;
    public static final int PATTERN_FILTER_EXPR=135;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=338;
    public static final int MERGE_UNM=271;
    public static final int EVAL_AND_EXPR=161;
    public static final int LEFT_OUTERJOIN_EXPR=176;
    public static final int EPL_EXPR=293;
    public static final int GROUP_BY_EXPR=179;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=183;
    public static final int MINUS=332;
    public static final int SEMI=364;
    public static final int INDEXCOL=198;
    public static final int STAR_ASSIGN=352;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=270;
    public static final int FIRST_AGGREG=261;
    public static final int COLON=320;
    public static final int EVAL_EQUALS_GROUP_EXPR=167;
    public static final int BAND_ASSIGN=362;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=193;
    public static final int NOT_IN_SET=214;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=186;
    public static final int SL=358;
    public static final int NOT_IN_SUBSELECT_EXPR=229;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=153;
    public static final int SR=354;
    public static final int RCURLY=307;
    public static final int PLUS_ASSIGN=348;
    public static final int EXISTS_SUBSELECT_EXPR=227;
    public static final int DAY_PART=209;
    public static final int START=125;
    public static final int EVENT_FILTER_IN=148;
    public static final int DIV=333;
    public static final int WEEK_PART=208;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=132;
    public static final int OctalEscape=370;
    public static final int MILLISECOND_PART=213;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=170;
    public static final int LOR=331;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=221;
    public static final int EXPONENT=372;
    public static final int LT=327;
    public static final int PATTERN_INCL_EXPR=156;
    public static final int CREATE_CTX=278;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=180;
    public static final int BOOL_TYPE=290;
    public static final int NEW_ITEM=276;
    public static final int MOD_ASSIGN=353;
    public static final int ANNOTATION_ARRAY=259;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=230;
    public static final int EQUALS=312;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int TERMINATED=128;
    public static final int DIV_ASSIGN=347;
    public static final int WINDOW_AGGREG=263;
    public static final int SL_ASSIGN=359;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int CREATE_CTX_INIT=282;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=299;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=242;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=205;
    public static final int CREATE_COL_TYPE=256;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=168;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=166;
    public static final int FLOAT_TYPE=287;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=150;
    public static final int ANNOTATION_VALUE=260;
    public static final int SUBSELECT_EXPR=225;
    public static final int CONCAT=199;
    public static final int NUMERIC_PARAM_RANGE=129;
    public static final int CLASS_IDENT=152;
    public static final int MATCHREC_PATTERN_ALTER=297;
    public static final int ON_EXPR=238;
    public static final int CREATE_WINDOW_EXPR=236;
    public static final int PROPERTY_SELECTION_STREAM=142;
    public static final int ON_DELETE_EXPR=240;
    public static final int NUM_LONG=342;
    public static final int ON=41;
    public static final int TIME_PERIOD=204;
    public static final int DOUBLE_TYPE=288;
    public static final int DELETE=81;
    public static final int INT_TYPE=285;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=160;
    public static final int ORDER_ELEMENT_EXPR=181;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=233;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=289;
    public static final int NUM_INT=335;
    public static final int MATCHREC_DEFINE_ITEM=302;
    public static final int ON_SET_EXPR=247;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=343;
    public static final int ON_EXPR_FROM=246;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=368;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=141;
    public static final int WEEKDAY_OPERATOR=232;
    public static final int DEC=351;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=360;
    public static final int NUMERIC_PARAM_FREQUENCY=131;
    public static final int AFTER_LIMIT_EXPR=191;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=188;
    public static final int EVENT_FILTER_PARAM=145;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=239;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int CONTEXT=126;
    public static final int EVENT_FILTER_RANGE=146;
    public static final int ML_COMMENT=367;
    public static final int INDEX=87;
    public static final int CREATE_CTX_CAT=281;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=187;
    public static final int BOR_ASSIGN=361;
    public static final int COMMA=311;
    public static final int WHEN_LIMIT_EXPR=194;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=190;
    public static final int SOME=49;
    public static final int EQUAL=344;
    public static final int BOR=317;
    public static final int MATCHREC_MEASURE_ITEM=304;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int CREATE_SCHEMA_EXPR_VAR=269;
    public static final int EVENT_FILTER_NOT_BETWEEN=151;
    public static final int IN_RANGE=223;
    public static final int DOT=313;
    public static final int MATCHREC_MEASURES=303;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=143;
    public static final int INSERTINTO_EXPR=196;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=254;
    public static final int MERGE_DEL=275;
    public static final int EVAL_EQUALS_EXPR=163;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=216;
    public static final int EVENT_LIMIT_EXPR=189;
    public static final int NOT_BETWEEN=215;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=162;
    public static final int ON_SELECT_INSERT_OUTPUT=245;
    public static final int AGG_FILTER_EXPR=277;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=323;
    public static final int MATCHREC_PATTERN_ATOM=295;
    public static final int QUOTED_STRING_LITERAL=322;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=319;
    public static final int OBSERVER_EXPR=154;
    public static final int CREATE_SCHEMA_EXPR_QUAL=268;
    public static final int EVENT_FILTER_IDENT=144;
    public static final int EVENT_PROP_MAPPED=184;
    public static final int UnicodeEscape=369;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=218;
    public static final int FOLLOWMAX_BEGIN=337;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=171;
    public static final int CREATE_WINDOW_SELECT_EXPR=237;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=266;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=172;
    public static final int SR_ASSIGN=355;
    public static final int LE=329;
    public static final int DBFROM_CLAUSE=219;
    public static final int EVAL_IDENT=169;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserTokenParaphases.put(CONTEXT, "'context'");
    	parserTokenParaphases.put(START, "'start'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(INITIATED, "'initiated'");
    	parserTokenParaphases.put(TERMINATED, "'terminated'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1848);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1852);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1858);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1862); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1877);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1881);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1887);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1920);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1924); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EXPRESSIONDECL11=null;
        Token LCURLY12=null;
        Token RCURLY15=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl13 = null;
        EsperEPL2GrammarParser.expression_return expression14 = null;
        CommonTree i_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree LCURLY12_tree=null;
        CommonTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LCURLY12=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDecl1949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY12);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==GOES) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==LPAREN) ) {
                int LA3_2 = input.LA(2);
                if ( (LA3_2==IDENT) ) {
                    int LA3_106 = input.LA(3);
                    if ( (LA3_106==COMMA) ) {
                        alt3=1;
                    }
                    else if ( (LA3_106==RPAREN) ) {
                        int LA3_181 = input.LA(4);
                        if ( (LA3_181==GOES) ) {
                            alt3=1;
                        }
                    }
                }
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDecl1951);
                    expressionLambdaDecl13=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl13.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_expressionDecl1954);
            expression14=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression14.getTree());
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDecl1956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_expressionLambdaDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                }
                stream_expressionLambdaDecl.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN16=null;
        Token RPAREN18=null;
        Token GOES19=null;
        EsperEPL2GrammarParser.columnList_return columnList17 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN16_tree=null;
        CommonTree RPAREN18_tree=null;
        CommonTree GOES19_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==IDENT) ) {
                alt4=1;
            }
            else if ( (LA4_0==LPAREN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);
                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl1990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN16=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl1995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN16);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl1997);
                    columnList17=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList17.getTree());
                    RPAREN18=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl1999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN18);
                    }
                    }
                    break;
            }
            GOES19=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl2003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal20=null;
        Token char_literal22=null;
        Token char_literal25=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier21 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum23 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum24 = null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal20=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum2038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal20);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum2040);
            classIdentifier21=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier21.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                int LA6_1 = input.LA(2);
                if ( (LA6_1==IDENT) ) {
                    int LA6_14 = input.LA(3);
                    if ( (LA6_14==EQUALS) ) {
                        int LA6_32 = input.LA(4);
                        if ( ((LA6_32>=BOOLEAN_TRUE && LA6_32<=VALUE_NULL)||LA6_32==NUM_DOUBLE||LA6_32==LCURLY||LA6_32==PLUS||(LA6_32>=STRING_LITERAL && LA6_32<=QUOTED_STRING_LITERAL)||LA6_32==MINUS||LA6_32==NUM_INT||LA6_32==ATCHAR||(LA6_32>=NUM_LONG && LA6_32<=NUM_FLOAT)) ) {
                            alt6=1;
                        }
                    }
                }
                else if ( ((LA6_1>=BOOLEAN_TRUE && LA6_1<=VALUE_NULL)||LA6_1==NUM_DOUBLE||LA6_1==LCURLY||LA6_1==RPAREN||LA6_1==PLUS||(LA6_1>=STRING_LITERAL && LA6_1<=QUOTED_STRING_LITERAL)||LA6_1==MINUS||LA6_1==NUM_INT||LA6_1==ATCHAR||(LA6_1>=NUM_LONG && LA6_1<=NUM_FLOAT)) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal22=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum2044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal22);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        alt5=1;
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==LCURLY||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==NUM_INT||LA5_0==ATCHAR||(LA5_0>=NUM_LONG && LA5_0<=NUM_FLOAT)) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2048);
                            elementValuePairsNoEnum23=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum23.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum2052);
                            elementValueNoEnum24=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum24.getTree());
                            }
                            break;
                    }
                    char_literal25=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum2057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal25);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal31=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier27 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum29 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal26=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal26);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2100);
            classIdentifier27=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier27.getTree());
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( (LA8_0==LPAREN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    {
                    char_literal28=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal28);
                    int alt7=3;
                    int LA7_0 = input.LA(1);
                    if ( (LA7_0==IDENT) ) {
                        int LA7_1 = input.LA(2);
                        if ( (LA7_1==EQUALS) ) {
                            alt7=1;
                        }
                        else if ( (LA7_1==RPAREN||LA7_1==DOT) ) {
                            alt7=2;
                        }
                    }
                    else if ( ((LA7_0>=BOOLEAN_TRUE && LA7_0<=VALUE_NULL)||LA7_0==NUM_DOUBLE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0>=STRING_LITERAL && LA7_0<=QUOTED_STRING_LITERAL)||LA7_0==MINUS||LA7_0==NUM_INT||LA7_0==ATCHAR||(LA7_0>=TICKED_STRING_LITERAL && LA7_0<=NUM_FLOAT)) ) {
                        alt7=2;
                    }
                    switch (alt7) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2108);
                            elementValuePairsEnum29=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum29.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2112);
                            elementValueEnum30=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
                            }
                            break;
                    }
                    char_literal31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal31);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA33=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum32 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum34 = null;
        CommonTree COMMA33_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2158);
            elementValuePairNoEnum32=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum32.getTree());
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);
                if ( (LA9_0==COMMA) ) {
                    alt9=1;
                }
                switch (alt9) {
            	case 1 :
            	    {
            	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2161); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2164);
            	    elementValuePairNoEnum34=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum34.getTree());
            	    }
            	    break;
            	default :
            	    break loop9;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA36=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum35 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum37 = null;
        CommonTree COMMA36_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2185);
            elementValuePairEnum35=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum35.getTree());
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);
                if ( (LA10_0==COMMA) ) {
                    alt10=1;
                }
                switch (alt10) {
            	case 1 :
            	    {
            	    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2188); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2191);
            	    elementValuePairEnum37=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum37.getTree());
            	    }
            	    break;
            	default :
            	    break loop10;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        CommonTree i_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal38=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal38);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2218);
            elementValueNoEnum39=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal40=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal40);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2259);
            elementValueEnum41=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum42 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum43 = null;
        EsperEPL2GrammarParser.constant_return constant44 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt11=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt11=1;
                }
                break;
            case LCURLY:
                {
                alt11=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);
                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2290);
                    annotationEnum42=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum42.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2301);
                    elementValueArrayNoEnum43=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum43.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2314);
                    constant44=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant44.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum45 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum46 = null;
        EsperEPL2GrammarParser.constant_return constant47 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier48 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt12=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt12=1;
                }
                break;
            case LCURLY:
                {
                alt12=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt12=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);
                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2337);
                    annotationEnum45=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum45.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2348);
                    elementValueArrayEnum46=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum46.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2361);
                    constant47=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant47.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2369);
                    classIdentifier48=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier48.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal49=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal49);
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==LCURLY||LA14_0==PLUS||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||LA14_0==MINUS||LA14_0==NUM_INT||LA14_0==ATCHAR||(LA14_0>=NUM_LONG && LA14_0<=NUM_FLOAT)) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2392);
                    elementValueNoEnum50=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);
                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);
                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==LCURLY||LA13_1==PLUS||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||LA13_1==MINUS||LA13_1==NUM_INT||LA13_1==ATCHAR||(LA13_1>=NUM_LONG && LA13_1<=NUM_FLOAT)) ) {
                                alt13=1;
                            }
                        }
                        switch (alt13) {
                    	case 1 :
                    	    {
                    	    char_literal51=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2395); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal51);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2397);
                    	    elementValueNoEnum52=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop13;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    char_literal53=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal53);
                    }
                    break;
            }
            char_literal54=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal54);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal55=null;
        Token char_literal57=null;
        Token char_literal59=null;
        Token char_literal60=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum56 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum58 = null;
        CommonTree char_literal55_tree=null;
        CommonTree char_literal57_tree=null;
        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal55);
            int alt17=2;
            int LA17_0 = input.LA(1);
            if ( ((LA17_0>=BOOLEAN_TRUE && LA17_0<=VALUE_NULL)||LA17_0==NUM_DOUBLE||(LA17_0>=IDENT && LA17_0<=LCURLY)||LA17_0==PLUS||(LA17_0>=STRING_LITERAL && LA17_0<=QUOTED_STRING_LITERAL)||LA17_0==MINUS||LA17_0==NUM_INT||LA17_0==ATCHAR||(LA17_0>=TICKED_STRING_LITERAL && LA17_0<=NUM_FLOAT)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2440);
                    elementValueEnum56=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum56.getTree());
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( (LA16_0==COMMA) ) {
                            int LA16_1 = input.LA(2);
                            if ( ((LA16_1>=BOOLEAN_TRUE && LA16_1<=VALUE_NULL)||LA16_1==NUM_DOUBLE||(LA16_1>=IDENT && LA16_1<=LCURLY)||LA16_1==PLUS||(LA16_1>=STRING_LITERAL && LA16_1<=QUOTED_STRING_LITERAL)||LA16_1==MINUS||LA16_1==NUM_INT||LA16_1==ATCHAR||(LA16_1>=TICKED_STRING_LITERAL && LA16_1<=NUM_FLOAT)) ) {
                                alt16=1;
                            }
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    char_literal57=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2443); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal57);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2445);
                    	    elementValueEnum58=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum58.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==COMMA) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    char_literal59=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal59);
                    }
                    break;
            }
            char_literal60=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal60);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.contextExpr_return contextExpr61 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr62 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr63 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr64 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr65 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr66 = null;
        EsperEPL2GrammarParser.createContextExpr_return createContextExpr67 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr68 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr69 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr70 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==CONTEXT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    pushFollow(FOLLOW_contextExpr_in_eplExpression2488);
                    contextExpr61=contextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contextExpr61.getTree());
                    }
                    break;
            }
            int alt20=8;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt20=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt20=2;
                    }
                    break;
                case INDEX:
                    {
                    alt20=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt20=4;
                    }
                    break;
                case CONTEXT:
                    {
                    alt20=6;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt20=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt20=7;
                }
                break;
            case UPDATE:
                {
                alt20=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);
                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2495);
                    selectExpr62=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr62.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2500);
                    createWindowExpr63=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr63.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2505);
                    createIndexExpr64=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr64.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2510);
                    createVariableExpr65=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr65.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2515);
                    createSchemaExpr66=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr66.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_createContextExpr_in_eplExpression2520);
                    createContextExpr67=createContextExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createContextExpr67.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2525);
                    onExpr68=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr68.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2530);
                    updateExpr69=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr69.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==FOR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2533);
                    forExpr70=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr70.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class contextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.contextExpr_return contextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.contextExpr_return retval = new EsperEPL2GrammarParser.contextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token CONTEXT71=null;
        CommonTree i_tree=null;
        CommonTree CONTEXT71_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        try {
            {
            CONTEXT71=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_contextExpr2546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT71);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_contextExpr2550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTEXT.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT72=null;
        Token SELECT74=null;
        Token FROM76=null;
        Token WHERE79=null;
        Token GROUP81=null;
        Token BY82=null;
        Token HAVING84=null;
        Token OUTPUT86=null;
        Token ORDER88=null;
        Token BY89=null;
        Token ROW_LIMIT_EXPR91=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr73 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause75 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause77 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog78 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause80 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr83 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause85 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit87 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr90 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit92 = null;
        CommonTree INSERT72_tree=null;
        CommonTree SELECT74_tree=null;
        CommonTree FROM76_tree=null;
        CommonTree WHERE79_tree=null;
        CommonTree GROUP81_tree=null;
        CommonTree BY82_tree=null;
        CommonTree HAVING84_tree=null;
        CommonTree OUTPUT86_tree=null;
        CommonTree ORDER88_tree=null;
        CommonTree BY89_tree=null;
        CommonTree ROW_LIMIT_EXPR91_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==INSERT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    INSERT72=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2574); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2577);
                    insertIntoExpr73=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr73.getTree());
                    }
                    break;
            }
            SELECT74=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2583); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2586);
            selectClause75=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause75.getTree());
            FROM76=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2590); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2593);
            fromClause77=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause77.getTree());
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==MATCH_RECOGNIZE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2597);
                    matchRecog78=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog78.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==WHERE) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    WHERE79=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2603); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2606);
                    whereClause80=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause80.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==GROUP) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    GROUP81=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2613); if (state.failed) return retval;
                    BY82=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2616); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2619);
                    groupByListExpr83=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr83.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==HAVING) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    HAVING84=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2626); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2629);
                    havingClause85=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause85.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==OUTPUT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    OUTPUT86=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2636); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2639);
                    outputLimit87=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit87.getTree());
                    }
                    break;
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==ORDER) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    ORDER88=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2646); if (state.failed) return retval;
                    BY89=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2649); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2652);
                    orderByListExpr90=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr90.getTree());
                    }
                    break;
            }
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==ROW_LIMIT_EXPR) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR91=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2659); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2662);
                    rowLimit92=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit92.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON93=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr94 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr95 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr96 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr97 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert98 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr99 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr100 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr101 = null;
        CommonTree ON93_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON93=(Token)match(input,ON,FOLLOW_ON_in_onExpr2677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON93);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2679);
            onStreamExpr94=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr94.getTree());
            int alt33=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt33=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt33=2;
                }
                break;
            case SET:
                {
                alt33=3;
                }
                break;
            case UPDATE:
                {
                alt33=4;
                }
                break;
            case MERGE:
                {
                alt33=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);
                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2684);
                    onDeleteExpr95=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr95.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2688);
                    onSelectExpr96=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr96.getTree());
                    int alt32=2;
                    int LA32_0 = input.LA(1);
                    if ( (LA32_0==INSERT) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            {
                            int cnt30=0;
                            loop30:
                            do {
                                int alt30=2;
                                int LA30_0 = input.LA(1);
                                if ( (LA30_0==INSERT) ) {
                                    alt30=1;
                                }
                                switch (alt30) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2691);
                            	    onSelectInsertExpr97=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr97.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt30 >= 1 ) break loop30;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(30, input);
                                        throw eee;
                                }
                                cnt30++;
                            } while (true);
                            int alt31=2;
                            int LA31_0 = input.LA(1);
                            if ( (LA31_0==OUTPUT) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2694);
                                    outputClauseInsert98=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert98.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2701);
                    onSetExpr99=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr99.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2705);
                    onUpdateExpr100=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr100.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2709);
                    onMergeExpr101=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr101.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS104=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression102 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression103 = null;
        CommonTree i_tree=null;
        CommonTree AS104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt34=2;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==IDENT||LA34_0==TICKED_STRING_LITERAL) ) {
                alt34=1;
            }
            else if ( (LA34_0==PATTERN) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);
                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2754);
                    eventFilterExpression102=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression102.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2758);
                    patternInclusionExpression103=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression103.getTree());
                    }
                    break;
            }
            int alt35=3;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==AS) ) {
                alt35=1;
            }
            else if ( (LA35_0==IDENT) ) {
                alt35=2;
            }
            switch (alt35) {
                case 1 :
                    {
                    AS104=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS104);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE105=null;
        Token ISTREAM106=null;
        Token AS108=null;
        Token SET109=null;
        Token COMMA111=null;
        Token WHERE113=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier107 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment110 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment112 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause114 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE105_tree=null;
        CommonTree ISTREAM106_tree=null;
        CommonTree AS108_tree=null;
        CommonTree SET109_tree=null;
        CommonTree COMMA111_tree=null;
        CommonTree WHERE113_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE105=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE105);
            ISTREAM106=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM106);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2807);
            classIdentifier107=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier107.getTree());
            int alt36=3;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==AS) ) {
                alt36=1;
            }
            else if ( (LA36_0==IDENT) ) {
                alt36=2;
            }
            switch (alt36) {
                case 1 :
                    {
                    AS108=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS108);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET109=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET109);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2828);
            onSetAssignment110=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment110.getTree());
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);
                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }
                switch (alt37) {
            	case 1 :
            	    {
            	    COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2831); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA111);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2833);
            	    onSetAssignment112=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment112.getTree());
            	    }
            	    break;
            	default :
            	    break loop37;
                }
            } while (true);
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE113=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE113);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2843);
                    whereClause114=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause114.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE115=null;
        Token INTO116=null;
        Token AS117=null;
        Token WHERE118=null;
        EsperEPL2GrammarParser.whereClause_return whereClause119 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem120 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE115_tree=null;
        CommonTree INTO116_tree=null;
        CommonTree AS117_tree=null;
        CommonTree WHERE118_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE115=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE115);
            int alt39=2;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==INTO) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    {
                    INTO116=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO116);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt40=3;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==AS) ) {
                alt40=1;
            }
            else if ( (LA40_0==IDENT) ) {
                alt40=2;
            }
            switch (alt40) {
                case 1 :
                    {
                    AS117=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS117);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    WHERE118=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE118);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2907);
                    whereClause119=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause119.getTree());
                    }
                    break;
            }
            int cnt42=0;
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);
                if ( (LA42_0==WHEN) ) {
                    alt42=1;
                }
                switch (alt42) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2915);
            	    mergeItem120=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem120.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched121 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched122 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==WHEN) ) {
                int LA43_1 = input.LA(2);
                if ( (LA43_1==MATCHED) ) {
                    alt43=1;
                }
                else if ( (LA43_1==NOT_EXPR) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2949);
                    mergeMatched121=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched121.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2953);
                    mergeUnmatched122=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched122.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN123=null;
        Token MATCHED124=null;
        Token AND_EXPR125=null;
        EsperEPL2GrammarParser.expression_return expression126 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem127 = null;
        CommonTree WHEN123_tree=null;
        CommonTree MATCHED124_tree=null;
        CommonTree AND_EXPR125_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN123=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN123);
            MATCHED124=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED124);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==AND_EXPR) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    AND_EXPR125=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR125);
                    pushFollow(FOLLOW_expression_in_mergeMatched2973);
                    expression126=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression126.getTree());
                    }
                    break;
            }
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);
                if ( (LA45_0==THEN) ) {
                    alt45=1;
                }
                switch (alt45) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2977);
            	    mergeMatchedItem127=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem127.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN128=null;
        Token SET129=null;
        Token COMMA131=null;
        Token WHERE133=null;
        Token WHERE135=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment130 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment132 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause134 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert137 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN128_tree=null;
        CommonTree SET129_tree=null;
        CommonTree COMMA131_tree=null;
        CommonTree WHERE133_tree=null;
        CommonTree WHERE135_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN128=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem3003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN128);
            int alt49=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt49=1;
                }
                break;
            case DELETE:
                {
                alt49=2;
                }
                break;
            case INSERT:
                {
                alt49=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem3018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET129=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem3020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET129);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3022);
                    onSetAssignment130=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment130.getTree());
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);
                        if ( (LA46_0==COMMA) ) {
                            alt46=1;
                        }
                        switch (alt46) {
                    	case 1 :
                    	    {
                    	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem3025); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA131);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem3027);
                    	    onSetAssignment132=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment132.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop46;
                        }
                    } while (true);
                    }
                    int alt47=2;
                    int LA47_0 = input.LA(1);
                    if ( (LA47_0==WHERE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            WHERE133=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3033); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE133);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3035);
                            whereClause134=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause134.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem3047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt48=2;
                    int LA48_0 = input.LA(1);
                    if ( (LA48_0==WHERE) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            {
                            WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem3050); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem3052);
                            whereClause136=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem3063);
                    mergeInsert137=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert137.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN138=null;
        Token NOT_EXPR139=null;
        Token MATCHED140=null;
        Token AND_EXPR141=null;
        EsperEPL2GrammarParser.expression_return expression142 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem143 = null;
        CommonTree WHEN138_tree=null;
        CommonTree NOT_EXPR139_tree=null;
        CommonTree MATCHED140_tree=null;
        CommonTree AND_EXPR141_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN138=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN138);
            NOT_EXPR139=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR139);
            MATCHED140=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED140);
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==AND_EXPR) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    AND_EXPR141=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR141);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3129);
                    expression142=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression142.getTree());
                    }
                    break;
            }
            int cnt51=0;
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);
                if ( (LA51_0==THEN) ) {
                    alt51=1;
                }
                switch (alt51) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3133);
            	    mergeUnmatchedItem143=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem143.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt51 >= 1 ) break loop51;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(51, input);
                        throw eee;
                }
                cnt51++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN144=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert145 = null;
        CommonTree THEN144_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN144=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3160); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3163);
            mergeInsert145=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert145.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT146=null;
        Token INTO147=null;
        Token LPAREN149=null;
        Token RPAREN151=null;
        Token SELECT152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier148 = null;
        EsperEPL2GrammarParser.columnList_return columnList150 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree INSERT146_tree=null;
        CommonTree INTO147_tree=null;
        CommonTree LPAREN149_tree=null;
        CommonTree RPAREN151_tree=null;
        CommonTree SELECT152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT146=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT146);
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==INTO) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    INTO147=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO147);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3183);
                    classIdentifier148=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier148.getTree());
                    }
                    break;
            }
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==LPAREN) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    LPAREN149=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN149);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3190);
                    columnList150=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList150.getTree());
                    RPAREN151=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN151);
                    }
                    break;
            }
            SELECT152=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT152);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3198);
            selectionList153=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList153.getTree());
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==WHERE) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3203);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token DISTINCT159=null;
        Token WHERE162=null;
        Token GROUP164=null;
        Token BY165=null;
        Token HAVING167=null;
        Token ORDER169=null;
        Token BY170=null;
        Token ROW_LIMIT_EXPR172=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList160 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom161 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause163 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr166 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause168 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr171 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit173 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree DISTINCT159_tree=null;
        CommonTree WHERE162_tree=null;
        CommonTree GROUP164_tree=null;
        CommonTree BY165_tree=null;
        CommonTree HAVING167_tree=null;
        CommonTree ORDER169_tree=null;
        CommonTree BY170_tree=null;
        CommonTree ROW_LIMIT_EXPR172_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==INSERT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3251);
                    insertIntoExpr157=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
                    }
                    break;
            }
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==DISTINCT) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    DISTINCT159=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT159);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3262);
            selectionList160=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList160.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==FROM) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3266);
                    onExprFrom161=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom161.getTree());
                    }
                    break;
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==WHERE) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    WHERE162=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE162);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3274);
                    whereClause163=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause163.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==GROUP) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    GROUP164=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP164);
                    BY165=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY165);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3287);
                    groupByListExpr166=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr166.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==HAVING) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    HAVING167=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING167);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3296);
                    havingClause168=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause168.getTree());
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==ORDER) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    ORDER169=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER169);
                    BY170=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY170);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3307);
                    orderByListExpr171=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr171.getTree());
                    }
                    break;
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==ROW_LIMIT_EXPR) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR172=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR172);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3316);
                    rowLimit173=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE174=null;
        Token AS175=null;
        Token SET176=null;
        Token COMMA178=null;
        Token WHERE180=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment177 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment179 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause181 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE174_tree=null;
        CommonTree AS175_tree=null;
        CommonTree SET176_tree=null;
        CommonTree COMMA178_tree=null;
        CommonTree WHERE180_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE174=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt63=3;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==AS) ) {
                alt63=1;
            }
            else if ( (LA63_0==IDENT) ) {
                alt63=2;
            }
            switch (alt63) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET176=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET176);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3404);
            onSetAssignment177=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment177.getTree());
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);
                if ( (LA64_0==COMMA) ) {
                    alt64=1;
                }
                switch (alt64) {
            	case 1 :
            	    {
            	    COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3407); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA178);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3409);
            	    onSetAssignment179=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment179.getTree());
            	    }
            	    break;
            	default :
            	    break loop64;
                }
            } while (true);
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==WHERE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    WHERE180=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE180);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3418);
                    whereClause181=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause181.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT182=null;
        Token SELECT184=null;
        Token WHERE186=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr183 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList185 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause187 = null;
        CommonTree INSERT182_tree=null;
        CommonTree SELECT184_tree=null;
        CommonTree WHERE186_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT182=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT182);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3471);
            insertIntoExpr183=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr183.getTree());
            SELECT184=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT184);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3477);
            selectionList185=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList185.getTree());
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==WHERE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    WHERE186=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE186);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3484);
                    whereClause187=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause187.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT188=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT188_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT188=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT188);
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==FIRST) ) {
                alt67=1;
            }
            else if ( (LA67_0==ALL) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);
                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE189=null;
        Token WHERE191=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom190 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause192 = null;
        CommonTree DELETE189_tree=null;
        CommonTree WHERE191_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE189=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE189);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3572);
            onExprFrom190=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom190.getTree());
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==WHERE) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    WHERE191=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE191);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3579);
                    whereClause192=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause192.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET193=null;
        Token COMMA195=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment194 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment196 = null;
        CommonTree SET193_tree=null;
        CommonTree COMMA195_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET193=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET193);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3621);
            onSetAssignment194=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment194.getTree());
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);
                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }
                switch (alt69) {
            	case 1 :
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3624); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3626);
            	    onSetAssignment196=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment196.getTree());
            	    }
            	    break;
            	default :
            	    break loop69;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS198=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty197 = null;
        EsperEPL2GrammarParser.expression_return expression199 = null;
        CommonTree EQUALS198_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3651);
            eventProperty197=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty197.getTree());
            EQUALS198=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS198);
            pushFollow(FOLLOW_expression_in_onSetAssignment3655);
            expression199=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression199.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM200=null;
        Token AS201=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM200_tree=null;
        CommonTree AS201_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM200=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM200);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt70=3;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==AS) ) {
                alt70=1;
            }
            else if ( (LA70_0==IDENT) ) {
                alt70=2;
            }
            switch (alt70) {
                case 1 :
                    {
                    AS201=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS201);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE202=null;
        Token WINDOW203=null;
        Token DOT204=null;
        Token DOT206=null;
        Token AS208=null;
        Token LPAREN210=null;
        Token RPAREN212=null;
        Token WHERE213=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression205 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression207 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter209 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList211 = null;
        EsperEPL2GrammarParser.expression_return expression214 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE202_tree=null;
        CommonTree WINDOW203_tree=null;
        CommonTree DOT204_tree=null;
        CommonTree DOT206_tree=null;
        CommonTree AS208_tree=null;
        CommonTree LPAREN210_tree=null;
        CommonTree RPAREN212_tree=null;
        CommonTree WHERE213_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE202=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE202);
            WINDOW203=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW203);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==DOT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    DOT204=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT204);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3736);
                    viewExpression205=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression205.getTree());
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);
                        if ( (LA71_0==DOT) ) {
                            alt71=1;
                        }
                        switch (alt71) {
                    	case 1 :
                    	    {
                    	    DOT206=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3739); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT206);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3741);
                    	    viewExpression207=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression207.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop71;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt73=3;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==RETAINUNION) ) {
                alt73=1;
            }
            else if ( (LA73_0==RETAININTERSECTION) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==AS) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    AS208=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS208);
                    }
                    break;
            }
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==SELECT||LA75_0==IDENT||LA75_0==TICKED_STRING_LITERAL) ) {
                alt75=1;
            }
            else if ( (LA75_0==LPAREN) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);
                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3773);
                    createWindowExprModelAfter209=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter209.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN210);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3790);
                    createColumnList211=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList211.getTree());
                    RPAREN212=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN212);
                    }
                    break;
            }
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==INSERT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt76=2;
                    int LA76_0 = input.LA(1);
                    if ( (LA76_0==WHERE) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            WHERE213=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE213);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3814);
                            expression214=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression214.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT215=null;
        Token FROM217=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList216 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier218 = null;
        CommonTree SELECT215_tree=null;
        CommonTree FROM217_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==SELECT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    SELECT215=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3901); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3904);
                    createSelectionList216=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList216.getTree());
                    FROM217=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3906); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3911);
            classIdentifier218=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier218.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE219=null;
        Token INDEX220=null;
        Token ON221=null;
        Token LPAREN222=null;
        Token RPAREN224=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList223 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE219_tree=null;
        CommonTree INDEX220_tree=null;
        CommonTree ON221_tree=null;
        CommonTree LPAREN222_tree=null;
        CommonTree RPAREN224_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE219=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE219);
            INDEX220=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX220);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON221=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON221);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN222=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN222);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3940);
            createIndexColumnList223=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList223.getTree());
            RPAREN224=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN224);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA226=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn225 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn227 = null;
        CommonTree COMMA226_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3971);
            createIndexColumn225=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn225.getTree());
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);
                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }
                switch (alt79) {
            	case 1 :
            	    {
            	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3974); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA226);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3976);
            	    createIndexColumn227=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn227.getTree());
            	    }
            	    break;
            	default :
            	    break loop79;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT228=null;
        Token IDENT229=null;
        CommonTree IDENT228_tree=null;
        CommonTree IDENT229_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT228=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT228);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==IDENT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    IDENT229=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn4005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT229);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE230=null;
        Token VARIABLE231=null;
        Token EQUALS233=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier232 = null;
        EsperEPL2GrammarParser.expression_return expression234 = null;
        CommonTree n_tree=null;
        CommonTree CREATE230_tree=null;
        CommonTree VARIABLE231_tree=null;
        CommonTree EQUALS233_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE230=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr4030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE230);
            VARIABLE231=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr4032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE231);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr4034);
            classIdentifier232=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier232.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr4038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==EQUALS) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    EQUALS233=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr4041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS233);
                    pushFollow(FOLLOW_expression_in_createVariableExpr4043);
                    expression234=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression234.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA236=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement235 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement237 = null;
        CommonTree COMMA236_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList4085);
            createColumnListElement235=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement235.getTree());
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);
                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }
                switch (alt82) {
            	case 1 :
            	    {
            	    COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList4088); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA236);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList4090);
            	    createColumnListElement237=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement237.getTree());
            	    }
            	    break;
            	default :
            	    break loop82;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK240=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy238 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier239 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK240_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4118);
            classIdentifierNonGreedy238=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy238.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4121);
            classIdentifier239=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier239.getTree());
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==LBRACK) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK240=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK240);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA242=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement241 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement243 = null;
        CommonTree COMMA242_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4171);
            createSelectionListElement241=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement241.getTree());
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);
                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }
                switch (alt84) {
            	case 1 :
            	    {
            	    COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4174); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4176);
            	    createSelectionListElement243=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement243.getTree());
            	    }
            	    break;
            	default :
            	    break loop84;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS245=null;
        Token AS247=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty244 = null;
        EsperEPL2GrammarParser.constant_return constant246 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS245_tree=null;
        CommonTree AS247_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt86=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt86=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case CONTEXT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt86=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt86=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4217);
                    eventProperty244=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty244.getTree());
                    int alt85=2;
                    int LA85_0 = input.LA(1);
                    if ( (LA85_0==AS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            AS245=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4220); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS245);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4224); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4245);
                    constant246=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant246.getTree());
                    AS247=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS247);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token CREATE248=null;
        Token SCHEMA249=null;
        Token AS250=null;
        Token LPAREN252=null;
        Token RPAREN254=null;
        EsperEPL2GrammarParser.variantList_return variantList251 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList253 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual255 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree CREATE248_tree=null;
        CommonTree SCHEMA249_tree=null;
        CommonTree AS250_tree=null;
        CommonTree LPAREN252_tree=null;
        CommonTree RPAREN254_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            CREATE248=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE248);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA249=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA249);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    AS250=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS250);
                    }
                    break;
            }
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT||LA90_0==STAR||LA90_0==TICKED_STRING_LITERAL) ) {
                alt90=1;
            }
            else if ( (LA90_0==LPAREN) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);
                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4302);
                    variantList251=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList251.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN252=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN252);
                    int alt89=2;
                    int LA89_0 = input.LA(1);
                    if ( (LA89_0==IDENT||LA89_0==TICKED_STRING_LITERAL) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4315);
                            createColumnList253=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList253.getTree());
                            }
                            break;
                    }
                    RPAREN254=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN254);
                    }
                    break;
            }
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==IDENT) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaExpr4327);
            	    createSchemaQual255=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual255.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_VAR, "CREATE_SCHEMA_EXPR_VAR"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextExpr_return createContextExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createContextExpr_return retval = new EsperEPL2GrammarParser.createContextExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token name=null;
        Token CREATE256=null;
        Token CONTEXT257=null;
        Token AS258=null;
        EsperEPL2GrammarParser.createContextDetail_return createContextDetail259 = null;
        CommonTree name_tree=null;
        CommonTree CREATE256_tree=null;
        CommonTree CONTEXT257_tree=null;
        CommonTree AS258_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_CONTEXT=new RewriteRuleTokenStream(adaptor,"token CONTEXT");
        RewriteRuleSubtreeStream stream_createContextDetail=new RewriteRuleSubtreeStream(adaptor,"rule createContextDetail");
        try {
            {
            CREATE256=(Token)match(input,CREATE,FOLLOW_CREATE_in_createContextExpr4389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE256);
            CONTEXT257=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_createContextExpr4391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONTEXT.add(CONTEXT257);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextExpr4395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    AS258=(Token)match(input,AS,FOLLOW_AS_in_createContextExpr4397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS258);
                    }
                    break;
            }
            pushFollow(FOLLOW_createContextDetail_in_createContextExpr4400);
            createContextDetail259=createContextDetail();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createContextDetail.add(createContextDetail259.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX, "CREATE_CTX"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_createContextDetail.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextDetail_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextDetail_return createContextDetail() throws RecognitionException {
        EsperEPL2GrammarParser.createContextDetail_return retval = new EsperEPL2GrammarParser.createContextDetail_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token START260=null;
        Token END262=null;
        Token PARTITION264=null;
        Token BY265=null;
        Token COMMA267=null;
        Token COMMA270=null;
        Token FROM272=null;
        Token INITIATED274=null;
        Token BY275=null;
        Token TERMINATED278=null;
        Token AFTER279=null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet261 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet263 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem266 = null;
        EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem268 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem269 = null;
        EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem271 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression273 = null;
        EsperEPL2GrammarParser.createContextFilter_return createContextFilter276 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression277 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod280 = null;
        CommonTree START260_tree=null;
        CommonTree END262_tree=null;
        CommonTree PARTITION264_tree=null;
        CommonTree BY265_tree=null;
        CommonTree COMMA267_tree=null;
        CommonTree COMMA270_tree=null;
        CommonTree FROM272_tree=null;
        CommonTree INITIATED274_tree=null;
        CommonTree BY275_tree=null;
        CommonTree TERMINATED278_tree=null;
        CommonTree AFTER279_tree=null;
        RewriteRuleTokenStream stream_INITIATED=new RewriteRuleTokenStream(adaptor,"token INITIATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_createContextPartitionItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextPartitionItem");
        RewriteRuleSubtreeStream stream_createContextFilter=new RewriteRuleSubtreeStream(adaptor,"rule createContextFilter");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_createContextGroupItem=new RewriteRuleSubtreeStream(adaptor,"rule createContextGroupItem");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            int alt98=4;
            switch ( input.LA(1) ) {
            case START:
                {
                alt98=1;
                }
                break;
            case PARTITION:
                {
                alt98=2;
                }
                break;
            case GROUP:
                {
                alt98=3;
                }
                break;
            case INITIATED:
                {
                alt98=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);
                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    {
                    START260=(Token)match(input,START,FOLLOW_START_in_createContextDetail4424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_START.add(START260);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextDetail4426);
                    crontabLimitParameterSet261=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet261.getTree());
                    END262=(Token)match(input,END,FOLLOW_END_in_createContextDetail4428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END262);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_createContextDetail4430);
                    crontabLimitParameterSet263=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet263.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_FIXED, "CREATE_CTX_FIXED"), root_1);
                        adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                        adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    PARTITION264=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_createContextDetail4447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION264);
                    int alt93=2;
                    int LA93_0 = input.LA(1);
                    if ( (LA93_0==BY) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            BY265=(Token)match(input,BY,FOLLOW_BY_in_createContextDetail4450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY265);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_createContextPartitionItem_in_createContextDetail4454);
                    createContextPartitionItem266=createContextPartitionItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem266.getTree());
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);
                        if ( (LA94_0==COMMA) ) {
                            alt94=1;
                        }
                        switch (alt94) {
                    	case 1 :
                    	    {
                    	    COMMA267=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4457); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA267);
                    	    pushFollow(FOLLOW_createContextPartitionItem_in_createContextDetail4459);
                    	    createContextPartitionItem268=createContextPartitionItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextPartitionItem.add(createContextPartitionItem268.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop94;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_PART, "CREATE_CTX_PART"), root_1);
                        if ( !(stream_createContextPartitionItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextPartitionItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextPartitionItem.nextTree());
                        }
                        stream_createContextPartitionItem.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createContextGroupItem_in_createContextDetail4478);
                    createContextGroupItem269=createContextGroupItem();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem269.getTree());
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);
                        if ( (LA95_0==COMMA) ) {
                            alt95=1;
                        }
                        switch (alt95) {
                    	case 1 :
                    	    {
                    	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextDetail4481); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA270);
                    	    pushFollow(FOLLOW_createContextGroupItem_in_createContextDetail4483);
                    	    createContextGroupItem271=createContextGroupItem();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_createContextGroupItem.add(createContextGroupItem271.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop95;
                        }
                    } while (true);
                    FROM272=(Token)match(input,FROM,FOLLOW_FROM_in_createContextDetail4487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM272);
                    pushFollow(FOLLOW_eventFilterExpression_in_createContextDetail4489);
                    eventFilterExpression273=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression273.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CAT, "CREATE_CTX_CAT"), root_1);
                        if ( !(stream_createContextGroupItem.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_createContextGroupItem.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextGroupItem.nextTree());
                        }
                        stream_createContextGroupItem.reset();
                        adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    INITIATED274=(Token)match(input,INITIATED,FOLLOW_INITIATED_in_createContextDetail4507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INITIATED.add(INITIATED274);
                    int alt96=2;
                    int LA96_0 = input.LA(1);
                    if ( (LA96_0==BY) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            BY275=(Token)match(input,BY,FOLLOW_BY_in_createContextDetail4510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY275);
                            }
                            break;
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==IDENT||LA97_0==TICKED_STRING_LITERAL) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==PATTERN) ) {
                        alt97=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 0, input);
                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createContextFilter_in_createContextDetail4515);
                            createContextFilter276=createContextFilter();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createContextFilter.add(createContextFilter276.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_patternInclusionExpression_in_createContextDetail4519);
                            patternInclusionExpression277=patternInclusionExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression277.getTree());
                            }
                            break;
                    }
                    TERMINATED278=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_createContextDetail4522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED278);
                    AFTER279=(Token)match(input,AFTER,FOLLOW_AFTER_in_createContextDetail4524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(AFTER279);
                    pushFollow(FOLLOW_timePeriod_in_createContextDetail4526);
                    timePeriod280=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod280.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_INIT, "CREATE_CTX_INIT"), root_1);
                        if ( stream_createContextFilter.hasNext() ) {
                            adaptor.addChild(root_1, stream_createContextFilter.nextTree());
                        }
                        stream_createContextFilter.reset();
                        if ( stream_patternInclusionExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                        }
                        stream_patternInclusionExpression.reset();
                        adaptor.addChild(root_1, stream_timePeriod.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextFilter_return createContextFilter() throws RecognitionException {
        EsperEPL2GrammarParser.createContextFilter_return retval = new EsperEPL2GrammarParser.createContextFilter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS282=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression281 = null;
        CommonTree i_tree=null;
        CommonTree AS282_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_createContextFilter4554);
            eventFilterExpression281=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression281.getTree());
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==AS) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    AS282=(Token)match(input,AS,FOLLOW_AS_in_createContextFilter4556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS282);
                    }
                    break;
            }
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextFilter4561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextPartitionItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextPartitionItem_return createContextPartitionItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextPartitionItem_return retval = new EsperEPL2GrammarParser.createContextPartitionItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR284=null;
        Token COMMA285=null;
        Token FROM287=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty283 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty286 = null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression288 = null;
        CommonTree AND_EXPR284_tree=null;
        CommonTree COMMA285_tree=null;
        CommonTree FROM287_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4585);
            eventProperty283=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty283.getTree());
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);
                if ( (LA101_0==AND_EXPR||LA101_0==COMMA) ) {
                    alt101=1;
                }
                switch (alt101) {
            	case 1 :
            	    {
            	    int alt100=2;
            	    int LA100_0 = input.LA(1);
            	    if ( (LA100_0==AND_EXPR) ) {
            	        alt100=1;
            	    }
            	    else if ( (LA100_0==COMMA) ) {
            	        alt100=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 100, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt100) {
            	        case 1 :
            	            {
            	            AND_EXPR284=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_createContextPartitionItem4589); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR284);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            COMMA285=(Token)match(input,COMMA,FOLLOW_COMMA_in_createContextPartitionItem4591); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_COMMA.add(COMMA285);
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_eventProperty_in_createContextPartitionItem4594);
            	    eventProperty286=eventProperty();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty286.getTree());
            	    }
            	    break;
            	default :
            	    break loop101;
                }
            } while (true);
            FROM287=(Token)match(input,FROM,FOLLOW_FROM_in_createContextPartitionItem4598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM287);
            pushFollow(FOLLOW_eventFilterExpression_in_createContextPartitionItem4600);
            eventFilterExpression288=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression288.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_eventProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventProperty.nextTree());
                }
                stream_eventProperty.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createContextGroupItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createContextGroupItem_return createContextGroupItem() throws RecognitionException {
        EsperEPL2GrammarParser.createContextGroupItem_return retval = new EsperEPL2GrammarParser.createContextGroupItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token GROUP289=null;
        Token BY290=null;
        Token AS292=null;
        EsperEPL2GrammarParser.expression_return expression291 = null;
        CommonTree i_tree=null;
        CommonTree GROUP289_tree=null;
        CommonTree BY290_tree=null;
        CommonTree AS292_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            GROUP289=(Token)match(input,GROUP,FOLLOW_GROUP_in_createContextGroupItem4626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP289);
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==BY) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    BY290=(Token)match(input,BY,FOLLOW_BY_in_createContextGroupItem4628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY290);
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_createContextGroupItem4631);
            expression291=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression291.getTree());
            AS292=(Token)match(input,AS,FOLLOW_AS_in_createContextGroupItem4633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS292);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createContextGroupItem4637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_CTX_CATITEM, "CREATE_CTX_CATITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList293 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual4667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual4669);
            columnList293=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList293.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA295=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement294 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement296 = null;
        CommonTree COMMA295_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4695);
            variantListElement294=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement294.getTree());
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);
                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }
                switch (alt103) {
            	case 1 :
            	    {
            	    COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4698); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4700);
            	    variantListElement296=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement296.getTree());
            	    }
            	    break;
            	default :
            	    break loop103;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR297=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier298 = null;
        CommonTree STAR297_tree=null;
        try {
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==STAR) ) {
                alt104=1;
            }
            else if ( (LA104_0==IDENT||LA104_0==TICKED_STRING_LITERAL) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);
                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR297=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR297_tree = (CommonTree)adaptor.create(STAR297);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR297_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4733);
                    classIdentifier298=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier298.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO299=null;
        Token LPAREN301=null;
        Token RPAREN303=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier300 = null;
        EsperEPL2GrammarParser.columnList_return columnList302 = null;
        CommonTree s_tree=null;
        CommonTree INTO299_tree=null;
        CommonTree LPAREN301_tree=null;
        CommonTree RPAREN303_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt105=3;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==ISTREAM) ) {
                alt105=1;
            }
            else if ( (LA105_0==RSTREAM) ) {
                alt105=2;
            }
            switch (alt105) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO299=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO299);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4770);
            classIdentifier300=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier300.getTree());
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==LPAREN) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    LPAREN301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN301);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4775);
                    columnList302=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList302.getTree());
                    RPAREN303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN303);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT304=null;
        Token COMMA305=null;
        Token IDENT306=null;
        CommonTree IDENT304_tree=null;
        CommonTree COMMA305_tree=null;
        CommonTree IDENT306_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT304=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT304);
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);
                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }
                switch (alt107) {
            	case 1 :
            	    {
            	    COMMA305=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4813); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA305);
            	    IDENT306=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4815); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT306);
            	    }
            	    break;
            	default :
            	    break loop107;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression307 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin308 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList309 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4853);
            streamExpression307=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression307.getTree());
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==EOF||LA108_0==WHERE||(LA108_0>=GROUP && LA108_0<=HAVING)||LA108_0==OUTPUT||LA108_0==ORDER||LA108_0==ROW_LIMIT_EXPR||LA108_0==MATCH_RECOGNIZE||LA108_0==FOR||LA108_0==COMMA) ) {
                alt108=1;
            }
            else if ( ((LA108_0>=INNER && LA108_0<=FULL)) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);
                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4856);
                    regularJoin308=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin308.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4860);
                    outerJoinList309=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList309.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA310=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression311 = null;
        CommonTree COMMA310_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);
                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }
                switch (alt109) {
            	case 1 :
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4874); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4877);
            	    streamExpression311=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression311.getTree());
            	    }
            	    break;
            	default :
            	    break loop109;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin312 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin313 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4891);
            outerJoin312=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin312.getTree());
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);
                if ( ((LA110_0>=INNER && LA110_0<=FULL)) ) {
                    alt110=1;
                }
                switch (alt110) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4894);
            	    outerJoin313=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin313.getTree());
            	    }
            	    break;
            	default :
            	    break loop110;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER314=null;
        Token JOIN315=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression316 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent317 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER314_tree=null;
        CommonTree JOIN315_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( ((LA113_0>=JOIN && LA113_0<=FULL)) ) {
                alt113=1;
            }
            else if ( (LA113_0==INNER) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( ((LA112_0>=LEFT && LA112_0<=FULL)) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            int alt111=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt111=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt111=2;
                                }
                                break;
                            case FULL:
                                {
                                alt111=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 111, 0, input);
                                throw nvae;
                            }
                            switch (alt111) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4937); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4941); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4945); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER314=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4948); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER314);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN315=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN315);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4985);
            streamExpression316=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression316.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4987);
            outerJoinIdent317=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent317.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON318=null;
        Token AND_EXPR320=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair319 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair321 = null;
        CommonTree ON318_tree=null;
        CommonTree AND_EXPR320_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON318=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent5052); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5055);
            outerJoinIdentPair319=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair319.getTree());
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( (LA114_0==AND_EXPR) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    AND_EXPR320=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent5058); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent5061);
            	    outerJoinIdentPair321=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair321.getTree());
            	    }
            	    break;
            	default :
            	    break loop114;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS323=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty322 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty324 = null;
        CommonTree EQUALS323_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5076);
            eventProperty322=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty322.getTree());
            EQUALS323=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair5078); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair5081);
            eventProperty324=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty324.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression325 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause5103);
            evalOrExpression325=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression325.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList326 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt115=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt115=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt115=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt115=3;
                    }
                    break;
            }
            switch (alt115) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause5139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause5145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause5151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==DISTINCT) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause5157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause5160);
            selectionList326=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList326.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA328=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement327 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement329 = null;
        CommonTree COMMA328_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList5191);
            selectionListElement327=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement327.getTree());
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);
                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }
                switch (alt117) {
            	case 1 :
            	    {
            	    COMMA328=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList5194); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList5197);
            	    selectionListElement329=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement329.getTree());
            	    }
            	    break;
            	default :
            	    break loop117;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS332=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector330 = null;
        EsperEPL2GrammarParser.expression_return expression331 = null;
        CommonTree s_tree=null;
        CommonTree AS332_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt119=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt119=1;
                }
                break;
            case IDENT:
                {
                int LA119_2 = input.LA(2);
                if ( (LA119_2==DOT) ) {
                    int LA119_75 = input.LA(3);
                    if ( (LA119_75==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt119=2;
                    }
                    else if ( (LA119_75==WINDOW||LA119_75==BETWEEN||LA119_75==ESCAPE||LA119_75==EVERY_EXPR||LA119_75==WHERE||(LA119_75>=SUM && LA119_75<=COUNT)||LA119_75==OUTER||(LA119_75>=JOIN && LA119_75<=FULL)||(LA119_75>=EVENTS && LA119_75<=LAST)||(LA119_75>=UNIDIRECTIONAL && LA119_75<=PREVIOUSTAIL)||LA119_75==PRIOR||(LA119_75>=WEEKDAY && LA119_75<=CAST)||(LA119_75>=SNAPSHOT && LA119_75<=INDEX)||(LA119_75>=DEFINE && LA119_75<=AFTER)||LA119_75==WHILE||(LA119_75>=MERGE && LA119_75<=MATCHED)||LA119_75==CONTEXT||LA119_75==IDENT||LA119_75==TICKED_STRING_LITERAL) ) {
                        alt119=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 119, 75, input);
                        throw nvae;
                    }
                }
                else if ( (LA119_2==EOF||(LA119_2>=IN_SET && LA119_2<=REGEXP)||(LA119_2>=OR_EXPR && LA119_2<=NOT_EXPR)||(LA119_2>=WHERE && LA119_2<=AS)||(LA119_2>=WHEN && LA119_2<=THEN)||LA119_2==FROM||LA119_2==IS||(LA119_2>=GROUP && LA119_2<=HAVING)||LA119_2==OUTPUT||LA119_2==INSERT||LA119_2==ORDER||LA119_2==ROW_LIMIT_EXPR||LA119_2==FOR||LA119_2==LPAREN||(LA119_2>=COMMA && LA119_2<=EQUALS)||LA119_2==LBRACK||(LA119_2>=STAR && LA119_2<=QUESTION)||(LA119_2>=BAND && LA119_2<=MOD)||LA119_2==ESCAPECHAR) ) {
                    alt119=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 119, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt119=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);
                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement5223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement5241);
                    streamSelector330=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector330.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement5246);
                    expression331=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression331.getTree());
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( (LA118_0==AS) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            AS332=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement5249); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS332);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement5253);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT333=null;
        Token STAR334=null;
        Token AS335=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT333_tree=null;
        CommonTree STAR334_tree=null;
        CommonTree AS335_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT333=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector5311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT333);
            STAR334=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector5313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR334);
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==AS) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    AS335=(Token)match(input,AS,FOLLOW_AS_in_streamSelector5316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS335);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector5320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT340=null;
        Token DOT342=null;
        Token AS344=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression336 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression337 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression338 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression339 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression341 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression343 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT340_tree=null;
        CommonTree DOT342_tree=null;
        CommonTree AS344_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt121=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA121_1 = input.LA(2);
                if ( (LA121_1==EOF||(LA121_1>=WHERE && LA121_1<=AS)||(LA121_1>=INNER && LA121_1<=ON)||(LA121_1>=GROUP && LA121_1<=HAVING)||LA121_1==OUTPUT||LA121_1==ORDER||(LA121_1>=UNIDIRECTIONAL && LA121_1<=RETAININTERSECTION)||LA121_1==ROW_LIMIT_EXPR||LA121_1==MATCH_RECOGNIZE||LA121_1==FOR||LA121_1==IDENT||LA121_1==LPAREN||(LA121_1>=COMMA && LA121_1<=LBRACK)) ) {
                    alt121=1;
                }
                else if ( (LA121_1==COLON) ) {
                    alt121=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt121=1;
                }
                break;
            case PATTERN:
                {
                alt121=2;
                }
                break;
            case SQL:
                {
                alt121=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);
                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression5351);
                    eventFilterExpression336=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression336.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression5355);
                    patternInclusionExpression337=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression337.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression5359);
                    databaseJoinExpression338=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression338.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression5363);
                    methodJoinExpression339=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression339.getTree());
                    }
                    break;
            }
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==DOT) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    DOT340=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT340);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression5372);
                    viewExpression341=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression341.getTree());
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);
                        if ( (LA122_0==DOT) ) {
                            alt122=1;
                        }
                        switch (alt122) {
                    	case 1 :
                    	    {
                    	    DOT342=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression5375); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT342);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression5377);
                    	    viewExpression343=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression343.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop122;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt124=3;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==AS) ) {
                alt124=1;
            }
            else if ( (LA124_0==IDENT) ) {
                alt124=2;
            }
            switch (alt124) {
                case 1 :
                    {
                    AS344=(Token)match(input,AS,FOLLOW_AS_in_streamExpression5384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS344);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==UNIDIRECTIONAL) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression5401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt126=3;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==RETAINUNION) ) {
                alt126=1;
            }
            else if ( (LA126_0==RETAININTERSECTION) ) {
                alt126=2;
            }
            switch (alt126) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR345=null;
        Token LPAREN346=null;
        Token RPAREN348=null;
        EsperEPL2GrammarParser.expressionList_return expressionList347 = null;
        CommonTree i_tree=null;
        CommonTree FOR345_tree=null;
        CommonTree LPAREN346_tree=null;
        CommonTree RPAREN348_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR345=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR345);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==LPAREN) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    LPAREN346=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN346);
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( (LA127_0==WINDOW||LA127_0==BETWEEN||LA127_0==ESCAPE||(LA127_0>=NOT_EXPR && LA127_0<=EVERY_EXPR)||LA127_0==WHERE||(LA127_0>=SUM && LA127_0<=COUNT)||LA127_0==CASE||LA127_0==OUTER||(LA127_0>=JOIN && LA127_0<=FULL)||(LA127_0>=EVENTS && LA127_0<=LAST)||(LA127_0>=UNIDIRECTIONAL && LA127_0<=CURRENT_TIMESTAMP)||(LA127_0>=SNAPSHOT && LA127_0<=INDEX)||(LA127_0>=BOOLEAN_TRUE && LA127_0<=VALUE_NULL)||(LA127_0>=DEFINE && LA127_0<=AFTER)||LA127_0==WHILE||(LA127_0>=MERGE && LA127_0<=MATCHED)||LA127_0==NEWKW||LA127_0==CONTEXT||LA127_0==NUM_DOUBLE||(LA127_0>=IDENT && LA127_0<=LCURLY)||LA127_0==LPAREN||(LA127_0>=PLUS && LA127_0<=QUESTION)||(LA127_0>=STRING_LITERAL && LA127_0<=QUOTED_STRING_LITERAL)||LA127_0==MINUS||LA127_0==NUM_INT||(LA127_0>=TICKED_STRING_LITERAL && LA127_0<=NUM_FLOAT)) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5477);
                            expressionList347=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList347.getTree());
                            }
                            break;
                    }
                    RPAREN348=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN348);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE349=null;
        Token LPAREN350=null;
        Token RPAREN358=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy351 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures352 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection353 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip354 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern355 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval356 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine357 = null;
        CommonTree MATCH_RECOGNIZE349_tree=null;
        CommonTree LPAREN350_tree=null;
        CommonTree RPAREN358_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE349=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE349);
            LPAREN350=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN350);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==PARTITION) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5536);
                    matchRecogPartitionBy351=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy351.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5543);
            matchRecogMeasures352=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures352.getTree());
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==ALL) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5548);
                    matchRecogMatchesSelection353=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection353.getTree());
                    }
                    break;
            }
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==AFTER) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5554);
                    matchRecogMatchesAfterSkip354=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip354.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5560);
            matchRecogPattern355=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern355.getTree());
            int alt132=2;
            int LA132_0 = input.LA(1);
            if ( (LA132_0==IDENT) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5566);
                    matchRecogMatchesInterval356=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval356.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5572);
            matchRecogDefine357=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine357.getTree());
            RPAREN358=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN358);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION359=null;
        Token BY360=null;
        Token COMMA362=null;
        EsperEPL2GrammarParser.expression_return expression361 = null;
        EsperEPL2GrammarParser.expression_return expression363 = null;
        CommonTree PARTITION359_tree=null;
        CommonTree BY360_tree=null;
        CommonTree COMMA362_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION359=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION359);
            BY360=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY360);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5620);
            expression361=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression361.getTree());
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);
                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }
                switch (alt133) {
            	case 1 :
            	    {
            	    COMMA362=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5623); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA362);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5625);
            	    expression363=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression363.getTree());
            	    }
            	    break;
            	default :
            	    break loop133;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARTITIONITEM, "PARTITIONITEM"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES364=null;
        Token COMMA366=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem365 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem367 = null;
        CommonTree MEASURES364_tree=null;
        CommonTree COMMA366_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES364=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES364);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5656);
            matchRecogMeasureItem365=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem365.getTree());
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);
                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }
                switch (alt134) {
            	case 1 :
            	    {
            	    COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5659); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA366);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5661);
            	    matchRecogMeasureItem367=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem367.getTree());
            	    }
            	    break;
            	default :
            	    break loop134;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS369=null;
        EsperEPL2GrammarParser.expression_return expression368 = null;
        CommonTree i_tree=null;
        CommonTree AS369_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5686);
            expression368=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression368.getTree());
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==AS) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    AS369=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS369);
                    int alt135=2;
                    int LA135_0 = input.LA(1);
                    if ( (LA135_0==IDENT) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5694); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL370=null;
        Token MATCHES371=null;
        CommonTree ALL370_tree=null;
        CommonTree MATCHES371_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL370=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL370_tree = (CommonTree)adaptor.create(ALL370);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL370_tree, root_0);
            }
            MATCHES371=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5728); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN372=null;
        Token LPAREN373=null;
        Token RPAREN375=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration374 = null;
        CommonTree PATTERN372_tree=null;
        CommonTree LPAREN373_tree=null;
        CommonTree RPAREN375_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN372=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN372);
            LPAREN373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN373);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5747);
            matchRecogPatternAlteration374=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration374.getTree());
            RPAREN375=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN375);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER376=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER376_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER376=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER376);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5775);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5779);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5783);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5787);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5791);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod377 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5829);
            timePeriod377=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod377.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat378 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat379 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5855);
            matchRecogPatternConcat378=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat378.getTree());
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);
                if ( (LA137_0==BOR) ) {
                    alt137=1;
                }
                switch (alt137) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5860); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5862);
            	    matchRecogPatternConcat379=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat379.getTree());
            	    }
            	    break;
            	default :
            	    break loop137;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary380 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);
                if ( (LA138_0==IDENT||LA138_0==LPAREN) ) {
                    alt138=1;
                }
                switch (alt138) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5895);
            	    matchRecogPatternUnary380=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary380.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested381 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom382 = null;
        try {
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==LPAREN) ) {
                alt139=1;
            }
            else if ( (LA139_0==IDENT) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);
                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5920);
                    matchRecogPatternNested381=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested381.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5926);
                    matchRecogPatternAtom382=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom382.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN383=null;
        Token RPAREN385=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration384 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN383_tree=null;
        CommonTree RPAREN385_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN383=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN383);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5940);
            matchRecogPatternAlteration384=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration384.getTree());
            RPAREN385=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN385);
            int alt140=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt140=1;
                    }
                    break;
                case PLUS:
                    {
                    alt140=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt140=3;
                    }
                    break;
            }
            switch (alt140) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==STAR||(LA143_0>=PLUS && LA143_0<=QUESTION)) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    int alt141=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt141=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt141=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt141=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);
                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom6004); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom6010); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6016); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt142=2;
                    int LA142_0 = input.LA(1);
                    if ( (LA142_0==QUESTION) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom6022); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE386=null;
        Token COMMA388=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem387 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem389 = null;
        CommonTree DEFINE386_tree=null;
        CommonTree COMMA388_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE386=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine6066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE386);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6068);
            matchRecogDefineItem387=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem387.getTree());
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);
                if ( (LA144_0==COMMA) ) {
                    alt144=1;
                }
                switch (alt144) {
            	case 1 :
            	    {
            	    COMMA388=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine6071); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA388);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine6073);
            	    matchRecogDefineItem389=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem389.getTree());
            	    }
            	    break;
            	default :
            	    break loop144;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS390=null;
        EsperEPL2GrammarParser.expression_return expression391 = null;
        CommonTree i_tree=null;
        CommonTree AS390_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem6100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS390=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem6102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS390);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem6104);
            expression391=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression391.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN392=null;
        Token LBRACK393=null;
        Token RBRACK395=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression394 = null;
        CommonTree PATTERN392_tree=null;
        CommonTree LBRACK393_tree=null;
        CommonTree RBRACK395_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN392=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression6129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN392);
            LBRACK393=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression6131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK393);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression6133);
            patternExpression394=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression394.getTree());
            RBRACK395=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression6135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK395);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL396=null;
        Token COLON397=null;
        Token LBRACK398=null;
        Token METADATASQL399=null;
        Token RBRACK400=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL396_tree=null;
        CommonTree COLON397_tree=null;
        CommonTree LBRACK398_tree=null;
        CommonTree METADATASQL399_tree=null;
        CommonTree RBRACK400_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL396=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression6168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL396);
            COLON397=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression6170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON397);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression6174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK398=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression6176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK398);
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==STRING_LITERAL) ) {
                alt145=1;
            }
            else if ( (LA145_0==QUOTED_STRING_LITERAL) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);
                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==METADATASQL) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    METADATASQL399=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression6191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL399);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==STRING_LITERAL) ) {
                        alt146=1;
                    }
                    else if ( (LA146_0==QUOTED_STRING_LITERAL) ) {
                        alt146=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);
                        throw nvae;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression6196); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6202); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK400=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression6207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK400);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON401=null;
        Token LPAREN403=null;
        Token RPAREN405=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier402 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList404 = null;
        CommonTree i_tree=null;
        CommonTree COLON401_tree=null;
        CommonTree LPAREN403_tree=null;
        CommonTree RPAREN405_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression6258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON401=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression6260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON401);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression6262);
            classIdentifier402=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier402.getTree());
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==LPAREN) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    LPAREN403=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression6265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN403);
                    int alt148=2;
                    int LA148_0 = input.LA(1);
                    if ( (LA148_0==WINDOW||LA148_0==BETWEEN||LA148_0==ESCAPE||(LA148_0>=NOT_EXPR && LA148_0<=EVERY_EXPR)||LA148_0==WHERE||(LA148_0>=SUM && LA148_0<=COUNT)||LA148_0==CASE||LA148_0==OUTER||(LA148_0>=JOIN && LA148_0<=FULL)||(LA148_0>=EVENTS && LA148_0<=LAST)||(LA148_0>=UNIDIRECTIONAL && LA148_0<=CURRENT_TIMESTAMP)||(LA148_0>=SNAPSHOT && LA148_0<=INDEX)||(LA148_0>=BOOLEAN_TRUE && LA148_0<=VALUE_NULL)||(LA148_0>=DEFINE && LA148_0<=AFTER)||LA148_0==WHILE||(LA148_0>=MERGE && LA148_0<=MATCHED)||LA148_0==NEWKW||LA148_0==CONTEXT||LA148_0==NUM_DOUBLE||(LA148_0>=IDENT && LA148_0<=LCURLY)||LA148_0==LPAREN||(LA148_0>=PLUS && LA148_0<=QUESTION)||(LA148_0>=STRING_LITERAL && LA148_0<=QUOTED_STRING_LITERAL)||LA148_0==MINUS||LA148_0==NUM_INT||(LA148_0>=TICKED_STRING_LITERAL && LA148_0<=NUM_FLOAT)) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression6267);
                            expressionList404=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList404.getTree());
                            }
                            break;
                    }
                    RPAREN405=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression6270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN405);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON406=null;
        Token LPAREN407=null;
        Token RPAREN409=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList408 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON406_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree RPAREN409_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON406=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression6325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON406);
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==IDENT) ) {
                alt150=1;
            }
            else if ( (LA150_0==MERGE) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression6330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression6334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression6337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN407);
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==WINDOW||LA151_0==BETWEEN||LA151_0==ESCAPE||(LA151_0>=NOT_EXPR && LA151_0<=EVERY_EXPR)||LA151_0==WHERE||(LA151_0>=SUM && LA151_0<=COUNT)||LA151_0==CASE||LA151_0==OUTER||(LA151_0>=JOIN && LA151_0<=FULL)||(LA151_0>=EVENTS && LA151_0<=LAST)||(LA151_0>=UNIDIRECTIONAL && LA151_0<=CURRENT_TIMESTAMP)||(LA151_0>=SNAPSHOT && LA151_0<=INDEX)||(LA151_0>=BOOLEAN_TRUE && LA151_0<=VALUE_NULL)||(LA151_0>=DEFINE && LA151_0<=AFTER)||LA151_0==WHILE||(LA151_0>=MERGE && LA151_0<=MATCHED)||LA151_0==NEWKW||LA151_0==CONTEXT||LA151_0==NUM_DOUBLE||(LA151_0>=IDENT && LA151_0<=LCURLY)||LA151_0==LPAREN||LA151_0==LBRACK||LA151_0==STAR||(LA151_0>=PLUS && LA151_0<=QUESTION)||(LA151_0>=STRING_LITERAL && LA151_0<=QUOTED_STRING_LITERAL)||LA151_0==MINUS||LA151_0==NUM_INT||(LA151_0>=TICKED_STRING_LITERAL && LA151_0<=NUM_FLOAT)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression6339);
                    expressionWithTimeList408=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList408.getTree());
                    }
                    break;
            }
            RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression6342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN409);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA411=null;
        EsperEPL2GrammarParser.expression_return expression410 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        CommonTree COMMA411_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr6402);
            expression410=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression410.getTree());
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);
                if ( (LA152_0==COMMA) ) {
                    alt152=1;
                }
                switch (alt152) {
            	case 1 :
            	    {
            	    COMMA411=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6405); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA411);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6407);
            	    expression412=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
            	    }
            	    break;
            	default :
            	    break loop152;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA414=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement413 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement415 = null;
        CommonTree COMMA414_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6442);
            orderByListElement413=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement413.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==COMMA) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6445); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA414);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6447);
            	    orderByListElement415=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement415.getTree());
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression416 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6472);
            expression416=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression416.getTree());
            int alt154=3;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==ASC) ) {
                alt154=1;
            }
            else if ( (LA154_0==DESC) ) {
                alt154=2;
            }
            switch (alt154) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression417 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6519);
            evalOrExpression417=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression417.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token t=null;
        Token t1=null;
        Token THEN423=null;
        Token TERMINATED425=null;
        Token AND_EXPR426=null;
        Token WHEN427=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter418 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod419 = null;
        EsperEPL2GrammarParser.number_return number420 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet421 = null;
        EsperEPL2GrammarParser.expression_return expression422 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr424 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree t_tree=null;
        CommonTree t1_tree=null;
        CommonTree THEN423_tree=null;
        CommonTree TERMINATED425_tree=null;
        CommonTree AND_EXPR426_tree=null;
        CommonTree WHEN427_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_TERMINATED=new RewriteRuleTokenStream(adaptor,"token TERMINATED");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);
            if ( (LA155_0==AFTER) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6557);
                    outputLimitAfter418=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter418.getTree());
                    }
                    break;
            }
            int alt156=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt156=1;
                    }
                    break;
                case FIRST:
                    {
                    alt156=2;
                    }
                    break;
                case LAST:
                    {
                    alt156=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt156=4;
                    }
                    break;
            }
            switch (alt156) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt160=5;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt160=1;
                }
                break;
            case AT:
                {
                alt160=2;
                }
                break;
            case WHEN:
                {
                int LA160_3 = input.LA(2);
                if ( (LA160_3==TERMINATED) ) {
                    alt160=4;
                }
                else if ( (LA160_3==WINDOW||LA160_3==BETWEEN||LA160_3==ESCAPE||(LA160_3>=NOT_EXPR && LA160_3<=EVERY_EXPR)||LA160_3==WHERE||(LA160_3>=SUM && LA160_3<=COUNT)||LA160_3==CASE||LA160_3==OUTER||(LA160_3>=JOIN && LA160_3<=FULL)||(LA160_3>=EVENTS && LA160_3<=LAST)||(LA160_3>=UNIDIRECTIONAL && LA160_3<=CURRENT_TIMESTAMP)||(LA160_3>=SNAPSHOT && LA160_3<=INDEX)||(LA160_3>=BOOLEAN_TRUE && LA160_3<=VALUE_NULL)||(LA160_3>=DEFINE && LA160_3<=AFTER)||LA160_3==WHILE||(LA160_3>=MERGE && LA160_3<=MATCHED)||LA160_3==NEWKW||LA160_3==CONTEXT||LA160_3==NUM_DOUBLE||(LA160_3>=IDENT && LA160_3<=LCURLY)||LA160_3==LPAREN||(LA160_3>=PLUS && LA160_3<=QUESTION)||(LA160_3>=STRING_LITERAL && LA160_3<=QUOTED_STRING_LITERAL)||LA160_3==MINUS||LA160_3==NUM_INT||(LA160_3>=TICKED_STRING_LITERAL && LA160_3<=NUM_FLOAT)) ) {
                    alt160=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 3, input);
                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND_EXPR:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt160=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);
                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( (LA158_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt158=1;
                    }
                    else if ( (LA158_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt158=1;
                    }
                    else if ( (LA158_0==NUM_INT) ) {
                        int LA158_3 = input.LA(2);
                        if ( (LA158_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==EVENTS) ) {
                            alt158=2;
                        }
                        else if ( (LA158_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA158_0==NUM_LONG) ) {
                        int LA158_4 = input.LA(2);
                        if ( (LA158_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==EVENTS) ) {
                            alt158=2;
                        }
                        else if ( (LA158_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA158_0==NUM_FLOAT) ) {
                        int LA158_5 = input.LA(2);
                        if ( (LA158_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==EVENTS) ) {
                            alt158=2;
                        }
                        else if ( (LA158_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA158_0==NUM_DOUBLE) ) {
                        int LA158_6 = input.LA(2);
                        if ( (LA158_6==EVENTS) ) {
                            alt158=2;
                        }
                        else if ( (LA158_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA158_0==IDENT) ) {
                        int LA158_7 = input.LA(2);
                        if ( (LA158_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==EVENTS) ) {
                            alt158=2;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else if ( (LA158_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt158=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA158_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt158=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);
                        throw nvae;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6641);
                            timePeriod419=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod419.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt157=2;
                            int LA157_0 = input.LA(1);
                            if ( (LA157_0==NUM_DOUBLE||LA157_0==NUM_INT||(LA157_0>=NUM_LONG && LA157_0<=NUM_FLOAT)) ) {
                                alt157=1;
                            }
                            else if ( (LA157_0==IDENT) ) {
                                alt157=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);
                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6652);
                                    number420=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number420.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6658); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6664); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6697);
                    crontabLimitParameterSet421=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet421.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6716);
                    expression422=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression422.getTree());
                    int alt159=2;
                    int LA159_0 = input.LA(1);
                    if ( (LA159_0==THEN) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            {
                            THEN423=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6719); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN423);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6721);
                            onSetExpr424=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr424.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    t=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(t);
                    TERMINATED425=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit6743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(TERMINATED425);
                    }
                    }
                    break;
                case 5 :
                    {
                    }
                    break;
            }
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==AND_EXPR) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    AND_EXPR426=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outputLimit6774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR426);
                    WHEN427=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(WHEN427);
                    t1=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_outputLimit6780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERMINATED.add(t1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (t != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TERM_LIMIT_EXPR, "TERM_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                if ( stream_t1.hasNext() ) {
                    adaptor.addChild(root_1, stream_t1.nextNode());
                }
                stream_t1.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS430=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod428 = null;
        EsperEPL2GrammarParser.number_return number429 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS430_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt162=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case PLUS:
            case QUESTION:
            case MINUS:
                {
                alt162=1;
                }
                break;
            case NUM_INT:
                {
                int LA162_3 = input.LA(2);
                if ( (LA162_3==MIN||(LA162_3>=TIMEPERIOD_YEAR && LA162_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt162=1;
                }
                else if ( (LA162_3==EVENTS) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA162_4 = input.LA(2);
                if ( (LA162_4==MIN||(LA162_4>=TIMEPERIOD_YEAR && LA162_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt162=1;
                }
                else if ( (LA162_4==EVENTS) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA162_5 = input.LA(2);
                if ( (LA162_5==EVENTS) ) {
                    alt162=2;
                }
                else if ( (LA162_5==MIN||(LA162_5>=TIMEPERIOD_YEAR && LA162_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt162=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA162_6 = input.LA(2);
                if ( (LA162_6==MIN||(LA162_6>=TIMEPERIOD_YEAR && LA162_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt162=1;
                }
                else if ( (LA162_6==EVENTS) ) {
                    alt162=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6958);
                    timePeriod428=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod428.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6962);
                    number429=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number429.getTree());
                    EVENTS430=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS430);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==NUM_DOUBLE||LA163_0==PLUS||LA163_0==MINUS||LA163_0==NUM_INT||(LA163_0>=NUM_LONG && LA163_0<=NUM_FLOAT)) ) {
                alt163=1;
            }
            else if ( (LA163_0==IDENT) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);
                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit7010);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==OFFSET||LA166_0==COMMA) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    int alt164=2;
                    int LA164_0 = input.LA(1);
                    if ( (LA164_0==COMMA) ) {
                        alt164=1;
                    }
                    else if ( (LA164_0==OFFSET) ) {
                        alt164=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 0, input);
                        throw nvae;
                    }
                    switch (alt164) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit7023); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit7029); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt165=2;
                    int LA165_0 = input.LA(1);
                    if ( (LA165_0==NUM_DOUBLE||LA165_0==PLUS||LA165_0==MINUS||LA165_0==NUM_INT||(LA165_0>=NUM_LONG && LA165_0<=NUM_FLOAT)) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==IDENT) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);
                        throw nvae;
                    }
                    switch (alt165) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit7035);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit7041); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN431=null;
        Token COMMA433=null;
        Token COMMA435=null;
        Token COMMA437=null;
        Token COMMA439=null;
        Token COMMA441=null;
        Token RPAREN443=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime432 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime434 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime436 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime438 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime440 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime442 = null;
        CommonTree LPAREN431_tree=null;
        CommonTree COMMA433_tree=null;
        CommonTree COMMA435_tree=null;
        CommonTree COMMA437_tree=null;
        CommonTree COMMA439_tree=null;
        CommonTree COMMA441_tree=null;
        CommonTree RPAREN443_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN431=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet7093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN431);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7095);
            expressionWithTime432=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime432.getTree());
            COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA433);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7099);
            expressionWithTime434=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime434.getTree());
            COMMA435=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA435);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7103);
            expressionWithTime436=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime436.getTree());
            COMMA437=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA437);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7107);
            expressionWithTime438=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime438.getTree());
            COMMA439=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA439);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7111);
            expressionWithTime440=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime440.getTree());
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==COMMA) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    COMMA441=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet7114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA441);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet7116);
                    expressionWithTime442=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime442.getTree());
                    }
                    break;
            }
            RPAREN443=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet7120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN443);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN444=null;
        Token THEN446=null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        EsperEPL2GrammarParser.expression_return expression447 = null;
        CommonTree WHEN444_tree=null;
        CommonTree THEN446_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN444=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause7150); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7153);
            expression445=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression445.getTree());
            THEN446=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause7155); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause7158);
            expression447=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE448=null;
        EsperEPL2GrammarParser.expression_return expression449 = null;
        CommonTree ELSE448_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE448=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause7171); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause7174);
            expression449=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression450 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression7187);
            caseExpression450=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression450.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE451=null;
        Token END454=null;
        Token CASE455=null;
        Token END459=null;
        EsperEPL2GrammarParser.whenClause_return whenClause452 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause453 = null;
        EsperEPL2GrammarParser.expression_return expression456 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause457 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause458 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression460 = null;
        CommonTree CASE451_tree=null;
        CommonTree END454_tree=null;
        CommonTree CASE455_tree=null;
        CommonTree END459_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt172=3;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==CASE) ) {
                int LA172_1 = input.LA(2);
                if ( (LA172_1==WHEN) ) {
                    alt172=1;
                }
                else if ( (LA172_1==WINDOW||LA172_1==BETWEEN||LA172_1==ESCAPE||(LA172_1>=NOT_EXPR && LA172_1<=EVERY_EXPR)||LA172_1==WHERE||(LA172_1>=SUM && LA172_1<=COUNT)||LA172_1==CASE||LA172_1==OUTER||(LA172_1>=JOIN && LA172_1<=FULL)||(LA172_1>=EVENTS && LA172_1<=LAST)||(LA172_1>=UNIDIRECTIONAL && LA172_1<=CURRENT_TIMESTAMP)||(LA172_1>=SNAPSHOT && LA172_1<=INDEX)||(LA172_1>=BOOLEAN_TRUE && LA172_1<=VALUE_NULL)||(LA172_1>=DEFINE && LA172_1<=AFTER)||LA172_1==WHILE||(LA172_1>=MERGE && LA172_1<=MATCHED)||LA172_1==NEWKW||LA172_1==CONTEXT||LA172_1==NUM_DOUBLE||(LA172_1>=IDENT && LA172_1<=LCURLY)||LA172_1==LPAREN||(LA172_1>=PLUS && LA172_1<=QUESTION)||(LA172_1>=STRING_LITERAL && LA172_1<=QUOTED_STRING_LITERAL)||LA172_1==MINUS||LA172_1==NUM_INT||(LA172_1>=TICKED_STRING_LITERAL && LA172_1<=NUM_FLOAT)) ) {
                    alt172=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 172, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA172_0==WINDOW||LA172_0==BETWEEN||LA172_0==ESCAPE||(LA172_0>=NOT_EXPR && LA172_0<=EVERY_EXPR)||LA172_0==WHERE||(LA172_0>=SUM && LA172_0<=COUNT)||LA172_0==OUTER||(LA172_0>=JOIN && LA172_0<=FULL)||(LA172_0>=EVENTS && LA172_0<=LAST)||(LA172_0>=UNIDIRECTIONAL && LA172_0<=CURRENT_TIMESTAMP)||(LA172_0>=SNAPSHOT && LA172_0<=INDEX)||(LA172_0>=BOOLEAN_TRUE && LA172_0<=VALUE_NULL)||(LA172_0>=DEFINE && LA172_0<=AFTER)||LA172_0==WHILE||(LA172_0>=MERGE && LA172_0<=MATCHED)||LA172_0==NEWKW||LA172_0==CONTEXT||LA172_0==NUM_DOUBLE||(LA172_0>=IDENT && LA172_0<=LCURLY)||LA172_0==LPAREN||(LA172_0>=PLUS && LA172_0<=QUESTION)||(LA172_0>=STRING_LITERAL && LA172_0<=QUOTED_STRING_LITERAL)||LA172_0==MINUS||LA172_0==NUM_INT||(LA172_0>=TICKED_STRING_LITERAL && LA172_0<=NUM_FLOAT)) ) {
                alt172=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);
                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE451=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE451_tree = (CommonTree)adaptor.create(CASE451);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE451_tree, root_0);
                    }
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);
                        if ( (LA168_0==WHEN) ) {
                            alt168=1;
                        }
                        switch (alt168) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7204);
                    	    whenClause452=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause452.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);
                    int alt169=2;
                    int LA169_0 = input.LA(1);
                    if ( (LA169_0==ELSE) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7207);
                            elseClause453=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause453.getTree());
                            }
                            break;
                    }
                    END454=(Token)match(input,END,FOLLOW_END_in_caseExpression7210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE455=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression7221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE455);
                    pushFollow(FOLLOW_expression_in_caseExpression7223);
                    expression456=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression456.getTree());
                    int cnt170=0;
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);
                        if ( (LA170_0==WHEN) ) {
                            alt170=1;
                        }
                        switch (alt170) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression7225);
                    	    whenClause457=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause457.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt170 >= 1 ) break loop170;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(170, input);
                                throw eee;
                        }
                        cnt170++;
                    } while (true);
                    int alt171=2;
                    int LA171_0 = input.LA(1);
                    if ( (LA171_0==ELSE) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression7228);
                            elseClause458=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause458.getTree());
                            }
                            break;
                    }
                    END459=(Token)match(input,END,FOLLOW_END_in_caseExpression7231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END459);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression7255);
                    evalOrExpression460=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression460.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression461 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression462 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7266);
            evalAndExpression461=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression461.getTree());
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);
                if ( (LA173_0==OR_EXPR) ) {
                    alt173=1;
                }
                switch (alt173) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression7271); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression7273);
            	    evalAndExpression462=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression462.getTree());
            	    }
            	    break;
            	default :
            	    break loop173;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression463 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression464 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7305);
            bitWiseExpression463=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression463.getTree());
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);
                if ( (LA174_0==AND_EXPR) ) {
                    int LA174_16 = input.LA(2);
                    if ( (LA174_16==WINDOW||LA174_16==BETWEEN||LA174_16==ESCAPE||(LA174_16>=NOT_EXPR && LA174_16<=EVERY_EXPR)||LA174_16==WHERE||(LA174_16>=SUM && LA174_16<=COUNT)||LA174_16==OUTER||(LA174_16>=JOIN && LA174_16<=FULL)||(LA174_16>=EVENTS && LA174_16<=LAST)||(LA174_16>=UNIDIRECTIONAL && LA174_16<=CURRENT_TIMESTAMP)||(LA174_16>=SNAPSHOT && LA174_16<=INDEX)||(LA174_16>=BOOLEAN_TRUE && LA174_16<=VALUE_NULL)||(LA174_16>=DEFINE && LA174_16<=AFTER)||LA174_16==WHILE||(LA174_16>=MERGE && LA174_16<=MATCHED)||LA174_16==NEWKW||LA174_16==CONTEXT||LA174_16==NUM_DOUBLE||(LA174_16>=IDENT && LA174_16<=LCURLY)||LA174_16==LPAREN||(LA174_16>=PLUS && LA174_16<=QUESTION)||(LA174_16>=STRING_LITERAL && LA174_16<=QUOTED_STRING_LITERAL)||LA174_16==MINUS||LA174_16==NUM_INT||(LA174_16>=TICKED_STRING_LITERAL && LA174_16<=NUM_FLOAT)) ) {
                        alt174=1;
                    }
                }
                switch (alt174) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression7310); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression7312);
            	    bitWiseExpression464=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression464.getTree());
            	    }
            	    break;
            	default :
            	    break loop174;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND466=null;
        Token BOR467=null;
        Token BXOR468=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression465 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression469 = null;
        CommonTree BAND466_tree=null;
        CommonTree BOR467_tree=null;
        CommonTree BXOR468_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7344);
            negatedExpression465=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression465.getTree());
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);
                if ( (LA176_0==BOR||(LA176_0>=BAND && LA176_0<=BXOR)) ) {
                    alt176=1;
                }
                switch (alt176) {
            	case 1 :
            	    {
            	    int alt175=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt175=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt175=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt175=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 175, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt175) {
            	        case 1 :
            	            {
            	            BAND466=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression7349); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND466_tree = (CommonTree)adaptor.create(BAND466);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND466_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR467=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression7352); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR467_tree = (CommonTree)adaptor.create(BOR467);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR467_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR468=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression7355); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR468_tree = (CommonTree)adaptor.create(BXOR468);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR468_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression7359);
            	    negatedExpression469=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression469.getTree());
            	    }
            	    break;
            	default :
            	    break loop176;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR471=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression470 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression472 = null;
        CommonTree NOT_EXPR471_tree=null;
        try {
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==WINDOW||LA177_0==BETWEEN||LA177_0==ESCAPE||LA177_0==EVERY_EXPR||LA177_0==WHERE||(LA177_0>=SUM && LA177_0<=COUNT)||LA177_0==OUTER||(LA177_0>=JOIN && LA177_0<=FULL)||(LA177_0>=EVENTS && LA177_0<=LAST)||(LA177_0>=UNIDIRECTIONAL && LA177_0<=CURRENT_TIMESTAMP)||(LA177_0>=SNAPSHOT && LA177_0<=INDEX)||(LA177_0>=BOOLEAN_TRUE && LA177_0<=VALUE_NULL)||(LA177_0>=DEFINE && LA177_0<=AFTER)||LA177_0==WHILE||(LA177_0>=MERGE && LA177_0<=MATCHED)||LA177_0==NEWKW||LA177_0==CONTEXT||LA177_0==NUM_DOUBLE||(LA177_0>=IDENT && LA177_0<=LCURLY)||LA177_0==LPAREN||(LA177_0>=PLUS && LA177_0<=QUESTION)||(LA177_0>=STRING_LITERAL && LA177_0<=QUOTED_STRING_LITERAL)||LA177_0==MINUS||LA177_0==NUM_INT||(LA177_0>=TICKED_STRING_LITERAL && LA177_0<=NUM_FLOAT)) ) {
                alt177=1;
            }
            else if ( (LA177_0==NOT_EXPR) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);
                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7374);
                    evalEqualsExpression470=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression470.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR471=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression7380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR471_tree = (CommonTree)adaptor.create(NOT_EXPR471);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR471_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression7383);
                    evalEqualsExpression472=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression472.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR474=null;
        Token LPAREN476=null;
        Token RPAREN478=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression473 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression475 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList477 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression479 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR474_tree=null;
        CommonTree LPAREN476_tree=null;
        CommonTree RPAREN478_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7396);
            evalRelationalExpression473=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression473.getTree());
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);
                if ( (LA183_0==IS||LA183_0==EQUALS||(LA183_0>=SQL_NE && LA183_0<=NOT_EQUAL)) ) {
                    alt183=1;
                }
                switch (alt183) {
            	case 1 :
            	    {
            	    int alt178=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt178=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA178_2 = input.LA(2);
            	        if ( (LA178_2==NOT_EXPR) ) {
            	            alt178=3;
            	        }
            	        else if ( (LA178_2==WINDOW||LA178_2==BETWEEN||LA178_2==ESCAPE||LA178_2==EVERY_EXPR||LA178_2==WHERE||(LA178_2>=SUM && LA178_2<=COUNT)||LA178_2==OUTER||(LA178_2>=JOIN && LA178_2<=FULL)||(LA178_2>=ALL && LA178_2<=SOME)||(LA178_2>=EVENTS && LA178_2<=LAST)||(LA178_2>=UNIDIRECTIONAL && LA178_2<=CURRENT_TIMESTAMP)||(LA178_2>=SNAPSHOT && LA178_2<=INDEX)||(LA178_2>=BOOLEAN_TRUE && LA178_2<=VALUE_NULL)||(LA178_2>=DEFINE && LA178_2<=AFTER)||LA178_2==WHILE||(LA178_2>=MERGE && LA178_2<=MATCHED)||LA178_2==NEWKW||LA178_2==CONTEXT||LA178_2==NUM_DOUBLE||(LA178_2>=IDENT && LA178_2<=LCURLY)||LA178_2==LPAREN||(LA178_2>=PLUS && LA178_2<=QUESTION)||(LA178_2>=STRING_LITERAL && LA178_2<=QUOTED_STRING_LITERAL)||LA178_2==MINUS||LA178_2==NUM_INT||(LA178_2>=TICKED_STRING_LITERAL && LA178_2<=NUM_FLOAT)) ) {
            	            alt178=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 178, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt178=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt178=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 178, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt178) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression7409); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7427); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression7441); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR474=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression7443); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR474);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression7457); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression7471); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt182=2;
            	    int LA182_0 = input.LA(1);
            	    if ( (LA182_0==WINDOW||LA182_0==BETWEEN||LA182_0==ESCAPE||LA182_0==EVERY_EXPR||LA182_0==WHERE||(LA182_0>=SUM && LA182_0<=COUNT)||LA182_0==OUTER||(LA182_0>=JOIN && LA182_0<=FULL)||(LA182_0>=EVENTS && LA182_0<=LAST)||(LA182_0>=UNIDIRECTIONAL && LA182_0<=CURRENT_TIMESTAMP)||(LA182_0>=SNAPSHOT && LA182_0<=INDEX)||(LA182_0>=BOOLEAN_TRUE && LA182_0<=VALUE_NULL)||(LA182_0>=DEFINE && LA182_0<=AFTER)||LA182_0==WHILE||(LA182_0>=MERGE && LA182_0<=MATCHED)||LA182_0==NEWKW||LA182_0==CONTEXT||LA182_0==NUM_DOUBLE||(LA182_0>=IDENT && LA182_0<=LCURLY)||LA182_0==LPAREN||(LA182_0>=PLUS && LA182_0<=QUESTION)||(LA182_0>=STRING_LITERAL && LA182_0<=QUOTED_STRING_LITERAL)||LA182_0==MINUS||LA182_0==NUM_INT||(LA182_0>=TICKED_STRING_LITERAL && LA182_0<=NUM_FLOAT)) ) {
            	        alt182=1;
            	    }
            	    else if ( ((LA182_0>=ALL && LA182_0<=SOME)) ) {
            	        alt182=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 182, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt182) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7501);
            	            evalRelationalExpression475=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression475.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt179=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt179=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt179=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt179=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 179, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt179) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7518); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7524); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7530); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt181=2;
            	            int LA181_0 = input.LA(1);
            	            if ( (LA181_0==LPAREN) ) {
            	                int LA181_1 = input.LA(2);
            	                if ( (LA181_1==SELECT) ) {
            	                    alt181=2;
            	                }
            	                else if ( (LA181_1==WINDOW||LA181_1==BETWEEN||LA181_1==ESCAPE||(LA181_1>=NOT_EXPR && LA181_1<=EVERY_EXPR)||LA181_1==WHERE||(LA181_1>=SUM && LA181_1<=COUNT)||LA181_1==CASE||LA181_1==OUTER||(LA181_1>=JOIN && LA181_1<=FULL)||(LA181_1>=EVENTS && LA181_1<=LAST)||(LA181_1>=UNIDIRECTIONAL && LA181_1<=CURRENT_TIMESTAMP)||(LA181_1>=SNAPSHOT && LA181_1<=INDEX)||(LA181_1>=BOOLEAN_TRUE && LA181_1<=VALUE_NULL)||(LA181_1>=DEFINE && LA181_1<=AFTER)||LA181_1==WHILE||(LA181_1>=MERGE && LA181_1<=MATCHED)||LA181_1==NEWKW||LA181_1==CONTEXT||LA181_1==NUM_DOUBLE||(LA181_1>=IDENT && LA181_1<=LCURLY)||(LA181_1>=LPAREN && LA181_1<=RPAREN)||(LA181_1>=PLUS && LA181_1<=QUESTION)||(LA181_1>=STRING_LITERAL && LA181_1<=QUOTED_STRING_LITERAL)||LA181_1==MINUS||LA181_1==NUM_INT||(LA181_1>=TICKED_STRING_LITERAL && LA181_1<=NUM_FLOAT)) ) {
            	                    alt181=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 181, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 181, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt181) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN476=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7536); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN476);
            	                    int alt180=2;
            	                    int LA180_0 = input.LA(1);
            	                    if ( (LA180_0==WINDOW||LA180_0==BETWEEN||LA180_0==ESCAPE||(LA180_0>=NOT_EXPR && LA180_0<=EVERY_EXPR)||LA180_0==WHERE||(LA180_0>=SUM && LA180_0<=COUNT)||LA180_0==CASE||LA180_0==OUTER||(LA180_0>=JOIN && LA180_0<=FULL)||(LA180_0>=EVENTS && LA180_0<=LAST)||(LA180_0>=UNIDIRECTIONAL && LA180_0<=CURRENT_TIMESTAMP)||(LA180_0>=SNAPSHOT && LA180_0<=INDEX)||(LA180_0>=BOOLEAN_TRUE && LA180_0<=VALUE_NULL)||(LA180_0>=DEFINE && LA180_0<=AFTER)||LA180_0==WHILE||(LA180_0>=MERGE && LA180_0<=MATCHED)||LA180_0==NEWKW||LA180_0==CONTEXT||LA180_0==NUM_DOUBLE||(LA180_0>=IDENT && LA180_0<=LCURLY)||LA180_0==LPAREN||(LA180_0>=PLUS && LA180_0<=QUESTION)||(LA180_0>=STRING_LITERAL && LA180_0<=QUOTED_STRING_LITERAL)||LA180_0==MINUS||LA180_0==NUM_INT||(LA180_0>=TICKED_STRING_LITERAL && LA180_0<=NUM_FLOAT)) ) {
            	                        alt180=1;
            	                    }
            	                    switch (alt180) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7538);
            	                            expressionList477=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList477.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN478=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7541); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN478);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7546);
            	                    subSelectGroupExpression479=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression479.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop183;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN482=null;
        Token RPAREN484=null;
        Token COMMA488=null;
        Token IN_SET490=null;
        Token BETWEEN492=null;
        Token LIKE494=null;
        Token ESCAPE496=null;
        Token REGEXP498=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr480 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr481 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList483 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression485 = null;
        EsperEPL2GrammarParser.expression_return expression486 = null;
        EsperEPL2GrammarParser.expression_return expression487 = null;
        EsperEPL2GrammarParser.expression_return expression489 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery491 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList493 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr495 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant497 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr499 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN482_tree=null;
        CommonTree RPAREN484_tree=null;
        CommonTree COMMA488_tree=null;
        CommonTree IN_SET490_tree=null;
        CommonTree BETWEEN492_tree=null;
        CommonTree LIKE494_tree=null;
        CommonTree ESCAPE496_tree=null;
        CommonTree REGEXP498_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7706);
            concatenationExpr480=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr480.getTree());
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==EOF||(LA197_0>=OR_EXPR && LA197_0<=AND_EXPR)||(LA197_0>=WHERE && LA197_0<=AS)||(LA197_0>=ELSE && LA197_0<=FROM)||LA197_0==IS||(LA197_0>=GROUP && LA197_0<=HAVING)||LA197_0==ALL||LA197_0==OUTPUT||LA197_0==INSERT||(LA197_0>=ORDER && LA197_0<=DESC)||LA197_0==PATTERN||(LA197_0>=TIMEPERIOD_SEC && LA197_0<=TIMEPERIOD_SECONDS)||LA197_0==ROW_LIMIT_EXPR||LA197_0==MEASURES||(LA197_0>=AFTER && LA197_0<=FOR)||LA197_0==RCURLY||LA197_0==RPAREN||(LA197_0>=COMMA && LA197_0<=EQUALS)||LA197_0==RBRACK||LA197_0==BOR||LA197_0==COLON||(LA197_0>=BAND && LA197_0<=GE)||LA197_0==FOLLOWMAX_END) ) {
                alt197=1;
            }
            else if ( ((LA197_0>=IN_SET && LA197_0<=REGEXP)||LA197_0==NOT_EXPR) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);
                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    {
                    {
                    loop189:
                    do {
                        int alt189=2;
                        int LA189_0 = input.LA(1);
                        if ( ((LA189_0>=LT && LA189_0<=GE)) ) {
                            alt189=1;
                        }
                        switch (alt189) {
                    	case 1 :
                    	    {
                    	    int alt184=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt184=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt184=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt184=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt184=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 184, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt184) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7738); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7742); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7746); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7750); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt188=2;
                    	    int LA188_0 = input.LA(1);
                    	    if ( (LA188_0==WINDOW||LA188_0==BETWEEN||LA188_0==ESCAPE||LA188_0==EVERY_EXPR||LA188_0==WHERE||(LA188_0>=SUM && LA188_0<=COUNT)||LA188_0==OUTER||(LA188_0>=JOIN && LA188_0<=FULL)||(LA188_0>=EVENTS && LA188_0<=LAST)||(LA188_0>=UNIDIRECTIONAL && LA188_0<=CURRENT_TIMESTAMP)||(LA188_0>=SNAPSHOT && LA188_0<=INDEX)||(LA188_0>=BOOLEAN_TRUE && LA188_0<=VALUE_NULL)||(LA188_0>=DEFINE && LA188_0<=AFTER)||LA188_0==WHILE||(LA188_0>=MERGE && LA188_0<=MATCHED)||LA188_0==NEWKW||LA188_0==CONTEXT||LA188_0==NUM_DOUBLE||(LA188_0>=IDENT && LA188_0<=LCURLY)||LA188_0==LPAREN||(LA188_0>=PLUS && LA188_0<=QUESTION)||(LA188_0>=STRING_LITERAL && LA188_0<=QUOTED_STRING_LITERAL)||LA188_0==MINUS||LA188_0==NUM_INT||(LA188_0>=TICKED_STRING_LITERAL && LA188_0<=NUM_FLOAT)) ) {
                    	        alt188=1;
                    	    }
                    	    else if ( ((LA188_0>=ALL && LA188_0<=SOME)) ) {
                    	        alt188=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 188, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt188) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7774);
                    	            concatenationExpr481=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr481.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt185=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt185=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt185=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt185=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 185, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt185) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7791); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7797); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7803); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt187=2;
                    	            int LA187_0 = input.LA(1);
                    	            if ( (LA187_0==LPAREN) ) {
                    	                int LA187_1 = input.LA(2);
                    	                if ( (LA187_1==SELECT) ) {
                    	                    alt187=2;
                    	                }
                    	                else if ( (LA187_1==WINDOW||LA187_1==BETWEEN||LA187_1==ESCAPE||(LA187_1>=NOT_EXPR && LA187_1<=EVERY_EXPR)||LA187_1==WHERE||(LA187_1>=SUM && LA187_1<=COUNT)||LA187_1==CASE||LA187_1==OUTER||(LA187_1>=JOIN && LA187_1<=FULL)||(LA187_1>=EVENTS && LA187_1<=LAST)||(LA187_1>=UNIDIRECTIONAL && LA187_1<=CURRENT_TIMESTAMP)||(LA187_1>=SNAPSHOT && LA187_1<=INDEX)||(LA187_1>=BOOLEAN_TRUE && LA187_1<=VALUE_NULL)||(LA187_1>=DEFINE && LA187_1<=AFTER)||LA187_1==WHILE||(LA187_1>=MERGE && LA187_1<=MATCHED)||LA187_1==NEWKW||LA187_1==CONTEXT||LA187_1==NUM_DOUBLE||(LA187_1>=IDENT && LA187_1<=LCURLY)||(LA187_1>=LPAREN && LA187_1<=RPAREN)||(LA187_1>=PLUS && LA187_1<=QUESTION)||(LA187_1>=STRING_LITERAL && LA187_1<=QUOTED_STRING_LITERAL)||LA187_1==MINUS||LA187_1==NUM_INT||(LA187_1>=TICKED_STRING_LITERAL && LA187_1<=NUM_FLOAT)) ) {
                    	                    alt187=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 187, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 187, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt187) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN482=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7809); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN482);
                    	                    int alt186=2;
                    	                    int LA186_0 = input.LA(1);
                    	                    if ( (LA186_0==WINDOW||LA186_0==BETWEEN||LA186_0==ESCAPE||(LA186_0>=NOT_EXPR && LA186_0<=EVERY_EXPR)||LA186_0==WHERE||(LA186_0>=SUM && LA186_0<=COUNT)||LA186_0==CASE||LA186_0==OUTER||(LA186_0>=JOIN && LA186_0<=FULL)||(LA186_0>=EVENTS && LA186_0<=LAST)||(LA186_0>=UNIDIRECTIONAL && LA186_0<=CURRENT_TIMESTAMP)||(LA186_0>=SNAPSHOT && LA186_0<=INDEX)||(LA186_0>=BOOLEAN_TRUE && LA186_0<=VALUE_NULL)||(LA186_0>=DEFINE && LA186_0<=AFTER)||LA186_0==WHILE||(LA186_0>=MERGE && LA186_0<=MATCHED)||LA186_0==NEWKW||LA186_0==CONTEXT||LA186_0==NUM_DOUBLE||(LA186_0>=IDENT && LA186_0<=LCURLY)||LA186_0==LPAREN||(LA186_0>=PLUS && LA186_0<=QUESTION)||(LA186_0>=STRING_LITERAL && LA186_0<=QUOTED_STRING_LITERAL)||LA186_0==MINUS||LA186_0==NUM_INT||(LA186_0>=TICKED_STRING_LITERAL && LA186_0<=NUM_FLOAT)) ) {
                    	                        alt186=1;
                    	                    }
                    	                    switch (alt186) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7811);
                    	                            expressionList483=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList483.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN484=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7814); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN484);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7819);
                    	                    subSelectGroupExpression485=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression485.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop189;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt190=2;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==NOT_EXPR) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7915); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt196=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA196_1 = input.LA(2);
                        if ( (LA196_1==LPAREN) ) {
                            int LA196_5 = input.LA(3);
                            if ( (LA196_5==SELECT) ) {
                                alt196=2;
                            }
                            else if ( (LA196_5==WINDOW||LA196_5==BETWEEN||LA196_5==ESCAPE||(LA196_5>=NOT_EXPR && LA196_5<=EVERY_EXPR)||LA196_5==WHERE||(LA196_5>=SUM && LA196_5<=COUNT)||LA196_5==CASE||LA196_5==OUTER||(LA196_5>=JOIN && LA196_5<=FULL)||(LA196_5>=EVENTS && LA196_5<=LAST)||(LA196_5>=UNIDIRECTIONAL && LA196_5<=CURRENT_TIMESTAMP)||(LA196_5>=SNAPSHOT && LA196_5<=INDEX)||(LA196_5>=BOOLEAN_TRUE && LA196_5<=VALUE_NULL)||(LA196_5>=DEFINE && LA196_5<=AFTER)||LA196_5==WHILE||(LA196_5>=MERGE && LA196_5<=MATCHED)||LA196_5==NEWKW||LA196_5==CONTEXT||LA196_5==NUM_DOUBLE||(LA196_5>=IDENT && LA196_5<=LCURLY)||LA196_5==LPAREN||(LA196_5>=PLUS && LA196_5<=QUESTION)||(LA196_5>=STRING_LITERAL && LA196_5<=QUOTED_STRING_LITERAL)||LA196_5==MINUS||LA196_5==NUM_INT||(LA196_5>=TICKED_STRING_LITERAL && LA196_5<=NUM_FLOAT)) ) {
                                alt196=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 196, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA196_1==LBRACK) ) {
                            alt196=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 196, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt196=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt196=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt196=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 196, 0, input);
                        throw nvae;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt191=2;
                            int LA191_0 = input.LA(1);
                            if ( (LA191_0==LPAREN) ) {
                                alt191=1;
                            }
                            else if ( (LA191_0==LBRACK) ) {
                                alt191=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 191, 0, input);
                                throw nvae;
                            }
                            switch (alt191) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7954); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7960); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7963);
                            expression486=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression486.getTree());
                            int alt193=2;
                            int LA193_0 = input.LA(1);
                            if ( (LA193_0==COLON) ) {
                                alt193=1;
                            }
                            else if ( (LA193_0==RPAREN||LA193_0==COMMA||LA193_0==RBRACK) ) {
                                alt193=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 193, 0, input);
                                throw nvae;
                            }
                            switch (alt193) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7985); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7988);
                                    expression487=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression487.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop192:
                                    do {
                                        int alt192=2;
                                        int LA192_0 = input.LA(1);
                                        if ( (LA192_0==COMMA) ) {
                                            alt192=1;
                                        }
                                        switch (alt192) {
                                    	case 1 :
                                    	    {
                                    	    COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression8014); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA488);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression8016);
                                    	    expression489=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression489.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop192;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt194=2;
                            int LA194_0 = input.LA(1);
                            if ( (LA194_0==RPAREN) ) {
                                alt194=1;
                            }
                            else if ( (LA194_0==RBRACK) ) {
                                alt194=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 194, 0, input);
                                throw nvae;
                            }
                            switch (alt194) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression8042); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression8048); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET490=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression8171); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET490);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression8173);
                            inSubSelectQuery491=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery491.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN492=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression8219); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN492);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression8221);
                            betweenList493=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList493.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE494=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression8271); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE494);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8273);
                            concatenationExpr495=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr495.getTree());
                            int alt195=2;
                            int LA195_0 = input.LA(1);
                            if ( (LA195_0==ESCAPE) ) {
                                alt195=1;
                            }
                            switch (alt195) {
                                case 1 :
                                    {
                                    ESCAPE496=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression8276); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE496);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression8278);
                                    stringconstant497=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant497.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP498=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression8330); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP498);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression8332);
                            concatenationExpr499=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr499.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr500 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery8394);
            subQueryExpr500=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr500.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR503=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression501 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression502 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression504 = null;
        CommonTree c_tree=null;
        CommonTree LOR503_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8419);
            additiveExpression501=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression501.getTree());
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==LOR) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8427);
                    additiveExpression502=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression502.getTree());
                    loop198:
                    do {
                        int alt198=2;
                        int LA198_0 = input.LA(1);
                        if ( (LA198_0==LOR) ) {
                            alt198=1;
                        }
                        switch (alt198) {
                    	case 1 :
                    	    {
                    	    LOR503=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr8431); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR503);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr8433);
                    	    additiveExpression504=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression504.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop198;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS506=null;
        Token MINUS507=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression505 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression508 = null;
        CommonTree PLUS506_tree=null;
        CommonTree MINUS507_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8474);
            multiplyExpression505=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression505.getTree());
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);
                if ( (LA201_0==PLUS||LA201_0==MINUS) ) {
                    alt201=1;
                }
                switch (alt201) {
            	case 1 :
            	    {
            	    int alt200=2;
            	    int LA200_0 = input.LA(1);
            	    if ( (LA200_0==PLUS) ) {
            	        alt200=1;
            	    }
            	    else if ( (LA200_0==MINUS) ) {
            	        alt200=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 200, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt200) {
            	        case 1 :
            	            {
            	            PLUS506=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression8479); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS506_tree = (CommonTree)adaptor.create(PLUS506);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS506_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS507=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression8482); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS507_tree = (CommonTree)adaptor.create(MINUS507);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS507_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8486);
            	    multiplyExpression508=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression508.getTree());
            	    }
            	    break;
            	default :
            	    break loop201;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR510=null;
        Token DIV511=null;
        Token MOD512=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression509 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression513 = null;
        CommonTree STAR510_tree=null;
        CommonTree DIV511_tree=null;
        CommonTree MOD512_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8500);
            unaryExpression509=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression509.getTree());
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);
                if ( (LA203_0==STAR||(LA203_0>=DIV && LA203_0<=MOD)) ) {
                    alt203=1;
                }
                switch (alt203) {
            	case 1 :
            	    {
            	    int alt202=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt202=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt202=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt202=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 202, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt202) {
            	        case 1 :
            	            {
            	            STAR510=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression8505); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR510_tree = (CommonTree)adaptor.create(STAR510);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR510_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV511=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression8508); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV511_tree = (CommonTree)adaptor.create(DIV511);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV511_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD512=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression8511); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD512_tree = (CommonTree)adaptor.create(MOD512);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD512_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8515);
            	    unaryExpression513=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression513.getTree());
            	    }
            	    break;
            	default :
            	    break loop203;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS514=null;
        Token LPAREN518=null;
        Token RPAREN520=null;
        Token NEWKW530=null;
        Token LCURLY531=null;
        Token COMMA533=null;
        Token RCURLY535=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty515 = null;
        EsperEPL2GrammarParser.constant_return constant516 = null;
        EsperEPL2GrammarParser.substitution_return substitution517 = null;
        EsperEPL2GrammarParser.expression_return expression519 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass521 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass522 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction523 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc524 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression525 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression526 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass527 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass528 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression529 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign532 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign534 = null;
        CommonTree d_tree=null;
        CommonTree MINUS514_tree=null;
        CommonTree LPAREN518_tree=null;
        CommonTree RPAREN520_tree=null;
        CommonTree NEWKW530_tree=null;
        CommonTree LCURLY531_tree=null;
        CommonTree COMMA533_tree=null;
        CommonTree RCURLY535_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt209=10;
            alt209 = dfa209.predict(input);
            switch (alt209) {
                case 1 :
                    {
                    MINUS514=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS514);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8532);
                    eventProperty515=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty515.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8545);
                    constant516=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant516.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8550);
                    substitution517=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution517.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN518=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN518);
                    pushFollow(FOLLOW_expression_in_unaryExpression8557);
                    expression519=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression519.getTree());
                    RPAREN520=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN520);
                    int alt205=2;
                    int LA205_0 = input.LA(1);
                    if ( (LA205_0==DOT) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8564); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8566);
                            libFunctionNoClass521=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass521.getTree());
                            loop204:
                            do {
                                int alt204=2;
                                int LA204_0 = input.LA(1);
                                if ( (LA204_0==DOT) ) {
                                    alt204=1;
                                }
                                switch (alt204) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8571); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8573);
                            	    libFunctionNoClass522=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass522.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop204;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8610);
                    eventPropertyOrLibFunction523=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction523.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression8622);
                    builtinFunc524=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc524.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression8628);
                    arrayExpression525=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression525.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression8633);
                    subSelectExpression526=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression526.getTree());
                    int alt207=2;
                    int LA207_0 = input.LA(1);
                    if ( (LA207_0==DOT) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8638); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8640);
                            libFunctionNoClass527=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass527.getTree());
                            loop206:
                            do {
                                int alt206=2;
                                int LA206_0 = input.LA(1);
                                if ( (LA206_0==DOT) ) {
                                    alt206=1;
                                }
                                switch (alt206) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8645); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8647);
                            	    libFunctionNoClass528=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass528.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop206;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression8684);
                    existsSubSelectExpression529=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression529.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW530=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression8689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW530);
                    LCURLY531=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression8691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY531);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression8693);
                    newAssign532=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign532.getTree());
                    loop208:
                    do {
                        int alt208=2;
                        int LA208_0 = input.LA(1);
                        if ( (LA208_0==COMMA) ) {
                            alt208=1;
                        }
                        switch (alt208) {
                    	case 1 :
                    	    {
                    	    COMMA533=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression8696); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA533);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression8698);
                    	    newAssign534=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign534.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop208;
                        }
                    } while (true);
                    RCURLY535=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression8702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY535);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS537=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty536 = null;
        EsperEPL2GrammarParser.expression_return expression538 = null;
        CommonTree EQUALS537_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign8724);
            eventProperty536=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty536.getTree());
            int alt210=2;
            int LA210_0 = input.LA(1);
            if ( (LA210_0==EQUALS) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    EQUALS537=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign8727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS537);
                    pushFollow(FOLLOW_expression_in_newAssign8729);
                    expression538=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression538.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr539 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8757);
            subQueryExpr539=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr539.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr540 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8779);
            subQueryExpr540=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr540.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS541=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr542 = null;
        CommonTree EXISTS541_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS541=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS541);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8803);
            subQueryExpr542=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr542.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN543=null;
        Token SELECT544=null;
        Token DISTINCT545=null;
        Token FROM547=null;
        Token WHERE549=null;
        Token RPAREN551=null;
        EsperEPL2GrammarParser.selectionList_return selectionList546 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr548 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause550 = null;
        CommonTree LPAREN543_tree=null;
        CommonTree SELECT544_tree=null;
        CommonTree DISTINCT545_tree=null;
        CommonTree FROM547_tree=null;
        CommonTree WHERE549_tree=null;
        CommonTree RPAREN551_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8836); if (state.failed) return retval;
            SELECT544=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8842); if (state.failed) return retval;
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==DISTINCT) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    DISTINCT545=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT545_tree = (CommonTree)adaptor.create(DISTINCT545);
                    adaptor.addChild(root_0, DISTINCT545_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8848);
            selectionList546=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList546.getTree());
            FROM547=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8855); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8858);
            subSelectFilterExpr548=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr548.getTree());
            int alt212=2;
            int LA212_0 = input.LA(1);
            if ( (LA212_0==WHERE) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    WHERE549=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8866); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8869);
                    whereClause550=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause550.getTree());
                    }
                    break;
            }
            RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8878); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT553=null;
        Token DOT555=null;
        Token AS557=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression552 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression554 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression556 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT553_tree=null;
        CommonTree DOT555_tree=null;
        CommonTree AS557_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8902);
            eventFilterExpression552=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression552.getTree());
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==DOT) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    {
                    DOT553=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT553);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8909);
                    viewExpression554=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression554.getTree());
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);
                        if ( (LA213_0==DOT) ) {
                            alt213=1;
                        }
                        switch (alt213) {
                    	case 1 :
                    	    {
                    	    DOT555=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8912); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT555);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8914);
                    	    viewExpression556=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression556.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop213;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt215=3;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==AS) ) {
                alt215=1;
            }
            else if ( (LA215_0==IDENT) ) {
                alt215=2;
            }
            switch (alt215) {
                case 1 :
                    {
                    AS557=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS557);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt216=3;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==RETAINUNION) ) {
                alt216=1;
            }
            else if ( (LA216_0==RETAININTERSECTION) ) {
                alt216=2;
            }
            switch (alt216) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY558=null;
        Token COMMA560=null;
        Token RCURLY562=null;
        EsperEPL2GrammarParser.expression_return expression559 = null;
        EsperEPL2GrammarParser.expression_return expression561 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass563 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass564 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY558_tree=null;
        CommonTree COMMA560_tree=null;
        CommonTree RCURLY562_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY558=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY558);
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==WINDOW||LA218_0==BETWEEN||LA218_0==ESCAPE||(LA218_0>=NOT_EXPR && LA218_0<=EVERY_EXPR)||LA218_0==WHERE||(LA218_0>=SUM && LA218_0<=COUNT)||LA218_0==CASE||LA218_0==OUTER||(LA218_0>=JOIN && LA218_0<=FULL)||(LA218_0>=EVENTS && LA218_0<=LAST)||(LA218_0>=UNIDIRECTIONAL && LA218_0<=CURRENT_TIMESTAMP)||(LA218_0>=SNAPSHOT && LA218_0<=INDEX)||(LA218_0>=BOOLEAN_TRUE && LA218_0<=VALUE_NULL)||(LA218_0>=DEFINE && LA218_0<=AFTER)||LA218_0==WHILE||(LA218_0>=MERGE && LA218_0<=MATCHED)||LA218_0==NEWKW||LA218_0==CONTEXT||LA218_0==NUM_DOUBLE||(LA218_0>=IDENT && LA218_0<=LCURLY)||LA218_0==LPAREN||(LA218_0>=PLUS && LA218_0<=QUESTION)||(LA218_0>=STRING_LITERAL && LA218_0<=QUOTED_STRING_LITERAL)||LA218_0==MINUS||LA218_0==NUM_INT||(LA218_0>=TICKED_STRING_LITERAL && LA218_0<=NUM_FLOAT)) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8985);
                    expression559=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression559.getTree());
                    loop217:
                    do {
                        int alt217=2;
                        int LA217_0 = input.LA(1);
                        if ( (LA217_0==COMMA) ) {
                            alt217=1;
                        }
                        switch (alt217) {
                    	case 1 :
                    	    {
                    	    COMMA560=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8988); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA560);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8990);
                    	    expression561=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression561.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop217;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY562=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY562);
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( (LA220_0==DOT) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9004);
                    libFunctionNoClass563=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass563.getTree());
                    loop219:
                    do {
                        int alt219=2;
                        int LA219_0 = input.LA(1);
                        if ( (LA219_0==DOT) ) {
                            alt219=1;
                        }
                        switch (alt219) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression9009); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression9011);
                    	    libFunctionNoClass564=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass564.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop219;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM565=null;
        Token LPAREN566=null;
        Token ALL567=null;
        Token DISTINCT568=null;
        Token RPAREN571=null;
        Token AVG572=null;
        Token LPAREN573=null;
        Token ALL574=null;
        Token DISTINCT575=null;
        Token RPAREN578=null;
        Token COUNT579=null;
        Token LPAREN580=null;
        Token ALL581=null;
        Token DISTINCT582=null;
        Token STAR584=null;
        Token RPAREN586=null;
        Token MEDIAN587=null;
        Token LPAREN588=null;
        Token ALL589=null;
        Token DISTINCT590=null;
        Token RPAREN593=null;
        Token STDDEV594=null;
        Token LPAREN595=null;
        Token ALL596=null;
        Token DISTINCT597=null;
        Token RPAREN600=null;
        Token AVEDEV601=null;
        Token LPAREN602=null;
        Token ALL603=null;
        Token DISTINCT604=null;
        Token RPAREN607=null;
        Token COALESCE611=null;
        Token LPAREN612=null;
        Token COMMA614=null;
        Token COMMA616=null;
        Token RPAREN618=null;
        Token PREVIOUS619=null;
        Token LPAREN620=null;
        Token COMMA622=null;
        Token RPAREN624=null;
        Token PREVIOUSTAIL627=null;
        Token LPAREN628=null;
        Token COMMA630=null;
        Token RPAREN632=null;
        Token PREVIOUSCOUNT635=null;
        Token LPAREN636=null;
        Token RPAREN638=null;
        Token PREVIOUSWINDOW639=null;
        Token LPAREN640=null;
        Token RPAREN642=null;
        Token PRIOR645=null;
        Token LPAREN646=null;
        Token NUM_INT647=null;
        Token COMMA648=null;
        Token RPAREN650=null;
        Token INSTANCEOF651=null;
        Token LPAREN652=null;
        Token COMMA654=null;
        Token COMMA656=null;
        Token RPAREN658=null;
        Token TYPEOF659=null;
        Token LPAREN660=null;
        Token RPAREN662=null;
        Token CAST663=null;
        Token LPAREN664=null;
        Token COMMA666=null;
        Token AS667=null;
        Token RPAREN669=null;
        Token EXISTS672=null;
        Token LPAREN673=null;
        Token RPAREN675=null;
        Token CURRENT_TIMESTAMP676=null;
        Token LPAREN677=null;
        Token RPAREN678=null;
        EsperEPL2GrammarParser.expression_return expression569 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr570 = null;
        EsperEPL2GrammarParser.expression_return expression576 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr577 = null;
        EsperEPL2GrammarParser.expression_return expression583 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr585 = null;
        EsperEPL2GrammarParser.expression_return expression591 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr592 = null;
        EsperEPL2GrammarParser.expression_return expression598 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr599 = null;
        EsperEPL2GrammarParser.expression_return expression605 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr606 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation608 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation609 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation610 = null;
        EsperEPL2GrammarParser.expression_return expression613 = null;
        EsperEPL2GrammarParser.expression_return expression615 = null;
        EsperEPL2GrammarParser.expression_return expression617 = null;
        EsperEPL2GrammarParser.expression_return expression621 = null;
        EsperEPL2GrammarParser.expression_return expression623 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass625 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass626 = null;
        EsperEPL2GrammarParser.expression_return expression629 = null;
        EsperEPL2GrammarParser.expression_return expression631 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass633 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass634 = null;
        EsperEPL2GrammarParser.expression_return expression637 = null;
        EsperEPL2GrammarParser.expression_return expression641 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass643 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass644 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty649 = null;
        EsperEPL2GrammarParser.expression_return expression653 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier655 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier657 = null;
        EsperEPL2GrammarParser.expression_return expression661 = null;
        EsperEPL2GrammarParser.expression_return expression665 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier668 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass670 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass671 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty674 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass679 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass680 = null;
        CommonTree d_tree=null;
        CommonTree SUM565_tree=null;
        CommonTree LPAREN566_tree=null;
        CommonTree ALL567_tree=null;
        CommonTree DISTINCT568_tree=null;
        CommonTree RPAREN571_tree=null;
        CommonTree AVG572_tree=null;
        CommonTree LPAREN573_tree=null;
        CommonTree ALL574_tree=null;
        CommonTree DISTINCT575_tree=null;
        CommonTree RPAREN578_tree=null;
        CommonTree COUNT579_tree=null;
        CommonTree LPAREN580_tree=null;
        CommonTree ALL581_tree=null;
        CommonTree DISTINCT582_tree=null;
        CommonTree STAR584_tree=null;
        CommonTree RPAREN586_tree=null;
        CommonTree MEDIAN587_tree=null;
        CommonTree LPAREN588_tree=null;
        CommonTree ALL589_tree=null;
        CommonTree DISTINCT590_tree=null;
        CommonTree RPAREN593_tree=null;
        CommonTree STDDEV594_tree=null;
        CommonTree LPAREN595_tree=null;
        CommonTree ALL596_tree=null;
        CommonTree DISTINCT597_tree=null;
        CommonTree RPAREN600_tree=null;
        CommonTree AVEDEV601_tree=null;
        CommonTree LPAREN602_tree=null;
        CommonTree ALL603_tree=null;
        CommonTree DISTINCT604_tree=null;
        CommonTree RPAREN607_tree=null;
        CommonTree COALESCE611_tree=null;
        CommonTree LPAREN612_tree=null;
        CommonTree COMMA614_tree=null;
        CommonTree COMMA616_tree=null;
        CommonTree RPAREN618_tree=null;
        CommonTree PREVIOUS619_tree=null;
        CommonTree LPAREN620_tree=null;
        CommonTree COMMA622_tree=null;
        CommonTree RPAREN624_tree=null;
        CommonTree PREVIOUSTAIL627_tree=null;
        CommonTree LPAREN628_tree=null;
        CommonTree COMMA630_tree=null;
        CommonTree RPAREN632_tree=null;
        CommonTree PREVIOUSCOUNT635_tree=null;
        CommonTree LPAREN636_tree=null;
        CommonTree RPAREN638_tree=null;
        CommonTree PREVIOUSWINDOW639_tree=null;
        CommonTree LPAREN640_tree=null;
        CommonTree RPAREN642_tree=null;
        CommonTree PRIOR645_tree=null;
        CommonTree LPAREN646_tree=null;
        CommonTree NUM_INT647_tree=null;
        CommonTree COMMA648_tree=null;
        CommonTree RPAREN650_tree=null;
        CommonTree INSTANCEOF651_tree=null;
        CommonTree LPAREN652_tree=null;
        CommonTree COMMA654_tree=null;
        CommonTree COMMA656_tree=null;
        CommonTree RPAREN658_tree=null;
        CommonTree TYPEOF659_tree=null;
        CommonTree LPAREN660_tree=null;
        CommonTree RPAREN662_tree=null;
        CommonTree CAST663_tree=null;
        CommonTree LPAREN664_tree=null;
        CommonTree COMMA666_tree=null;
        CommonTree AS667_tree=null;
        CommonTree RPAREN669_tree=null;
        CommonTree EXISTS672_tree=null;
        CommonTree LPAREN673_tree=null;
        CommonTree RPAREN675_tree=null;
        CommonTree CURRENT_TIMESTAMP676_tree=null;
        CommonTree LPAREN677_tree=null;
        CommonTree RPAREN678_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt250=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt250=1;
                }
                break;
            case AVG:
                {
                alt250=2;
                }
                break;
            case COUNT:
                {
                alt250=3;
                }
                break;
            case MEDIAN:
                {
                alt250=4;
                }
                break;
            case STDDEV:
                {
                alt250=5;
                }
                break;
            case AVEDEV:
                {
                alt250=6;
                }
                break;
            case FIRST:
                {
                alt250=7;
                }
                break;
            case LAST:
                {
                alt250=8;
                }
                break;
            case WINDOW:
                {
                alt250=9;
                }
                break;
            case COALESCE:
                {
                alt250=10;
                }
                break;
            case PREVIOUS:
                {
                alt250=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt250=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt250=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt250=14;
                }
                break;
            case PRIOR:
                {
                alt250=15;
                }
                break;
            case INSTANCEOF:
                {
                alt250=16;
                }
                break;
            case TYPEOF:
                {
                alt250=17;
                }
                break;
            case CAST:
                {
                alt250=18;
                }
                break;
            case EXISTS:
                {
                alt250=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt250=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);
                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM565=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc9060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM565_tree = (CommonTree)adaptor.create(SUM565);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM565_tree, root_0);
                    }
                    LPAREN566=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9063); if (state.failed) return retval;
                    int alt221=3;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==ALL) ) {
                        alt221=1;
                    }
                    else if ( (LA221_0==DISTINCT) ) {
                        alt221=2;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            ALL567=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9067); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT568=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9072); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT568_tree = (CommonTree)adaptor.create(DISTINCT568);
                            adaptor.addChild(root_0, DISTINCT568_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9076);
                    expression569=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression569.getTree());
                    int alt222=2;
                    int LA222_0 = input.LA(1);
                    if ( (LA222_0==COMMA) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9078);
                            aggregationFilterExpr570=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr570.getTree());
                            }
                            break;
                    }
                    RPAREN571=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9081); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG572=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc9087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG572_tree = (CommonTree)adaptor.create(AVG572);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG572_tree, root_0);
                    }
                    LPAREN573=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9090); if (state.failed) return retval;
                    int alt223=3;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==ALL) ) {
                        alt223=1;
                    }
                    else if ( (LA223_0==DISTINCT) ) {
                        alt223=2;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            ALL574=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9094); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT575=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9099); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT575_tree = (CommonTree)adaptor.create(DISTINCT575);
                            adaptor.addChild(root_0, DISTINCT575_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9103);
                    expression576=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression576.getTree());
                    int alt224=2;
                    int LA224_0 = input.LA(1);
                    if ( (LA224_0==COMMA) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9105);
                            aggregationFilterExpr577=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr577.getTree());
                            }
                            break;
                    }
                    RPAREN578=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9108); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT579=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc9114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT579_tree = (CommonTree)adaptor.create(COUNT579);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT579_tree, root_0);
                    }
                    LPAREN580=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9117); if (state.failed) return retval;
                    int alt226=2;
                    int LA226_0 = input.LA(1);
                    if ( (LA226_0==WINDOW||LA226_0==BETWEEN||LA226_0==ESCAPE||(LA226_0>=NOT_EXPR && LA226_0<=EVERY_EXPR)||LA226_0==WHERE||(LA226_0>=SUM && LA226_0<=COUNT)||LA226_0==CASE||LA226_0==OUTER||(LA226_0>=JOIN && LA226_0<=FULL)||(LA226_0>=DISTINCT && LA226_0<=ALL)||(LA226_0>=EVENTS && LA226_0<=LAST)||(LA226_0>=UNIDIRECTIONAL && LA226_0<=CURRENT_TIMESTAMP)||(LA226_0>=SNAPSHOT && LA226_0<=INDEX)||(LA226_0>=BOOLEAN_TRUE && LA226_0<=VALUE_NULL)||(LA226_0>=DEFINE && LA226_0<=AFTER)||LA226_0==WHILE||(LA226_0>=MERGE && LA226_0<=MATCHED)||LA226_0==NEWKW||LA226_0==CONTEXT||LA226_0==NUM_DOUBLE||(LA226_0>=IDENT && LA226_0<=LCURLY)||LA226_0==LPAREN||(LA226_0>=PLUS && LA226_0<=QUESTION)||(LA226_0>=STRING_LITERAL && LA226_0<=QUOTED_STRING_LITERAL)||LA226_0==MINUS||LA226_0==NUM_INT||(LA226_0>=TICKED_STRING_LITERAL && LA226_0<=NUM_FLOAT)) ) {
                        alt226=1;
                    }
                    else if ( (LA226_0==STAR) ) {
                        alt226=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 226, 0, input);
                        throw nvae;
                    }
                    switch (alt226) {
                        case 1 :
                            {
                            {
                            int alt225=3;
                            int LA225_0 = input.LA(1);
                            if ( (LA225_0==ALL) ) {
                                alt225=1;
                            }
                            else if ( (LA225_0==DISTINCT) ) {
                                alt225=2;
                            }
                            switch (alt225) {
                                case 1 :
                                    {
                                    ALL581=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9129); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT582=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9134); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT582_tree = (CommonTree)adaptor.create(DISTINCT582);
                                    adaptor.addChild(root_0, DISTINCT582_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc9138);
                            expression583=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression583.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR584=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc9149); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==COMMA) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9160);
                            aggregationFilterExpr585=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr585.getTree());
                            }
                            break;
                    }
                    RPAREN586=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9163); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN587=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc9169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN587_tree = (CommonTree)adaptor.create(MEDIAN587);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN587_tree, root_0);
                    }
                    LPAREN588=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9172); if (state.failed) return retval;
                    int alt228=3;
                    int LA228_0 = input.LA(1);
                    if ( (LA228_0==ALL) ) {
                        alt228=1;
                    }
                    else if ( (LA228_0==DISTINCT) ) {
                        alt228=2;
                    }
                    switch (alt228) {
                        case 1 :
                            {
                            ALL589=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9176); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT590=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9181); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT590_tree = (CommonTree)adaptor.create(DISTINCT590);
                            adaptor.addChild(root_0, DISTINCT590_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9185);
                    expression591=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression591.getTree());
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==COMMA) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9187);
                            aggregationFilterExpr592=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr592.getTree());
                            }
                            break;
                    }
                    RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9190); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV594=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc9196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV594_tree = (CommonTree)adaptor.create(STDDEV594);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV594_tree, root_0);
                    }
                    LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9199); if (state.failed) return retval;
                    int alt230=3;
                    int LA230_0 = input.LA(1);
                    if ( (LA230_0==ALL) ) {
                        alt230=1;
                    }
                    else if ( (LA230_0==DISTINCT) ) {
                        alt230=2;
                    }
                    switch (alt230) {
                        case 1 :
                            {
                            ALL596=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9203); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT597=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9208); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT597_tree = (CommonTree)adaptor.create(DISTINCT597);
                            adaptor.addChild(root_0, DISTINCT597_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9212);
                    expression598=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression598.getTree());
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==COMMA) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9214);
                            aggregationFilterExpr599=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr599.getTree());
                            }
                            break;
                    }
                    RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9217); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV601=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc9223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV601_tree = (CommonTree)adaptor.create(AVEDEV601);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV601_tree, root_0);
                    }
                    LPAREN602=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9226); if (state.failed) return retval;
                    int alt232=3;
                    int LA232_0 = input.LA(1);
                    if ( (LA232_0==ALL) ) {
                        alt232=1;
                    }
                    else if ( (LA232_0==DISTINCT) ) {
                        alt232=2;
                    }
                    switch (alt232) {
                        case 1 :
                            {
                            ALL603=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc9230); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT604=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc9235); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT604_tree = (CommonTree)adaptor.create(DISTINCT604);
                            adaptor.addChild(root_0, DISTINCT604_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc9239);
                    expression605=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression605.getTree());
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==COMMA) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc9241);
                            aggregationFilterExpr606=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr606.getTree());
                            }
                            break;
                    }
                    RPAREN607=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9244); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc9250);
                    firstAggregation608=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation608.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc9255);
                    lastAggregation609=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation609.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc9260);
                    windowAggregation610=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation610.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE611=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc9265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE611_tree = (CommonTree)adaptor.create(COALESCE611);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE611_tree, root_0);
                    }
                    LPAREN612=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9268); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9271);
                    expression613=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression613.getTree());
                    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9273); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9276);
                    expression615=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression615.getTree());
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);
                        if ( (LA234_0==COMMA) ) {
                            alt234=1;
                        }
                        switch (alt234) {
                    	case 1 :
                    	    {
                    	    COMMA616=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9279); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc9282);
                    	    expression617=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression617.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop234;
                        }
                    } while (true);
                    RPAREN618=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9286); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS619=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc9292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS619);
                    LPAREN620=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN620);
                    pushFollow(FOLLOW_expression_in_builtinFunc9296);
                    expression621=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression621.getTree());
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==COMMA) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9299); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA622);
                            pushFollow(FOLLOW_expression_in_builtinFunc9301);
                            expression623=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression623.getTree());
                            }
                            break;
                    }
                    RPAREN624=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN624);
                    int alt237=2;
                    int LA237_0 = input.LA(1);
                    if ( (LA237_0==DOT) ) {
                        alt237=1;
                    }
                    switch (alt237) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9310); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9312);
                            libFunctionNoClass625=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass625.getTree());
                            loop236:
                            do {
                                int alt236=2;
                                int LA236_0 = input.LA(1);
                                if ( (LA236_0==DOT) ) {
                                    alt236=1;
                                }
                                switch (alt236) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9317); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9319);
                            	    libFunctionNoClass626=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass626.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop236;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL627=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc9366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL627);
                    LPAREN628=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN628);
                    pushFollow(FOLLOW_expression_in_builtinFunc9370);
                    expression629=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression629.getTree());
                    int alt238=2;
                    int LA238_0 = input.LA(1);
                    if ( (LA238_0==COMMA) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            {
                            COMMA630=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9373); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA630);
                            pushFollow(FOLLOW_expression_in_builtinFunc9375);
                            expression631=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression631.getTree());
                            }
                            break;
                    }
                    RPAREN632=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN632);
                    int alt240=2;
                    int LA240_0 = input.LA(1);
                    if ( (LA240_0==DOT) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9384); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9386);
                            libFunctionNoClass633=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass633.getTree());
                            loop239:
                            do {
                                int alt239=2;
                                int LA239_0 = input.LA(1);
                                if ( (LA239_0==DOT) ) {
                                    alt239=1;
                                }
                                switch (alt239) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9391); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9393);
                            	    libFunctionNoClass634=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass634.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop239;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT635=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc9440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT635_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT635);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT635_tree, root_0);
                    }
                    LPAREN636=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9443); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9446);
                    expression637=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression637.getTree());
                    RPAREN638=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9448); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW639=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc9454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW639);
                    LPAREN640=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN640);
                    pushFollow(FOLLOW_expression_in_builtinFunc9458);
                    expression641=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression641.getTree());
                    RPAREN642=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN642);
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==DOT) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9465); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9467);
                            libFunctionNoClass643=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass643.getTree());
                            loop241:
                            do {
                                int alt241=2;
                                int LA241_0 = input.LA(1);
                                if ( (LA241_0==DOT) ) {
                                    alt241=1;
                                }
                                switch (alt241) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9472); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9474);
                            	    libFunctionNoClass644=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass644.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop241;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR645=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR645_tree = (CommonTree)adaptor.create(PRIOR645);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR645_tree, root_0);
                    }
                    LPAREN646=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9522); if (state.failed) return retval;
                    NUM_INT647=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT647_tree = (CommonTree)adaptor.create(NUM_INT647);
                    adaptor.addChild(root_0, NUM_INT647_tree);
                    }
                    COMMA648=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9527); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9530);
                    eventProperty649=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty649.getTree());
                    RPAREN650=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9532); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF651=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF651_tree = (CommonTree)adaptor.create(INSTANCEOF651);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF651_tree, root_0);
                    }
                    LPAREN652=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9545); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9548);
                    expression653=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression653.getTree());
                    COMMA654=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9550); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9553);
                    classIdentifier655=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier655.getTree());
                    loop243:
                    do {
                        int alt243=2;
                        int LA243_0 = input.LA(1);
                        if ( (LA243_0==COMMA) ) {
                            alt243=1;
                        }
                        switch (alt243) {
                    	case 1 :
                    	    {
                    	    COMMA656=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9556); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9559);
                    	    classIdentifier657=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier657.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop243;
                        }
                    } while (true);
                    RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9563); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF659=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9569); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF659_tree = (CommonTree)adaptor.create(TYPEOF659);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF659_tree, root_0);
                    }
                    LPAREN660=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9572); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9575);
                    expression661=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression661.getTree());
                    RPAREN662=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9577); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST663=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST663);
                    LPAREN664=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN664);
                    pushFollow(FOLLOW_expression_in_builtinFunc9587);
                    expression665=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression665.getTree());
                    int alt244=2;
                    int LA244_0 = input.LA(1);
                    if ( (LA244_0==COMMA) ) {
                        alt244=1;
                    }
                    else if ( (LA244_0==AS) ) {
                        alt244=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 244, 0, input);
                        throw nvae;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            COMMA666=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA666);
                            }
                            break;
                        case 2 :
                            {
                            AS667=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc9594); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS667);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9597);
                    classIdentifier668=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier668.getTree());
                    RPAREN669=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN669);
                    int alt246=2;
                    int LA246_0 = input.LA(1);
                    if ( (LA246_0==DOT) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9606);
                            libFunctionNoClass670=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass670.getTree());
                            loop245:
                            do {
                                int alt245=2;
                                int LA245_0 = input.LA(1);
                                if ( (LA245_0==DOT) ) {
                                    alt245=1;
                                }
                                switch (alt245) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9611); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9613);
                            	    libFunctionNoClass671=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass671.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop245;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS672=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc9658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS672_tree = (CommonTree)adaptor.create(EXISTS672);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS672_tree, root_0);
                    }
                    LPAREN673=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9661); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9664);
                    eventProperty674=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty674.getTree());
                    RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9666); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP676=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP676);
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==LPAREN) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            LPAREN677=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9675); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN677);
                            RPAREN678=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9677); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN678);
                            }
                            break;
                    }
                    int alt249=2;
                    int LA249_0 = input.LA(1);
                    if ( (LA249_0==DOT) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9684); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9686);
                            libFunctionNoClass679=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass679.getTree());
                            loop248:
                            do {
                                int alt248=2;
                                int LA248_0 = input.LA(1);
                                if ( (LA248_0==DOT) ) {
                                    alt248=1;
                                }
                                switch (alt248) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9691); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9693);
                            	    libFunctionNoClass680=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass680.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop248;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST681=null;
        Token LPAREN682=null;
        Token COMMA684=null;
        Token RPAREN686=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr683 = null;
        EsperEPL2GrammarParser.expression_return expression685 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass687 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass688 = null;
        CommonTree d_tree=null;
        CommonTree FIRST681_tree=null;
        CommonTree LPAREN682_tree=null;
        CommonTree COMMA684_tree=null;
        CommonTree RPAREN686_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST681=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation9737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST681);
            LPAREN682=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation9739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN682);
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==WINDOW||LA252_0==BETWEEN||LA252_0==ESCAPE||(LA252_0>=NOT_EXPR && LA252_0<=EVERY_EXPR)||LA252_0==WHERE||(LA252_0>=SUM && LA252_0<=COUNT)||LA252_0==CASE||LA252_0==OUTER||(LA252_0>=JOIN && LA252_0<=FULL)||(LA252_0>=EVENTS && LA252_0<=LAST)||(LA252_0>=UNIDIRECTIONAL && LA252_0<=CURRENT_TIMESTAMP)||(LA252_0>=SNAPSHOT && LA252_0<=INDEX)||(LA252_0>=BOOLEAN_TRUE && LA252_0<=VALUE_NULL)||(LA252_0>=DEFINE && LA252_0<=AFTER)||LA252_0==WHILE||(LA252_0>=MERGE && LA252_0<=MATCHED)||LA252_0==NEWKW||LA252_0==CONTEXT||LA252_0==NUM_DOUBLE||(LA252_0>=IDENT && LA252_0<=LCURLY)||LA252_0==LPAREN||LA252_0==STAR||(LA252_0>=PLUS && LA252_0<=QUESTION)||(LA252_0>=STRING_LITERAL && LA252_0<=QUOTED_STRING_LITERAL)||LA252_0==MINUS||LA252_0==NUM_INT||(LA252_0>=TICKED_STRING_LITERAL && LA252_0<=NUM_FLOAT)) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation9742);
                    accessAggExpr683=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr683.getTree());
                    int alt251=2;
                    int LA251_0 = input.LA(1);
                    if ( (LA251_0==COMMA) ) {
                        alt251=1;
                    }
                    switch (alt251) {
                        case 1 :
                            {
                            COMMA684=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation9745); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA684);
                            pushFollow(FOLLOW_expression_in_firstAggregation9747);
                            expression685=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression685.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN686=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation9753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN686);
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( (LA254_0==DOT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9760);
                    libFunctionNoClass687=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass687.getTree());
                    loop253:
                    do {
                        int alt253=2;
                        int LA253_0 = input.LA(1);
                        if ( (LA253_0==DOT) ) {
                            alt253=1;
                        }
                        switch (alt253) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9765); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9767);
                    	    libFunctionNoClass688=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass688.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop253;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST689=null;
        Token LPAREN690=null;
        Token COMMA692=null;
        Token RPAREN694=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr691 = null;
        EsperEPL2GrammarParser.expression_return expression693 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass695 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass696 = null;
        CommonTree d_tree=null;
        CommonTree LAST689_tree=null;
        CommonTree LPAREN690_tree=null;
        CommonTree COMMA692_tree=null;
        CommonTree RPAREN694_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST689=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation9822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST689);
            LPAREN690=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation9824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN690);
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==WINDOW||LA256_0==BETWEEN||LA256_0==ESCAPE||(LA256_0>=NOT_EXPR && LA256_0<=EVERY_EXPR)||LA256_0==WHERE||(LA256_0>=SUM && LA256_0<=COUNT)||LA256_0==CASE||LA256_0==OUTER||(LA256_0>=JOIN && LA256_0<=FULL)||(LA256_0>=EVENTS && LA256_0<=LAST)||(LA256_0>=UNIDIRECTIONAL && LA256_0<=CURRENT_TIMESTAMP)||(LA256_0>=SNAPSHOT && LA256_0<=INDEX)||(LA256_0>=BOOLEAN_TRUE && LA256_0<=VALUE_NULL)||(LA256_0>=DEFINE && LA256_0<=AFTER)||LA256_0==WHILE||(LA256_0>=MERGE && LA256_0<=MATCHED)||LA256_0==NEWKW||LA256_0==CONTEXT||LA256_0==NUM_DOUBLE||(LA256_0>=IDENT && LA256_0<=LCURLY)||LA256_0==LPAREN||LA256_0==STAR||(LA256_0>=PLUS && LA256_0<=QUESTION)||(LA256_0>=STRING_LITERAL && LA256_0<=QUOTED_STRING_LITERAL)||LA256_0==MINUS||LA256_0==NUM_INT||(LA256_0>=TICKED_STRING_LITERAL && LA256_0<=NUM_FLOAT)) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation9827);
                    accessAggExpr691=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr691.getTree());
                    int alt255=2;
                    int LA255_0 = input.LA(1);
                    if ( (LA255_0==COMMA) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            {
                            COMMA692=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation9830); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA692);
                            pushFollow(FOLLOW_expression_in_lastAggregation9832);
                            expression693=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression693.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN694=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation9838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN694);
            int alt258=2;
            int LA258_0 = input.LA(1);
            if ( (LA258_0==DOT) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9845);
                    libFunctionNoClass695=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass695.getTree());
                    loop257:
                    do {
                        int alt257=2;
                        int LA257_0 = input.LA(1);
                        if ( (LA257_0==DOT) ) {
                            alt257=1;
                        }
                        switch (alt257) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9850); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9852);
                    	    libFunctionNoClass696=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass696.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop257;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW697=null;
        Token LPAREN698=null;
        Token RPAREN700=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr699 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass701 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass702 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW697_tree=null;
        CommonTree LPAREN698_tree=null;
        CommonTree RPAREN700_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW697=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation9908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW697);
            LPAREN698=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation9910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN698);
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==WINDOW||LA259_0==BETWEEN||LA259_0==ESCAPE||(LA259_0>=NOT_EXPR && LA259_0<=EVERY_EXPR)||LA259_0==WHERE||(LA259_0>=SUM && LA259_0<=COUNT)||LA259_0==CASE||LA259_0==OUTER||(LA259_0>=JOIN && LA259_0<=FULL)||(LA259_0>=EVENTS && LA259_0<=LAST)||(LA259_0>=UNIDIRECTIONAL && LA259_0<=CURRENT_TIMESTAMP)||(LA259_0>=SNAPSHOT && LA259_0<=INDEX)||(LA259_0>=BOOLEAN_TRUE && LA259_0<=VALUE_NULL)||(LA259_0>=DEFINE && LA259_0<=AFTER)||LA259_0==WHILE||(LA259_0>=MERGE && LA259_0<=MATCHED)||LA259_0==NEWKW||LA259_0==CONTEXT||LA259_0==NUM_DOUBLE||(LA259_0>=IDENT && LA259_0<=LCURLY)||LA259_0==LPAREN||LA259_0==STAR||(LA259_0>=PLUS && LA259_0<=QUESTION)||(LA259_0>=STRING_LITERAL && LA259_0<=QUOTED_STRING_LITERAL)||LA259_0==MINUS||LA259_0==NUM_INT||(LA259_0>=TICKED_STRING_LITERAL && LA259_0<=NUM_FLOAT)) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation9912);
                    accessAggExpr699=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr699.getTree());
                    }
                    break;
            }
            RPAREN700=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation9915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN700);
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==DOT) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9922);
                    libFunctionNoClass701=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass701.getTree());
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);
                        if ( (LA260_0==DOT) ) {
                            alt260=1;
                        }
                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9927); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9929);
                    	    libFunctionNoClass702=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass702.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector703 = null;
        EsperEPL2GrammarParser.expression_return expression704 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt262=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt262=1;
                }
                break;
            case IDENT:
                {
                int LA262_2 = input.LA(2);
                if ( (LA262_2==DOT) ) {
                    int LA262_75 = input.LA(3);
                    if ( (LA262_75==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt262=2;
                    }
                    else if ( (LA262_75==WINDOW||LA262_75==BETWEEN||LA262_75==ESCAPE||LA262_75==EVERY_EXPR||LA262_75==WHERE||(LA262_75>=SUM && LA262_75<=COUNT)||LA262_75==OUTER||(LA262_75>=JOIN && LA262_75<=FULL)||(LA262_75>=EVENTS && LA262_75<=LAST)||(LA262_75>=UNIDIRECTIONAL && LA262_75<=PREVIOUSTAIL)||LA262_75==PRIOR||(LA262_75>=WEEKDAY && LA262_75<=CAST)||(LA262_75>=SNAPSHOT && LA262_75<=INDEX)||(LA262_75>=DEFINE && LA262_75<=AFTER)||LA262_75==WHILE||(LA262_75>=MERGE && LA262_75<=MATCHED)||LA262_75==CONTEXT||LA262_75==IDENT||LA262_75==TICKED_STRING_LITERAL) ) {
                        alt262=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 262, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA262_2>=IN_SET && LA262_2<=REGEXP)||(LA262_2>=OR_EXPR && LA262_2<=NOT_EXPR)||LA262_2==IS||(LA262_2>=LPAREN && LA262_2<=RPAREN)||(LA262_2>=COMMA && LA262_2<=EQUALS)||LA262_2==LBRACK||(LA262_2>=STAR && LA262_2<=QUESTION)||(LA262_2>=BAND && LA262_2<=MOD)||LA262_2==ESCAPECHAR) ) {
                    alt262=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 262, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);
                throw nvae;
            }
            switch (alt262) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr9986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr10006);
                    propertyStreamSelector703=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector703.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr10019);
                    expression704=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression704.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA705=null;
        EsperEPL2GrammarParser.expression_return expression706 = null;
        CommonTree COMMA705_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA705=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr10038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA705);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr10040);
            expression706=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression706.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty707 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction708 = null;
        try {
            int alt263=2;
            int LA263_0 = input.LA(1);
            if ( (LA263_0==IDENT) ) {
                int LA263_1 = input.LA(2);
                if ( (LA263_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA263_293 = input.LA(4);
                        if ( (LA263_293==RPAREN) ) {
                            int LA263_709 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 709, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_293>=IN_SET && LA263_293<=REGEXP)||(LA263_293>=OR_EXPR && LA263_293<=NOT_EXPR)||LA263_293==IS||(LA263_293>=ASC && LA263_293<=DESC)||(LA263_293>=TIMEPERIOD_SEC && LA263_293<=TIMEPERIOD_SECONDS)||(LA263_293>=COMMA && LA263_293<=EQUALS)||(LA263_293>=STAR && LA263_293<=PLUS)||(LA263_293>=BAND && LA263_293<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 293, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA263_294 = input.LA(4);
                        if ( (LA263_294==RPAREN) ) {
                            int LA263_740 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 740, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_294>=IN_SET && LA263_294<=REGEXP)||(LA263_294>=OR_EXPR && LA263_294<=NOT_EXPR)||LA263_294==IS||(LA263_294>=ASC && LA263_294<=DESC)||(LA263_294>=TIMEPERIOD_SEC && LA263_294<=TIMEPERIOD_SECONDS)||(LA263_294>=COMMA && LA263_294<=EQUALS)||(LA263_294>=STAR && LA263_294<=PLUS)||(LA263_294>=BAND && LA263_294<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 294, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt263=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 55, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==DOT) ) {
                    int LA263_57 = input.LA(3);
                    if ( (LA263_57==IDENT) ) {
                        int LA263_371 = input.LA(4);
                        if ( (LA263_371==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LPAREN) ) {
                            int LA263_773 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 773, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_371==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_371==DOT) ) {
                            int LA263_830 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 830, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 371, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_57==TICKED_STRING_LITERAL) ) {
                        int LA263_372 = input.LA(4);
                        if ( (LA263_372==DOT) ) {
                            int LA263_831 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 831, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_372==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LPAREN) ) {
                            int LA263_834 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 834, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_372==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_372==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 372, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_57==MAX) ) {
                        int LA263_373 = input.LA(4);
                        if ( (LA263_373==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LPAREN) ) {
                            int LA263_893 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 893, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_373==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_373==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 373, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_57==MIN) ) {
                        int LA263_374 = input.LA(4);
                        if ( (LA263_374==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LPAREN) ) {
                            int LA263_953 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 953, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_374==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_374==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 374, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_57==BETWEEN||LA263_57==WHERE||LA263_57==SET||LA263_57==AFTER) ) {
                        alt263=2;
                    }
                    else if ( (LA263_57==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_57==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 57, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA263_0==TICKED_STRING_LITERAL) ) {
                int LA263_2 = input.LA(2);
                if ( (LA263_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA263_423 = input.LA(4);
                        if ( (LA263_423==RPAREN) ) {
                            int LA263_1011 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1011, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_423>=IN_SET && LA263_423<=REGEXP)||(LA263_423>=OR_EXPR && LA263_423<=NOT_EXPR)||LA263_423==IS||(LA263_423>=ASC && LA263_423<=DESC)||(LA263_423>=TIMEPERIOD_SEC && LA263_423<=TIMEPERIOD_SECONDS)||(LA263_423>=COMMA && LA263_423<=EQUALS)||(LA263_423>=STAR && LA263_423<=PLUS)||(LA263_423>=BAND && LA263_423<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 423, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA263_424 = input.LA(4);
                        if ( (LA263_424==RPAREN) ) {
                            int LA263_1042 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1042, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_424>=IN_SET && LA263_424<=REGEXP)||(LA263_424>=OR_EXPR && LA263_424<=NOT_EXPR)||LA263_424==IS||(LA263_424>=ASC && LA263_424<=DESC)||(LA263_424>=TIMEPERIOD_SEC && LA263_424<=TIMEPERIOD_SECONDS)||(LA263_424>=COMMA && LA263_424<=EQUALS)||(LA263_424>=STAR && LA263_424<=PLUS)||(LA263_424>=BAND && LA263_424<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 424, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt263=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==DOT) ) {
                    int LA263_117 = input.LA(3);
                    if ( (LA263_117==IDENT) ) {
                        int LA263_501 = input.LA(4);
                        if ( (LA263_501==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LPAREN) ) {
                            int LA263_1075 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1075, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_501==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_501==DOT) ) {
                            int LA263_1132 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1132, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 501, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_117==TICKED_STRING_LITERAL) ) {
                        int LA263_502 = input.LA(4);
                        if ( (LA263_502==DOT) ) {
                            int LA263_1133 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1133, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_502==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LPAREN) ) {
                            int LA263_1136 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1136, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_502==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_502==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 502, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_117==MAX) ) {
                        int LA263_503 = input.LA(4);
                        if ( (LA263_503==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LPAREN) ) {
                            int LA263_1195 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1195, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_503==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_503==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 503, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_117==MIN) ) {
                        int LA263_504 = input.LA(4);
                        if ( (LA263_504==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LPAREN) ) {
                            int LA263_1255 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1255, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA263_504==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else if ( (LA263_504==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt263=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 504, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA263_117==BETWEEN||LA263_117==WHERE||LA263_117==SET||LA263_117==AFTER) ) {
                        alt263=2;
                    }
                    else if ( (LA263_117==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else if ( (LA263_117==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                        alt263=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 117, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA263_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==MAX) ) {
                int LA263_9 = input.LA(2);
                if ( (LA263_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA263_553 = input.LA(4);
                        if ( (LA263_553==RPAREN) ) {
                            int LA263_1313 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1313, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_553>=IN_SET && LA263_553<=REGEXP)||(LA263_553>=OR_EXPR && LA263_553<=NOT_EXPR)||LA263_553==IS||(LA263_553>=ASC && LA263_553<=DESC)||(LA263_553>=TIMEPERIOD_SEC && LA263_553<=TIMEPERIOD_SECONDS)||(LA263_553>=COMMA && LA263_553<=EQUALS)||(LA263_553>=STAR && LA263_553<=PLUS)||(LA263_553>=BAND && LA263_553<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 553, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA263_554 = input.LA(4);
                        if ( (LA263_554==RPAREN) ) {
                            int LA263_1344 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1344, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_554>=IN_SET && LA263_554<=REGEXP)||(LA263_554>=OR_EXPR && LA263_554<=NOT_EXPR)||LA263_554==IS||(LA263_554>=ASC && LA263_554<=DESC)||(LA263_554>=TIMEPERIOD_SEC && LA263_554<=TIMEPERIOD_SECONDS)||(LA263_554>=COMMA && LA263_554<=EQUALS)||(LA263_554>=STAR && LA263_554<=PLUS)||(LA263_554>=BAND && LA263_554<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 554, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt263=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 175, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA263_0==MIN) ) {
                int LA263_10 = input.LA(2);
                if ( (LA263_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA263_631 = input.LA(4);
                        if ( (LA263_631==RPAREN) ) {
                            int LA263_1375 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1375, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_631>=IN_SET && LA263_631<=REGEXP)||(LA263_631>=OR_EXPR && LA263_631<=NOT_EXPR)||LA263_631==IS||(LA263_631>=ASC && LA263_631<=DESC)||(LA263_631>=TIMEPERIOD_SEC && LA263_631<=TIMEPERIOD_SECONDS)||(LA263_631>=COMMA && LA263_631<=EQUALS)||(LA263_631>=STAR && LA263_631<=PLUS)||(LA263_631>=BAND && LA263_631<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 631, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA263_632 = input.LA(4);
                        if ( (LA263_632==RPAREN) ) {
                            int LA263_1406 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt263=1;
                            }
                            else if ( (true) ) {
                                alt263=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 263, 1406, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA263_632>=IN_SET && LA263_632<=REGEXP)||(LA263_632>=OR_EXPR && LA263_632<=NOT_EXPR)||LA263_632==IS||(LA263_632>=ASC && LA263_632<=DESC)||(LA263_632>=TIMEPERIOD_SEC && LA263_632<=TIMEPERIOD_SECONDS)||(LA263_632>=COMMA && LA263_632<=EQUALS)||(LA263_632>=STAR && LA263_632<=PLUS)||(LA263_632>=BAND && LA263_632<=MOD)) ) {
                            alt263=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 263, 632, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case BETWEEN:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case CONTEXT:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt263=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 263, 235, input);
                        throw nvae;
                    }
                }
                else if ( (LA263_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else if ( (LA263_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt263=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 263, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA263_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==CONTEXT) && (synpred5_EsperEPL2Grammar())) {
                alt263=1;
            }
            else if ( (LA263_0==BETWEEN||LA263_0==WHERE||LA263_0==SET||LA263_0==AFTER) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);
                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction10068);
                    eventProperty707=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty707.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction10073);
                    libFunction708=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction708.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT710=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass709 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass711 = null;
        CommonTree DOT710_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction10085);
            libFunctionWithClass709=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass709.getTree());
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);
                if ( (LA264_0==DOT) ) {
                    alt264=1;
                }
                switch (alt264) {
            	case 1 :
            	    {
            	    DOT710=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction10088); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT710);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction10090);
            	    libFunctionNoClass711=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass711.getTree());
            	    }
            	    break;
            	default :
            	    break loop264;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT713=null;
        Token RPAREN716=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy712 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent714 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs715 = null;
        CommonTree l_tree=null;
        CommonTree DOT713_tree=null;
        CommonTree RPAREN716_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==IDENT) ) {
                int LA265_1 = input.LA(2);
                if ( (LA265_1==DOT) ) {
                    alt265=1;
                }
            }
            else if ( (LA265_0==TICKED_STRING_LITERAL) ) {
                int LA265_2 = input.LA(2);
                if ( (LA265_2==DOT) ) {
                    alt265=1;
                }
            }
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10120);
                    classIdentifierNonGreedy712=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy712.getTree());
                    DOT713=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass10122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT713);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass10126);
            funcIdent714=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent714.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass10130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==WINDOW||LA266_0==BETWEEN||LA266_0==ESCAPE||(LA266_0>=NOT_EXPR && LA266_0<=EVERY_EXPR)||LA266_0==WHERE||(LA266_0>=SUM && LA266_0<=COUNT)||LA266_0==CASE||LA266_0==OUTER||(LA266_0>=JOIN && LA266_0<=FULL)||(LA266_0>=DISTINCT && LA266_0<=ALL)||(LA266_0>=EVENTS && LA266_0<=LAST)||(LA266_0>=UNIDIRECTIONAL && LA266_0<=CURRENT_TIMESTAMP)||(LA266_0>=SNAPSHOT && LA266_0<=INDEX)||(LA266_0>=BOOLEAN_TRUE && LA266_0<=VALUE_NULL)||(LA266_0>=DEFINE && LA266_0<=AFTER)||LA266_0==WHILE||(LA266_0>=MERGE && LA266_0<=MATCHED)||LA266_0==NEWKW||LA266_0==CONTEXT||LA266_0==NUM_DOUBLE||(LA266_0>=IDENT && LA266_0<=LCURLY)||LA266_0==LPAREN||LA266_0==LBRACK||LA266_0==STAR||(LA266_0>=PLUS && LA266_0<=QUESTION)||(LA266_0>=STRING_LITERAL && LA266_0<=QUOTED_STRING_LITERAL)||LA266_0==MINUS||LA266_0==NUM_INT||(LA266_0>=TICKED_STRING_LITERAL && LA266_0<=NUM_FLOAT)) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass10133);
                    libFunctionArgs715=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs715.getTree());
                    }
                    break;
            }
            RPAREN716=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass10137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN716);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN719=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent717 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs718 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN719_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass10170);
            funcIdent717=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent717.getTree());
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==LPAREN) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass10175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==WINDOW||LA267_0==BETWEEN||LA267_0==ESCAPE||(LA267_0>=NOT_EXPR && LA267_0<=EVERY_EXPR)||LA267_0==WHERE||(LA267_0>=SUM && LA267_0<=COUNT)||LA267_0==CASE||LA267_0==OUTER||(LA267_0>=JOIN && LA267_0<=FULL)||(LA267_0>=DISTINCT && LA267_0<=ALL)||(LA267_0>=EVENTS && LA267_0<=LAST)||(LA267_0>=UNIDIRECTIONAL && LA267_0<=CURRENT_TIMESTAMP)||(LA267_0>=SNAPSHOT && LA267_0<=INDEX)||(LA267_0>=BOOLEAN_TRUE && LA267_0<=VALUE_NULL)||(LA267_0>=DEFINE && LA267_0<=AFTER)||LA267_0==WHILE||(LA267_0>=MERGE && LA267_0<=MATCHED)||LA267_0==NEWKW||LA267_0==CONTEXT||LA267_0==NUM_DOUBLE||(LA267_0>=IDENT && LA267_0<=LCURLY)||LA267_0==LPAREN||LA267_0==LBRACK||LA267_0==STAR||(LA267_0>=PLUS && LA267_0<=QUESTION)||(LA267_0>=STRING_LITERAL && LA267_0<=QUOTED_STRING_LITERAL)||LA267_0==MINUS||LA267_0==NUM_INT||(LA267_0>=TICKED_STRING_LITERAL && LA267_0<=NUM_FLOAT)) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass10178);
                            libFunctionArgs718=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs718.getTree());
                            }
                            break;
                    }
                    RPAREN719=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass10182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN719);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        Token between=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent720 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        CommonTree between_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        try {
            int alt269=7;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt269=1;
                }
                break;
            case MAX:
                {
                alt269=2;
                }
                break;
            case MIN:
                {
                alt269=3;
                }
                break;
            case WHERE:
                {
                alt269=4;
                }
                break;
            case SET:
                {
                alt269=5;
                }
                break;
            case AFTER:
                {
                alt269=6;
                }
                break;
            case BETWEEN:
                {
                alt269=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);
                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent10214);
                    escapableIdent720=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent720.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent10221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent10233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent10245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent10257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent10269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    {
                    between=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_funcIdent10280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BETWEEN.add(between);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, between));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL721=null;
        Token DISTINCT722=null;
        Token COMMA724=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem723 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem725 = null;
        CommonTree ALL721_tree=null;
        CommonTree DISTINCT722_tree=null;
        CommonTree COMMA724_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt270=3;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==ALL) ) {
                alt270=1;
            }
            else if ( (LA270_0==DISTINCT) ) {
                alt270=2;
            }
            switch (alt270) {
                case 1 :
                    {
                    ALL721=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs10297); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT722=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs10302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT722_tree = (CommonTree)adaptor.create(DISTINCT722);
                    adaptor.addChild(root_0, DISTINCT722_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10306);
            libFunctionArgItem723=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem723.getTree());
            loop271:
            do {
                int alt271=2;
                int LA271_0 = input.LA(1);
                if ( (LA271_0==COMMA) ) {
                    alt271=1;
                }
                switch (alt271) {
            	case 1 :
            	    {
            	    COMMA724=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs10309); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs10312);
            	    libFunctionArgItem725=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem725.getTree());
            	    }
            	    break;
            	default :
            	    break loop271;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl726 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime727 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==IDENT) ) {
                int LA272_1 = input.LA(2);
                if ( (LA272_1==GOES) ) {
                    alt272=1;
                }
            }
            else if ( (LA272_0==LPAREN) ) {
                int LA272_2 = input.LA(2);
                if ( (LA272_2==IDENT) ) {
                    int LA272_133 = input.LA(3);
                    if ( (LA272_133==COMMA) ) {
                        alt272=1;
                    }
                    else if ( (LA272_133==RPAREN) ) {
                        int LA272_207 = input.LA(4);
                        if ( (LA272_207==GOES) ) {
                            alt272=1;
                        }
                    }
                }
            }
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10326);
                    expressionLambdaDecl726=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl726.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem10329);
            expressionWithTime727=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime727.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR729=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr728 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr730 = null;
        CommonTree AND_EXPR729_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10340);
            concatenationExpr728=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr728.getTree());
            AND_EXPR729=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList10342); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList10345);
            concatenationExpr730=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr730.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression731 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression10373);
            followedByExpression731=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression731.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression732 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat733 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression10392);
            orExpression732=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression732.getTree());
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);
                if ( ((LA273_0>=FOLLOWED_BY && LA273_0<=FOLLOWMAX_BEGIN)) ) {
                    alt273=1;
                }
                switch (alt273) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression10395);
            	    followedByRepeat733=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat733.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop273;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END735=null;
        EsperEPL2GrammarParser.expression_return expression734 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression736 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END735_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==FOLLOWED_BY) ) {
                alt274=1;
            }
            else if ( (LA274_0==FOLLOWMAX_BEGIN) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);
                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat10448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat10457);
                    expression734=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression734.getTree());
                    FOLLOWMAX_END735=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat10459); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END735);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat10463);
            orExpression736=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression736.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression737 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression738 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression10492);
            andExpression737=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression737.getTree());
            loop275:
            do {
                int alt275=2;
                int LA275_0 = input.LA(1);
                if ( (LA275_0==OR_EXPR) ) {
                    alt275=1;
                }
                switch (alt275) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression10497); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression10499);
            	    andExpression738=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression738.getTree());
            	    }
            	    break;
            	default :
            	    break loop275;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression739 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression740 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression10531);
            matchUntilExpression739=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression739.getTree());
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);
                if ( (LA276_0==AND_EXPR) ) {
                    alt276=1;
                }
                switch (alt276) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression10536); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression10538);
            	    matchUntilExpression740=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression740.getTree());
            	    }
            	    break;
            	default :
            	    break loop276;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression741 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression742 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt277=2;
            int LA277_0 = input.LA(1);
            if ( (LA277_0==LBRACK) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10573);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10577);
            qualifyExpression741=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression741.getTree());
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==UNTIL) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10584);
                    qualifyExpression742=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression742.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList743 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix744 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( ((LA281_0>=NOT_EXPR && LA281_0<=EVERY_DISTINCT_EXPR)) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    int alt279=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt279=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt279=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt279=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 279, 0, input);
                        throw nvae;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression10649); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression10655); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10661); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression10663);
                            distinctExpressionList743=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList743.getTree());
                            }
                            break;
                    }
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==LBRACK) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression10669);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression10678);
            guardPostFix744=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix744.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN745=null;
        Token COMMA747=null;
        Token RPAREN749=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom746 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom748 = null;
        CommonTree LPAREN745_tree=null;
        CommonTree COMMA747_tree=null;
        CommonTree RPAREN749_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN745=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList10793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN745);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10795);
            distinctExpressionAtom746=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom746.getTree());
            loop282:
            do {
                int alt282=2;
                int LA282_0 = input.LA(1);
                if ( (LA282_0==COMMA) ) {
                    alt282=1;
                }
                switch (alt282) {
            	case 1 :
            	    {
            	    COMMA747=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList10798); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA747);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10800);
            	    distinctExpressionAtom748=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom748.getTree());
            	    }
            	    break;
            	default :
            	    break loop282;
                }
            } while (true);
            RPAREN749=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList10804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN749);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime750 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom10827);
            expressionWithTime750=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime750.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN753=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression751 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression752 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression754 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression755 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN753_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==IDENT||LA283_0==TICKED_STRING_LITERAL) ) {
                alt283=1;
            }
            else if ( (LA283_0==LPAREN) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix10842);
                    atomicExpression751=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression751.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix10848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix10850);
                    patternExpression752=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression752.getTree());
                    RPAREN753=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix10852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN753);
                    }
                    break;
            }
            int alt284=3;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==WHERE) ) {
                alt284=1;
            }
            else if ( (LA284_0==WHILE) ) {
                alt284=2;
            }
            switch (alt284) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix10859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix10861);
                    guardWhereExpression754=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression754.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix10869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix10871);
                    guardWhileExpression755=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression755.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression756 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression757 = null;
        try {
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==IDENT) ) {
                int LA285_1 = input.LA(2);
                if ( (LA285_1==COLON) ) {
                    alt285=1;
                }
                else if ( (LA285_1==EOF||(LA285_1>=OR_EXPR && LA285_1<=AND_EXPR)||LA285_1==WHERE||LA285_1==UNTIL||LA285_1==WHILE||(LA285_1>=LPAREN && LA285_1<=RPAREN)||(LA285_1>=EQUALS && LA285_1<=RBRACK)||(LA285_1>=FOLLOWED_BY && LA285_1<=FOLLOWMAX_BEGIN)||LA285_1==ATCHAR) ) {
                    alt285=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 285, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA285_0==TICKED_STRING_LITERAL) ) {
                alt285=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);
                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression10933);
                    observerExpression756=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression756.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression10937);
                    patternFilterExpression757=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression757.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON758=null;
        Token LPAREN759=null;
        Token RPAREN761=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList760 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON758_tree=null;
        CommonTree LPAREN759_tree=null;
        CommonTree RPAREN761_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON758=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression10954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON758);
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==IDENT) ) {
                alt286=1;
            }
            else if ( (LA286_0==AT) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);
                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression10965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN759=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression10968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN759);
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==WINDOW||LA287_0==BETWEEN||LA287_0==ESCAPE||(LA287_0>=NOT_EXPR && LA287_0<=EVERY_EXPR)||LA287_0==WHERE||(LA287_0>=SUM && LA287_0<=COUNT)||LA287_0==CASE||LA287_0==OUTER||(LA287_0>=JOIN && LA287_0<=FULL)||(LA287_0>=EVENTS && LA287_0<=LAST)||(LA287_0>=UNIDIRECTIONAL && LA287_0<=CURRENT_TIMESTAMP)||(LA287_0>=SNAPSHOT && LA287_0<=INDEX)||(LA287_0>=BOOLEAN_TRUE && LA287_0<=VALUE_NULL)||(LA287_0>=DEFINE && LA287_0<=AFTER)||LA287_0==WHILE||(LA287_0>=MERGE && LA287_0<=MATCHED)||LA287_0==NEWKW||LA287_0==CONTEXT||LA287_0==NUM_DOUBLE||(LA287_0>=IDENT && LA287_0<=LCURLY)||LA287_0==LPAREN||LA287_0==LBRACK||LA287_0==STAR||(LA287_0>=PLUS && LA287_0<=QUESTION)||(LA287_0>=STRING_LITERAL && LA287_0<=QUOTED_STRING_LITERAL)||LA287_0==MINUS||LA287_0==NUM_INT||(LA287_0>=TICKED_STRING_LITERAL && LA287_0<=NUM_FLOAT)) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression10970);
                    expressionWithTimeList760=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList760.getTree());
                    }
                    break;
            }
            RPAREN761=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression10973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN761);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT762=null;
        Token COLON763=null;
        Token IDENT764=null;
        Token LPAREN765=null;
        Token RPAREN767=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList766 = null;
        CommonTree IDENT762_tree=null;
        CommonTree COLON763_tree=null;
        CommonTree IDENT764_tree=null;
        CommonTree LPAREN765_tree=null;
        CommonTree RPAREN767_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT762=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT762_tree = (CommonTree)adaptor.create(IDENT762);
            adaptor.addChild(root_0, IDENT762_tree);
            }
            COLON763=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression11024); if (state.failed) return retval;
            IDENT764=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression11027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT764_tree = (CommonTree)adaptor.create(IDENT764);
            adaptor.addChild(root_0, IDENT764_tree);
            }
            LPAREN765=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression11029); if (state.failed) return retval;
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==WINDOW||LA288_0==BETWEEN||LA288_0==ESCAPE||(LA288_0>=NOT_EXPR && LA288_0<=EVERY_EXPR)||LA288_0==WHERE||(LA288_0>=SUM && LA288_0<=COUNT)||LA288_0==CASE||LA288_0==OUTER||(LA288_0>=JOIN && LA288_0<=FULL)||(LA288_0>=EVENTS && LA288_0<=LAST)||(LA288_0>=UNIDIRECTIONAL && LA288_0<=CURRENT_TIMESTAMP)||(LA288_0>=SNAPSHOT && LA288_0<=INDEX)||(LA288_0>=BOOLEAN_TRUE && LA288_0<=VALUE_NULL)||(LA288_0>=DEFINE && LA288_0<=AFTER)||LA288_0==WHILE||(LA288_0>=MERGE && LA288_0<=MATCHED)||LA288_0==NEWKW||LA288_0==CONTEXT||LA288_0==NUM_DOUBLE||(LA288_0>=IDENT && LA288_0<=LCURLY)||LA288_0==LPAREN||LA288_0==LBRACK||LA288_0==STAR||(LA288_0>=PLUS && LA288_0<=QUESTION)||(LA288_0>=STRING_LITERAL && LA288_0<=QUOTED_STRING_LITERAL)||LA288_0==MINUS||LA288_0==NUM_INT||(LA288_0>=TICKED_STRING_LITERAL && LA288_0<=NUM_FLOAT)) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression11033);
                    expressionWithTimeList766=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList766.getTree());
                    }
                    break;
            }
            RPAREN767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression11037); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN768=null;
        Token RPAREN770=null;
        EsperEPL2GrammarParser.expression_return expression769 = null;
        CommonTree LPAREN768_tree=null;
        CommonTree RPAREN770_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN768=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression11050); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression11053);
            expression769=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression769.getTree());
            RPAREN770=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression11055); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK771=null;
        Token RBRACK775=null;
        EsperEPL2GrammarParser.expression_return expression772 = null;
        EsperEPL2GrammarParser.expression_return expression773 = null;
        EsperEPL2GrammarParser.expression_return expression774 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK771_tree=null;
        CommonTree RBRACK775_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK771=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange11076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK771);
            int alt291=2;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==WINDOW||LA291_0==BETWEEN||LA291_0==ESCAPE||(LA291_0>=NOT_EXPR && LA291_0<=EVERY_EXPR)||LA291_0==WHERE||(LA291_0>=SUM && LA291_0<=COUNT)||LA291_0==CASE||LA291_0==OUTER||(LA291_0>=JOIN && LA291_0<=FULL)||(LA291_0>=EVENTS && LA291_0<=LAST)||(LA291_0>=UNIDIRECTIONAL && LA291_0<=CURRENT_TIMESTAMP)||(LA291_0>=SNAPSHOT && LA291_0<=INDEX)||(LA291_0>=BOOLEAN_TRUE && LA291_0<=VALUE_NULL)||(LA291_0>=DEFINE && LA291_0<=AFTER)||LA291_0==WHILE||(LA291_0>=MERGE && LA291_0<=MATCHED)||LA291_0==NEWKW||LA291_0==CONTEXT||LA291_0==NUM_DOUBLE||(LA291_0>=IDENT && LA291_0<=LCURLY)||LA291_0==LPAREN||(LA291_0>=PLUS && LA291_0<=QUESTION)||(LA291_0>=STRING_LITERAL && LA291_0<=QUOTED_STRING_LITERAL)||LA291_0==MINUS||LA291_0==NUM_INT||(LA291_0>=TICKED_STRING_LITERAL && LA291_0<=NUM_FLOAT)) ) {
                alt291=1;
            }
            else if ( (LA291_0==COLON) ) {
                alt291=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange11083);
                    expression772=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression772.getTree());
                    int alt290=2;
                    int LA290_0 = input.LA(1);
                    if ( (LA290_0==COLON) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11088); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt289=2;
                            int LA289_0 = input.LA(1);
                            if ( (LA289_0==WINDOW||LA289_0==BETWEEN||LA289_0==ESCAPE||(LA289_0>=NOT_EXPR && LA289_0<=EVERY_EXPR)||LA289_0==WHERE||(LA289_0>=SUM && LA289_0<=COUNT)||LA289_0==CASE||LA289_0==OUTER||(LA289_0>=JOIN && LA289_0<=FULL)||(LA289_0>=EVENTS && LA289_0<=LAST)||(LA289_0>=UNIDIRECTIONAL && LA289_0<=CURRENT_TIMESTAMP)||(LA289_0>=SNAPSHOT && LA289_0<=INDEX)||(LA289_0>=BOOLEAN_TRUE && LA289_0<=VALUE_NULL)||(LA289_0>=DEFINE && LA289_0<=AFTER)||LA289_0==WHILE||(LA289_0>=MERGE && LA289_0<=MATCHED)||LA289_0==NEWKW||LA289_0==CONTEXT||LA289_0==NUM_DOUBLE||(LA289_0>=IDENT && LA289_0<=LCURLY)||LA289_0==LPAREN||(LA289_0>=PLUS && LA289_0<=QUESTION)||(LA289_0>=STRING_LITERAL && LA289_0<=QUOTED_STRING_LITERAL)||LA289_0==MINUS||LA289_0==NUM_INT||(LA289_0>=TICKED_STRING_LITERAL && LA289_0<=NUM_FLOAT)) ) {
                                alt289=1;
                            }
                            switch (alt289) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange11091);
                                    expression773=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression773.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange11111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange11113);
                    expression774=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression774.getTree());
                    }
                    break;
            }
            RBRACK775=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange11124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK775);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS776=null;
        Token LPAREN778=null;
        Token RPAREN780=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier777 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList779 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression781 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS776_tree=null;
        CommonTree LPAREN778_tree=null;
        CommonTree RPAREN780_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==IDENT) ) {
                int LA292_1 = input.LA(2);
                if ( (LA292_1==EQUALS) ) {
                    alt292=1;
                }
            }
            switch (alt292) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression11211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS776=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression11213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS776);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression11222);
            classIdentifier777=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier777.getTree());
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==LPAREN) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    LPAREN778=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression11233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN778);
                    int alt293=2;
                    int LA293_0 = input.LA(1);
                    if ( (LA293_0==WINDOW||LA293_0==BETWEEN||LA293_0==ESCAPE||(LA293_0>=NOT_EXPR && LA293_0<=EVERY_EXPR)||LA293_0==WHERE||(LA293_0>=SUM && LA293_0<=COUNT)||LA293_0==CASE||LA293_0==OUTER||(LA293_0>=JOIN && LA293_0<=FULL)||(LA293_0>=EVENTS && LA293_0<=LAST)||(LA293_0>=UNIDIRECTIONAL && LA293_0<=CURRENT_TIMESTAMP)||(LA293_0>=SNAPSHOT && LA293_0<=INDEX)||(LA293_0>=BOOLEAN_TRUE && LA293_0<=VALUE_NULL)||(LA293_0>=DEFINE && LA293_0<=AFTER)||LA293_0==WHILE||(LA293_0>=MERGE && LA293_0<=MATCHED)||LA293_0==NEWKW||LA293_0==CONTEXT||LA293_0==NUM_DOUBLE||(LA293_0>=IDENT && LA293_0<=LCURLY)||LA293_0==LPAREN||(LA293_0>=PLUS && LA293_0<=QUESTION)||(LA293_0>=STRING_LITERAL && LA293_0<=QUOTED_STRING_LITERAL)||LA293_0==MINUS||LA293_0==NUM_INT||(LA293_0>=TICKED_STRING_LITERAL && LA293_0<=NUM_FLOAT)) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression11235);
                            expressionList779=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList779.getTree());
                            }
                            break;
                    }
                    RPAREN780=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression11238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN780);
                    }
                    break;
            }
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==LBRACK) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression11250);
                    propertyExpression781=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression781.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic782 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic783 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11295);
            propertyExpressionAtomic782=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic782.getTree());
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);
                if ( (LA296_0==LBRACK) ) {
                    alt296=1;
                }
                switch (alt296) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression11298);
            	    propertyExpressionAtomic783=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic783.getTree());
            	    }
            	    break;
            	default :
            	    break loop296;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK784=null;
        Token SELECT785=null;
        Token FROM787=null;
        Token AS789=null;
        Token IDENT790=null;
        Token WHERE791=null;
        Token RBRACK793=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList786 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty788 = null;
        EsperEPL2GrammarParser.expression_return expression792 = null;
        CommonTree LBRACK784_tree=null;
        CommonTree SELECT785_tree=null;
        CommonTree FROM787_tree=null;
        CommonTree AS789_tree=null;
        CommonTree IDENT790_tree=null;
        CommonTree WHERE791_tree=null;
        CommonTree RBRACK793_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK784=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic11328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK784);
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==SELECT) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    SELECT785=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic11331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT785);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic11333);
                    propertySelectionList786=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList786.getTree());
                    FROM787=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic11335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM787);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic11339);
            eventProperty788=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty788.getTree());
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==AS) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    AS789=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic11342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS789);
                    IDENT790=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic11344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT790);
                    }
                    break;
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==WHERE) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    WHERE791=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic11349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE791);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic11351);
                    expression792=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression792.getTree());
                    }
                    break;
            }
            RBRACK793=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic11355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK793);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA795=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement794 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement796 = null;
        CommonTree COMMA795_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11405);
            propertySelectionListElement794=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement794.getTree());
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);
                if ( (LA300_0==COMMA) ) {
                    alt300=1;
                }
                switch (alt300) {
            	case 1 :
            	    {
            	    COMMA795=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList11408); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList11411);
            	    propertySelectionListElement796=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement796.getTree());
            	    }
            	    break;
            	default :
            	    break loop300;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS799=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector797 = null;
        EsperEPL2GrammarParser.expression_return expression798 = null;
        CommonTree s_tree=null;
        CommonTree AS799_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt302=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt302=1;
                }
                break;
            case IDENT:
                {
                int LA302_2 = input.LA(2);
                if ( (LA302_2==DOT) ) {
                    int LA302_75 = input.LA(3);
                    if ( (LA302_75==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt302=2;
                    }
                    else if ( (LA302_75==WINDOW||LA302_75==BETWEEN||LA302_75==ESCAPE||LA302_75==EVERY_EXPR||LA302_75==WHERE||(LA302_75>=SUM && LA302_75<=COUNT)||LA302_75==OUTER||(LA302_75>=JOIN && LA302_75<=FULL)||(LA302_75>=EVENTS && LA302_75<=LAST)||(LA302_75>=UNIDIRECTIONAL && LA302_75<=PREVIOUSTAIL)||LA302_75==PRIOR||(LA302_75>=WEEKDAY && LA302_75<=CAST)||(LA302_75>=SNAPSHOT && LA302_75<=INDEX)||(LA302_75>=DEFINE && LA302_75<=AFTER)||LA302_75==WHILE||(LA302_75>=MERGE && LA302_75<=MATCHED)||LA302_75==CONTEXT||LA302_75==IDENT||LA302_75==TICKED_STRING_LITERAL) ) {
                        alt302=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 302, 75, input);
                        throw nvae;
                    }
                }
                else if ( ((LA302_2>=IN_SET && LA302_2<=REGEXP)||(LA302_2>=OR_EXPR && LA302_2<=NOT_EXPR)||LA302_2==AS||LA302_2==FROM||LA302_2==IS||LA302_2==LPAREN||(LA302_2>=COMMA && LA302_2<=EQUALS)||LA302_2==LBRACK||(LA302_2>=STAR && LA302_2<=QUESTION)||(LA302_2>=BAND && LA302_2<=MOD)||LA302_2==ESCAPECHAR) ) {
                    alt302=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 302, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case BETWEEN:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case CONTEXT:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt302=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);
                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement11437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement11453);
                    propertyStreamSelector797=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector797.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement11458);
                    expression798=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression798.getTree());
                    int alt301=2;
                    int LA301_0 = input.LA(1);
                    if ( (LA301_0==AS) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            AS799=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement11461); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS799);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11465);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT800=null;
        Token STAR801=null;
        Token AS802=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT800_tree=null;
        CommonTree STAR801_tree=null;
        CommonTree AS802_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT800=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector11511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT800);
            STAR801=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector11513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR801);
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==AS) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    AS802=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector11516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS802);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS803=null;
        Token LPAREN805=null;
        Token RPAREN807=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier804 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList806 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression808 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation809 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS803_tree=null;
        CommonTree LPAREN805_tree=null;
        CommonTree RPAREN807_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==IDENT) ) {
                int LA304_1 = input.LA(2);
                if ( (LA304_1==EQUALS) ) {
                    alt304=1;
                }
            }
            switch (alt304) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression11567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS803=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression11569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS803);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression11578);
            classIdentifier804=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier804.getTree());
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==LPAREN) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    LPAREN805=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression11589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN805);
                    int alt305=2;
                    int LA305_0 = input.LA(1);
                    if ( (LA305_0==WINDOW||LA305_0==BETWEEN||LA305_0==ESCAPE||(LA305_0>=NOT_EXPR && LA305_0<=EVERY_EXPR)||LA305_0==WHERE||(LA305_0>=SUM && LA305_0<=COUNT)||LA305_0==CASE||LA305_0==OUTER||(LA305_0>=JOIN && LA305_0<=FULL)||(LA305_0>=EVENTS && LA305_0<=LAST)||(LA305_0>=UNIDIRECTIONAL && LA305_0<=CURRENT_TIMESTAMP)||(LA305_0>=SNAPSHOT && LA305_0<=INDEX)||(LA305_0>=BOOLEAN_TRUE && LA305_0<=VALUE_NULL)||(LA305_0>=DEFINE && LA305_0<=AFTER)||LA305_0==WHILE||(LA305_0>=MERGE && LA305_0<=MATCHED)||LA305_0==NEWKW||LA305_0==CONTEXT||LA305_0==NUM_DOUBLE||(LA305_0>=IDENT && LA305_0<=LCURLY)||LA305_0==LPAREN||(LA305_0>=PLUS && LA305_0<=QUESTION)||(LA305_0>=STRING_LITERAL && LA305_0<=QUOTED_STRING_LITERAL)||LA305_0==MINUS||LA305_0==NUM_INT||(LA305_0>=TICKED_STRING_LITERAL && LA305_0<=NUM_FLOAT)) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression11591);
                            expressionList806=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList806.getTree());
                            }
                            break;
                    }
                    RPAREN807=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression11594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN807);
                    }
                    break;
            }
            int alt307=2;
            int LA307_0 = input.LA(1);
            if ( (LA307_0==LBRACK) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression11606);
                    propertyExpression808=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression808.getTree());
                    }
                    break;
            }
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==ATCHAR) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression11617);
                    patternFilterAnnotation809=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation809.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR810=null;
        Token LPAREN811=null;
        Token RPAREN813=null;
        EsperEPL2GrammarParser.number_return number812 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR810_tree=null;
        CommonTree LPAREN811_tree=null;
        CommonTree RPAREN813_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR810=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation11669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR810);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation11673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt309=2;
            int LA309_0 = input.LA(1);
            if ( (LA309_0==LPAREN) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    LPAREN811=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation11676); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN811);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation11678);
                    number812=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number812.getTree());
                    RPAREN813=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation11680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN813);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT814=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT814_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier11716);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop310:
            do {
                int alt310=2;
                int LA310_0 = input.LA(1);
                if ( (LA310_0==DOT) ) {
                    int LA310_23 = input.LA(2);
                    if ( (LA310_23==IDENT) ) {
                        int LA310_48 = input.LA(3);
                        if ( (LA310_48==EOF||LA310_48==CREATE||(LA310_48>=OR_EXPR && LA310_48<=AS)||LA310_48==SELECT||(LA310_48>=INNER && LA310_48<=ON)||(LA310_48>=GROUP && LA310_48<=HAVING)||LA310_48==OUTPUT||LA310_48==INSERT||LA310_48==ORDER||(LA310_48>=UNIDIRECTIONAL && LA310_48<=RETAININTERSECTION)||LA310_48==DELETE||LA310_48==SET||LA310_48==UNTIL||LA310_48==ROW_LIMIT_EXPR||(LA310_48>=UPDATE && LA310_48<=MATCH_RECOGNIZE)||(LA310_48>=FOR && LA310_48<=WHILE)||LA310_48==MERGE||LA310_48==EXPRESSIONDECL||LA310_48==CONTEXT||LA310_48==IDENT||(LA310_48>=RCURLY && LA310_48<=RPAREN)||LA310_48==COMMA||(LA310_48>=DOT && LA310_48<=RBRACK)||(LA310_48>=FOLLOWED_BY && LA310_48<=FOLLOWMAX_BEGIN)||LA310_48==ATCHAR||LA310_48==TICKED_STRING_LITERAL) ) {
                            alt310=1;
                        }
                    }
                    else if ( (LA310_23==TICKED_STRING_LITERAL) ) {
                        alt310=1;
                    }
                }
                switch (alt310) {
            	case 1 :
            	    {
            	    DOT814=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier11735); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT814);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier11739);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop310;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT815=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT815_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11784);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);
                if ( (LA311_0==IDENT||LA311_0==TICKED_STRING_LITERAL) ) {
                    alt311=2;
                }
                else if ( (LA311_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA311_4 = input.LA(3);
                        if ( (LA311_4==IDENT||LA311_4==DOT||LA311_4==TICKED_STRING_LITERAL) ) {
                            alt311=1;
                        }
                        else if ( (LA311_4==LPAREN) ) {
                            alt311=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA311_5 = input.LA(3);
                        if ( (LA311_5==LPAREN) ) {
                            alt311=2;
                        }
                        else if ( (LA311_5==IDENT||LA311_5==DOT||LA311_5==TICKED_STRING_LITERAL) ) {
                            alt311=1;
                        }
                        }
                        break;
                    case BETWEEN:
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt311=2;
                        }
                        break;
                    }
                }
                switch (alt311) {
            	case 1 :
            	    {
            	    DOT815=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy11819); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT815);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11823);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop311;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA817=null;
        EsperEPL2GrammarParser.expression_return expression816 = null;
        EsperEPL2GrammarParser.expression_return expression818 = null;
        CommonTree COMMA817_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList11865);
            expression816=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression816.getTree());
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);
                if ( (LA312_0==COMMA) ) {
                    alt312=1;
                }
                switch (alt312) {
            	case 1 :
            	    {
            	    COMMA817=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11868); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11871);
            	    expression818=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression818.getTree());
            	    }
            	    break;
            	default :
            	    break loop312;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA820=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast819 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast821 = null;
        CommonTree COMMA820_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11899);
            expressionWithTimeInclLast819=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast819.getTree());
            loop313:
            do {
                int alt313=2;
                int LA313_0 = input.LA(1);
                if ( (LA313_0==COMMA) ) {
                    alt313=1;
                }
                switch (alt313) {
            	case 1 :
            	    {
            	    COMMA820=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList11902); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11905);
            	    expressionWithTimeInclLast821=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast821.getTree());
            	    }
            	    break;
            	default :
            	    break loop313;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand822 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod823 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable824 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand825 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand826 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator827 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator828 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList829 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar830 = null;
        try {
            int alt314=9;
            int LA314_0 = input.LA(1);
            if ( (LA314_0==LW) ) {
                int LA314_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt314=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt314=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==MINUS) ) {
                int LA314_2 = input.LA(2);
                if ( (LA314_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_2==NUM_INT) ) {
                    int LA314_161 = input.LA(3);
                    if ( (LA314_161==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_SECONDS) ) {
                        int LA314_489 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 489, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_161==TIMEPERIOD_SECOND) ) {
                        int LA314_490 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 490, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_161==TIMEPERIOD_SEC) ) {
                        int LA314_491 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 491, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_161==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_161==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_161==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 161, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_2==NUM_LONG) ) {
                    int LA314_162 = input.LA(3);
                    if ( (LA314_162==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_SECONDS) ) {
                        int LA314_528 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 528, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_162==TIMEPERIOD_SECOND) ) {
                        int LA314_529 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 529, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_162==TIMEPERIOD_SEC) ) {
                        int LA314_530 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 530, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_162==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_162==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 162, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_2==NUM_FLOAT) ) {
                    int LA314_163 = input.LA(3);
                    if ( (LA314_163==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==TIMEPERIOD_SECONDS) ) {
                        int LA314_596 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 596, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_163==TIMEPERIOD_SECOND) ) {
                        int LA314_597 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 597, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_163==TIMEPERIOD_SEC) ) {
                        int LA314_598 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 598, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_163==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_163==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_163==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 163, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_2==NUM_DOUBLE) ) {
                    int LA314_164 = input.LA(3);
                    if ( (LA314_164==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==TIMEPERIOD_SECONDS) ) {
                        int LA314_639 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 639, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_164==TIMEPERIOD_SECOND) ) {
                        int LA314_640 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 640, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_164==TIMEPERIOD_SEC) ) {
                        int LA314_641 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 641, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_164==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_164==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_164==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 164, input);
                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA314_165 = input.LA(3);
                    if ( (LA314_165==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_SECONDS) ) {
                        int LA314_677 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 677, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_165==TIMEPERIOD_SECOND) ) {
                        int LA314_678 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 678, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_165==TIMEPERIOD_SEC) ) {
                        int LA314_679 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 679, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_165==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_165==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_165==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 165, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA314_166 = input.LA(3);
                    if ( (LA314_166==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_SECONDS) ) {
                        int LA314_716 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 716, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_166==TIMEPERIOD_SECOND) ) {
                        int LA314_717 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 717, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_166==TIMEPERIOD_SEC) ) {
                        int LA314_718 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 718, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_166==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_166==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 166, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA314_167 = input.LA(3);
                    if ( (LA314_167==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==TIMEPERIOD_SECONDS) ) {
                        int LA314_784 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 784, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_167==TIMEPERIOD_SECOND) ) {
                        int LA314_785 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 785, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_167==TIMEPERIOD_SEC) ) {
                        int LA314_786 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 786, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_167==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_167==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_167==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 167, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA314_168 = input.LA(3);
                    if ( (LA314_168==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==TIMEPERIOD_SECONDS) ) {
                        int LA314_827 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 827, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_168==TIMEPERIOD_SECOND) ) {
                        int LA314_828 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 828, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_168==TIMEPERIOD_SEC) ) {
                        int LA314_829 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt314=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt314=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 829, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA314_168==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt314=3;
                    }
                    else if ( (LA314_168==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else if ( (LA314_168==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt314=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 168, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==NUM_INT) ) {
                int LA314_4 = input.LA(2);
                if ( (LA314_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else if ( (LA314_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_4==TIMEPERIOD_SECONDS) ) {
                    int LA314_183 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 183, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_4==TIMEPERIOD_SECOND) ) {
                    int LA314_184 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 184, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_4==TIMEPERIOD_SEC) ) {
                    int LA314_185 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 185, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==NUM_LONG) ) {
                int LA314_5 = input.LA(2);
                if ( (LA314_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_SECONDS) ) {
                    int LA314_224 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 224, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_5==TIMEPERIOD_SECOND) ) {
                    int LA314_225 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 225, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_5==TIMEPERIOD_SEC) ) {
                    int LA314_226 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 226, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==NUM_FLOAT) ) {
                int LA314_6 = input.LA(2);
                if ( (LA314_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==TIMEPERIOD_SECONDS) ) {
                    int LA314_295 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 295, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_6==TIMEPERIOD_SECOND) ) {
                    int LA314_296 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 296, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_6==TIMEPERIOD_SEC) ) {
                    int LA314_297 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 297, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else if ( (LA314_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==NUM_DOUBLE) ) {
                int LA314_7 = input.LA(2);
                if ( (LA314_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==TIMEPERIOD_SECONDS) ) {
                    int LA314_341 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 341, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_7==TIMEPERIOD_SECOND) ) {
                    int LA314_342 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 342, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_7==TIMEPERIOD_SEC) ) {
                    int LA314_343 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 343, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else if ( (LA314_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==IDENT) ) {
                int LA314_8 = input.LA(2);
                if ( (LA314_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==TIMEPERIOD_SECONDS) ) {
                    int LA314_396 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 396, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_8==TIMEPERIOD_SECOND) ) {
                    int LA314_397 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 397, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_8==TIMEPERIOD_SEC) ) {
                    int LA314_398 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 398, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else if ( (LA314_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==QUESTION) ) {
                int LA314_9 = input.LA(2);
                if ( (LA314_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==TIMEPERIOD_SECONDS) ) {
                    int LA314_447 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 447, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_9==TIMEPERIOD_SECOND) ) {
                    int LA314_448 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 448, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_9==TIMEPERIOD_SEC) ) {
                    int LA314_449 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt314=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt314=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 449, input);
                        throw nvae;
                    }
                }
                else if ( (LA314_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt314=3;
                }
                else if ( (LA314_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt314=4;
                }
                else if ( (LA314_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt314=6;
                }
                else if ( (LA314_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt314=7;
                }
                else if ( (LA314_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else if ( (LA314_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==CONTEXT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt314=3;
            }
            else if ( (LA314_0==STAR) ) {
                int LA314_74 = input.LA(2);
                if ( (LA314_74==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt314=5;
                }
                else if ( (LA314_74==RPAREN||LA314_74==COMMA) ) {
                    alt314=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 74, input);
                    throw nvae;
                }
            }
            else if ( (LA314_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt314=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime11934);
                    lastWeekdayOperand822=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand822.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime11945);
                    timePeriod823=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod823.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime11956);
                    expressionQualifyable824=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable824.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime11967);
                    rangeOperand825=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand825.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime11979);
                    frequencyOperand826=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand826.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime11990);
                    lastOperator827=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator827.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime12002);
                    weekDayOperator828=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator828.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime12014);
                    numericParameterList829=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList829.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime12019);
                    numberSetStar830=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar830.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand831 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime832 = null;
        try {
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==LAST) ) {
                int LA315_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt315=1;
                }
                else if ( (true) ) {
                    alt315=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 315, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA315_0==WINDOW||LA315_0==BETWEEN||LA315_0==ESCAPE||(LA315_0>=NOT_EXPR && LA315_0<=EVERY_EXPR)||LA315_0==WHERE||(LA315_0>=SUM && LA315_0<=COUNT)||LA315_0==CASE||LA315_0==OUTER||(LA315_0>=JOIN && LA315_0<=FULL)||(LA315_0>=EVENTS && LA315_0<=FIRST)||(LA315_0>=UNIDIRECTIONAL && LA315_0<=CURRENT_TIMESTAMP)||(LA315_0>=SNAPSHOT && LA315_0<=INDEX)||(LA315_0>=BOOLEAN_TRUE && LA315_0<=VALUE_NULL)||(LA315_0>=DEFINE && LA315_0<=AFTER)||LA315_0==WHILE||(LA315_0>=MERGE && LA315_0<=MATCHED)||LA315_0==NEWKW||LA315_0==CONTEXT||LA315_0==NUM_DOUBLE||(LA315_0>=IDENT && LA315_0<=LCURLY)||LA315_0==LPAREN||LA315_0==LBRACK||LA315_0==STAR||(LA315_0>=PLUS && LA315_0<=QUESTION)||(LA315_0>=STRING_LITERAL && LA315_0<=QUOTED_STRING_LITERAL)||LA315_0==MINUS||LA315_0==NUM_INT||(LA315_0>=TICKED_STRING_LITERAL && LA315_0<=NUM_FLOAT)) ) {
                alt315=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);
                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast12039);
                    lastOperand831=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand831.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12044);
                    expressionWithTime832=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime832.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression833 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable12055);
            expression833=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression833.getTree());
            int alt316=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt316=1;
                    }
                    break;
                case DESC:
                    {
                    alt316=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt316=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt316=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt316=5;
                    }
                    break;
            }
            switch (alt316) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable12060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable12064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR834=null;
        CommonTree STAR834_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR834=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar12133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR834);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW835=null;
        CommonTree LW835_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW835=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand12153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW835_tree = (CommonTree)adaptor.create(LW835);
            root_0 = (CommonTree)adaptor.becomeRoot(LW835_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST836=null;
        CommonTree LAST836_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST836=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand12166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST836_tree = (CommonTree)adaptor.create(LAST836);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST836_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR837=null;
        Token DIV838=null;
        EsperEPL2GrammarParser.number_return number839 = null;
        EsperEPL2GrammarParser.substitution_return substitution840 = null;
        CommonTree i_tree=null;
        CommonTree STAR837_tree=null;
        CommonTree DIV838_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR837=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand12178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR837);
            DIV838=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand12180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV838);
            int alt317=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt317=1;
                }
                break;
            case IDENT:
                {
                alt317=2;
                }
                break;
            case QUESTION:
                {
                alt317=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);
                throw nvae;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand12183);
                    number839=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number839.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand12187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand12189);
                    substitution840=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution840.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON843=null;
        EsperEPL2GrammarParser.number_return number841 = null;
        EsperEPL2GrammarParser.substitution_return substitution842 = null;
        EsperEPL2GrammarParser.number_return number844 = null;
        EsperEPL2GrammarParser.substitution_return substitution845 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON843_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt318=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt318=1;
                }
                break;
            case IDENT:
                {
                alt318=2;
                }
                break;
            case QUESTION:
                {
                alt318=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12238);
                    number841=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number841.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12244);
                    substitution842=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution842.getTree());
                    }
                    break;
            }
            COLON843=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand12247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON843);
            int alt319=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt319=1;
                }
                break;
            case IDENT:
                {
                alt319=2;
                }
                break;
            case QUESTION:
                {
                alt319=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand12250);
                    number844=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number844.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand12254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand12256);
                    substitution845=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution845.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST848=null;
        EsperEPL2GrammarParser.number_return number846 = null;
        EsperEPL2GrammarParser.substitution_return substitution847 = null;
        CommonTree i_tree=null;
        CommonTree LAST848_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt320=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt320=1;
                }
                break;
            case IDENT:
                {
                alt320=2;
                }
                break;
            case QUESTION:
                {
                alt320=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator12370);
                    number846=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number846.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator12374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator12376);
                    substitution847=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution847.getTree());
                    }
                    break;
            }
            LAST848=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator12379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST848);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY851=null;
        EsperEPL2GrammarParser.number_return number849 = null;
        EsperEPL2GrammarParser.substitution_return substitution850 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY851_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt321=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt321=1;
                }
                break;
            case IDENT:
                {
                alt321=2;
                }
                break;
            case QUESTION:
                {
                alt321=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator12427);
                    number849=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number849.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator12431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator12433);
                    substitution850=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution850.getTree());
                    }
                    break;
            }
            WEEKDAY851=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator12436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY851);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK852=null;
        Token COMMA854=null;
        Token RBRACK856=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter853 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter855 = null;
        CommonTree LBRACK852_tree=null;
        CommonTree COMMA854_tree=null;
        CommonTree RBRACK856_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK852=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList12483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK852);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList12485);
            numericListParameter853=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter853.getTree());
            loop322:
            do {
                int alt322=2;
                int LA322_0 = input.LA(1);
                if ( (LA322_0==COMMA) ) {
                    alt322=1;
                }
                switch (alt322) {
            	case 1 :
            	    {
            	    COMMA854=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList12488); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA854);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList12490);
            	    numericListParameter855=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter855.getTree());
            	    }
            	    break;
            	default :
            	    break loop322;
                }
            } while (true);
            RBRACK856=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList12494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK856);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand857 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand858 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant859 = null;
        try {
            int alt323=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA323_1 = input.LA(2);
                if ( (LA323_1==COMMA||LA323_1==RBRACK) ) {
                    alt323=3;
                }
                else if ( (LA323_1==COLON) ) {
                    alt323=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA323_2 = input.LA(2);
                if ( (LA323_2==COMMA||LA323_2==RBRACK) ) {
                    alt323=3;
                }
                else if ( (LA323_2==COLON) ) {
                    alt323=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA323_3 = input.LA(2);
                if ( (LA323_3==COLON) ) {
                    alt323=1;
                }
                else if ( (LA323_3==COMMA||LA323_3==RBRACK) ) {
                    alt323=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA323_4 = input.LA(2);
                if ( (LA323_4==COLON) ) {
                    alt323=1;
                }
                else if ( (LA323_4==COMMA||LA323_4==RBRACK) ) {
                    alt323=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt323=1;
                }
                break;
            case STAR:
                {
                alt323=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt323=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter12516);
                    rangeOperand857=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand857.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter12522);
                    frequencyOperand858=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand858.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter12527);
                    numberconstant859=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant859.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT861=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic860 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic862 = null;
        CommonTree DOT861_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12543);
            eventPropertyAtomic860=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic860.getTree());
            loop324:
            do {
                int alt324=2;
                int LA324_0 = input.LA(1);
                if ( (LA324_0==DOT) ) {
                    alt324=1;
                }
                switch (alt324) {
            	case 1 :
            	    {
            	    DOT861=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty12546); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT861);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12548);
            	    eventPropertyAtomic862=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic862.getTree());
            	    }
            	    break;
            	default :
            	    break loop324;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK864=null;
        Token RPAREN865=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent863 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK864_tree=null;
        CommonTree RPAREN865_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12574);
            eventPropertyIdent863=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent863.getTree());
            int alt328=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt328=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt328=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt328=3;
                    }
                    break;
            }
            switch (alt328) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic12583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic12587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK864=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic12589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK864);
                    int alt325=2;
                    int LA325_0 = input.LA(1);
                    if ( (LA325_0==QUESTION) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12594); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic12608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==STRING_LITERAL) ) {
                        alt326=1;
                    }
                    else if ( (LA326_0==QUOTED_STRING_LITERAL) ) {
                        alt326=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 326, 0, input);
                        throw nvae;
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12613); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN865=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic12622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN865);
                    int alt327=2;
                    int LA327_0 = input.LA(1);
                    if ( (LA327_0==QUESTION) ) {
                        alt327=1;
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR866=null;
        Token DOT867=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR866_tree=null;
        CommonTree DOT867_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12764);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);
                if ( (LA330_0==ESCAPECHAR) ) {
                    alt330=1;
                }
                switch (alt330) {
            	case 1 :
            	    {
            	    ESCAPECHAR866=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent12776); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR866);
            	    DOT867=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent12778); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT867);
            	    int alt329=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case CONTEXT:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt329=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA329_5 = input.LA(2);
            	            if ( (LA329_5==EOF||(LA329_5>=IN_SET && LA329_5<=NOT_EXPR)||(LA329_5>=WHERE && LA329_5<=AS)||(LA329_5>=ELSE && LA329_5<=FROM)||(LA329_5>=INNER && LA329_5<=FULL)||LA329_5==IS||(LA329_5>=GROUP && LA329_5<=HAVING)||LA329_5==ALL||LA329_5==OUTPUT||LA329_5==INSERT||(LA329_5>=ORDER && LA329_5<=DESC)||LA329_5==PATTERN||(LA329_5>=TIMEPERIOD_SEC && LA329_5<=TIMEPERIOD_SECONDS)||LA329_5==ROW_LIMIT_EXPR||(LA329_5>=MATCH_RECOGNIZE && LA329_5<=MEASURES)||(LA329_5>=AFTER && LA329_5<=FOR)||(LA329_5>=RCURLY && LA329_5<=RPAREN)||(LA329_5>=COMMA && LA329_5<=COLON)||(LA329_5>=BAND && LA329_5<=MOD)||LA329_5==FOLLOWMAX_END||LA329_5==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA329_25 = input.LA(2);
            	            if ( (LA329_25==LPAREN) ) {
            	                int LA329_177 = input.LA(3);
            	                if ( ((LA329_177>=STRING_LITERAL && LA329_177<=QUOTED_STRING_LITERAL)) ) {
            	                    alt329=1;
            	                }
            	            }
            	            else if ( (LA329_25==EOF||(LA329_25>=IN_SET && LA329_25<=NOT_EXPR)||(LA329_25>=WHERE && LA329_25<=AS)||(LA329_25>=ELSE && LA329_25<=FROM)||(LA329_25>=INNER && LA329_25<=FULL)||LA329_25==IS||(LA329_25>=GROUP && LA329_25<=HAVING)||LA329_25==ALL||LA329_25==OUTPUT||LA329_25==INSERT||(LA329_25>=ORDER && LA329_25<=DESC)||LA329_25==PATTERN||(LA329_25>=TIMEPERIOD_SEC && LA329_25<=TIMEPERIOD_SECONDS)||LA329_25==ROW_LIMIT_EXPR||(LA329_25>=MATCH_RECOGNIZE && LA329_25<=MEASURES)||(LA329_25>=AFTER && LA329_25<=FOR)||LA329_25==RCURLY||LA329_25==RPAREN||(LA329_25>=COMMA && LA329_25<=COLON)||(LA329_25>=BAND && LA329_25<=MOD)||LA329_25==FOLLOWMAX_END||LA329_25==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA329_40 = input.LA(2);
            	            if ( (LA329_40==EOF||(LA329_40>=IN_SET && LA329_40<=NOT_EXPR)||(LA329_40>=WHERE && LA329_40<=AS)||(LA329_40>=ELSE && LA329_40<=FROM)||(LA329_40>=INNER && LA329_40<=FULL)||LA329_40==IS||(LA329_40>=GROUP && LA329_40<=HAVING)||LA329_40==ALL||LA329_40==OUTPUT||LA329_40==INSERT||(LA329_40>=ORDER && LA329_40<=DESC)||LA329_40==PATTERN||(LA329_40>=TIMEPERIOD_SEC && LA329_40<=TIMEPERIOD_SECONDS)||LA329_40==ROW_LIMIT_EXPR||(LA329_40>=MATCH_RECOGNIZE && LA329_40<=MEASURES)||(LA329_40>=AFTER && LA329_40<=FOR)||(LA329_40>=RCURLY && LA329_40<=RPAREN)||(LA329_40>=COMMA && LA329_40<=COLON)||(LA329_40>=BAND && LA329_40<=MOD)||LA329_40==FOLLOWMAX_END||LA329_40==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA329_41 = input.LA(2);
            	            if ( (LA329_41==EOF||(LA329_41>=IN_SET && LA329_41<=NOT_EXPR)||(LA329_41>=WHERE && LA329_41<=AS)||(LA329_41>=ELSE && LA329_41<=FROM)||(LA329_41>=INNER && LA329_41<=FULL)||LA329_41==IS||(LA329_41>=GROUP && LA329_41<=HAVING)||LA329_41==ALL||LA329_41==OUTPUT||LA329_41==INSERT||(LA329_41>=ORDER && LA329_41<=DESC)||LA329_41==PATTERN||(LA329_41>=TIMEPERIOD_SEC && LA329_41<=TIMEPERIOD_SECONDS)||LA329_41==ROW_LIMIT_EXPR||(LA329_41>=MATCH_RECOGNIZE && LA329_41<=MEASURES)||(LA329_41>=AFTER && LA329_41<=FOR)||(LA329_41>=RCURLY && LA329_41<=RPAREN)||(LA329_41>=COMMA && LA329_41<=COLON)||(LA329_41>=BAND && LA329_41<=MOD)||LA329_41==FOLLOWMAX_END||LA329_41==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA329_43 = input.LA(2);
            	            if ( (LA329_43==EOF||(LA329_43>=IN_SET && LA329_43<=NOT_EXPR)||(LA329_43>=WHERE && LA329_43<=AS)||(LA329_43>=ELSE && LA329_43<=FROM)||(LA329_43>=INNER && LA329_43<=FULL)||LA329_43==IS||(LA329_43>=GROUP && LA329_43<=HAVING)||LA329_43==ALL||LA329_43==OUTPUT||LA329_43==INSERT||(LA329_43>=ORDER && LA329_43<=DESC)||LA329_43==PATTERN||(LA329_43>=TIMEPERIOD_SEC && LA329_43<=TIMEPERIOD_SECONDS)||LA329_43==ROW_LIMIT_EXPR||(LA329_43>=MATCH_RECOGNIZE && LA329_43<=MEASURES)||(LA329_43>=AFTER && LA329_43<=FOR)||(LA329_43>=RCURLY && LA329_43<=RPAREN)||(LA329_43>=COMMA && LA329_43<=COLON)||(LA329_43>=BAND && LA329_43<=MOD)||LA329_43==FOLLOWMAX_END||LA329_43==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA329_44 = input.LA(2);
            	            if ( (LA329_44==EOF||(LA329_44>=IN_SET && LA329_44<=NOT_EXPR)||(LA329_44>=WHERE && LA329_44<=AS)||(LA329_44>=ELSE && LA329_44<=FROM)||(LA329_44>=INNER && LA329_44<=FULL)||LA329_44==IS||(LA329_44>=GROUP && LA329_44<=HAVING)||LA329_44==ALL||LA329_44==OUTPUT||LA329_44==INSERT||(LA329_44>=ORDER && LA329_44<=DESC)||(LA329_44>=TIMEPERIOD_SEC && LA329_44<=TIMEPERIOD_SECONDS)||LA329_44==ROW_LIMIT_EXPR||(LA329_44>=MATCH_RECOGNIZE && LA329_44<=MEASURES)||(LA329_44>=AFTER && LA329_44<=FOR)||(LA329_44>=RCURLY && LA329_44<=RPAREN)||(LA329_44>=COMMA && LA329_44<=COLON)||(LA329_44>=BAND && LA329_44<=MOD)||LA329_44==FOLLOWMAX_END||LA329_44==ESCAPECHAR) ) {
            	                alt329=1;
            	            }
            	            else if ( (LA329_44==PATTERN) ) {
            	                int LA329_492 = input.LA(3);
            	                if ( (LA329_492==LPAREN) ) {
            	                    alt329=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt329) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12782);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop330;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT868=null;
        Token COUNT869=null;
        Token ESCAPE870=null;
        Token EVERY_EXPR871=null;
        Token SUM872=null;
        Token AVG873=null;
        Token MAX874=null;
        Token MIN875=null;
        Token COALESCE876=null;
        Token MEDIAN877=null;
        Token STDDEV878=null;
        Token AVEDEV879=null;
        Token EVENTS880=null;
        Token FIRST881=null;
        Token LAST882=null;
        Token WHILE883=null;
        Token MERGE884=null;
        Token MATCHED885=null;
        Token UNIDIRECTIONAL886=null;
        Token RETAINUNION887=null;
        Token RETAININTERSECTION888=null;
        Token UNTIL889=null;
        Token PATTERN890=null;
        Token SQL891=null;
        Token METADATASQL892=null;
        Token PREVIOUS893=null;
        Token PREVIOUSTAIL894=null;
        Token PRIOR895=null;
        Token WEEKDAY896=null;
        Token LW897=null;
        Token INSTANCEOF898=null;
        Token TYPEOF899=null;
        Token CAST900=null;
        Token SNAPSHOT901=null;
        Token VARIABLE902=null;
        Token INDEX903=null;
        Token WINDOW904=null;
        Token LEFT905=null;
        Token RIGHT906=null;
        Token OUTER907=null;
        Token FULL908=null;
        Token JOIN909=null;
        Token DEFINE910=null;
        Token PARTITION911=null;
        Token MATCHES912=null;
        Token CONTEXT913=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT868_tree=null;
        CommonTree COUNT869_tree=null;
        CommonTree ESCAPE870_tree=null;
        CommonTree EVERY_EXPR871_tree=null;
        CommonTree SUM872_tree=null;
        CommonTree AVG873_tree=null;
        CommonTree MAX874_tree=null;
        CommonTree MIN875_tree=null;
        CommonTree COALESCE876_tree=null;
        CommonTree MEDIAN877_tree=null;
        CommonTree STDDEV878_tree=null;
        CommonTree AVEDEV879_tree=null;
        CommonTree EVENTS880_tree=null;
        CommonTree FIRST881_tree=null;
        CommonTree LAST882_tree=null;
        CommonTree WHILE883_tree=null;
        CommonTree MERGE884_tree=null;
        CommonTree MATCHED885_tree=null;
        CommonTree UNIDIRECTIONAL886_tree=null;
        CommonTree RETAINUNION887_tree=null;
        CommonTree RETAININTERSECTION888_tree=null;
        CommonTree UNTIL889_tree=null;
        CommonTree PATTERN890_tree=null;
        CommonTree SQL891_tree=null;
        CommonTree METADATASQL892_tree=null;
        CommonTree PREVIOUS893_tree=null;
        CommonTree PREVIOUSTAIL894_tree=null;
        CommonTree PRIOR895_tree=null;
        CommonTree WEEKDAY896_tree=null;
        CommonTree LW897_tree=null;
        CommonTree INSTANCEOF898_tree=null;
        CommonTree TYPEOF899_tree=null;
        CommonTree CAST900_tree=null;
        CommonTree SNAPSHOT901_tree=null;
        CommonTree VARIABLE902_tree=null;
        CommonTree INDEX903_tree=null;
        CommonTree WINDOW904_tree=null;
        CommonTree LEFT905_tree=null;
        CommonTree RIGHT906_tree=null;
        CommonTree OUTER907_tree=null;
        CommonTree FULL908_tree=null;
        CommonTree JOIN909_tree=null;
        CommonTree DEFINE910_tree=null;
        CommonTree PARTITION911_tree=null;
        CommonTree MATCHES912_tree=null;
        CommonTree CONTEXT913_tree=null;
        try {
            int alt331=48;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt331=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt331=2;
                }
                break;
            case AT:
                {
                alt331=3;
                }
                break;
            case COUNT:
                {
                alt331=4;
                }
                break;
            case ESCAPE:
                {
                alt331=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt331=6;
                }
                break;
            case SUM:
                {
                alt331=7;
                }
                break;
            case AVG:
                {
                alt331=8;
                }
                break;
            case MAX:
                {
                alt331=9;
                }
                break;
            case MIN:
                {
                alt331=10;
                }
                break;
            case COALESCE:
                {
                alt331=11;
                }
                break;
            case MEDIAN:
                {
                alt331=12;
                }
                break;
            case STDDEV:
                {
                alt331=13;
                }
                break;
            case AVEDEV:
                {
                alt331=14;
                }
                break;
            case EVENTS:
                {
                alt331=15;
                }
                break;
            case FIRST:
                {
                alt331=16;
                }
                break;
            case LAST:
                {
                alt331=17;
                }
                break;
            case WHILE:
                {
                alt331=18;
                }
                break;
            case MERGE:
                {
                alt331=19;
                }
                break;
            case MATCHED:
                {
                alt331=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt331=21;
                }
                break;
            case RETAINUNION:
                {
                alt331=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt331=23;
                }
                break;
            case UNTIL:
                {
                alt331=24;
                }
                break;
            case PATTERN:
                {
                alt331=25;
                }
                break;
            case SQL:
                {
                alt331=26;
                }
                break;
            case METADATASQL:
                {
                alt331=27;
                }
                break;
            case PREVIOUS:
                {
                alt331=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt331=29;
                }
                break;
            case PRIOR:
                {
                alt331=30;
                }
                break;
            case WEEKDAY:
                {
                alt331=31;
                }
                break;
            case LW:
                {
                alt331=32;
                }
                break;
            case INSTANCEOF:
                {
                alt331=33;
                }
                break;
            case TYPEOF:
                {
                alt331=34;
                }
                break;
            case CAST:
                {
                alt331=35;
                }
                break;
            case SNAPSHOT:
                {
                alt331=36;
                }
                break;
            case VARIABLE:
                {
                alt331=37;
                }
                break;
            case INDEX:
                {
                alt331=38;
                }
                break;
            case WINDOW:
                {
                alt331=39;
                }
                break;
            case LEFT:
                {
                alt331=40;
                }
                break;
            case RIGHT:
                {
                alt331=41;
                }
                break;
            case OUTER:
                {
                alt331=42;
                }
                break;
            case FULL:
                {
                alt331=43;
                }
                break;
            case JOIN:
                {
                alt331=44;
                }
                break;
            case DEFINE:
                {
                alt331=45;
                }
                break;
            case PARTITION:
                {
                alt331=46;
                }
                break;
            case MATCHES:
                {
                alt331=47;
                }
                break;
            case CONTEXT:
                {
                alt331=48;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);
                throw nvae;
            }
            switch (alt331) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent12821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT868=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent12837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT868_tree = (CommonTree)adaptor.create(AT868);
                    adaptor.addChild(root_0, AT868_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT869=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent12844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT869_tree = (CommonTree)adaptor.create(COUNT869);
                    adaptor.addChild(root_0, COUNT869_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE870=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent12851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE870_tree = (CommonTree)adaptor.create(ESCAPE870);
                    adaptor.addChild(root_0, ESCAPE870_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR871=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR871_tree = (CommonTree)adaptor.create(EVERY_EXPR871);
                    adaptor.addChild(root_0, EVERY_EXPR871_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM872=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent12869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM872_tree = (CommonTree)adaptor.create(SUM872);
                    adaptor.addChild(root_0, SUM872_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG873=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent12876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG873_tree = (CommonTree)adaptor.create(AVG873);
                    adaptor.addChild(root_0, AVG873_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX874=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent12883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX874_tree = (CommonTree)adaptor.create(MAX874);
                    adaptor.addChild(root_0, MAX874_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN875=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent12890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN875_tree = (CommonTree)adaptor.create(MIN875);
                    adaptor.addChild(root_0, MIN875_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE876=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent12897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE876_tree = (CommonTree)adaptor.create(COALESCE876);
                    adaptor.addChild(root_0, COALESCE876_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN877=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent12904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN877_tree = (CommonTree)adaptor.create(MEDIAN877);
                    adaptor.addChild(root_0, MEDIAN877_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV878=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent12911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV878_tree = (CommonTree)adaptor.create(STDDEV878);
                    adaptor.addChild(root_0, STDDEV878_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV879=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent12918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV879_tree = (CommonTree)adaptor.create(AVEDEV879);
                    adaptor.addChild(root_0, AVEDEV879_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS880=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent12925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS880_tree = (CommonTree)adaptor.create(EVENTS880);
                    adaptor.addChild(root_0, EVENTS880_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST881=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent12932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST881_tree = (CommonTree)adaptor.create(FIRST881);
                    adaptor.addChild(root_0, FIRST881_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST882=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent12939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST882_tree = (CommonTree)adaptor.create(LAST882);
                    adaptor.addChild(root_0, LAST882_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE883=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent12946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE883_tree = (CommonTree)adaptor.create(WHILE883);
                    adaptor.addChild(root_0, WHILE883_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE884=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent12953); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE884_tree = (CommonTree)adaptor.create(MERGE884);
                    adaptor.addChild(root_0, MERGE884_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED885=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent12960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED885_tree = (CommonTree)adaptor.create(MATCHED885);
                    adaptor.addChild(root_0, MATCHED885_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL886=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL886_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL886);
                    adaptor.addChild(root_0, UNIDIRECTIONAL886_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION887=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent12974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION887_tree = (CommonTree)adaptor.create(RETAINUNION887);
                    adaptor.addChild(root_0, RETAINUNION887_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION888=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION888_tree = (CommonTree)adaptor.create(RETAININTERSECTION888);
                    adaptor.addChild(root_0, RETAININTERSECTION888_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL889=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent12988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL889_tree = (CommonTree)adaptor.create(UNTIL889);
                    adaptor.addChild(root_0, UNTIL889_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN890=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent12995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN890_tree = (CommonTree)adaptor.create(PATTERN890);
                    adaptor.addChild(root_0, PATTERN890_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL891=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent13002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL891_tree = (CommonTree)adaptor.create(SQL891);
                    adaptor.addChild(root_0, SQL891_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL892=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent13009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL892_tree = (CommonTree)adaptor.create(METADATASQL892);
                    adaptor.addChild(root_0, METADATASQL892_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS893=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent13016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS893_tree = (CommonTree)adaptor.create(PREVIOUS893);
                    adaptor.addChild(root_0, PREVIOUS893_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL894=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL894_tree = (CommonTree)adaptor.create(PREVIOUSTAIL894);
                    adaptor.addChild(root_0, PREVIOUSTAIL894_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR895=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent13030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR895_tree = (CommonTree)adaptor.create(PRIOR895);
                    adaptor.addChild(root_0, PRIOR895_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY896=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent13037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY896_tree = (CommonTree)adaptor.create(WEEKDAY896);
                    adaptor.addChild(root_0, WEEKDAY896_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW897=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent13044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW897_tree = (CommonTree)adaptor.create(LW897);
                    adaptor.addChild(root_0, LW897_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF898=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent13051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF898_tree = (CommonTree)adaptor.create(INSTANCEOF898);
                    adaptor.addChild(root_0, INSTANCEOF898_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF899=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent13058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF899_tree = (CommonTree)adaptor.create(TYPEOF899);
                    adaptor.addChild(root_0, TYPEOF899_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST900=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent13065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST900_tree = (CommonTree)adaptor.create(CAST900);
                    adaptor.addChild(root_0, CAST900_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT901=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent13072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT901_tree = (CommonTree)adaptor.create(SNAPSHOT901);
                    adaptor.addChild(root_0, SNAPSHOT901_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE902=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent13079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE902_tree = (CommonTree)adaptor.create(VARIABLE902);
                    adaptor.addChild(root_0, VARIABLE902_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX903=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent13088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX903_tree = (CommonTree)adaptor.create(INDEX903);
                    adaptor.addChild(root_0, INDEX903_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW904=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent13097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW904_tree = (CommonTree)adaptor.create(WINDOW904);
                    adaptor.addChild(root_0, WINDOW904_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT905=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent13104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT905_tree = (CommonTree)adaptor.create(LEFT905);
                    adaptor.addChild(root_0, LEFT905_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT906=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent13111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT906_tree = (CommonTree)adaptor.create(RIGHT906);
                    adaptor.addChild(root_0, RIGHT906_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER907=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent13118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER907_tree = (CommonTree)adaptor.create(OUTER907);
                    adaptor.addChild(root_0, OUTER907_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL908=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent13125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL908_tree = (CommonTree)adaptor.create(FULL908);
                    adaptor.addChild(root_0, FULL908_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN909=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent13132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN909_tree = (CommonTree)adaptor.create(JOIN909);
                    adaptor.addChild(root_0, JOIN909_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE910=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent13139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE910_tree = (CommonTree)adaptor.create(DEFINE910);
                    adaptor.addChild(root_0, DEFINE910_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION911=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent13146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION911_tree = (CommonTree)adaptor.create(PARTITION911);
                    adaptor.addChild(root_0, PARTITION911_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES912=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent13153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES912_tree = (CommonTree)adaptor.create(MATCHES912);
                    adaptor.addChild(root_0, MATCHES912_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
                case 48 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CONTEXT913=(Token)match(input,CONTEXT,FOLLOW_CONTEXT_in_keywordAllowedIdent13160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CONTEXT913_tree = (CommonTree)adaptor.create(CONTEXT913);
                    adaptor.addChild(root_0, CONTEXT913_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "context"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt332=2;
            int LA332_0 = input.LA(1);
            if ( (LA332_0==IDENT) ) {
                alt332=1;
            }
            else if ( (LA332_0==TICKED_STRING_LITERAL) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);
                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr13181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT914=null;
        CommonTree t_tree=null;
        CommonTree IDENT914_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt333=2;
            int LA333_0 = input.LA(1);
            if ( (LA333_0==IDENT) ) {
                alt333=1;
            }
            else if ( (LA333_0==TICKED_STRING_LITERAL) ) {
                alt333=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);
                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT914=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent13204); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT914_tree = (CommonTree)adaptor.create(IDENT914);
                    adaptor.addChild(root_0, IDENT914_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart915 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart916 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart917 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart918 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart919 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart920 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart921 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart922 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart923 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart924 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart925 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart926 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart927 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart928 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart929 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart930 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart931 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart932 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart933 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart934 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart935 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart936 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart937 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart938 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart939 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart940 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart941 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart942 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart943 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart944 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart945 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart946 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart947 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart948 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart949 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart950 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt362=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt362=5;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt362=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt362=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt362=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt362=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt362=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt362=6;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt362=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 362, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt362=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt362=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt362=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt362=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt362=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt362=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt362=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt362=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 362, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);
                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod13237);
                    yearPart915=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart915.getTree());
                    int alt334=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_24 = input.LA(3);
                                    if ( ((LA334_24>=TIMEPERIOD_MONTH && LA334_24<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_25 = input.LA(3);
                                    if ( ((LA334_25>=TIMEPERIOD_MONTH && LA334_25<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_26 = input.LA(3);
                                    if ( ((LA334_26>=TIMEPERIOD_MONTH && LA334_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_27 = input.LA(3);
                                    if ( ((LA334_27>=TIMEPERIOD_MONTH && LA334_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_28 = input.LA(3);
                                    if ( ((LA334_28>=TIMEPERIOD_MONTH && LA334_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_29 = input.LA(3);
                                    if ( ((LA334_29>=TIMEPERIOD_MONTH && LA334_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_30 = input.LA(3);
                                    if ( ((LA334_30>=TIMEPERIOD_MONTH && LA334_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_31 = input.LA(3);
                                    if ( ((LA334_31>=TIMEPERIOD_MONTH && LA334_31<=TIMEPERIOD_MONTHS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA334_3 = input.LA(2);
                            if ( ((LA334_3>=TIMEPERIOD_MONTH && LA334_3<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA334_4 = input.LA(2);
                            if ( ((LA334_4>=TIMEPERIOD_MONTH && LA334_4<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA334_5 = input.LA(2);
                            if ( ((LA334_5>=TIMEPERIOD_MONTH && LA334_5<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA334_6 = input.LA(2);
                            if ( ((LA334_6>=TIMEPERIOD_MONTH && LA334_6<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA334_7 = input.LA(2);
                            if ( ((LA334_7>=TIMEPERIOD_MONTH && LA334_7<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA334_8 = input.LA(2);
                            if ( ((LA334_8>=TIMEPERIOD_MONTH && LA334_8<=TIMEPERIOD_MONTHS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod13239);
                            monthPart916=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart916.getTree());
                            }
                            break;
                    }
                    int alt335=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_24 = input.LA(3);
                                    if ( ((LA335_24>=TIMEPERIOD_WEEK && LA335_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_25 = input.LA(3);
                                    if ( ((LA335_25>=TIMEPERIOD_WEEK && LA335_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_26 = input.LA(3);
                                    if ( ((LA335_26>=TIMEPERIOD_WEEK && LA335_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_27 = input.LA(3);
                                    if ( ((LA335_27>=TIMEPERIOD_WEEK && LA335_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_28 = input.LA(3);
                                    if ( ((LA335_28>=TIMEPERIOD_WEEK && LA335_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_29 = input.LA(3);
                                    if ( ((LA335_29>=TIMEPERIOD_WEEK && LA335_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_30 = input.LA(3);
                                    if ( ((LA335_30>=TIMEPERIOD_WEEK && LA335_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_31 = input.LA(3);
                                    if ( ((LA335_31>=TIMEPERIOD_WEEK && LA335_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA335_3 = input.LA(2);
                            if ( ((LA335_3>=TIMEPERIOD_WEEK && LA335_3<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA335_4 = input.LA(2);
                            if ( ((LA335_4>=TIMEPERIOD_WEEK && LA335_4<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA335_5 = input.LA(2);
                            if ( ((LA335_5>=TIMEPERIOD_WEEK && LA335_5<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA335_6 = input.LA(2);
                            if ( ((LA335_6>=TIMEPERIOD_WEEK && LA335_6<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA335_7 = input.LA(2);
                            if ( ((LA335_7>=TIMEPERIOD_WEEK && LA335_7<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA335_8 = input.LA(2);
                            if ( ((LA335_8>=TIMEPERIOD_WEEK && LA335_8<=TIMEPERIOD_WEEKS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13242);
                            weekPart917=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart917.getTree());
                            }
                            break;
                    }
                    int alt336=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_24 = input.LA(3);
                                    if ( ((LA336_24>=TIMEPERIOD_DAY && LA336_24<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_25 = input.LA(3);
                                    if ( ((LA336_25>=TIMEPERIOD_DAY && LA336_25<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_26 = input.LA(3);
                                    if ( ((LA336_26>=TIMEPERIOD_DAY && LA336_26<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_27 = input.LA(3);
                                    if ( ((LA336_27>=TIMEPERIOD_DAY && LA336_27<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_28 = input.LA(3);
                                    if ( ((LA336_28>=TIMEPERIOD_DAY && LA336_28<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_29 = input.LA(3);
                                    if ( ((LA336_29>=TIMEPERIOD_DAY && LA336_29<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_30 = input.LA(3);
                                    if ( ((LA336_30>=TIMEPERIOD_DAY && LA336_30<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_31 = input.LA(3);
                                    if ( ((LA336_31>=TIMEPERIOD_DAY && LA336_31<=TIMEPERIOD_DAYS)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA336_3 = input.LA(2);
                            if ( ((LA336_3>=TIMEPERIOD_DAY && LA336_3<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA336_4 = input.LA(2);
                            if ( ((LA336_4>=TIMEPERIOD_DAY && LA336_4<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA336_5 = input.LA(2);
                            if ( ((LA336_5>=TIMEPERIOD_DAY && LA336_5<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA336_6 = input.LA(2);
                            if ( ((LA336_6>=TIMEPERIOD_DAY && LA336_6<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA336_7 = input.LA(2);
                            if ( ((LA336_7>=TIMEPERIOD_DAY && LA336_7<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA336_8 = input.LA(2);
                            if ( ((LA336_8>=TIMEPERIOD_DAY && LA336_8<=TIMEPERIOD_DAYS)) ) {
                                alt336=1;
                            }
                            }
                            break;
                    }
                    switch (alt336) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13245);
                            dayPart918=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart918.getTree());
                            }
                            break;
                    }
                    int alt337=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_24 = input.LA(3);
                                    if ( ((LA337_24>=TIMEPERIOD_HOUR && LA337_24<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_25 = input.LA(3);
                                    if ( ((LA337_25>=TIMEPERIOD_HOUR && LA337_25<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_26 = input.LA(3);
                                    if ( ((LA337_26>=TIMEPERIOD_HOUR && LA337_26<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_27 = input.LA(3);
                                    if ( ((LA337_27>=TIMEPERIOD_HOUR && LA337_27<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_28 = input.LA(3);
                                    if ( ((LA337_28>=TIMEPERIOD_HOUR && LA337_28<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_29 = input.LA(3);
                                    if ( ((LA337_29>=TIMEPERIOD_HOUR && LA337_29<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_30 = input.LA(3);
                                    if ( ((LA337_30>=TIMEPERIOD_HOUR && LA337_30<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_31 = input.LA(3);
                                    if ( ((LA337_31>=TIMEPERIOD_HOUR && LA337_31<=TIMEPERIOD_HOURS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA337_3 = input.LA(2);
                            if ( ((LA337_3>=TIMEPERIOD_HOUR && LA337_3<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA337_4 = input.LA(2);
                            if ( ((LA337_4>=TIMEPERIOD_HOUR && LA337_4<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA337_5 = input.LA(2);
                            if ( ((LA337_5>=TIMEPERIOD_HOUR && LA337_5<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA337_6 = input.LA(2);
                            if ( ((LA337_6>=TIMEPERIOD_HOUR && LA337_6<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA337_7 = input.LA(2);
                            if ( ((LA337_7>=TIMEPERIOD_HOUR && LA337_7<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA337_8 = input.LA(2);
                            if ( ((LA337_8>=TIMEPERIOD_HOUR && LA337_8<=TIMEPERIOD_HOURS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                    }
                    switch (alt337) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13248);
                            hourPart919=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart919.getTree());
                            }
                            break;
                    }
                    int alt338=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA338_24 = input.LA(3);
                                    if ( (LA338_24==MIN||(LA338_24>=TIMEPERIOD_MINUTE && LA338_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA338_25 = input.LA(3);
                                    if ( (LA338_25==MIN||(LA338_25>=TIMEPERIOD_MINUTE && LA338_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA338_26 = input.LA(3);
                                    if ( (LA338_26==MIN||(LA338_26>=TIMEPERIOD_MINUTE && LA338_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA338_27 = input.LA(3);
                                    if ( (LA338_27==MIN||(LA338_27>=TIMEPERIOD_MINUTE && LA338_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA338_28 = input.LA(3);
                                    if ( (LA338_28==MIN||(LA338_28>=TIMEPERIOD_MINUTE && LA338_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA338_29 = input.LA(3);
                                    if ( (LA338_29==MIN||(LA338_29>=TIMEPERIOD_MINUTE && LA338_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA338_30 = input.LA(3);
                                    if ( (LA338_30==MIN||(LA338_30>=TIMEPERIOD_MINUTE && LA338_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA338_31 = input.LA(3);
                                    if ( (LA338_31==MIN||(LA338_31>=TIMEPERIOD_MINUTE && LA338_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt338=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA338_3 = input.LA(2);
                            if ( (LA338_3==MIN||(LA338_3>=TIMEPERIOD_MINUTE && LA338_3<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA338_4 = input.LA(2);
                            if ( (LA338_4==MIN||(LA338_4>=TIMEPERIOD_MINUTE && LA338_4<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA338_5 = input.LA(2);
                            if ( (LA338_5==MIN||(LA338_5>=TIMEPERIOD_MINUTE && LA338_5<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA338_6 = input.LA(2);
                            if ( (LA338_6==MIN||(LA338_6>=TIMEPERIOD_MINUTE && LA338_6<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA338_7 = input.LA(2);
                            if ( (LA338_7==MIN||(LA338_7>=TIMEPERIOD_MINUTE && LA338_7<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA338_8 = input.LA(2);
                            if ( (LA338_8==MIN||(LA338_8>=TIMEPERIOD_MINUTE && LA338_8<=TIMEPERIOD_MINUTES)) ) {
                                alt338=1;
                            }
                            }
                            break;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13251);
                            minutePart920=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart920.getTree());
                            }
                            break;
                    }
                    int alt339=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_24 = input.LA(3);
                                    if ( ((LA339_24>=TIMEPERIOD_SEC && LA339_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_25 = input.LA(3);
                                    if ( ((LA339_25>=TIMEPERIOD_SEC && LA339_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_26 = input.LA(3);
                                    if ( ((LA339_26>=TIMEPERIOD_SEC && LA339_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_27 = input.LA(3);
                                    if ( ((LA339_27>=TIMEPERIOD_SEC && LA339_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_28 = input.LA(3);
                                    if ( ((LA339_28>=TIMEPERIOD_SEC && LA339_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_29 = input.LA(3);
                                    if ( ((LA339_29>=TIMEPERIOD_SEC && LA339_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_30 = input.LA(3);
                                    if ( ((LA339_30>=TIMEPERIOD_SEC && LA339_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_31 = input.LA(3);
                                    if ( ((LA339_31>=TIMEPERIOD_SEC && LA339_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA339_3 = input.LA(2);
                            if ( ((LA339_3>=TIMEPERIOD_SEC && LA339_3<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA339_4 = input.LA(2);
                            if ( ((LA339_4>=TIMEPERIOD_SEC && LA339_4<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA339_5 = input.LA(2);
                            if ( ((LA339_5>=TIMEPERIOD_SEC && LA339_5<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA339_6 = input.LA(2);
                            if ( ((LA339_6>=TIMEPERIOD_SEC && LA339_6<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA339_7 = input.LA(2);
                            if ( ((LA339_7>=TIMEPERIOD_SEC && LA339_7<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA339_8 = input.LA(2);
                            if ( ((LA339_8>=TIMEPERIOD_SEC && LA339_8<=TIMEPERIOD_SECONDS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                    }
                    switch (alt339) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13254);
                            secondPart921=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart921.getTree());
                            }
                            break;
                    }
                    int alt340=2;
                    int LA340_0 = input.LA(1);
                    if ( (LA340_0==NUM_DOUBLE||LA340_0==IDENT||(LA340_0>=PLUS && LA340_0<=QUESTION)||LA340_0==MINUS||LA340_0==NUM_INT||(LA340_0>=NUM_LONG && LA340_0<=NUM_FLOAT)) ) {
                        alt340=1;
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13257);
                            millisecondPart922=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart922.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod13263);
                    monthPart923=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart923.getTree());
                    int alt341=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_24 = input.LA(3);
                                    if ( ((LA341_24>=TIMEPERIOD_WEEK && LA341_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_25 = input.LA(3);
                                    if ( ((LA341_25>=TIMEPERIOD_WEEK && LA341_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_26 = input.LA(3);
                                    if ( ((LA341_26>=TIMEPERIOD_WEEK && LA341_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_27 = input.LA(3);
                                    if ( ((LA341_27>=TIMEPERIOD_WEEK && LA341_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_28 = input.LA(3);
                                    if ( ((LA341_28>=TIMEPERIOD_WEEK && LA341_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_29 = input.LA(3);
                                    if ( ((LA341_29>=TIMEPERIOD_WEEK && LA341_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_30 = input.LA(3);
                                    if ( ((LA341_30>=TIMEPERIOD_WEEK && LA341_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_31 = input.LA(3);
                                    if ( ((LA341_31>=TIMEPERIOD_WEEK && LA341_31<=TIMEPERIOD_WEEKS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA341_3 = input.LA(2);
                            if ( ((LA341_3>=TIMEPERIOD_WEEK && LA341_3<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA341_4 = input.LA(2);
                            if ( ((LA341_4>=TIMEPERIOD_WEEK && LA341_4<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA341_5 = input.LA(2);
                            if ( ((LA341_5>=TIMEPERIOD_WEEK && LA341_5<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA341_6 = input.LA(2);
                            if ( ((LA341_6>=TIMEPERIOD_WEEK && LA341_6<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA341_7 = input.LA(2);
                            if ( ((LA341_7>=TIMEPERIOD_WEEK && LA341_7<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA341_8 = input.LA(2);
                            if ( ((LA341_8>=TIMEPERIOD_WEEK && LA341_8<=TIMEPERIOD_WEEKS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                    }
                    switch (alt341) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod13265);
                            weekPart924=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart924.getTree());
                            }
                            break;
                    }
                    int alt342=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA342_24 = input.LA(3);
                                    if ( ((LA342_24>=TIMEPERIOD_DAY && LA342_24<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA342_25 = input.LA(3);
                                    if ( ((LA342_25>=TIMEPERIOD_DAY && LA342_25<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA342_26 = input.LA(3);
                                    if ( ((LA342_26>=TIMEPERIOD_DAY && LA342_26<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA342_27 = input.LA(3);
                                    if ( ((LA342_27>=TIMEPERIOD_DAY && LA342_27<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA342_28 = input.LA(3);
                                    if ( ((LA342_28>=TIMEPERIOD_DAY && LA342_28<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA342_29 = input.LA(3);
                                    if ( ((LA342_29>=TIMEPERIOD_DAY && LA342_29<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA342_30 = input.LA(3);
                                    if ( ((LA342_30>=TIMEPERIOD_DAY && LA342_30<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA342_31 = input.LA(3);
                                    if ( ((LA342_31>=TIMEPERIOD_DAY && LA342_31<=TIMEPERIOD_DAYS)) ) {
                                        alt342=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA342_3 = input.LA(2);
                            if ( ((LA342_3>=TIMEPERIOD_DAY && LA342_3<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA342_4 = input.LA(2);
                            if ( ((LA342_4>=TIMEPERIOD_DAY && LA342_4<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA342_5 = input.LA(2);
                            if ( ((LA342_5>=TIMEPERIOD_DAY && LA342_5<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA342_6 = input.LA(2);
                            if ( ((LA342_6>=TIMEPERIOD_DAY && LA342_6<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA342_7 = input.LA(2);
                            if ( ((LA342_7>=TIMEPERIOD_DAY && LA342_7<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA342_8 = input.LA(2);
                            if ( ((LA342_8>=TIMEPERIOD_DAY && LA342_8<=TIMEPERIOD_DAYS)) ) {
                                alt342=1;
                            }
                            }
                            break;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13268);
                            dayPart925=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart925.getTree());
                            }
                            break;
                    }
                    int alt343=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_24 = input.LA(3);
                                    if ( ((LA343_24>=TIMEPERIOD_HOUR && LA343_24<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_25 = input.LA(3);
                                    if ( ((LA343_25>=TIMEPERIOD_HOUR && LA343_25<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_26 = input.LA(3);
                                    if ( ((LA343_26>=TIMEPERIOD_HOUR && LA343_26<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_27 = input.LA(3);
                                    if ( ((LA343_27>=TIMEPERIOD_HOUR && LA343_27<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_28 = input.LA(3);
                                    if ( ((LA343_28>=TIMEPERIOD_HOUR && LA343_28<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_29 = input.LA(3);
                                    if ( ((LA343_29>=TIMEPERIOD_HOUR && LA343_29<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_30 = input.LA(3);
                                    if ( ((LA343_30>=TIMEPERIOD_HOUR && LA343_30<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_31 = input.LA(3);
                                    if ( ((LA343_31>=TIMEPERIOD_HOUR && LA343_31<=TIMEPERIOD_HOURS)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA343_3 = input.LA(2);
                            if ( ((LA343_3>=TIMEPERIOD_HOUR && LA343_3<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA343_4 = input.LA(2);
                            if ( ((LA343_4>=TIMEPERIOD_HOUR && LA343_4<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA343_5 = input.LA(2);
                            if ( ((LA343_5>=TIMEPERIOD_HOUR && LA343_5<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA343_6 = input.LA(2);
                            if ( ((LA343_6>=TIMEPERIOD_HOUR && LA343_6<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA343_7 = input.LA(2);
                            if ( ((LA343_7>=TIMEPERIOD_HOUR && LA343_7<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA343_8 = input.LA(2);
                            if ( ((LA343_8>=TIMEPERIOD_HOUR && LA343_8<=TIMEPERIOD_HOURS)) ) {
                                alt343=1;
                            }
                            }
                            break;
                    }
                    switch (alt343) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13271);
                            hourPart926=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart926.getTree());
                            }
                            break;
                    }
                    int alt344=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA344_24 = input.LA(3);
                                    if ( (LA344_24==MIN||(LA344_24>=TIMEPERIOD_MINUTE && LA344_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA344_25 = input.LA(3);
                                    if ( (LA344_25==MIN||(LA344_25>=TIMEPERIOD_MINUTE && LA344_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA344_26 = input.LA(3);
                                    if ( (LA344_26==MIN||(LA344_26>=TIMEPERIOD_MINUTE && LA344_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA344_27 = input.LA(3);
                                    if ( (LA344_27==MIN||(LA344_27>=TIMEPERIOD_MINUTE && LA344_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA344_28 = input.LA(3);
                                    if ( (LA344_28==MIN||(LA344_28>=TIMEPERIOD_MINUTE && LA344_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA344_29 = input.LA(3);
                                    if ( (LA344_29==MIN||(LA344_29>=TIMEPERIOD_MINUTE && LA344_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA344_30 = input.LA(3);
                                    if ( (LA344_30==MIN||(LA344_30>=TIMEPERIOD_MINUTE && LA344_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA344_31 = input.LA(3);
                                    if ( (LA344_31==MIN||(LA344_31>=TIMEPERIOD_MINUTE && LA344_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA344_3 = input.LA(2);
                            if ( (LA344_3==MIN||(LA344_3>=TIMEPERIOD_MINUTE && LA344_3<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA344_4 = input.LA(2);
                            if ( (LA344_4==MIN||(LA344_4>=TIMEPERIOD_MINUTE && LA344_4<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA344_5 = input.LA(2);
                            if ( (LA344_5==MIN||(LA344_5>=TIMEPERIOD_MINUTE && LA344_5<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA344_6 = input.LA(2);
                            if ( (LA344_6==MIN||(LA344_6>=TIMEPERIOD_MINUTE && LA344_6<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA344_7 = input.LA(2);
                            if ( (LA344_7==MIN||(LA344_7>=TIMEPERIOD_MINUTE && LA344_7<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA344_8 = input.LA(2);
                            if ( (LA344_8==MIN||(LA344_8>=TIMEPERIOD_MINUTE && LA344_8<=TIMEPERIOD_MINUTES)) ) {
                                alt344=1;
                            }
                            }
                            break;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13274);
                            minutePart927=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart927.getTree());
                            }
                            break;
                    }
                    int alt345=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA345_24 = input.LA(3);
                                    if ( ((LA345_24>=TIMEPERIOD_SEC && LA345_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA345_25 = input.LA(3);
                                    if ( ((LA345_25>=TIMEPERIOD_SEC && LA345_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA345_26 = input.LA(3);
                                    if ( ((LA345_26>=TIMEPERIOD_SEC && LA345_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA345_27 = input.LA(3);
                                    if ( ((LA345_27>=TIMEPERIOD_SEC && LA345_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA345_28 = input.LA(3);
                                    if ( ((LA345_28>=TIMEPERIOD_SEC && LA345_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA345_29 = input.LA(3);
                                    if ( ((LA345_29>=TIMEPERIOD_SEC && LA345_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA345_30 = input.LA(3);
                                    if ( ((LA345_30>=TIMEPERIOD_SEC && LA345_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA345_31 = input.LA(3);
                                    if ( ((LA345_31>=TIMEPERIOD_SEC && LA345_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt345=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA345_3 = input.LA(2);
                            if ( ((LA345_3>=TIMEPERIOD_SEC && LA345_3<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA345_4 = input.LA(2);
                            if ( ((LA345_4>=TIMEPERIOD_SEC && LA345_4<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA345_5 = input.LA(2);
                            if ( ((LA345_5>=TIMEPERIOD_SEC && LA345_5<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA345_6 = input.LA(2);
                            if ( ((LA345_6>=TIMEPERIOD_SEC && LA345_6<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA345_7 = input.LA(2);
                            if ( ((LA345_7>=TIMEPERIOD_SEC && LA345_7<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA345_8 = input.LA(2);
                            if ( ((LA345_8>=TIMEPERIOD_SEC && LA345_8<=TIMEPERIOD_SECONDS)) ) {
                                alt345=1;
                            }
                            }
                            break;
                    }
                    switch (alt345) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13277);
                            secondPart928=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart928.getTree());
                            }
                            break;
                    }
                    int alt346=2;
                    int LA346_0 = input.LA(1);
                    if ( (LA346_0==NUM_DOUBLE||LA346_0==IDENT||(LA346_0>=PLUS && LA346_0<=QUESTION)||LA346_0==MINUS||LA346_0==NUM_INT||(LA346_0>=NUM_LONG && LA346_0<=NUM_FLOAT)) ) {
                        alt346=1;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13280);
                            millisecondPart929=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart929.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod13286);
                    weekPart930=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart930.getTree());
                    int alt347=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA347_24 = input.LA(3);
                                    if ( ((LA347_24>=TIMEPERIOD_DAY && LA347_24<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA347_25 = input.LA(3);
                                    if ( ((LA347_25>=TIMEPERIOD_DAY && LA347_25<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA347_26 = input.LA(3);
                                    if ( ((LA347_26>=TIMEPERIOD_DAY && LA347_26<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA347_27 = input.LA(3);
                                    if ( ((LA347_27>=TIMEPERIOD_DAY && LA347_27<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA347_28 = input.LA(3);
                                    if ( ((LA347_28>=TIMEPERIOD_DAY && LA347_28<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA347_29 = input.LA(3);
                                    if ( ((LA347_29>=TIMEPERIOD_DAY && LA347_29<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA347_30 = input.LA(3);
                                    if ( ((LA347_30>=TIMEPERIOD_DAY && LA347_30<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA347_31 = input.LA(3);
                                    if ( ((LA347_31>=TIMEPERIOD_DAY && LA347_31<=TIMEPERIOD_DAYS)) ) {
                                        alt347=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA347_3 = input.LA(2);
                            if ( ((LA347_3>=TIMEPERIOD_DAY && LA347_3<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA347_4 = input.LA(2);
                            if ( ((LA347_4>=TIMEPERIOD_DAY && LA347_4<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA347_5 = input.LA(2);
                            if ( ((LA347_5>=TIMEPERIOD_DAY && LA347_5<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA347_6 = input.LA(2);
                            if ( ((LA347_6>=TIMEPERIOD_DAY && LA347_6<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA347_7 = input.LA(2);
                            if ( ((LA347_7>=TIMEPERIOD_DAY && LA347_7<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA347_8 = input.LA(2);
                            if ( ((LA347_8>=TIMEPERIOD_DAY && LA347_8<=TIMEPERIOD_DAYS)) ) {
                                alt347=1;
                            }
                            }
                            break;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod13288);
                            dayPart931=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart931.getTree());
                            }
                            break;
                    }
                    int alt348=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA348_24 = input.LA(3);
                                    if ( ((LA348_24>=TIMEPERIOD_HOUR && LA348_24<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA348_25 = input.LA(3);
                                    if ( ((LA348_25>=TIMEPERIOD_HOUR && LA348_25<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA348_26 = input.LA(3);
                                    if ( ((LA348_26>=TIMEPERIOD_HOUR && LA348_26<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA348_27 = input.LA(3);
                                    if ( ((LA348_27>=TIMEPERIOD_HOUR && LA348_27<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA348_28 = input.LA(3);
                                    if ( ((LA348_28>=TIMEPERIOD_HOUR && LA348_28<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA348_29 = input.LA(3);
                                    if ( ((LA348_29>=TIMEPERIOD_HOUR && LA348_29<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA348_30 = input.LA(3);
                                    if ( ((LA348_30>=TIMEPERIOD_HOUR && LA348_30<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA348_31 = input.LA(3);
                                    if ( ((LA348_31>=TIMEPERIOD_HOUR && LA348_31<=TIMEPERIOD_HOURS)) ) {
                                        alt348=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA348_3 = input.LA(2);
                            if ( ((LA348_3>=TIMEPERIOD_HOUR && LA348_3<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA348_4 = input.LA(2);
                            if ( ((LA348_4>=TIMEPERIOD_HOUR && LA348_4<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA348_5 = input.LA(2);
                            if ( ((LA348_5>=TIMEPERIOD_HOUR && LA348_5<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA348_6 = input.LA(2);
                            if ( ((LA348_6>=TIMEPERIOD_HOUR && LA348_6<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA348_7 = input.LA(2);
                            if ( ((LA348_7>=TIMEPERIOD_HOUR && LA348_7<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA348_8 = input.LA(2);
                            if ( ((LA348_8>=TIMEPERIOD_HOUR && LA348_8<=TIMEPERIOD_HOURS)) ) {
                                alt348=1;
                            }
                            }
                            break;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13291);
                            hourPart932=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart932.getTree());
                            }
                            break;
                    }
                    int alt349=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA349_24 = input.LA(3);
                                    if ( (LA349_24==MIN||(LA349_24>=TIMEPERIOD_MINUTE && LA349_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA349_25 = input.LA(3);
                                    if ( (LA349_25==MIN||(LA349_25>=TIMEPERIOD_MINUTE && LA349_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA349_26 = input.LA(3);
                                    if ( (LA349_26==MIN||(LA349_26>=TIMEPERIOD_MINUTE && LA349_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA349_27 = input.LA(3);
                                    if ( (LA349_27==MIN||(LA349_27>=TIMEPERIOD_MINUTE && LA349_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA349_28 = input.LA(3);
                                    if ( (LA349_28==MIN||(LA349_28>=TIMEPERIOD_MINUTE && LA349_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA349_29 = input.LA(3);
                                    if ( (LA349_29==MIN||(LA349_29>=TIMEPERIOD_MINUTE && LA349_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA349_30 = input.LA(3);
                                    if ( (LA349_30==MIN||(LA349_30>=TIMEPERIOD_MINUTE && LA349_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA349_31 = input.LA(3);
                                    if ( (LA349_31==MIN||(LA349_31>=TIMEPERIOD_MINUTE && LA349_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt349=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA349_3 = input.LA(2);
                            if ( (LA349_3==MIN||(LA349_3>=TIMEPERIOD_MINUTE && LA349_3<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA349_4 = input.LA(2);
                            if ( (LA349_4==MIN||(LA349_4>=TIMEPERIOD_MINUTE && LA349_4<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA349_5 = input.LA(2);
                            if ( (LA349_5==MIN||(LA349_5>=TIMEPERIOD_MINUTE && LA349_5<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA349_6 = input.LA(2);
                            if ( (LA349_6==MIN||(LA349_6>=TIMEPERIOD_MINUTE && LA349_6<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA349_7 = input.LA(2);
                            if ( (LA349_7==MIN||(LA349_7>=TIMEPERIOD_MINUTE && LA349_7<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA349_8 = input.LA(2);
                            if ( (LA349_8==MIN||(LA349_8>=TIMEPERIOD_MINUTE && LA349_8<=TIMEPERIOD_MINUTES)) ) {
                                alt349=1;
                            }
                            }
                            break;
                    }
                    switch (alt349) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13294);
                            minutePart933=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart933.getTree());
                            }
                            break;
                    }
                    int alt350=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA350_24 = input.LA(3);
                                    if ( ((LA350_24>=TIMEPERIOD_SEC && LA350_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA350_25 = input.LA(3);
                                    if ( ((LA350_25>=TIMEPERIOD_SEC && LA350_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA350_26 = input.LA(3);
                                    if ( ((LA350_26>=TIMEPERIOD_SEC && LA350_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA350_27 = input.LA(3);
                                    if ( ((LA350_27>=TIMEPERIOD_SEC && LA350_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA350_28 = input.LA(3);
                                    if ( ((LA350_28>=TIMEPERIOD_SEC && LA350_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA350_29 = input.LA(3);
                                    if ( ((LA350_29>=TIMEPERIOD_SEC && LA350_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA350_30 = input.LA(3);
                                    if ( ((LA350_30>=TIMEPERIOD_SEC && LA350_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA350_31 = input.LA(3);
                                    if ( ((LA350_31>=TIMEPERIOD_SEC && LA350_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt350=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA350_3 = input.LA(2);
                            if ( ((LA350_3>=TIMEPERIOD_SEC && LA350_3<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA350_4 = input.LA(2);
                            if ( ((LA350_4>=TIMEPERIOD_SEC && LA350_4<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA350_5 = input.LA(2);
                            if ( ((LA350_5>=TIMEPERIOD_SEC && LA350_5<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA350_6 = input.LA(2);
                            if ( ((LA350_6>=TIMEPERIOD_SEC && LA350_6<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA350_7 = input.LA(2);
                            if ( ((LA350_7>=TIMEPERIOD_SEC && LA350_7<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA350_8 = input.LA(2);
                            if ( ((LA350_8>=TIMEPERIOD_SEC && LA350_8<=TIMEPERIOD_SECONDS)) ) {
                                alt350=1;
                            }
                            }
                            break;
                    }
                    switch (alt350) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13297);
                            secondPart934=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart934.getTree());
                            }
                            break;
                    }
                    int alt351=2;
                    int LA351_0 = input.LA(1);
                    if ( (LA351_0==NUM_DOUBLE||LA351_0==IDENT||(LA351_0>=PLUS && LA351_0<=QUESTION)||LA351_0==MINUS||LA351_0==NUM_INT||(LA351_0>=NUM_LONG && LA351_0<=NUM_FLOAT)) ) {
                        alt351=1;
                    }
                    switch (alt351) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13300);
                            millisecondPart935=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart935.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod13306);
                    dayPart936=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart936.getTree());
                    int alt352=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA352_24 = input.LA(3);
                                    if ( ((LA352_24>=TIMEPERIOD_HOUR && LA352_24<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA352_25 = input.LA(3);
                                    if ( ((LA352_25>=TIMEPERIOD_HOUR && LA352_25<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA352_26 = input.LA(3);
                                    if ( ((LA352_26>=TIMEPERIOD_HOUR && LA352_26<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA352_27 = input.LA(3);
                                    if ( ((LA352_27>=TIMEPERIOD_HOUR && LA352_27<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA352_28 = input.LA(3);
                                    if ( ((LA352_28>=TIMEPERIOD_HOUR && LA352_28<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA352_29 = input.LA(3);
                                    if ( ((LA352_29>=TIMEPERIOD_HOUR && LA352_29<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA352_30 = input.LA(3);
                                    if ( ((LA352_30>=TIMEPERIOD_HOUR && LA352_30<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA352_31 = input.LA(3);
                                    if ( ((LA352_31>=TIMEPERIOD_HOUR && LA352_31<=TIMEPERIOD_HOURS)) ) {
                                        alt352=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA352_3 = input.LA(2);
                            if ( ((LA352_3>=TIMEPERIOD_HOUR && LA352_3<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA352_4 = input.LA(2);
                            if ( ((LA352_4>=TIMEPERIOD_HOUR && LA352_4<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA352_5 = input.LA(2);
                            if ( ((LA352_5>=TIMEPERIOD_HOUR && LA352_5<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA352_6 = input.LA(2);
                            if ( ((LA352_6>=TIMEPERIOD_HOUR && LA352_6<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA352_7 = input.LA(2);
                            if ( ((LA352_7>=TIMEPERIOD_HOUR && LA352_7<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA352_8 = input.LA(2);
                            if ( ((LA352_8>=TIMEPERIOD_HOUR && LA352_8<=TIMEPERIOD_HOURS)) ) {
                                alt352=1;
                            }
                            }
                            break;
                    }
                    switch (alt352) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod13308);
                            hourPart937=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart937.getTree());
                            }
                            break;
                    }
                    int alt353=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA353_24 = input.LA(3);
                                    if ( (LA353_24==MIN||(LA353_24>=TIMEPERIOD_MINUTE && LA353_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA353_25 = input.LA(3);
                                    if ( (LA353_25==MIN||(LA353_25>=TIMEPERIOD_MINUTE && LA353_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA353_26 = input.LA(3);
                                    if ( (LA353_26==MIN||(LA353_26>=TIMEPERIOD_MINUTE && LA353_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA353_27 = input.LA(3);
                                    if ( (LA353_27==MIN||(LA353_27>=TIMEPERIOD_MINUTE && LA353_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA353_28 = input.LA(3);
                                    if ( (LA353_28==MIN||(LA353_28>=TIMEPERIOD_MINUTE && LA353_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA353_29 = input.LA(3);
                                    if ( (LA353_29==MIN||(LA353_29>=TIMEPERIOD_MINUTE && LA353_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA353_30 = input.LA(3);
                                    if ( (LA353_30==MIN||(LA353_30>=TIMEPERIOD_MINUTE && LA353_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA353_31 = input.LA(3);
                                    if ( (LA353_31==MIN||(LA353_31>=TIMEPERIOD_MINUTE && LA353_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt353=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA353_3 = input.LA(2);
                            if ( (LA353_3==MIN||(LA353_3>=TIMEPERIOD_MINUTE && LA353_3<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA353_4 = input.LA(2);
                            if ( (LA353_4==MIN||(LA353_4>=TIMEPERIOD_MINUTE && LA353_4<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA353_5 = input.LA(2);
                            if ( (LA353_5==MIN||(LA353_5>=TIMEPERIOD_MINUTE && LA353_5<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA353_6 = input.LA(2);
                            if ( (LA353_6==MIN||(LA353_6>=TIMEPERIOD_MINUTE && LA353_6<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA353_7 = input.LA(2);
                            if ( (LA353_7==MIN||(LA353_7>=TIMEPERIOD_MINUTE && LA353_7<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA353_8 = input.LA(2);
                            if ( (LA353_8==MIN||(LA353_8>=TIMEPERIOD_MINUTE && LA353_8<=TIMEPERIOD_MINUTES)) ) {
                                alt353=1;
                            }
                            }
                            break;
                    }
                    switch (alt353) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13311);
                            minutePart938=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart938.getTree());
                            }
                            break;
                    }
                    int alt354=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA354_24 = input.LA(3);
                                    if ( ((LA354_24>=TIMEPERIOD_SEC && LA354_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA354_25 = input.LA(3);
                                    if ( ((LA354_25>=TIMEPERIOD_SEC && LA354_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA354_26 = input.LA(3);
                                    if ( ((LA354_26>=TIMEPERIOD_SEC && LA354_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA354_27 = input.LA(3);
                                    if ( ((LA354_27>=TIMEPERIOD_SEC && LA354_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA354_28 = input.LA(3);
                                    if ( ((LA354_28>=TIMEPERIOD_SEC && LA354_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA354_29 = input.LA(3);
                                    if ( ((LA354_29>=TIMEPERIOD_SEC && LA354_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA354_30 = input.LA(3);
                                    if ( ((LA354_30>=TIMEPERIOD_SEC && LA354_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA354_31 = input.LA(3);
                                    if ( ((LA354_31>=TIMEPERIOD_SEC && LA354_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt354=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA354_3 = input.LA(2);
                            if ( ((LA354_3>=TIMEPERIOD_SEC && LA354_3<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA354_4 = input.LA(2);
                            if ( ((LA354_4>=TIMEPERIOD_SEC && LA354_4<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA354_5 = input.LA(2);
                            if ( ((LA354_5>=TIMEPERIOD_SEC && LA354_5<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA354_6 = input.LA(2);
                            if ( ((LA354_6>=TIMEPERIOD_SEC && LA354_6<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA354_7 = input.LA(2);
                            if ( ((LA354_7>=TIMEPERIOD_SEC && LA354_7<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA354_8 = input.LA(2);
                            if ( ((LA354_8>=TIMEPERIOD_SEC && LA354_8<=TIMEPERIOD_SECONDS)) ) {
                                alt354=1;
                            }
                            }
                            break;
                    }
                    switch (alt354) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13314);
                            secondPart939=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart939.getTree());
                            }
                            break;
                    }
                    int alt355=2;
                    int LA355_0 = input.LA(1);
                    if ( (LA355_0==NUM_DOUBLE||LA355_0==IDENT||(LA355_0>=PLUS && LA355_0<=QUESTION)||LA355_0==MINUS||LA355_0==NUM_INT||(LA355_0>=NUM_LONG && LA355_0<=NUM_FLOAT)) ) {
                        alt355=1;
                    }
                    switch (alt355) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13317);
                            millisecondPart940=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart940.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod13323);
                    hourPart941=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart941.getTree());
                    int alt356=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_24 = input.LA(3);
                                    if ( (LA356_24==MIN||(LA356_24>=TIMEPERIOD_MINUTE && LA356_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_25 = input.LA(3);
                                    if ( (LA356_25==MIN||(LA356_25>=TIMEPERIOD_MINUTE && LA356_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_26 = input.LA(3);
                                    if ( (LA356_26==MIN||(LA356_26>=TIMEPERIOD_MINUTE && LA356_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_27 = input.LA(3);
                                    if ( (LA356_27==MIN||(LA356_27>=TIMEPERIOD_MINUTE && LA356_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA356_28 = input.LA(3);
                                    if ( (LA356_28==MIN||(LA356_28>=TIMEPERIOD_MINUTE && LA356_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA356_29 = input.LA(3);
                                    if ( (LA356_29==MIN||(LA356_29>=TIMEPERIOD_MINUTE && LA356_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA356_30 = input.LA(3);
                                    if ( (LA356_30==MIN||(LA356_30>=TIMEPERIOD_MINUTE && LA356_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA356_31 = input.LA(3);
                                    if ( (LA356_31==MIN||(LA356_31>=TIMEPERIOD_MINUTE && LA356_31<=TIMEPERIOD_MINUTES)) ) {
                                        alt356=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA356_3 = input.LA(2);
                            if ( (LA356_3==MIN||(LA356_3>=TIMEPERIOD_MINUTE && LA356_3<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA356_4 = input.LA(2);
                            if ( (LA356_4==MIN||(LA356_4>=TIMEPERIOD_MINUTE && LA356_4<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA356_5 = input.LA(2);
                            if ( (LA356_5==MIN||(LA356_5>=TIMEPERIOD_MINUTE && LA356_5<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA356_6 = input.LA(2);
                            if ( (LA356_6==MIN||(LA356_6>=TIMEPERIOD_MINUTE && LA356_6<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA356_7 = input.LA(2);
                            if ( (LA356_7==MIN||(LA356_7>=TIMEPERIOD_MINUTE && LA356_7<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA356_8 = input.LA(2);
                            if ( (LA356_8==MIN||(LA356_8>=TIMEPERIOD_MINUTE && LA356_8<=TIMEPERIOD_MINUTES)) ) {
                                alt356=1;
                            }
                            }
                            break;
                    }
                    switch (alt356) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod13325);
                            minutePart942=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart942.getTree());
                            }
                            break;
                    }
                    int alt357=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_24 = input.LA(3);
                                    if ( ((LA357_24>=TIMEPERIOD_SEC && LA357_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_25 = input.LA(3);
                                    if ( ((LA357_25>=TIMEPERIOD_SEC && LA357_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_26 = input.LA(3);
                                    if ( ((LA357_26>=TIMEPERIOD_SEC && LA357_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_27 = input.LA(3);
                                    if ( ((LA357_27>=TIMEPERIOD_SEC && LA357_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA357_28 = input.LA(3);
                                    if ( ((LA357_28>=TIMEPERIOD_SEC && LA357_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA357_29 = input.LA(3);
                                    if ( ((LA357_29>=TIMEPERIOD_SEC && LA357_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA357_30 = input.LA(3);
                                    if ( ((LA357_30>=TIMEPERIOD_SEC && LA357_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA357_31 = input.LA(3);
                                    if ( ((LA357_31>=TIMEPERIOD_SEC && LA357_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt357=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA357_3 = input.LA(2);
                            if ( ((LA357_3>=TIMEPERIOD_SEC && LA357_3<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA357_4 = input.LA(2);
                            if ( ((LA357_4>=TIMEPERIOD_SEC && LA357_4<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA357_5 = input.LA(2);
                            if ( ((LA357_5>=TIMEPERIOD_SEC && LA357_5<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA357_6 = input.LA(2);
                            if ( ((LA357_6>=TIMEPERIOD_SEC && LA357_6<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA357_7 = input.LA(2);
                            if ( ((LA357_7>=TIMEPERIOD_SEC && LA357_7<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA357_8 = input.LA(2);
                            if ( ((LA357_8>=TIMEPERIOD_SEC && LA357_8<=TIMEPERIOD_SECONDS)) ) {
                                alt357=1;
                            }
                            }
                            break;
                    }
                    switch (alt357) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13328);
                            secondPart943=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart943.getTree());
                            }
                            break;
                    }
                    int alt358=2;
                    int LA358_0 = input.LA(1);
                    if ( (LA358_0==NUM_DOUBLE||LA358_0==IDENT||(LA358_0>=PLUS && LA358_0<=QUESTION)||LA358_0==MINUS||LA358_0==NUM_INT||(LA358_0>=NUM_LONG && LA358_0<=NUM_FLOAT)) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13331);
                            millisecondPart944=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart944.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod13337);
                    minutePart945=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart945.getTree());
                    int alt359=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_24 = input.LA(3);
                                    if ( ((LA359_24>=TIMEPERIOD_SEC && LA359_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_25 = input.LA(3);
                                    if ( ((LA359_25>=TIMEPERIOD_SEC && LA359_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_26 = input.LA(3);
                                    if ( ((LA359_26>=TIMEPERIOD_SEC && LA359_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_27 = input.LA(3);
                                    if ( ((LA359_27>=TIMEPERIOD_SEC && LA359_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA359_28 = input.LA(3);
                                    if ( ((LA359_28>=TIMEPERIOD_SEC && LA359_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA359_29 = input.LA(3);
                                    if ( ((LA359_29>=TIMEPERIOD_SEC && LA359_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA359_30 = input.LA(3);
                                    if ( ((LA359_30>=TIMEPERIOD_SEC && LA359_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA359_31 = input.LA(3);
                                    if ( ((LA359_31>=TIMEPERIOD_SEC && LA359_31<=TIMEPERIOD_SECONDS)) ) {
                                        alt359=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA359_3 = input.LA(2);
                            if ( ((LA359_3>=TIMEPERIOD_SEC && LA359_3<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA359_4 = input.LA(2);
                            if ( ((LA359_4>=TIMEPERIOD_SEC && LA359_4<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA359_5 = input.LA(2);
                            if ( ((LA359_5>=TIMEPERIOD_SEC && LA359_5<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA359_6 = input.LA(2);
                            if ( ((LA359_6>=TIMEPERIOD_SEC && LA359_6<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA359_7 = input.LA(2);
                            if ( ((LA359_7>=TIMEPERIOD_SEC && LA359_7<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA359_8 = input.LA(2);
                            if ( ((LA359_8>=TIMEPERIOD_SEC && LA359_8<=TIMEPERIOD_SECONDS)) ) {
                                alt359=1;
                            }
                            }
                            break;
                    }
                    switch (alt359) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod13339);
                            secondPart946=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart946.getTree());
                            }
                            break;
                    }
                    int alt360=2;
                    int LA360_0 = input.LA(1);
                    if ( (LA360_0==NUM_DOUBLE||LA360_0==IDENT||(LA360_0>=PLUS && LA360_0<=QUESTION)||LA360_0==MINUS||LA360_0==NUM_INT||(LA360_0>=NUM_LONG && LA360_0<=NUM_FLOAT)) ) {
                        alt360=1;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13342);
                            millisecondPart947=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart947.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod13348);
                    secondPart948=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart948.getTree());
                    int alt361=2;
                    int LA361_0 = input.LA(1);
                    if ( (LA361_0==NUM_DOUBLE||LA361_0==IDENT||(LA361_0>=PLUS && LA361_0<=QUESTION)||LA361_0==MINUS||LA361_0==NUM_INT||(LA361_0>=NUM_LONG && LA361_0<=NUM_FLOAT)) ) {
                        alt361=1;
                    }
                    switch (alt361) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod13350);
                            millisecondPart949=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart949.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod13356);
                    millisecondPart950=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart950.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS953=null;
        Token TIMEPERIOD_YEAR954=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant951 = null;
        EsperEPL2GrammarParser.substitution_return substitution952 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS953_tree=null;
        CommonTree TIMEPERIOD_YEAR954_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt363=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt363=1;
                }
                break;
            case IDENT:
                {
                alt363=2;
                }
                break;
            case QUESTION:
                {
                alt363=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart13403);
                    numberconstant951=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant951.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart13407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart13409);
                    substitution952=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution952.getTree());
                    }
                    break;
            }
            int alt364=2;
            int LA364_0 = input.LA(1);
            if ( (LA364_0==TIMEPERIOD_YEARS) ) {
                alt364=1;
            }
            else if ( (LA364_0==TIMEPERIOD_YEAR) ) {
                alt364=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);
                throw nvae;
            }
            switch (alt364) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS953=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart13413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS953);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR954=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart13417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR954);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS957=null;
        Token TIMEPERIOD_MONTH958=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant955 = null;
        EsperEPL2GrammarParser.substitution_return substitution956 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS957_tree=null;
        CommonTree TIMEPERIOD_MONTH958_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt365=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt365=1;
                }
                break;
            case IDENT:
                {
                alt365=2;
                }
                break;
            case QUESTION:
                {
                alt365=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart13465);
                    numberconstant955=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant955.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart13469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart13471);
                    substitution956=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution956.getTree());
                    }
                    break;
            }
            int alt366=2;
            int LA366_0 = input.LA(1);
            if ( (LA366_0==TIMEPERIOD_MONTHS) ) {
                alt366=1;
            }
            else if ( (LA366_0==TIMEPERIOD_MONTH) ) {
                alt366=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS957=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS957);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH958=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart13479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH958);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS961=null;
        Token TIMEPERIOD_WEEK962=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant959 = null;
        EsperEPL2GrammarParser.substitution_return substitution960 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS961_tree=null;
        CommonTree TIMEPERIOD_WEEK962_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt367=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt367=1;
                }
                break;
            case IDENT:
                {
                alt367=2;
                }
                break;
            case QUESTION:
                {
                alt367=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart13527);
                    numberconstant959=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant959.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart13531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart13533);
                    substitution960=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution960.getTree());
                    }
                    break;
            }
            int alt368=2;
            int LA368_0 = input.LA(1);
            if ( (LA368_0==TIMEPERIOD_WEEKS) ) {
                alt368=1;
            }
            else if ( (LA368_0==TIMEPERIOD_WEEK) ) {
                alt368=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 368, 0, input);
                throw nvae;
            }
            switch (alt368) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS961=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS961);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK962=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart13541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK962);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS965=null;
        Token TIMEPERIOD_DAY966=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant963 = null;
        EsperEPL2GrammarParser.substitution_return substitution964 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS965_tree=null;
        CommonTree TIMEPERIOD_DAY966_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt369=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt369=1;
                }
                break;
            case IDENT:
                {
                alt369=2;
                }
                break;
            case QUESTION:
                {
                alt369=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart13589);
                    numberconstant963=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant963.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart13593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart13595);
                    substitution964=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution964.getTree());
                    }
                    break;
            }
            int alt370=2;
            int LA370_0 = input.LA(1);
            if ( (LA370_0==TIMEPERIOD_DAYS) ) {
                alt370=1;
            }
            else if ( (LA370_0==TIMEPERIOD_DAY) ) {
                alt370=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 370, 0, input);
                throw nvae;
            }
            switch (alt370) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS965=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart13599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS965);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY966=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart13603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY966);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS969=null;
        Token TIMEPERIOD_HOUR970=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant967 = null;
        EsperEPL2GrammarParser.substitution_return substitution968 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS969_tree=null;
        CommonTree TIMEPERIOD_HOUR970_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt371=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt371=1;
                }
                break;
            case IDENT:
                {
                alt371=2;
                }
                break;
            case QUESTION:
                {
                alt371=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 371, 0, input);
                throw nvae;
            }
            switch (alt371) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart13652);
                    numberconstant967=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant967.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart13656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart13658);
                    substitution968=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution968.getTree());
                    }
                    break;
            }
            int alt372=2;
            int LA372_0 = input.LA(1);
            if ( (LA372_0==TIMEPERIOD_HOURS) ) {
                alt372=1;
            }
            else if ( (LA372_0==TIMEPERIOD_HOUR) ) {
                alt372=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);
                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS969=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart13662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS969);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR970=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart13666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR970);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES973=null;
        Token TIMEPERIOD_MINUTE974=null;
        Token MIN975=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant971 = null;
        EsperEPL2GrammarParser.substitution_return substitution972 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES973_tree=null;
        CommonTree TIMEPERIOD_MINUTE974_tree=null;
        CommonTree MIN975_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt373=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt373=1;
                }
                break;
            case IDENT:
                {
                alt373=2;
                }
                break;
            case QUESTION:
                {
                alt373=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);
                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart13715);
                    numberconstant971=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant971.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart13719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart13721);
                    substitution972=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution972.getTree());
                    }
                    break;
            }
            int alt374=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt374=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt374=2;
                }
                break;
            case MIN:
                {
                alt374=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);
                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES973=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES973);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE974=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE974);
                    }
                    break;
                case 3 :
                    {
                    MIN975=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart13733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN975);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS978=null;
        Token TIMEPERIOD_SECOND979=null;
        Token TIMEPERIOD_SEC980=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant976 = null;
        EsperEPL2GrammarParser.substitution_return substitution977 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS978_tree=null;
        CommonTree TIMEPERIOD_SECOND979_tree=null;
        CommonTree TIMEPERIOD_SEC980_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt375=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt375=1;
                }
                break;
            case IDENT:
                {
                alt375=2;
                }
                break;
            case QUESTION:
                {
                alt375=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);
                throw nvae;
            }
            switch (alt375) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart13783);
                    numberconstant976=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant976.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart13787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart13789);
                    substitution977=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution977.getTree());
                    }
                    break;
            }
            int alt376=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt376=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt376=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt376=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);
                throw nvae;
            }
            switch (alt376) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS978=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS978);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND979=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart13797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND979);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC980=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart13801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC980);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS983=null;
        Token TIMEPERIOD_MILLISECOND984=null;
        Token TIMEPERIOD_MILLISEC985=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant981 = null;
        EsperEPL2GrammarParser.substitution_return substitution982 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS983_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND984_tree=null;
        CommonTree TIMEPERIOD_MILLISEC985_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt377=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt377=1;
                }
                break;
            case IDENT:
                {
                alt377=2;
                }
                break;
            case QUESTION:
                {
                alt377=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);
                throw nvae;
            }
            switch (alt377) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart13851);
                    numberconstant981=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant981.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart13855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart13857);
                    substitution982=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution982.getTree());
                    }
                    break;
            }
            int alt378=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt378=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt378=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt378=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 378, 0, input);
                throw nvae;
            }
            switch (alt378) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS983=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS983);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND984=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND984);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC985=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC985);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt379=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt379=1;
                }
                break;
            case NUM_LONG:
                {
                alt379=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt379=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt379=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 379, 0, input);
                throw nvae;
            }
            switch (alt379) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number13924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number13941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number13958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number13975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution13996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant986 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant987 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt380=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt380=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt380=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt380=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt380=4;
                }
                break;
            case VALUE_NULL:
                {
                alt380=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 380, 0, input);
                throw nvae;
            }
            switch (alt380) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant14015);
                    numberconstant986=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant986.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant14022);
                    stringconstant987=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant987.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant14035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant14055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant14075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number988 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt381=3;
            int LA381_0 = input.LA(1);
            if ( (LA381_0==MINUS) ) {
                alt381=1;
            }
            else if ( (LA381_0==PLUS) ) {
                alt381=2;
            }
            switch (alt381) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant14097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant14103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant14107);
            number988=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number988.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number988!=null?((CommonTree)number988.tree):null).getType(), "-" + (number988!=null?input.toString(number988.start,number988.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt382=2;
            int LA382_0 = input.LA(1);
            if ( (LA382_0==STRING_LITERAL) ) {
                alt382=1;
            }
            else if ( (LA382_0==QUOTED_STRING_LITERAL) ) {
                alt382=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 382, 0, input);
                throw nvae;
            }
            switch (alt382) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant14136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5236);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6636);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8616);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10001);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10063);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11448);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11929);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11940);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11951);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11962);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11974);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11985);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11996);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12009);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12034);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA209 dfa209 = new DFA209(this);
    static final String DFA209_eotS =
        "\u0c1f\uffff";
    static final String DFA209_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bea\uffff";
    static final String DFA209_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\17\uffff\1\u0134\u0081\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0141\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\11\uffff\2\6\112\uffff\2\6\111\uffff\2\6"+
        "\100\uffff\2\6\120\uffff\2\6\100\uffff\2\6\122\uffff\2\6\100\uffff"+
        "\2\6\122\uffff\2\6\107\uffff\2\6\107\uffff\2\6\112\uffff\2\6\107"+
        "\uffff\2\6\100\uffff\2\6\107\uffff\2\6\u008e\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\71\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\71\uffff\1\0\53\uffff"+
        "\1\0\116\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA209_maxS =
        "\2\u0157\13\uffff\1\u0157\3\uffff\1\u0154\2\uffff\2\u0154\2\uffff"+
        "\4\u0154\1\uffff\2\u0154\12\uffff\3\u0154\2\uffff\3\u0154\3\uffff"+
        "\1\u0154\17\uffff\1\u0134\u0081\uffff\1\u0157\73\uffff\1\u0157\73"+
        "\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u014f\73\uffff\1\u0157\73\uffff\1\u0157"+
        "\73\uffff\1\u0157\73\uffff\1\u0157\73\uffff\1\u0155\11\uffff\2\u014e"+
        "\112\uffff\2\u014e\111\uffff\2\u014e\100\uffff\2\u014e\120\uffff"+
        "\2\u014e\100\uffff\2\u014e\122\uffff\2\u014e\100\uffff\2\u014e\122"+
        "\uffff\2\u014e\107\uffff\2\u014e\107\uffff\2\u014e\112\uffff\2\u014e"+
        "\107\uffff\2\u014e\100\uffff\2\u014e\107\uffff\2\u014e\u008e\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\71\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\71\uffff"+
        "\1\0\53\uffff\1\0\116\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\63\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\4\uffff\1\1\57\uffff\1\10\1\4\u0409\uffff\11\6\2\uffff"+
        "\112\6\2\uffff\111\6\2\uffff\100\6\2\uffff\120\6\2\uffff\100\6\2"+
        "\uffff\122\6\2\uffff\100\6\2\uffff\122\6\2\uffff\107\6\2\uffff\107"+
        "\6\2\uffff\101\6\2\uffff\7\6\2\uffff\107\6\2\uffff\100\6\2\uffff"+
        "\107\6\2\uffff\111\6\1\11\104\6\1\uffff\31\6\1\uffff\31\6\1\uffff"+
        "\31\6\1\uffff\5\6\1\uffff\55\6\1\uffff\36\6\1\uffff\31\6\2\uffff"+
        "\55\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\55\6\1\uffff"+
        "\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\36\6\1\uffff\31\6\2\uffff"+
        "\53\6\1\uffff\37\6\1\uffff\32\6\1\uffff\23\6\1\uffff\30\6\1\uffff"+
        "\5\6";
    static final String DFA209_specialS =
        "\1\0\u00c5\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\11\uffff\1\22\1"+
        "\23\112\uffff\1\24\1\25\111\uffff\1\26\1\27\100\uffff\1\30\1\31"+
        "\120\uffff\1\32\1\33\100\uffff\1\34\1\35\122\uffff\1\36\1\37\100"+
        "\uffff\1\40\1\41\122\uffff\1\42\1\43\107\uffff\1\44\1\45\107\uffff"+
        "\1\46\1\47\112\uffff\1\50\1\51\107\uffff\1\52\1\53\100\uffff\1\54"+
        "\1\55\107\uffff\1\56\1\57\u008e\uffff\1\60\31\uffff\1\61\31\uffff"+
        "\1\62\31\uffff\1\63\5\uffff\1\64\55\uffff\1\65\71\uffff\1\66\55"+
        "\uffff\1\67\31\uffff\1\70\31\uffff\1\71\5\uffff\1\72\55\uffff\1"+
        "\73\31\uffff\1\74\31\uffff\1\75\5\uffff\1\76\31\uffff\1\77\55\uffff"+
        "\1\100\31\uffff\1\101\31\uffff\1\102\31\uffff\1\103\71\uffff\1\104"+
        "\53\uffff\1\105\116\uffff\1\106\30\uffff\1\107\5\uffff}>";
    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;
    static {
        int numStates = EsperEPL2GrammarParser_DFAS.DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(EsperEPL2GrammarParser_DFAS.DFA209_transitionS[i]);
        }
    }
    class DFA209 extends DFA {
        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "1365:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA209_0 = input.LA(1);
                        int index209_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_0==MINUS) ) {s = 1;}
                        else if ( ((LA209_0>=BOOLEAN_TRUE && LA209_0<=VALUE_NULL)||LA209_0==NUM_DOUBLE||LA209_0==PLUS||(LA209_0>=STRING_LITERAL && LA209_0<=QUOTED_STRING_LITERAL)||LA209_0==NUM_INT||(LA209_0>=NUM_LONG && LA209_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA209_0==QUESTION) ) {s = 12;}
                        else if ( (LA209_0==LPAREN) ) {s = 13;}
                        else if ( (LA209_0==BETWEEN||LA209_0==ESCAPE||LA209_0==EVERY_EXPR||LA209_0==WHERE||(LA209_0>=MAX && LA209_0<=MIN)||LA209_0==OUTER||(LA209_0>=JOIN && LA209_0<=FULL)||LA209_0==EVENTS||(LA209_0>=UNIDIRECTIONAL && LA209_0<=METADATASQL)||(LA209_0>=WEEKDAY && LA209_0<=LW)||(LA209_0>=SNAPSHOT && LA209_0<=INDEX)||(LA209_0>=DEFINE && LA209_0<=AFTER)||LA209_0==WHILE||(LA209_0>=MERGE && LA209_0<=MATCHED)||LA209_0==CONTEXT||LA209_0==IDENT||LA209_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA209_0==COUNT) ) {s = 17;}
                        else if ( (LA209_0==SUM) ) {s = 20;}
                        else if ( (LA209_0==AVG) ) {s = 21;}
                        else if ( (LA209_0==COALESCE) ) {s = 24;}
                        else if ( (LA209_0==MEDIAN) ) {s = 25;}
                        else if ( (LA209_0==STDDEV) ) {s = 26;}
                        else if ( (LA209_0==AVEDEV) ) {s = 27;}
                        else if ( (LA209_0==FIRST) ) {s = 29;}
                        else if ( (LA209_0==LAST) ) {s = 30;}
                        else if ( (LA209_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA209_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA209_0==PRIOR) ) {s = 43;}
                        else if ( (LA209_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA209_0==TYPEOF) ) {s = 47;}
                        else if ( (LA209_0==CAST) ) {s = 48;}
                        else if ( (LA209_0==WINDOW) ) {s = 52;}
                        else if ( (LA209_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA209_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA209_0==EXISTS) ) {s = 68;}
                        else if ( (LA209_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 69;}
                        else if ( (LA209_0==LCURLY) ) {s = 70;}
                        else if ( (LA209_0==NEWKW) ) {s = 71;}
                        input.seek(index209_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA209_198 = input.LA(1);
                        int index209_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_198==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA209_198==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA209_198==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA209_198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA209_198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA209_198==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA209_198==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA209_198==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA209_198==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA209_198==STRING_LITERAL) ) {s = 1168;}
                        else if ( (LA209_198==QUOTED_STRING_LITERAL) ) {s = 1169;}
                        else if ( (LA209_198==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA209_198==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA209_198==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA209_198==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA209_198==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA209_198==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA209_198==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA209_198==AT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA209_198==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA209_198==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA209_198==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA209_198==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA209_198==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA209_198==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA209_198==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA209_198==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA209_198==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA209_198==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA209_198==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA209_198==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA209_198==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA209_198==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA209_198==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA209_198==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA209_198==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA209_198==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA209_198==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA209_198==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA209_198==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA209_198==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA209_198==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA209_198==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA209_198==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA209_198==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA209_198==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA209_198==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA209_198==LW) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA209_198==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA209_198==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA209_198==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA209_198==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA209_198==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA209_198==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA209_198==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA209_198==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA209_198==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA209_198==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA209_198==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA209_198==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA209_198==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA209_198==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA209_198==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA209_198==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA209_198==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA209_198==SET) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA209_198==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA209_198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA209_198==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA209_198==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA209_198==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA209_198==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA209_198==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA209_198==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA209_198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA209_198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        input.seek(index209_198);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA209_258 = input.LA(1);
                        int index209_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_258==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA209_258==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA209_258==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA209_258==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA209_258==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA209_258==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA209_258==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA209_258==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA209_258==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA209_258==STRING_LITERAL) ) {s = 1244;}
                        else if ( (LA209_258==QUOTED_STRING_LITERAL) ) {s = 1245;}
                        else if ( (LA209_258==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA209_258==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA209_258==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA209_258==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA209_258==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA209_258==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA209_258==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA209_258==AT) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA209_258==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA209_258==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA209_258==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA209_258==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA209_258==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA209_258==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA209_258==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA209_258==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA209_258==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA209_258==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA209_258==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA209_258==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA209_258==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA209_258==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA209_258==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA209_258==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA209_258==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA209_258==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA209_258==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA209_258==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA209_258==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA209_258==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA209_258==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA209_258==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA209_258==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA209_258==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA209_258==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA209_258==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA209_258==LW) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA209_258==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA209_258==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA209_258==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA209_258==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA209_258==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA209_258==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA209_258==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA209_258==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA209_258==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA209_258==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA209_258==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA209_258==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA209_258==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA209_258==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA209_258==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA209_258==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA209_258==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA209_258==SET) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA209_258==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA209_258==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA209_258==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA209_258==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA209_258==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA209_258==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA209_258==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA209_258==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA209_258==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        input.seek(index209_258);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA209_318 = input.LA(1);
                        int index209_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_318==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA209_318==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA209_318==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA209_318==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA209_318==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA209_318==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA209_318==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA209_318==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA209_318==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA209_318==STRING_LITERAL) ) {s = 1319;}
                        else if ( (LA209_318==QUOTED_STRING_LITERAL) ) {s = 1320;}
                        else if ( (LA209_318==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA209_318==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA209_318==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA209_318==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA209_318==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA209_318==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA209_318==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA209_318==AT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA209_318==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA209_318==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA209_318==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA209_318==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA209_318==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA209_318==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA209_318==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA209_318==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA209_318==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA209_318==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA209_318==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA209_318==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA209_318==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA209_318==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA209_318==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA209_318==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA209_318==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA209_318==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA209_318==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA209_318==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA209_318==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA209_318==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA209_318==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA209_318==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA209_318==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA209_318==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA209_318==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA209_318==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA209_318==LW) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA209_318==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA209_318==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA209_318==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA209_318==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA209_318==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA209_318==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA209_318==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA209_318==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA209_318==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA209_318==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA209_318==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA209_318==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA209_318==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA209_318==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA209_318==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA209_318==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA209_318==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA209_318==SET) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA209_318==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA209_318==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA209_318==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA209_318==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA209_318==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA209_318==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA209_318==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA209_318==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA209_318==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        input.seek(index209_318);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA209_378 = input.LA(1);
                        int index209_378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_378==STRING_LITERAL) ) {s = 1385;}
                        else if ( (LA209_378==QUOTED_STRING_LITERAL) ) {s = 1386;}
                        else if ( (LA209_378==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA209_378==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA209_378==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA209_378==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA209_378==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA209_378==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA209_378==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA209_378==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA209_378==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA209_378==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA209_378==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA209_378==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA209_378==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA209_378==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA209_378==AT) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA209_378==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA209_378==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA209_378==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA209_378==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA209_378==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA209_378==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA209_378==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA209_378==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA209_378==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA209_378==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA209_378==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA209_378==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA209_378==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA209_378==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA209_378==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA209_378==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA209_378==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA209_378==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA209_378==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA209_378==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA209_378==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA209_378==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA209_378==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA209_378==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA209_378==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA209_378==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA209_378==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA209_378==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA209_378==LW) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA209_378==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA209_378==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA209_378==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA209_378==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA209_378==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA209_378==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA209_378==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA209_378==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA209_378==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA209_378==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA209_378==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA209_378==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA209_378==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA209_378==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA209_378==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA209_378==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA209_378==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA209_378==SET) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA209_378==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA209_378==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA209_378==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA209_378==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA209_378==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA209_378==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA209_378==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA209_378==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA209_378==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        input.seek(index209_378);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA209_438 = input.LA(1);
                        int index209_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_438==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA209_438==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA209_438==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA209_438==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA209_438==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA209_438==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA209_438==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA209_438==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA209_438==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA209_438==STRING_LITERAL) ) {s = 1467;}
                        else if ( (LA209_438==QUOTED_STRING_LITERAL) ) {s = 1468;}
                        else if ( (LA209_438==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA209_438==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA209_438==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA209_438==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA209_438==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA209_438==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA209_438==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA209_438==AT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA209_438==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA209_438==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA209_438==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA209_438==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA209_438==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA209_438==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA209_438==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA209_438==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA209_438==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA209_438==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA209_438==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA209_438==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA209_438==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA209_438==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA209_438==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA209_438==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA209_438==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA209_438==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA209_438==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA209_438==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA209_438==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA209_438==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA209_438==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA209_438==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA209_438==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA209_438==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA209_438==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA209_438==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA209_438==LW) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA209_438==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA209_438==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA209_438==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA209_438==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA209_438==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA209_438==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA209_438==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA209_438==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA209_438==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA209_438==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA209_438==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA209_438==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA209_438==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA209_438==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA209_438==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA209_438==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA209_438==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA209_438==SET) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA209_438==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA209_438==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA209_438==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA209_438==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA209_438==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA209_438==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA209_438==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA209_438==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA209_438==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        input.seek(index209_438);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA209_498 = input.LA(1);
                        int index209_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_498==STRING_LITERAL) ) {s = 1533;}
                        else if ( (LA209_498==QUOTED_STRING_LITERAL) ) {s = 1534;}
                        else if ( (LA209_498==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA209_498==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA209_498==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA209_498==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA209_498==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA209_498==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA209_498==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA209_498==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA209_498==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA209_498==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA209_498==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA209_498==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA209_498==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA209_498==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA209_498==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA209_498==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA209_498==AT) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA209_498==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA209_498==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA209_498==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA209_498==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA209_498==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA209_498==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA209_498==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA209_498==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA209_498==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA209_498==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA209_498==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA209_498==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA209_498==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA209_498==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA209_498==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA209_498==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA209_498==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA209_498==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA209_498==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA209_498==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA209_498==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA209_498==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA209_498==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA209_498==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA209_498==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA209_498==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA209_498==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA209_498==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA209_498==LW) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA209_498==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA209_498==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA209_498==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA209_498==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA209_498==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA209_498==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA209_498==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA209_498==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA209_498==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA209_498==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA209_498==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA209_498==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA209_498==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA209_498==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA209_498==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA209_498==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA209_498==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA209_498==SET) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA209_498==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA209_498==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA209_498==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA209_498==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA209_498==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA209_498==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA209_498==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA209_498==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA209_498==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        input.seek(index209_498);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA209_558 = input.LA(1);
                        int index209_558 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_558==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA209_558==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA209_558==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA209_558==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA209_558==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA209_558==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA209_558==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA209_558==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA209_558==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA209_558==STRING_LITERAL) ) {s = 1617;}
                        else if ( (LA209_558==QUOTED_STRING_LITERAL) ) {s = 1618;}
                        else if ( (LA209_558==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA209_558==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA209_558==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA209_558==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA209_558==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA209_558==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA209_558==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA209_558==AT) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA209_558==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA209_558==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA209_558==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA209_558==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA209_558==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA209_558==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA209_558==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA209_558==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA209_558==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA209_558==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA209_558==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA209_558==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA209_558==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA209_558==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA209_558==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA209_558==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA209_558==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA209_558==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA209_558==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA209_558==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA209_558==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA209_558==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA209_558==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA209_558==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA209_558==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA209_558==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA209_558==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA209_558==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA209_558==LW) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA209_558==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA209_558==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA209_558==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA209_558==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA209_558==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA209_558==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA209_558==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA209_558==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA209_558==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA209_558==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA209_558==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA209_558==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA209_558==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA209_558==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA209_558==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA209_558==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA209_558==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA209_558==SET) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA209_558==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA209_558==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA209_558==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA209_558==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA209_558==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA209_558==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA209_558==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA209_558==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA209_558==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        input.seek(index209_558);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA209_618 = input.LA(1);
                        int index209_618 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_618==STRING_LITERAL) ) {s = 1683;}
                        else if ( (LA209_618==QUOTED_STRING_LITERAL) ) {s = 1684;}
                        else if ( (LA209_618==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA209_618==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA209_618==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA209_618==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA209_618==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA209_618==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA209_618==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA209_618==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA209_618==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA209_618==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA209_618==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA209_618==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA209_618==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA209_618==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA209_618==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA209_618==AT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA209_618==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA209_618==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA209_618==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA209_618==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA209_618==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA209_618==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA209_618==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA209_618==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA209_618==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA209_618==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA209_618==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA209_618==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA209_618==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA209_618==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA209_618==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA209_618==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA209_618==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA209_618==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA209_618==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA209_618==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA209_618==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA209_618==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA209_618==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA209_618==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA209_618==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA209_618==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA209_618==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA209_618==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA209_618==LW) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA209_618==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA209_618==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA209_618==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA209_618==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA209_618==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA209_618==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA209_618==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA209_618==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA209_618==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA209_618==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA209_618==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA209_618==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA209_618==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA209_618==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA209_618==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA209_618==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA209_618==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA209_618==SET) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA209_618==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA209_618==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA209_618==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA209_618==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA209_618==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA209_618==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA209_618==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA209_618==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA209_618==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA209_618==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        input.seek(index209_618);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA209_678 = input.LA(1);
                        int index209_678 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_678==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA209_678==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA209_678==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA209_678==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA209_678==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA209_678==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA209_678==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA209_678==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA209_678==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA209_678==STRING_LITERAL) ) {s = 1767;}
                        else if ( (LA209_678==QUOTED_STRING_LITERAL) ) {s = 1768;}
                        else if ( (LA209_678==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA209_678==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA209_678==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA209_678==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA209_678==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA209_678==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA209_678==AT) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA209_678==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA209_678==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA209_678==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA209_678==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA209_678==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA209_678==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA209_678==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA209_678==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA209_678==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA209_678==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA209_678==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA209_678==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA209_678==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA209_678==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA209_678==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA209_678==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA209_678==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA209_678==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA209_678==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA209_678==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA209_678==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA209_678==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA209_678==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA209_678==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA209_678==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA209_678==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA209_678==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA209_678==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA209_678==LW) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA209_678==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA209_678==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA209_678==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA209_678==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA209_678==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA209_678==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA209_678==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA209_678==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA209_678==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA209_678==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA209_678==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA209_678==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA209_678==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA209_678==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA209_678==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA209_678==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA209_678==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA209_678==SET) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA209_678==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA209_678==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA209_678==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA209_678==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA209_678==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA209_678==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA209_678==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA209_678==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA209_678==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA209_678==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        input.seek(index209_678);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA209_738 = input.LA(1);
                        int index209_738 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_738==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA209_738==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA209_738==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA209_738==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA209_738==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA209_738==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA209_738==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA209_738==STRING_LITERAL) ) {s = 1840;}
                        else if ( (LA209_738==QUOTED_STRING_LITERAL) ) {s = 1841;}
                        else if ( (LA209_738==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA209_738==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA209_738==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA209_738==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA209_738==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA209_738==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA209_738==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA209_738==AT) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA209_738==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA209_738==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA209_738==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA209_738==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA209_738==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA209_738==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA209_738==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA209_738==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA209_738==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA209_738==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA209_738==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA209_738==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA209_738==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA209_738==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA209_738==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA209_738==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA209_738==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA209_738==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA209_738==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA209_738==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA209_738==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA209_738==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA209_738==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA209_738==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA209_738==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA209_738==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA209_738==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA209_738==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA209_738==LW) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA209_738==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA209_738==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA209_738==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA209_738==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA209_738==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA209_738==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA209_738==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA209_738==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA209_738==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA209_738==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA209_738==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA209_738==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA209_738==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA209_738==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA209_738==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA209_738==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA209_738==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA209_738==SET) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA209_738==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA209_738==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA209_738==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA209_738==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA209_738==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA209_738==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA209_738==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA209_738==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA209_738==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        input.seek(index209_738);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA209_798 = input.LA(1);
                        int index209_798 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_798==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA209_798==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA209_798==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA209_798==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA209_798==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA209_798==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA209_798==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA209_798==STRING_LITERAL) ) {s = 1913;}
                        else if ( (LA209_798==QUOTED_STRING_LITERAL) ) {s = 1914;}
                        else if ( (LA209_798==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA209_798==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA209_798==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA209_798==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA209_798==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA209_798==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA209_798==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA209_798==AT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA209_798==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA209_798==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA209_798==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA209_798==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA209_798==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA209_798==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA209_798==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA209_798==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA209_798==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA209_798==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA209_798==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA209_798==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA209_798==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA209_798==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA209_798==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA209_798==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA209_798==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA209_798==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA209_798==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA209_798==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA209_798==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA209_798==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA209_798==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA209_798==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA209_798==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA209_798==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA209_798==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA209_798==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA209_798==LW) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA209_798==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA209_798==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA209_798==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA209_798==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA209_798==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA209_798==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA209_798==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA209_798==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA209_798==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA209_798==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA209_798==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA209_798==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA209_798==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA209_798==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA209_798==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA209_798==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA209_798==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA209_798==SET) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA209_798==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA209_798==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA209_798==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA209_798==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA209_798==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA209_798==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA209_798==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA209_798==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA209_798==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        input.seek(index209_798);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA209_858 = input.LA(1);
                        int index209_858 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_858==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( ((LA209_858>=STRING_LITERAL && LA209_858<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index209_858);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA209_918 = input.LA(1);
                        int index209_918 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_918==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA209_918==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA209_918==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA209_918==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA209_918==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA209_918==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA209_918==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA209_918==STRING_LITERAL) ) {s = 1989;}
                        else if ( (LA209_918==QUOTED_STRING_LITERAL) ) {s = 1990;}
                        else if ( (LA209_918==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA209_918==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA209_918==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA209_918==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA209_918==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA209_918==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA209_918==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA209_918==AT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA209_918==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA209_918==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA209_918==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA209_918==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA209_918==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA209_918==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA209_918==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA209_918==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA209_918==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA209_918==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA209_918==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA209_918==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA209_918==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA209_918==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA209_918==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA209_918==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA209_918==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA209_918==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA209_918==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA209_918==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA209_918==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA209_918==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA209_918==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA209_918==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA209_918==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA209_918==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA209_918==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA209_918==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA209_918==LW) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA209_918==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA209_918==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA209_918==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA209_918==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA209_918==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA209_918==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA209_918==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA209_918==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA209_918==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA209_918==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA209_918==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA209_918==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA209_918==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA209_918==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA209_918==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA209_918==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA209_918==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA209_918==SET) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA209_918==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA209_918==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA209_918==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA209_918==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA209_918==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA209_918==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA209_918==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA209_918==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA209_918==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        input.seek(index209_918);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA209_978 = input.LA(1);
                        int index209_978 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_978==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA209_978==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA209_978==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA209_978==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA209_978==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA209_978==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA209_978==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA209_978==STRING_LITERAL) ) {s = 2062;}
                        else if ( (LA209_978==QUOTED_STRING_LITERAL) ) {s = 2063;}
                        else if ( (LA209_978==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA209_978==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA209_978==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA209_978==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA209_978==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA209_978==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA209_978==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA209_978==AT) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA209_978==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA209_978==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA209_978==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA209_978==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA209_978==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA209_978==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA209_978==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA209_978==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA209_978==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA209_978==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA209_978==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA209_978==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA209_978==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA209_978==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA209_978==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA209_978==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA209_978==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA209_978==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA209_978==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA209_978==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA209_978==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA209_978==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA209_978==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA209_978==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA209_978==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA209_978==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA209_978==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA209_978==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA209_978==LW) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA209_978==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA209_978==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA209_978==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA209_978==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA209_978==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA209_978==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA209_978==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA209_978==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA209_978==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA209_978==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA209_978==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA209_978==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA209_978==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA209_978==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA209_978==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA209_978==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA209_978==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA209_978==SET) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA209_978==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA209_978==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA209_978==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA209_978==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA209_978==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA209_978==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA209_978==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA209_978==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA209_978==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        input.seek(index209_978);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA209_1038 = input.LA(1);
                        int index209_1038 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1038==STRING_LITERAL) ) {s = 2128;}
                        else if ( (LA209_1038==QUOTED_STRING_LITERAL) ) {s = 2129;}
                        else if ( (LA209_1038==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA209_1038==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA209_1038==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA209_1038==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA209_1038==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA209_1038==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA209_1038==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA209_1038==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA209_1038==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA209_1038==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA209_1038==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA209_1038==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA209_1038==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA209_1038==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA209_1038==AT) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA209_1038==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA209_1038==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA209_1038==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA209_1038==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA209_1038==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA209_1038==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA209_1038==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA209_1038==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA209_1038==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA209_1038==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA209_1038==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA209_1038==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA209_1038==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA209_1038==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA209_1038==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA209_1038==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA209_1038==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA209_1038==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA209_1038==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA209_1038==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA209_1038==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA209_1038==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA209_1038==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA209_1038==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA209_1038==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA209_1038==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA209_1038==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA209_1038==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA209_1038==LW) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA209_1038==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA209_1038==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA209_1038==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA209_1038==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA209_1038==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA209_1038==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA209_1038==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA209_1038==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA209_1038==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA209_1038==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA209_1038==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA209_1038==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA209_1038==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA209_1038==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA209_1038==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA209_1038==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA209_1038==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA209_1038==SET) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA209_1038==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA209_1038==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA209_1038==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA209_1038==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA209_1038==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA209_1038==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA209_1038==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA209_1038==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA209_1038==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        input.seek(index209_1038);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA209_1098 = input.LA(1);
                        int index209_1098 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1098==STRING_LITERAL) ) {s = 2201;}
                        else if ( (LA209_1098==QUOTED_STRING_LITERAL) ) {s = 2202;}
                        else if ( (LA209_1098==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA209_1098==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA209_1098==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA209_1098==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA209_1098==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA209_1098==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA209_1098==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA209_1098==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA209_1098==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA209_1098==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA209_1098==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA209_1098==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA209_1098==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA209_1098==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA209_1098==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA209_1098==AT) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA209_1098==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA209_1098==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA209_1098==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA209_1098==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA209_1098==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA209_1098==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA209_1098==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA209_1098==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA209_1098==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA209_1098==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA209_1098==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA209_1098==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA209_1098==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA209_1098==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA209_1098==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA209_1098==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA209_1098==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA209_1098==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA209_1098==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA209_1098==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA209_1098==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA209_1098==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA209_1098==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA209_1098==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA209_1098==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA209_1098==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA209_1098==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA209_1098==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA209_1098==LW) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA209_1098==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA209_1098==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA209_1098==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA209_1098==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA209_1098==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA209_1098==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA209_1098==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA209_1098==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA209_1098==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA209_1098==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA209_1098==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA209_1098==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA209_1098==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA209_1098==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA209_1098==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA209_1098==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA209_1098==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA209_1098==SET) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA209_1098==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA209_1098==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA209_1098==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA209_1098==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA209_1098==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA209_1098==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA209_1098==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA209_1098==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA209_1098==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA209_1098==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        input.seek(index209_1098);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA209_1158 = input.LA(1);
                        int index209_1158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1158==SELECT) ) {s = 2276;}
                        else if ( (LA209_1158==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA209_1158==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA209_1158==AT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA209_1158==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA209_1158==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA209_1158==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA209_1158==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA209_1158==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA209_1158==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA209_1158==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA209_1158==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA209_1158==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA209_1158==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA209_1158==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA209_1158==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA209_1158==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA209_1158==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA209_1158==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA209_1158==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA209_1158==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA209_1158==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA209_1158==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA209_1158==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA209_1158==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA209_1158==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA209_1158==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA209_1158==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA209_1158==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA209_1158==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA209_1158==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA209_1158==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA209_1158==LW) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA209_1158==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA209_1158==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA209_1158==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA209_1158==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA209_1158==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA209_1158==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA209_1158==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA209_1158==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA209_1158==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA209_1158==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA209_1158==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA209_1158==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA209_1158==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA209_1158==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA209_1158==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA209_1158==CONTEXT) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        input.seek(index209_1158);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA209_1168 = input.LA(1);
                        int index209_1168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1168==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA209_1168==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA209_1168==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA209_1168==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA209_1168==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA209_1168==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA209_1168==LT) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA209_1168==GT) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA209_1168==LE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA209_1168==GE) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA209_1168==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA209_1168==IS) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA209_1168==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA209_1168==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA209_1168==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA209_1168==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA209_1168==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA209_1168==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA209_1168==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA209_1168==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA209_1168==RPAREN) ) {s = 2345;}
                        else if ( (LA209_1168==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA209_1168==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA209_1168==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA209_1168==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA209_1168==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        input.seek(index209_1168);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA209_1169 = input.LA(1);
                        int index209_1169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA209_1169==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA209_1169==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA209_1169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA209_1169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA209_1169==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA209_1169==LT) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA209_1169==GT) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA209_1169==LE) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA209_1169==GE) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA209_1169==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA209_1169==IS) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA209_1169==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA209_1169==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA209_1169==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA209_1169==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA209_1169==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA209_1169==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA209_1169==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA209_1169==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA209_1169==RPAREN) ) {s = 2371;}
                        else if ( (LA209_1169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA209_1169==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA209_1169==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA209_1169==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA209_1169==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        input.seek(index209_1169);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA209_1244 = input.LA(1);
                        int index209_1244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1244==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA209_1244==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA209_1244==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA209_1244==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA209_1244==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA209_1244==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA209_1244==LT) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA209_1244==GT) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA209_1244==LE) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA209_1244==GE) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA209_1244==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA209_1244==IS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA209_1244==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA209_1244==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA209_1244==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA209_1244==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA209_1244==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA209_1244==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA209_1244==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA209_1244==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA209_1244==RPAREN) ) {s = 2397;}
                        else if ( (LA209_1244==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA209_1244==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA209_1244==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA209_1244==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA209_1244==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        input.seek(index209_1244);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA209_1245 = input.LA(1);
                        int index209_1245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1245==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA209_1245==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA209_1245==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA209_1245==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA209_1245==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA209_1245==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA209_1245==LT) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA209_1245==GT) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA209_1245==LE) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA209_1245==GE) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA209_1245==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA209_1245==IS) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA209_1245==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA209_1245==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA209_1245==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA209_1245==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA209_1245==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA209_1245==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA209_1245==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA209_1245==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA209_1245==RPAREN) ) {s = 2423;}
                        else if ( (LA209_1245==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA209_1245==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA209_1245==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA209_1245==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA209_1245==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        input.seek(index209_1245);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA209_1319 = input.LA(1);
                        int index209_1319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1319==RPAREN) ) {s = 2429;}
                        else if ( (LA209_1319==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA209_1319==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA209_1319==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA209_1319==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA209_1319==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA209_1319==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA209_1319==LT) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA209_1319==GT) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA209_1319==LE) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA209_1319==GE) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA209_1319==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA209_1319==IS) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA209_1319==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA209_1319==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA209_1319==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA209_1319==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA209_1319==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA209_1319==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA209_1319==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA209_1319==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA209_1319==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA209_1319==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA209_1319==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA209_1319==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA209_1319==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        input.seek(index209_1319);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA209_1320 = input.LA(1);
                        int index209_1320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1320==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA209_1320==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA209_1320==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA209_1320==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA209_1320==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA209_1320==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA209_1320==LT) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA209_1320==GT) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA209_1320==LE) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA209_1320==GE) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA209_1320==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA209_1320==IS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA209_1320==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA209_1320==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA209_1320==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA209_1320==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA209_1320==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA209_1320==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA209_1320==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA209_1320==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA209_1320==RPAREN) ) {s = 2475;}
                        else if ( (LA209_1320==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA209_1320==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA209_1320==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA209_1320==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA209_1320==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        input.seek(index209_1320);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA209_1385 = input.LA(1);
                        int index209_1385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1385==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA209_1385==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA209_1385==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA209_1385==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA209_1385==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA209_1385==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA209_1385==LT) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA209_1385==GT) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA209_1385==LE) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA209_1385==GE) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA209_1385==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA209_1385==IS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA209_1385==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA209_1385==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA209_1385==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA209_1385==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA209_1385==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA209_1385==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA209_1385==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA209_1385==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA209_1385==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA209_1385==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA209_1385==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA209_1385==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA209_1385==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA209_1385==RPAREN) ) {s = 14;}
                        input.seek(index209_1385);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA209_1386 = input.LA(1);
                        int index209_1386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1386==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA209_1386==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA209_1386==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA209_1386==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA209_1386==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA209_1386==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA209_1386==LT) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA209_1386==GT) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA209_1386==LE) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA209_1386==GE) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA209_1386==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA209_1386==IS) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA209_1386==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA209_1386==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA209_1386==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA209_1386==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA209_1386==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA209_1386==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA209_1386==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA209_1386==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA209_1386==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA209_1386==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA209_1386==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA209_1386==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA209_1386==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA209_1386==RPAREN) ) {s = 14;}
                        input.seek(index209_1386);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA209_1467 = input.LA(1);
                        int index209_1467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1467==RPAREN) ) {s = 2533;}
                        else if ( (LA209_1467==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA209_1467==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA209_1467==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA209_1467==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA209_1467==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA209_1467==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA209_1467==LT) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA209_1467==GT) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA209_1467==LE) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA209_1467==GE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA209_1467==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA209_1467==IS) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA209_1467==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA209_1467==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA209_1467==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA209_1467==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA209_1467==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA209_1467==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA209_1467==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA209_1467==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA209_1467==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA209_1467==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA209_1467==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA209_1467==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA209_1467==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        input.seek(index209_1467);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA209_1468 = input.LA(1);
                        int index209_1468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1468==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA209_1468==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA209_1468==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA209_1468==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA209_1468==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA209_1468==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA209_1468==LT) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA209_1468==GT) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA209_1468==LE) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA209_1468==GE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA209_1468==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA209_1468==IS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA209_1468==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA209_1468==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA209_1468==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA209_1468==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA209_1468==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA209_1468==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA209_1468==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA209_1468==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA209_1468==RPAREN) ) {s = 2579;}
                        else if ( (LA209_1468==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA209_1468==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA209_1468==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA209_1468==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA209_1468==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        input.seek(index209_1468);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA209_1533 = input.LA(1);
                        int index209_1533 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1533==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA209_1533==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA209_1533==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA209_1533==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA209_1533==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA209_1533==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA209_1533==LT) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA209_1533==GT) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA209_1533==LE) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA209_1533==GE) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA209_1533==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA209_1533==IS) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA209_1533==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA209_1533==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA209_1533==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA209_1533==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA209_1533==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA209_1533==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA209_1533==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA209_1533==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA209_1533==RPAREN) ) {s = 2605;}
                        else if ( (LA209_1533==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA209_1533==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA209_1533==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA209_1533==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA209_1533==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        input.seek(index209_1533);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA209_1534 = input.LA(1);
                        int index209_1534 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1534==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA209_1534==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA209_1534==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA209_1534==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA209_1534==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA209_1534==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA209_1534==LT) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA209_1534==GT) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA209_1534==LE) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA209_1534==GE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA209_1534==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA209_1534==IS) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA209_1534==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA209_1534==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA209_1534==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA209_1534==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA209_1534==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA209_1534==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA209_1534==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA209_1534==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA209_1534==RPAREN) ) {s = 2631;}
                        else if ( (LA209_1534==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA209_1534==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA209_1534==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA209_1534==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA209_1534==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        input.seek(index209_1534);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA209_1617 = input.LA(1);
                        int index209_1617 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1617==RPAREN) ) {s = 2637;}
                        else if ( (LA209_1617==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA209_1617==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA209_1617==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA209_1617==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA209_1617==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA209_1617==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA209_1617==LT) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA209_1617==GT) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA209_1617==LE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA209_1617==GE) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA209_1617==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA209_1617==IS) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA209_1617==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA209_1617==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA209_1617==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA209_1617==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA209_1617==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA209_1617==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA209_1617==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA209_1617==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA209_1617==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA209_1617==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA209_1617==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA209_1617==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA209_1617==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        input.seek(index209_1617);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA209_1618 = input.LA(1);
                        int index209_1618 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1618==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA209_1618==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA209_1618==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA209_1618==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA209_1618==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA209_1618==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA209_1618==LT) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA209_1618==GT) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA209_1618==LE) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA209_1618==GE) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA209_1618==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA209_1618==IS) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA209_1618==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA209_1618==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA209_1618==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA209_1618==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA209_1618==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA209_1618==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA209_1618==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA209_1618==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA209_1618==RPAREN) ) {s = 2683;}
                        else if ( (LA209_1618==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA209_1618==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA209_1618==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA209_1618==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA209_1618==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        input.seek(index209_1618);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA209_1683 = input.LA(1);
                        int index209_1683 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1683==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA209_1683==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA209_1683==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA209_1683==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA209_1683==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA209_1683==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA209_1683==LT) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA209_1683==GT) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA209_1683==LE) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA209_1683==GE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA209_1683==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA209_1683==IS) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA209_1683==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA209_1683==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA209_1683==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA209_1683==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA209_1683==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA209_1683==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA209_1683==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA209_1683==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA209_1683==RPAREN) ) {s = 2709;}
                        else if ( (LA209_1683==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA209_1683==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA209_1683==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA209_1683==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA209_1683==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        input.seek(index209_1683);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA209_1684 = input.LA(1);
                        int index209_1684 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1684==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA209_1684==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA209_1684==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA209_1684==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA209_1684==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA209_1684==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA209_1684==LT) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA209_1684==GT) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA209_1684==LE) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA209_1684==GE) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA209_1684==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA209_1684==IS) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA209_1684==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA209_1684==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA209_1684==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA209_1684==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA209_1684==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA209_1684==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA209_1684==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA209_1684==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA209_1684==RPAREN) ) {s = 2735;}
                        else if ( (LA209_1684==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA209_1684==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA209_1684==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA209_1684==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA209_1684==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        input.seek(index209_1684);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA209_1767 = input.LA(1);
                        int index209_1767 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1767==RPAREN) ) {s = 2741;}
                        else if ( (LA209_1767==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA209_1767==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA209_1767==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA209_1767==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA209_1767==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA209_1767==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA209_1767==LT) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA209_1767==GT) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA209_1767==LE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA209_1767==GE) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA209_1767==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA209_1767==IS) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA209_1767==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA209_1767==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA209_1767==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA209_1767==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA209_1767==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA209_1767==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA209_1767==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA209_1767==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA209_1767==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA209_1767==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA209_1767==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA209_1767==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA209_1767==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        input.seek(index209_1767);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA209_1768 = input.LA(1);
                        int index209_1768 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1768==RPAREN) ) {s = 2767;}
                        else if ( (LA209_1768==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA209_1768==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA209_1768==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA209_1768==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA209_1768==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA209_1768==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA209_1768==LT) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA209_1768==GT) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA209_1768==LE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA209_1768==GE) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA209_1768==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA209_1768==IS) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA209_1768==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA209_1768==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA209_1768==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA209_1768==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA209_1768==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA209_1768==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA209_1768==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA209_1768==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA209_1768==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA209_1768==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA209_1768==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA209_1768==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA209_1768==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        input.seek(index209_1768);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA209_1840 = input.LA(1);
                        int index209_1840 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1840==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA209_1840==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA209_1840==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA209_1840==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA209_1840==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA209_1840==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA209_1840==LT) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA209_1840==GT) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA209_1840==LE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA209_1840==GE) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA209_1840==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA209_1840==IS) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA209_1840==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA209_1840==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA209_1840==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA209_1840==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA209_1840==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA209_1840==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA209_1840==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA209_1840==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA209_1840==RPAREN) ) {s = 2813;}
                        else if ( (LA209_1840==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA209_1840==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA209_1840==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA209_1840==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA209_1840==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        input.seek(index209_1840);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA209_1841 = input.LA(1);
                        int index209_1841 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1841==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA209_1841==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA209_1841==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA209_1841==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA209_1841==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA209_1841==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA209_1841==LT) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA209_1841==GT) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA209_1841==LE) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA209_1841==GE) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA209_1841==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA209_1841==IS) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA209_1841==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA209_1841==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA209_1841==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA209_1841==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA209_1841==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA209_1841==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA209_1841==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA209_1841==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA209_1841==RPAREN) ) {s = 2839;}
                        else if ( (LA209_1841==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA209_1841==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA209_1841==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA209_1841==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA209_1841==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        input.seek(index209_1841);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA209_1913 = input.LA(1);
                        int index209_1913 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1913==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA209_1913==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA209_1913==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA209_1913==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA209_1913==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA209_1913==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA209_1913==LT) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA209_1913==GT) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA209_1913==LE) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA209_1913==GE) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA209_1913==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA209_1913==IS) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA209_1913==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA209_1913==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA209_1913==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA209_1913==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA209_1913==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA209_1913==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA209_1913==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA209_1913==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA209_1913==RPAREN) ) {s = 2865;}
                        else if ( (LA209_1913==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA209_1913==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA209_1913==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA209_1913==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA209_1913==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        input.seek(index209_1913);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA209_1914 = input.LA(1);
                        int index209_1914 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1914==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA209_1914==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA209_1914==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA209_1914==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA209_1914==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA209_1914==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA209_1914==LT) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA209_1914==GT) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA209_1914==LE) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA209_1914==GE) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA209_1914==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA209_1914==IS) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA209_1914==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA209_1914==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA209_1914==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA209_1914==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA209_1914==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA209_1914==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA209_1914==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA209_1914==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA209_1914==RPAREN) ) {s = 2891;}
                        else if ( (LA209_1914==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA209_1914==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA209_1914==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA209_1914==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA209_1914==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        input.seek(index209_1914);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA209_1989 = input.LA(1);
                        int index209_1989 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1989==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA209_1989==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA209_1989==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA209_1989==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA209_1989==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA209_1989==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA209_1989==LT) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA209_1989==GT) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA209_1989==LE) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA209_1989==GE) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA209_1989==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA209_1989==IS) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA209_1989==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA209_1989==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA209_1989==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA209_1989==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA209_1989==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA209_1989==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA209_1989==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA209_1989==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA209_1989==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA209_1989==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA209_1989==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA209_1989==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA209_1989==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA209_1989==RPAREN) ) {s = 14;}
                        input.seek(index209_1989);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA209_1990 = input.LA(1);
                        int index209_1990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_1990==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA209_1990==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA209_1990==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA209_1990==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA209_1990==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA209_1990==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA209_1990==LT) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA209_1990==GT) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA209_1990==LE) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA209_1990==GE) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA209_1990==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA209_1990==IS) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA209_1990==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA209_1990==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA209_1990==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA209_1990==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA209_1990==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA209_1990==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA209_1990==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA209_1990==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA209_1990==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA209_1990==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA209_1990==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA209_1990==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA209_1990==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA209_1990==RPAREN) ) {s = 14;}
                        input.seek(index209_1990);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA209_2062 = input.LA(1);
                        int index209_2062 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2062==RPAREN) ) {s = 2949;}
                        else if ( (LA209_2062==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA209_2062==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA209_2062==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA209_2062==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA209_2062==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA209_2062==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA209_2062==LT) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA209_2062==GT) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA209_2062==LE) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA209_2062==GE) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA209_2062==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA209_2062==IS) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA209_2062==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA209_2062==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA209_2062==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA209_2062==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA209_2062==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA209_2062==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA209_2062==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA209_2062==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA209_2062==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA209_2062==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA209_2062==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA209_2062==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        input.seek(index209_2062);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA209_2063 = input.LA(1);
                        int index209_2063 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2063==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA209_2063==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA209_2063==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA209_2063==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA209_2063==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA209_2063==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA209_2063==LT) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA209_2063==GT) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA209_2063==LE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA209_2063==GE) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA209_2063==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA209_2063==IS) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA209_2063==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA209_2063==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA209_2063==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA209_2063==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA209_2063==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA209_2063==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA209_2063==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA209_2063==RPAREN) ) {s = 2993;}
                        else if ( (LA209_2063==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA209_2063==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA209_2063==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA209_2063==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA209_2063==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        input.seek(index209_2063);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA209_2128 = input.LA(1);
                        int index209_2128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2128==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA209_2128==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA209_2128==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA209_2128==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA209_2128==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA209_2128==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA209_2128==LT) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA209_2128==GT) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA209_2128==LE) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA209_2128==GE) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA209_2128==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA209_2128==IS) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA209_2128==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA209_2128==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA209_2128==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA209_2128==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA209_2128==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA209_2128==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA209_2128==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA209_2128==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA209_2128==AS) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA209_2128==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA209_2128==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA209_2128==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA209_2128==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA209_2128==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA209_2128==RPAREN) ) {s = 14;}
                        input.seek(index209_2128);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA209_2129 = input.LA(1);
                        int index209_2129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2129==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA209_2129==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA209_2129==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA209_2129==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA209_2129==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA209_2129==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA209_2129==LT) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA209_2129==GT) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA209_2129==LE) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA209_2129==GE) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA209_2129==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA209_2129==IS) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA209_2129==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA209_2129==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA209_2129==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA209_2129==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA209_2129==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA209_2129==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA209_2129==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA209_2129==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA209_2129==AS) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA209_2129==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA209_2129==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA209_2129==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA209_2129==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA209_2129==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA209_2129==RPAREN) ) {s = 14;}
                        input.seek(index209_2129);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA209_2201 = input.LA(1);
                        int index209_2201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2201==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA209_2201==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA209_2201==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA209_2201==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA209_2201==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA209_2201==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA209_2201==LT) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA209_2201==GT) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA209_2201==LE) && (synpred3_EsperEPL2Grammar())) {s = 3061;}
                        else if ( (LA209_2201==GE) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA209_2201==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA209_2201==IS) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA209_2201==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA209_2201==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        else if ( (LA209_2201==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3067;}
                        else if ( (LA209_2201==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3068;}
                        else if ( (LA209_2201==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3069;}
                        else if ( (LA209_2201==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3070;}
                        else if ( (LA209_2201==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3071;}
                        else if ( (LA209_2201==RPAREN) ) {s = 3072;}
                        else if ( (LA209_2201==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3073;}
                        else if ( (LA209_2201==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3074;}
                        else if ( (LA209_2201==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3075;}
                        else if ( (LA209_2201==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3076;}
                        else if ( (LA209_2201==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3077;}
                        input.seek(index209_2201);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA209_2202 = input.LA(1);
                        int index209_2202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA209_2202==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3078;}
                        else if ( (LA209_2202==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3079;}
                        else if ( (LA209_2202==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3080;}
                        else if ( (LA209_2202==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3081;}
                        else if ( (LA209_2202==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3082;}
                        else if ( (LA209_2202==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3083;}
                        else if ( (LA209_2202==LT) && (synpred3_EsperEPL2Grammar())) {s = 3084;}
                        else if ( (LA209_2202==GT) && (synpred3_EsperEPL2Grammar())) {s = 3085;}
                        else if ( (LA209_2202==LE) && (synpred3_EsperEPL2Grammar())) {s = 3086;}
                        else if ( (LA209_2202==GE) && (synpred3_EsperEPL2Grammar())) {s = 3087;}
                        else if ( (LA209_2202==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3088;}
                        else if ( (LA209_2202==IS) && (synpred3_EsperEPL2Grammar())) {s = 3089;}
                        else if ( (LA209_2202==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3090;}
                        else if ( (LA209_2202==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3091;}
                        else if ( (LA209_2202==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3092;}
                        else if ( (LA209_2202==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3093;}
                        else if ( (LA209_2202==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3094;}
                        else if ( (LA209_2202==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3095;}
                        else if ( (LA209_2202==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3096;}
                        else if ( (LA209_2202==RPAREN) ) {s = 3097;}
                        else if ( (LA209_2202==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3098;}
                        else if ( (LA209_2202==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3099;}
                        else if ( (LA209_2202==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3100;}
                        else if ( (LA209_2202==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3101;}
                        else if ( (LA209_2202==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3102;}
                        input.seek(index209_2202);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA209_2345 = input.LA(1);
                        int index209_2345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2345);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA209_2371 = input.LA(1);
                        int index209_2371 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2371);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA209_2397 = input.LA(1);
                        int index209_2397 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2397);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA209_2423 = input.LA(1);
                        int index209_2423 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2423);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA209_2429 = input.LA(1);
                        int index209_2429 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2429);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA209_2475 = input.LA(1);
                        int index209_2475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2475);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA209_2533 = input.LA(1);
                        int index209_2533 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2533);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA209_2579 = input.LA(1);
                        int index209_2579 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2579);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA209_2605 = input.LA(1);
                        int index209_2605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2605);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA209_2631 = input.LA(1);
                        int index209_2631 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2631);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA209_2637 = input.LA(1);
                        int index209_2637 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2637);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA209_2683 = input.LA(1);
                        int index209_2683 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2683);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA209_2709 = input.LA(1);
                        int index209_2709 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2709);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA209_2735 = input.LA(1);
                        int index209_2735 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2735);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA209_2741 = input.LA(1);
                        int index209_2741 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2741);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA209_2767 = input.LA(1);
                        int index209_2767 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2767);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA209_2813 = input.LA(1);
                        int index209_2813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2813);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA209_2839 = input.LA(1);
                        int index209_2839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2839);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA209_2865 = input.LA(1);
                        int index209_2865 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2865);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA209_2891 = input.LA(1);
                        int index209_2891 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2891);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA209_2949 = input.LA(1);
                        int index209_2949 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2949);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA209_2993 = input.LA(1);
                        int index209_2993 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_2993);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA209_3072 = input.LA(1);
                        int index209_3072 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_3072);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA209_3097 = input.LA(1);
                        int index209_3097 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3102;}
                        input.seek(index209_3097);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1848 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1852 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1858 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1877 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1881 = new BitSet(new long[]{0x004002000800E010L,0x4800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1887 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1920 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDecl1949 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDecl1951 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_expressionDecl1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDecl1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl1995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl1997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum2040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum2044 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4026001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum2052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum2057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2104 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4026001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2216 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4004001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2257 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4006001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2389 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x408C001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2395 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4004001000000000L,0x0000000000C89006L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2437 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x408E001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2443 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x4006001000000000L,0x0000000000E89006L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextExpr_in_eplExpression2488 = new BitSet(new long[]{0x0040020008000010L,0x4000800000000000L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2495 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2500 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2505 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2510 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2515 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createContextExpr_in_eplExpression2520 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2525 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2530 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_contextExpr2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_contextExpr2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2574 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2577 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2583 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2586 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2590 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2593 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2597 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2603 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2606 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2613 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2616 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2619 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2626 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2629 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2636 = new BitSet(new long[]{0x0130800080005000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2639 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2646 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2649 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2652 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2679 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2688 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2691 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2754 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2758 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2803 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2807 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2826 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2828 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2831 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2833 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2841 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2878 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2885 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2892 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2898 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2905 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2907 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2915 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2966 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2968 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2971 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2973 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2977 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem3003 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem3018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem3020 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3022 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem3025 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem3027 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3033 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem3047 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem3050 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem3052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3120 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3122 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3124 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3127 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3129 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3133 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3160 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3178 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3183 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3192 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3196 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3198 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3201 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3249 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3251 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3257 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3259 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3262 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3266 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3272 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3274 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3283 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3285 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3287 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3294 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3296 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3303 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3305 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3307 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3383 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3402 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3404 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3407 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3409 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3416 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3469 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3471 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3475 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3477 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3482 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3515 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3568 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3572 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3577 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3619 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3624 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3653 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3684 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3725 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3731 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3736 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3741 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0212000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3750 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3754 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3758 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3773 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3792 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3809 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3812 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3901 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x5002001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3904 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3930 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4003 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr4032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr4034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr4038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr4041 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList4088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList4090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4174 = new BitSet(new long[]{0x803801E807FC4420L,0x469C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x5002001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4217 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4245 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4276 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4280 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4287 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1012000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0022000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaExpr4327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CREATE_in_createContextExpr4389 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_createContextExpr4391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextExpr4395 = new BitSet(new long[]{0x0000100000020000L,0xA008000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextExpr4397 = new BitSet(new long[]{0x0000100000020000L,0xA008000000000000L});
    public static final BitSet FOLLOW_createContextDetail_in_createContextExpr4400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_createContextDetail4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextDetail4426 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_createContextDetail4428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_createContextDetail4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_createContextDetail4447 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_createContextDetail4450 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextDetail4454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4457 = new BitSet(new long[]{0x803809E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextPartitionItem_in_createContextDetail4459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextDetail4478 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createContextDetail4481 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_createContextGroupItem_in_createContextDetail4483 = new BitSet(new long[]{0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextDetail4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextDetail4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIATED_in_createContextDetail4507 = new BitSet(new long[]{0x0000080000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BY_in_createContextDetail4510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_createContextFilter_in_createContextDetail4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_createContextDetail4519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_createContextDetail4522 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_AFTER_in_createContextDetail4524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_createContextDetail4526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextFilter4554 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_AS_in_createContextFilter4556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextFilter4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4585 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_AND_EXPR_in_createContextPartitionItem4589 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COMMA_in_createContextPartitionItem4591 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_createContextPartitionItem4594 = new BitSet(new long[]{0x0000000400001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_FROM_in_createContextPartitionItem4598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_createContextPartitionItem4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_createContextGroupItem4626 = new BitSet(new long[]{0x803809E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_BY_in_createContextGroupItem4628 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_createContextGroupItem4631 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createContextGroupItem4633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createContextGroupItem4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual4667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual4669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4758 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4764 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4853 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4874 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4891 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4894 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4937 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4941 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4945 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4948 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4969 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4983 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4985 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent5052 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5055 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent5058 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent5061 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair5078 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair5081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause5103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause5139 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause5145 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause5151 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause5157 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_selectClause5160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList5194 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList5197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement5241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement5246 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement5249 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement5253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector5311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector5313 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector5316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector5320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression5351 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression5355 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression5359 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression5363 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5372 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression5375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression5377 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression5384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5388 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5394 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression5401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5475 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5530 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5536 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5543 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5548 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5554 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5560 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5566 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5616 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5618 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5620 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5623 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5654 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5659 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5686 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5725 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5771 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5775 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5779 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5783 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5787 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0012000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD000000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom6004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom6010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom6022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine6066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine6071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine6073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem6100 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem6102 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem6104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression6129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression6131 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression6133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression6135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression6168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression6170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression6174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression6176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression6191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression6196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression6202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression6260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression6262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression6265 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression6267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_viewExpression6325 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression6334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression6337 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression6342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6402 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6405 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6445 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6472 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6557 = new BitSet(new long[]{0x0030800080005002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6572 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6576 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6580 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6584 = new BitSet(new long[]{0x0000000080005002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6641 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_number_in_outputLimit6652 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6658 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6664 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6697 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6714 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_outputLimit6716 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6721 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit6743 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outputLimit6774 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_TERMINATED_in_outputLimit6780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6962 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7010 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7016 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit7023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit7029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit7035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet7093 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7097 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7101 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7105 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7109 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet7114 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet7116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause7150 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_whenClause7153 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause7155 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_whenClause7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause7171 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_elseClause7174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression7187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7201 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7204 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7207 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression7221 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_caseExpression7223 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression7225 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression7228 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7266 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression7271 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression7273 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7305 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression7310 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression7312 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression7349 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression7352 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression7355 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression7359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression7380 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression7383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7396 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression7409 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7427 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression7441 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression7443 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression7457 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression7471 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7501 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7536 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7541 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7546 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7706 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7738 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7742 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7746 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7750 = new BitSet(new long[]{0x803B81E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7774 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7809 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000780L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7915 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7954 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7960 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x08A0000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7985 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression8014 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression8016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x08A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression8042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression8048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression8171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression8173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression8219 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression8221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression8271 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8273 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression8276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression8330 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression8332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery8394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8425 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr8431 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr8433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression8479 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression8482 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression8505 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression8508 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression8511 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8530 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8555 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8564 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8571 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression8622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression8628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression8633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8638 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8645 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression8684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression8689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression8691 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression8696 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression8702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign8724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign8727 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_newAssign8729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8836 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8842 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8845 = new BitSet(new long[]{0xB83841E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8848 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8858 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8866 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8902 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8909 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8914 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8982 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC01E001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8988 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9002 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression9009 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression9011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc9060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9063 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9067 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9072 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc9087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9090 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9094 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9099 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc9114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9117 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9129 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9134 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc9149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc9169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9172 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9176 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9181 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9199 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9203 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9208 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc9223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9226 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc9230 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc9235 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc9241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc9250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc9255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc9260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc9265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9268 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9273 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9279 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9294 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9299 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9310 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9317 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc9366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9368 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9373 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9384 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9391 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9393 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc9440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9443 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc9454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9456 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9465 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9472 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9527 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9545 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9572 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9585 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9587 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc9594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9604 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9611 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc9658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9661 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9684 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9691 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation9737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation9739 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation9742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation9745 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_firstAggregation9747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation9753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9758 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9765 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation9822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation9824 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation9827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation9830 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_lastAggregation9832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation9838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9843 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9845 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9850 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation9908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation9910 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation9912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation9915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9920 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9927 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr9986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr10006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr10019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr10038 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr10040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction10068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction10073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction10085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction10088 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction10090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass10120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass10122 = new BitSet(new long[]{0x803801E807FD44A0L,0x46BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass10126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass10130 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass10133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass10170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass10175 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass10178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass10182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent10214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent10221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent10245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent10257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent10269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_funcIdent10280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs10297 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs10302 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs10309 = new BitSet(new long[]{0x8038C1E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs10312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem10326 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem10329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10340 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList10342 = new BitSet(new long[]{0x803801E807FD44A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList10345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression10373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression10392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression10395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat10448 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat10455 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat10457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat10459 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat10463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10492 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression10497 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10499 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10531 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression10536 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10538 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10573 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10582 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression10649 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression10655 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression10663 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression10669 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression10678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList10793 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList10798 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00A0000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList10804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom10827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix10842 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix10848 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0412000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix10850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix10852 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix10859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix10861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix10869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix10871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression10933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression10937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_observerExpression10954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression10965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression10968 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression10970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression10973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression11024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression11027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression11029 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD436001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression11033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression11037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression11050 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression11053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression11055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange11076 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09007L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11088 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC816001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange11111 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange11113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange11124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression11211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression11213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression11222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression11233 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression11235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression11238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression11250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression11298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic11328 = new BitSet(new long[]{0x803801E80FFC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic11331 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic11333 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic11335 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic11339 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic11342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic11344 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic11349 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic11351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic11355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList11408 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList11411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement11437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement11453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement11458 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement11461 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement11465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector11511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector11513 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector11516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression11567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression11569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression11578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0410000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression11589 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC036001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression11591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression11594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression11606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression11617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation11669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation11673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation11676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation11678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation11680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier11735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy11819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11868 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xC016001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expression_in_expressionList11871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList11902 = new BitSet(new long[]{0x803801E817FD64A0L,0x56BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0xD416001000000000L,0x0000000000E09006L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime11934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime11945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime11956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime11967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime11979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime11990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime12014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime12019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast12039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast12044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable12055 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable12060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable12064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable12068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable12072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable12076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar12133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand12153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand12166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand12178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand12180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_frequencyOperand12183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand12187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand12189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand12247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_rangeOperand12250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand12254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand12256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator12370 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator12374 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator12376 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator12379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator12427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator12431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator12433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator12436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList12483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList12488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xD002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0880000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList12494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter12516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter12522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter12527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty12546 = new BitSet(new long[]{0x803801E807FC4420L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8410000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic12583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic12587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic12589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic12608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic12622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent12776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent12778 = new BitSet(new long[]{0x803801E807FC4422L,0x469C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent12821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent12837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent12844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent12851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent12869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent12876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent12883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent12890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent12897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent12904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent12911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent12918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent12925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent12932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent12939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent12946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent12953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent12960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent12974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent12988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent12995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent13002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent13009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent13016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent13023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent13030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent13037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent13044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent13051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent13058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent13065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent13072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent13079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent13088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent13097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent13104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent13111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent13118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent13125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent13132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent13139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent13146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent13153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXT_in_keywordAllowedIdent13160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr13181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr13190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent13204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent13212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod13237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod13263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod13286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod13306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13314 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod13323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod13337 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod13348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC002001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod13356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart13403 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart13407 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart13409 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart13413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart13417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart13465 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart13469 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart13471 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart13475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart13479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart13527 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart13531 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart13533 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart13541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart13589 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart13593 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart13595 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart13599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart13603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart13652 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart13656 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart13658 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart13662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart13666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart13715 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart13719 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart13721 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart13733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart13783 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart13787 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart13789 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart13797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart13801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart13851 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart13855 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart13857 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number13924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number13941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number13958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number13975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution13996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant14015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant14022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant14035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant14055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant14075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant14097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant14103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000001000000000L,0x0000000000C09000L});
    public static final BitSet FOLLOW_number_in_numberconstant14107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant14136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant14152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar5236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar10001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar10063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar11448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar12009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar12034 = new BitSet(new long[]{0x0000000000000002L});
}
