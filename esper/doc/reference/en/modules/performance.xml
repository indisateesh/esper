<chapter id="performance" revision="1">

    <title>Performance</title>

    <para>
        Esper has been highly optimized to handle very high throughput streams with very little latency between event receipt and output result posting.
        It is also possible to use Esper on a soft-real-time or hard-real-time JVM to maximize predictability even
        further.
    </para>

    <para>
        This section describes performance best practices and explains how to assess Esper performance by using our
        provided performance kit.
    </para>

    <sect1 id="performance-tips" revision="1">
        <title>Performance Tips</title>

		<sect2 id="perf-tips-1">
			<title>Understand how to tune your Java virtual machine</title>
	
			<para>
				Esper runs on a JVM and you need to be familiar with JVM tuning.
				Key parameters to consider include minimum and maximum heap memory and nursery heap sizes.
				Statements with time-based or length-based data windows can consume large amounts of memory as their size or length can be large.
			</para>

			<para>
				For time-based data windows, one needs to be aware that the memory consumed depends on the actual event stream input
				throughput. Event pattern instances also consume memory, especially when using the "every"
				keyword in patterns to repeat pattern sub-expressions - which again will depend on the actual event stream input throughput.
			</para>
		</sect2>
	
		<sect2 id="perf-tips-2">
			<title>Compare Esper to other solutions</title>
			<para>
				If you compare Esper performance to the performance of another solution, you need to ensure that your statements have
				truly equivalent semantics. The is because between different vendors the event processing language can be seem fairly similar 
				whoever may, for all similarities, produce different results.
			</para>

			<para>
				For example some vendor solution mandates the use of "bounded streams". The next statement shows one vendor's event processing syntax:
			</para>

<programlisting><![CDATA[// Other (name omitted) vendor solution statement:
select * from (select * from Market where ticker = 'GOOG') retain 1 event
// The above is NOT an Esper statement]]></programlisting>
			<para>
				The semantically equivalent statement in Esper is:
			</para>
		
<programlisting><![CDATA[// Esper statement with the same semantics:
select * from Market(ticker='$').win:length(1)]]></programlisting>

			<para>
				As an example, a NOT semantically equivalent statement in Esper is:
			</para>
		
<programlisting><![CDATA[// Esper statement that DOES ***NOT*** HAVE the same semantics 
// No length window was used
select * from Market(ticker='$')]]></programlisting>
		</sect2>

		<sect2 id="perf-tips-3">
			<title>Select the underlying event rather then individual fields</title>
			
			<para>
				By selecting the underlying event in the select-clause we can reduce load on the engine, since the 
				engine does not need to generate a new output event for each input event.
			</para>
	
			<para>
				For example, the following statement returns the underlying event to update listeners:
			</para>
	
<programlisting><![CDATA[// Better performance
select * from RFIDEvent]]></programlisting>

			<para>
				In comparison, the next statement selects individual properties. This statement requires the engine to generate an output event that 
				contains exactly the required properties:
			</para>

<programlisting><![CDATA[// Less good performance
select assetId, zone, xlocation, ylocation from RFIDEvent ]]></programlisting>
		</sect2>
		
		<sect2 id="perf-tips-4">
			<title>Prefer stream-level filtering over post-data-window filtering</title>

			<para>
				Esper stream-level filtering is very well optimized, while filtering via the where-clause post any data windows is not optimized. 
				In very simple statements that don't have data windows this distinction can make a performance difference.
			</para>
	
			<para>
				Consider the example below, which performs stream-level filtering:
			</para>

<programlisting><![CDATA[// Better performance : stream-level filtering
select * from MarketData(ticker = 'GOOG')]]></programlisting>

			<para>
				The example below is the equivalent (same semantics) statement and performs post-data-window filtering without a data window.
				The engine does not optimize statements that filter in the where-clause for the reason that data window views are generally present.
			</para>

<programlisting><![CDATA[// Less good performance : post-data-window filtering
select * from MarketData where ticker = 'GOOG']]></programlisting>

			<para>
				Thus this optimization technique applies to statements without any data window. 
			</para>

			<para>
				When a data window is used, the semantics change. Let's look at an example to better understand the difference:
				In the next statement only GOOG market events enter the length window:
			</para>

			<programlisting><![CDATA[select avg(price) from MarketData(ticker = 'GOOG').win:length(100)]]></programlisting>

			<para>
				The above statement computes the average price of GOOG market data events for the last 100 GOOG market data events. 
			</para>
			
			<para>
				Compare the filter position to a filter in the where clause. 
				The following statement is NOT equivalent as all events enter the data window (not just GOOG events):
			</para>
	
			<programlisting><![CDATA[select avg(price) from MarketData.win:length(100) where ticker = 'GOOG']]></programlisting>

			<para>
				The statement above computes the average price of all market data events for the last 100 market data events, and outputs results only for GOOG.
			</para>
		</sect2>
	
		<sect2 id="perf-tips-6">
			<title>Reduce the use of arithmetic in expressions</title>

			<para>
				Esper does not yet attempt to pre-evaluate arithmetic expressions that produce constant results.
			</para>
	
			<para>
				Therefore, a filter expression as below is optimized:
			</para>
<programlisting><![CDATA[// Better performance : no arithmetic
select * from MarketData(price>40) ]]></programlisting>

			<para>
				While the engine cannot currently optimize this expression:
			</para>

<programlisting><![CDATA[// Less good performance : with arithmetic
select * from MarketData(price+10>50) ]]></programlisting>

		</sect2>
		
		<sect2 id="perf-tips-7">
			<title>Consider using EventPropertyGetter for fast access to event properties</title>

			<para>
				The EventPropertyGetter interface is useful for obtaining an event property value without property name table lookup 
				given an EventBean instance that is of the same event type that the property getter was obtained from.
			</para>

			<para>
				When compiling a statement, the EPStatement instance lets us know the EventType via the getEventType() method.
				From the EventType we can obtain EventPropertyGetter instances for named event properties.
			</para>

			<para>
				To demonstrate, consider the following simple statement:
			</para>
	
			<programlisting><![CDATA[select symbol, avg(price) from MarketDataEvent group by symbol]]></programlisting>

			<para>
				After compiling the statement, obtain the EventType and pass the type to the listener:
			</para>
	
<programlisting><![CDATA[EPStatement stmt = epService.getEPAdministrator().createEQL(stmtText);
MyGetterUpdateListener listener = new MyGetterUpdateListener(stmt.getEventType());]]></programlisting>

			<para>
				The listener can use the type to obtain fast getters for property values of events for the same type:
			</para>

<programlisting><![CDATA[public class MyGetterUpdateListener implements StatementAwareUpdateListener {
    private final EventPropertyGetter symbolGetter;
    private final EventPropertyGetter avgPriceGetter;

    public MyGetterUpdateListener(EventType eventType) {
        symbolGetter = eventType.getGetter("symbol");
        avgPriceGetter = eventType.getGetter("avg(price)");
    }]]></programlisting>

			<para>
				Last, the update method can invoke the getters to obtain event property values:
			</para>
	
	<programlisting><![CDATA[    public void update(EventBean[] eventBeans, EventBean[] oldBeans, EPStatement epStatement, EPServiceProvider epServiceProvider) {
        String symbol = (String) symbolGetter.get(eventBeans[0]);
        long volume = (Long) volumeGetter.get(eventBeans[0]);
        // some more logic here
    }]]></programlisting>
		</sect2>
			
		<sect2 id="perf-tips-8">
			<title>Consider casting the underlying event</title>

			<para>
				When an application requires the value of most or all event properties, it can often be best to simply select the underlying event via wildcard
				and cast the received events.
			</para>

			<para>
				Let's look at the sample statement:
			</para>
	
			<programlisting><![CDATA[select * from MarketDataEvent(symbol regexp 'E[a-z]')]]></programlisting>

			<para>
				An update listener to the statement may want to cast the received events to the expected underlying event class:
			</para>
	
<programlisting><![CDATA[    public void update(EventBean[] eventBeans, EventBean[] eventBeans) {
        MarketDataEvent md = (MarketDataEvent) eventBeans[0].getUnderlying();
        // some more logic here
    }]]></programlisting>

		</sect2>
		
		<sect2 id="perf-tips-9">
			<title>Turn off logging</title>

			<para>
	Since Esper 1.10, even if you don't have a log4j configuration file in place, Esper will make sure to minimize execution path logging overhead.
	For prior versions, and to reduce logging overhead overall, we recommend the "WARN" log level or the "INFO" log level.
			</para>

			<para>
	Please see the log4j configuration file in "etc/infoonly_log4j.xml" for example log4j settings.
			</para>
		</sect2>

    </sect1>

    <sect1 id="performance-results" revision="1">
        <title>Performance results</title>


        <para>
            For a complete understanding of those results, consult the next section.
        </para>


    </sect1>


    <sect1 id="performance-kit" revision="1">
        <title>Using the performance kit</title>

        <sect2 id="how-to-kit" revision="1">
            <title>How to use the performance kit</title>

        <para>
            The benchmark application is basically an Esper event server build with Esper that listens to remote clients
            over TCP.
            Remote clients send MarketData(ticker, price, volume) streams to the event server.
            The Esper event server is started with 1000 statements of one single kind (unless otherwise written),
            with one statement per ticker symbol.
            The statement prototype is provided along the results with a '$' instead of the ticker symbol.
            The Esper event server is entirely multithreaded and can leverage the full power of 32bit or 64bit
            underlying hardware
            multi-processor multi-core architecture.
        </para>

        <para>
            Results are posted on our Wiki page at http://docs.codehaus.org/display/ESPER/Esper+performance.
            Reported results do not represent best ever obtained results. Reported results may help you better compare
            Esper to other solutions (for latency, throughput and CPU utilization) and also assess your target hardware and JVMs.
        </para>

            <para>
                The Esper event server, client and statement prototypes are provided in the source repository
                <literal>esper/trunk/examples/benchmark/</literal>
                . Refer to http://xircles.codehaus.org/projects/esper/repo
                for source access.
            </para>

            <para>
                A built is provided for convenience (without sources) at xxx.
                It contains Ant script to start client, server in simulation mode and server. For real measurement we
                advise
                to start from a shell script (because Ant is pipelining stdout/stderr when you invoke a JVM from Ant -
                which
                is costly). Sample scripts are provided.
            </para>

            <para>
                If you use the kit you should:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Choose the statement you want to benchmark, add it to
                        <literal>etc/statements.properties</literal>
                        under
                        your own KEY and use the
                        <literal>-mode KEY</literal>
                        when you start the Esper event server.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Prepare your runServer.sh/runServer.cmd and runClient.sh/runclient.cmd scripts. You'll need to
                        drop required
                        jar libraries in
                        <literal>lib/</literal>
                        , configure the classpath in those script to include
                        <literal>build</literal>
                        and
                        <literal>etc</literal>
                        . The required libraries are Esper (any compatible version, we have tested started with Esper
                        1.7.0)
                        and its dependencies as in the sample below (with Esper 1.10) :
                        <programlisting><![CDATA[
# classpath on Unix/Linux (on one single line)
etc:build:lib/esper-1.10.0.jar:lib/commons-logging-1.0.3.jar:lib/cglib-full-2.0.2.jar
   :lib/antlr-2.7.5.jar:lib/log4j-1.2.8.jar
@rem  classpath on Windows (on one single line)
etc;build;lib\esper-1.10.0.jar;lib\commons-logging-1.0.3.jar;lib\cglib-full-2.0.2.jar
   ;lib\antlr-2.7.5.jar;lib\log4j-1.2.8.jar
              ]]></programlisting>
                        Note that <literal>./etc</literal> and <literal>./build</literal> have to be in the classpath.
                        At that stage you should also start to set min and max JVM heap. A good start is 1GB as in
                        <literal>-Xms1g -Xmx1g</literal>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Write the statement you want to benchmark given that client will send a stream MarketData(String
                        ticker, int volume, double price), add it to
                        <literal>etc/statements.properties</literal>
                        under
                        your own KEY and use the
                        <literal>-mode KEY</literal>
                        when you start the Esper event server.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Write the statement you want to benchmark given that client will send a stream MarketData(String
                        ticker, int volume, double price), add it to
                        <literal>etc/statements.properties</literal>
                        under
                        your own KEY and use the
                        <literal>-mode KEY</literal>
                        when you start the Esper event server.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Establish a performance baseline in simulation mode (without clients). Use the
                        <literal>-rate 1x5000</literal>
                        option
                        to simulate one client (one thread) sending 5000 evt/s. You can ramp up both the number of client simulated
                        thread and their emission rate to maximize CPU
                        utilization.
                        The right number should mimic the client emission rate you will use in the client/server benchmark
                        and should thus be
                        consistent with what your client machine and network will be able to send.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Do performance runs with client/server mode. Start the server without the
                        <literal>-rate NxM</literal>
                        option.
                        Start the server with
                        <literal>-help</literal>
                        to display the possible options (listen port, statistics, fan out options etc).
                        On the remote machine, start one or more client. Use
                        <literal>-help</literal>
                        to display the possible options (remote port, host,
                        emission rate). The client will output the actual number of event it is sending to the server.
                        If the server gets overloaded (or if you turned on
                        <literal>-queue</literal>
                        options on the server) the client will likely
                        not be able to reach its target rate.
                    </para>
                </listitem>
            </orderedlist>
        </sect2>

        <sect2 id="how-we-kit" revision="1">
            <title>How we use the performance kit</title>

            <para>
                We use the performance kit to track performance progress across Esper versions, as well as to implement
                optimizations. You can track our work on the Wiki at http://docs.codehaus.org/display/ESPER/Home
            </para>

        </sect2>
    </sect1>
</chapter>
